'use babel';
import GutterResizeHandle from './GutterResizeHandle';
import { Emitter } from 'atom';
import ReactDOM from 'preact-compat';
import React from 'preact-compat';
import Item from '../components/GutterItem';
class GutterItem {
    constructor(data) {
        this.data = data;
        this.itemElement = document.createElement('div');
        this.itemElement.className = 'layer-gutter-item';
        this.itemElement.style['width'] = '100%';
        this.contentElement = document.createElement('div');
        this.itemElement.appendChild(this.contentElement);
        const resizeHandle = new GutterResizeHandle();
        this.resizeEmitter = resizeHandle.emitter;
        this.itemElement.appendChild(resizeHandle.element());
        this.emitter = new Emitter();
        this.boundMouseEnterListener = this.mouseEnterListener.bind(this);
        this.boundMouseLeaveListener = this.mouseLeaveListener.bind(this);
        this.itemElement.addEventListener('mouseenter', this.boundMouseEnterListener);
    }
    setIndicator(value) {
        this.inidcatorColor = value;
    }
    mouseEnterListener(event) {
        this.emitter.emit('mouseEnter', event);
        this.itemElement.addEventListener('mouseleave', this.boundMouseLeaveListener);
    }
    mouseLeaveListener(event) {
        this.emitter.emit('mouseLeave', event);
        this.itemElement.removeEventListener('mouseleave', this.boundMouseLeaveListener);
    }
    element() {
        const item = React.createElement(Item, {
            commit: this.data.commit,
            firstCommitDate: this.data.firstCommitDate,
            commitDay: this.data.commitDay,
            emitter: this.emitter,
            inidcatorColor: this.inidcatorColor,
        });
        ReactDOM.render(item, this.contentElement);
        return this.itemElement;
    }
}
export default GutterItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3V0dGVySXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9pbnRlcmZhY2UvR3V0dGVySXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7QUFFWixPQUFPLGtCQUFrQixNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxRQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQztBQUVsQyxPQUFPLElBQUksTUFBTSwwQkFBMEIsQ0FBQztBQUU1QztJQVVFLFlBQVksSUFBSTtRQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQztRQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLENBQUM7UUFFekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVsRCxNQUFNLFlBQVksR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQUs7UUFDdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVNLGtCQUFrQixDQUFDLEtBQWlCO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRU0sa0JBQWtCLENBQUMsS0FBaUI7UUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUU7WUFDckMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUN4QixlQUFlLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO1lBQzFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFDOUIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQUM7UUFDSCxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztDQUNGO0FBRUQsZUFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuaW1wb3J0IEd1dHRlclJlc2l6ZUhhbmRsZSBmcm9tICcuL0d1dHRlclJlc2l6ZUhhbmRsZSc7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnYXRvbSc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncHJlYWN0LWNvbXBhdCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncHJlYWN0LWNvbXBhdCc7XG5cbmltcG9ydCBJdGVtIGZyb20gJy4uL2NvbXBvbmVudHMvR3V0dGVySXRlbSc7XG5cbmNsYXNzIEd1dHRlckl0ZW0ge1xuICBpdGVtRWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XG4gIGNvbnRlbnRFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcbiAgcmVzaXplRW1pdHRlcjogRW1pdHRlcjtcbiAgZW1pdHRlcjogRW1pdHRlcjtcbiAgYm91bmRNb3VzZUVudGVyTGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI7XG4gIGJvdW5kTW91c2VMZWF2ZUxpc3RlbmVyOiBFdmVudExpc3RlbmVyO1xuICBkYXRhOiBhbnk7XG4gIGluaWRjYXRvckNvbG9yOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5pdGVtRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuaXRlbUVsZW1lbnQuY2xhc3NOYW1lID0gJ2xheWVyLWd1dHRlci1pdGVtJztcbiAgICB0aGlzLml0ZW1FbGVtZW50LnN0eWxlWyd3aWR0aCddID0gJzEwMCUnO1xuXG4gICAgdGhpcy5jb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuaXRlbUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxlbWVudCk7XG5cbiAgICBjb25zdCByZXNpemVIYW5kbGUgPSBuZXcgR3V0dGVyUmVzaXplSGFuZGxlKCk7XG4gICAgdGhpcy5yZXNpemVFbWl0dGVyID0gcmVzaXplSGFuZGxlLmVtaXR0ZXI7XG4gICAgdGhpcy5pdGVtRWxlbWVudC5hcHBlbmRDaGlsZChyZXNpemVIYW5kbGUuZWxlbWVudCgpKTtcblxuICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XG4gICAgdGhpcy5ib3VuZE1vdXNlRW50ZXJMaXN0ZW5lciA9IHRoaXMubW91c2VFbnRlckxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5ib3VuZE1vdXNlTGVhdmVMaXN0ZW5lciA9IHRoaXMubW91c2VMZWF2ZUxpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pdGVtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5ib3VuZE1vdXNlRW50ZXJMaXN0ZW5lcik7XG4gIH1cblxuICBwdWJsaWMgc2V0SW5kaWNhdG9yKHZhbHVlKSB7XG4gICAgdGhpcy5pbmlkY2F0b3JDb2xvciA9IHZhbHVlO1xuICB9XG5cbiAgcHVibGljIG1vdXNlRW50ZXJMaXN0ZW5lcihldmVudDogTW91c2VFdmVudCkge1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdtb3VzZUVudGVyJywgZXZlbnQpO1xuICAgIHRoaXMuaXRlbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuYm91bmRNb3VzZUxlYXZlTGlzdGVuZXIpO1xuICB9XG5cbiAgcHVibGljIG1vdXNlTGVhdmVMaXN0ZW5lcihldmVudDogTW91c2VFdmVudCkge1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdtb3VzZUxlYXZlJywgZXZlbnQpO1xuICAgIHRoaXMuaXRlbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuYm91bmRNb3VzZUxlYXZlTGlzdGVuZXIpO1xuICB9XG5cbiAgcHVibGljIGVsZW1lbnQoKSB7XG4gICAgY29uc3QgaXRlbSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSXRlbSwge1xuICAgICAgY29tbWl0OiB0aGlzLmRhdGEuY29tbWl0LFxuICAgICAgZmlyc3RDb21taXREYXRlOiB0aGlzLmRhdGEuZmlyc3RDb21taXREYXRlLFxuICAgICAgY29tbWl0RGF5OiB0aGlzLmRhdGEuY29tbWl0RGF5LFxuICAgICAgZW1pdHRlcjogdGhpcy5lbWl0dGVyLFxuICAgICAgaW5pZGNhdG9yQ29sb3I6IHRoaXMuaW5pZGNhdG9yQ29sb3IsXG4gICAgfSk7XG4gICAgUmVhY3RET00ucmVuZGVyKGl0ZW0sIHRoaXMuY29udGVudEVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzLml0ZW1FbGVtZW50O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEd1dHRlckl0ZW07XG4iXX0=
// Place your key bindings in this file to override the defaults
// prettier-ignore
[

    // TODO this messes up back slashes in insert mode and terminal. Make it not
    // break that.
    // { "key": "\\ f", "command": "workbench.action.toggleSidebarVisibility" },
    // { "key": "\\ f", "command": "workbench.action.toggleSidebarVisibility" },
    { "key": "cmd+s", "command": "workbench.action.files.saveWithoutFormatting" },

    // make cmd+c send ctrl+c in terminal
    { "key": "cmd+c", "command": "workbench.action.terminal.sendSequence", "args": { "text": "\u0003" }, "when": "terminalFocus" },

    // copy text in terminal with shift+cmd+c
    { "key": "shift+cmd+c", "command": "workbench.action.terminal.copySelection", "when": "terminalFocus && terminalTextSelected" },

    // Switch terminals
    { "key": "shift+ctrl+j", "command": "workbench.action.terminal.focusNext", "when": "terminalFocus" },
    { "key": "shift+cmd+j", "command": "workbench.action.terminal.focusNext", "when": "terminalFocus" },
    { "key": "shift+ctrl+k", "command": "workbench.action.terminal.focusPrevious", "when": "terminalFocus" },
    { "key": "shift+cmd+k", "command": "workbench.action.terminal.focusPrevious", "when": "terminalFocus" },

    // press modifier+enter to explore definition under cursor
    { "key": "cmd+enter", "command": "editor.action.revealDefinition", "when": "editorTextFocus && !isInEmbeddedEditor" },
    { "key": "ctrl+enter", "command": "editor.action.revealDefinition", "when": "editorTextFocus && !isInEmbeddedEditor" },
    { "key": "shift+cmd+enter", "command": "editor.action.goToReferences", "when": "editorTextFocus && !isInEmbeddedEditor" },
    { "key": "shift+ctrl+enter", "command": "editor.action.goToReferences", "when": "editorTextFocus && !isInEmbeddedEditor" },
    { "key": "shift+enter", "command": "editor.action.showHover", "when": "editorTextFocus && !isInEmbeddedEditor" },

    // Restore ctrl+p opening the file fuzzy finder popup as usual in Windows/Linux.
    { "key": "ctrl+p", "command": "workbench.action.quickOpen" },

    // Move tabs
    { "key": "ctrl+shift+h", "command": "workbench.action.moveEditorLeftInGroup" },
    { "key": "cmd+shift+h", "command": "workbench.action.moveEditorLeftInGroup" },
    { "key": "ctrl+shift+l", "command": "workbench.action.moveEditorRightInGroup" },
    { "key": "cmd+shift+l", "command": "workbench.action.moveEditorRightInGroup" },

    // "Vim" plugin bindings 
    // alias all cmd+* shortcuts to ctrl+* in vim. Then ctrl+* combos are handled in vim settings
    // {
        { "key": "cmd+a", "command": "extension.vim_ctrl+a", "when": "editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl" },
        { "key": "cmd+b", "command": "extension.vim_ctrl+b", "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'" },
        { "key": "cmd+c", "command": "extension.vim_ctrl+c", "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl" },
        { "key": "cmd+d", "command": "extension.vim_ctrl+d", "when": "editorTextFocus && vim.active && !inDebugRepl" },
        { "key": "cmd+e", "command": "extension.vim_ctrl+e", "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl" },
        { "key": "cmd+f", "command": "extension.vim_ctrl+f", "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'" },
        { "key": "cmd+g", "command": "extension.vim_ctrl+g", "when": "editorTextFocus && vim.active && vim.use<C-g> && !inDebugRepl" },
        { "key": "cmd+h", "command": "extension.vim_ctrl+h", "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl" },
        { "key": "cmd+i", "command": "extension.vim_ctrl+i", "when": "editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl" },
        { "key": "cmd+j", "command": "extension.vim_ctrl+j", "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl" },
        { "key": "ctrl+j", "command": "extension.vim_ctrl+j", "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl" },
        { "key": "cmd+k", "command": "extension.vim_ctrl+k", "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl" },
        { "key": "ctrl+k", "command": "extension.vim_ctrl+k", "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl" },
        { "key": "cmd+l", "command": "extension.vim_navigateCtrlL", "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl" },
        { "key": "cmd+n", "command": "extension.vim_ctrl+n", "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl" },
        { "key": "cmd+o", "command": "extension.vim_ctrl+o", "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl" },
        { "key": "cmd+p", "command": "extension.vim_ctrl+p", "when": "suggestWidgetVisible && vim.active && vim.use<C-p>" },
        { "key": "cmd+q", "command": "extension.vim_winCtrlQ", "when": "editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl" },
        { "key": "cmd+r", "command": "extension.vim_ctrl+r", "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl" },
        { "key": "cmd+t", "command": "extension.vim_ctrl+t", "when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl" },
        { "key": "cmd+u", "command": "extension.vim_ctrl+u", "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl" },
        { "key": "cmd+v", "command": "extension.vim_ctrl+v", "when": "editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl" },
        { "key": "cmd+w", "command": "extension.vim_ctrl+w", "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl" },
        { "key": "cmd+x", "command": "extension.vim_ctrl+x", "when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl" },
        { "key": "cmd+y", "command": "extension.vim_ctrl+y", "when": "editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl" },
        { "key": "cmd+[", "command": "extension.vim_ctrl+[", "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl" },
        { "key": "cmd+]", "command": "extension.vim_ctrl+]", "when": "editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl" },
        { "key": "cmd+shift+2", "command": "extension.vim_ctrl+shift+2", "when": "editorTextFocus && vim.active && vim.use<C-shift+2>" },
        { "key": "cmd+pagedown", "command": "extension.vim_ctrl+pagedown", "when": "editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl" },
        { "key": "cmd+pageup", "command": "extension.vim_ctrl+pageup", "when": "editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl" },
    // }

    // "Neo Vim" plugin bindings
    // See https://github.com/asvetliakov/vscode-neovim/issues/463
    // {
        // { "key": "alt+a", "command": "vscode-neovim.send", "args": "<a-a>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+b", "command": "vscode-neovim.send", "args": "<a-b>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+c", "command": "vscode-neovim.send", "args": "<a-c>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+d", "command": "vscode-neovim.send", "args": "<a-d>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+e", "command": "vscode-neovim.send", "args": "<a-e>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+f", "command": "vscode-neovim.send", "args": "<a-f>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+g", "command": "vscode-neovim.send", "args": "<a-g>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+h", "command": "vscode-neovim.send", "args": "<a-h>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+i", "command": "vscode-neovim.send", "args": "<a-i>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+j", "command": "vscode-neovim.send", "args": "<a-j>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+k", "command": "vscode-neovim.send", "args": "<a-k>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+l", "command": "vscode-neovim.send", "args": "<a-l>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+m", "command": "vscode-neovim.send", "args": "<a-m>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+n", "command": "vscode-neovim.send", "args": "<a-n>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+o", "command": "vscode-neovim.send", "args": "<a-o>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+p", "command": "vscode-neovim.send", "args": "<a-p>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+q", "command": "vscode-neovim.send", "args": "<a-q>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+r", "command": "vscode-neovim.send", "args": "<a-r>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+s", "command": "vscode-neovim.send", "args": "<a-s>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+t", "command": "vscode-neovim.send", "args": "<a-t>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+u", "command": "vscode-neovim.send", "args": "<a-u>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+v", "command": "vscode-neovim.send", "args": "<a-v>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+w", "command": "vscode-neovim.send", "args": "<a-w>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+x", "command": "vscode-neovim.send", "args": "<a-x>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+y", "command": "vscode-neovim.send", "args": "<a-y>", "when": "editorTextFocus && neovim.init" },
        // { "key": "alt+z", "command": "vscode-neovim.send", "args": "<a-z>", "when": "editorTextFocus && neovim.init" },

        // // Remove some built-in bindings that get in the way (Neo Vim extension can override them otherwise). {
        //     { "key": "ctrl+j", "command": "-editor.action.joinLines" },
        //     { "key": "ctrl+j", "command": "-workbench.action.togglePanel" },
        //     { "key": "ctrl+b", "command": "-workbench.action.showAllEditors" },
        //     // { "key": "ctrl+c", "command": "-editor.action.clipboardCopyAction" },
        // // }

        // // Make ctrl+c also send <c-c> to neovim in normal mode so that hlsearch toggling works. {
        //     // First modify Neo Vim's escape behavior to work only when not in normal mode, so everything works as expected.
        //     { "key": "ctrl+c", "command": "vscode-neovim.escape", "when": "editorTextFocus && neovim.init && neovim.mode != normal" },
        //     // Then, only send <c-c> in normal mode so that our <c-c> in vimrc works.
        //     { "key": "ctrl+c", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.init && neovim.mode == normal", "args": "<c-c>" },
        // // }
    // }
    
    // ctrl+left/right for tab switching like I have in Neovim (when not in a Neo Vim tab). {
    { "key": "cmd+h", "command": "workbench.action.previousEditor" },
    { "key": "ctrl+h", "command": "workbench.action.previousEditor" },
    { "key": "cmd+l", "command": "workbench.action.nextEditor" },
    { "key": "ctrl+l", "command": "workbench.action.nextEditor" },

    // Make ctrl+t open a new tab, like we also have in neovim.
    // The VS Code warning says no args are provided, but it appears to work.
    { "key": "ctrl+t", "command": "workbench.action.files.newUntitledFile" },

    // Vim-like bindings for file explorer {
    // TODO: For more ideas, see https://github.com/asvetliakov/vscode-neovim/issues/457
    { "key": "cmd+d", "command": "list.focusPageDown", "when": "listFocus && !inputFocus" },
    { "key": "ctrl+d", "command": "list.focusPageDown", "when": "listFocus && !inputFocus" },
    { "key": "cmd+u", "command": "list.focusPageUp", "when": "listFocus && !inputFocus" },
    { "key": "ctrl+u", "command": "list.focusPageUp", "when": "listFocus && !inputFocus" },
    // }
]

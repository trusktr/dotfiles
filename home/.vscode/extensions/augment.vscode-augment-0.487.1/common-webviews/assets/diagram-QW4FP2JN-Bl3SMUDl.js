import{p as B}from"./chunk-TMUBEWPD-CeNbOmcG.js";import{D as F,s as P,g as S,q as W,r as z,b as T,c as D,_ as n,l as x,E as $,F as v,x as A,I as E,k as R}from"./AugmentMessage-B1RETs6x.js";import{p as Y}from"./gitGraph-YCYPL57B-Bqc4prk4.js";import"./SpinnerAugment-BJAAUt-n.js";import"./CalloutAugment-Bc8HnLJ3.js";import"./TextTooltipAugment-DGOJQXY9.js";import"./BaseButton-7bccWxEO.js";import"./IconButtonAugment-CqdkuyT6.js";import"./Content-BldOFwN2.js";import"./globals-D0QH3NT1.js";import"./arrow-up-right-from-square-CdEOBPRR.js";import"./types-xGAhb6Qr.js";import"./chat-types-D7sox8tw.js";import"./file-paths-BcSg4gks.js";import"./folder-BB1rR2Vr.js";import"./github-DDehkTJf.js";import"./folder-opened-BWTQdsic.js";import"./check-DWGOhZOn.js";import"./types-DDm27S8B.js";import"./index-Bb_d2FL8.js";import"./utils-BW_yYq2f.js";import"./ra-diff-ops-model-CtxygvlM.js";import"./types-CGlLNakm.js";import"./index-BAb5fkIe.js";import"./CardAugment-qFWs8J9b.js";import"./isObjectLike-B3cfrJ3d.js";import"./TextAreaAugment-CfENnz8O.js";import"./diff-utils-RpWUB_Gw.js";import"./toggleHighContrast-CwIv4U26.js";import"./preload-helper-Dv6uf1Os.js";import"./index-C9A1ZQNk.js";import"./keypress-DD1aQVr0.js";import"./await_block-CklR1HoG.js";import"./CollapseButtonAugment-BPhovcAJ.js";import"./ButtonAugment-CLDnX_Hg.js";import"./MaterialIcon-DkFwt_X2.js";import"./CopyButton-OCXKxiUh.js";import"./magnifying-glass-4Ft8m82l.js";import"./ellipsis-DJS5pN6w.js";import"./IconFilePath-BhE4l2UK.js";import"./LanguageIcon-CARIV-0P.js";import"./next-edit-types-904A5ehg.js";import"./Filespan-D19TbAnP.js";import"./chevron-down-CxktpQeS.js";import"./mcp-logo-CMUqUebQ.js";import"./terminal-CUUE2e2M.js";import"./pen-to-square-SVW9AP0k.js";import"./augment-logo-f4Y8aL0S.js";import"./_baseUniq-D_Z4SEi2.js";import"./_basePickBy-OQ9hpBSi.js";import"./clone-B9ySJnFq.js";var w={packet:[]},u=structuredClone(w),j=F.packet,H=n(()=>{const t=$({...j,...v().packet});return t.showBits&&(t.paddingY+=10),t},"getConfig"),I=n(()=>u.packet,"getPacket"),f={pushWord:n(t=>{t.length>0&&u.packet.push(t)},"pushWord"),getPacket:I,getConfig:H,clear:n(()=>{A(),u=structuredClone(w)},"clear"),setAccTitle:P,getAccTitle:S,setDiagramTitle:W,getDiagramTitle:z,getAccDescription:T,setAccDescription:D},L=n(t=>{B(t,f);let e=-1,a=[],l=1;const{bitsPerRow:s}=f.getConfig();for(let{start:r,end:o,label:d}of t.blocks){if(o&&o<r)throw new Error(`Packet block ${r} - ${o} is invalid. End must be greater than start.`);if(r!==e+1)throw new Error(`Packet block ${r} - ${o??r} is not contiguous. It should start from ${e+1}.`);for(e=o??r,x.debug(`Packet block ${r} - ${e} with label ${d}`);a.length<=s+1&&f.getPacket().length<1e4;){const[g,p]=q({start:r,end:o,label:d},l,s);if(a.push(g),g.end+1===l*s&&(f.pushWord(a),a=[],l++),!p)break;({start:r,end:o,label:d}=p)}}f.pushWord(a)},"populate"),q=n((t,e,a)=>{if(t.end===void 0&&(t.end=t.start),t.start>t.end)throw new Error(`Block start ${t.start} is greater than block end ${t.end}.`);return t.end+1<=e*a?[t,void 0]:[{start:t.start,end:e*a-1,label:t.label},{start:e*a,end:t.end,label:t.label}]},"getNextFittingBlock"),M={parse:n(async t=>{const e=await Y("packet",t);x.debug(e),L(e)},"parse")},N=n((t,e,a,l)=>{const s=l.db,r=s.getConfig(),{rowHeight:o,paddingY:d,bitWidth:g,bitsPerRow:p}=r,h=s.getPacket(),i=s.getDiagramTitle(),m=o+d,c=m*(h.length+1)-(i?0:o),k=g*p+2,b=E(e);b.attr("viewbox",`0 0 ${k} ${c}`),R(b,c,k,r.useMaxWidth);for(const[y,C]of h.entries())X(b,C,y,r);b.append("text").text(i).attr("x",k/2).attr("y",c-m/2).attr("dominant-baseline","middle").attr("text-anchor","middle").attr("class","packetTitle")},"draw"),X=n((t,e,a,{rowHeight:l,paddingX:s,paddingY:r,bitWidth:o,bitsPerRow:d,showBits:g})=>{const p=t.append("g"),h=a*(l+r)+r;for(const i of e){const m=i.start%d*o+1,c=(i.end-i.start+1)*o-s;if(p.append("rect").attr("x",m).attr("y",h).attr("width",c).attr("height",l).attr("class","packetBlock"),p.append("text").attr("x",m+c/2).attr("y",h+l/2).attr("class","packetLabel").attr("dominant-baseline","middle").attr("text-anchor","middle").text(i.label),!g)continue;const k=i.end===i.start,b=h-2;p.append("text").attr("x",m+(k?c/2:0)).attr("y",b).attr("class","packetByte start").attr("dominant-baseline","auto").attr("text-anchor",k?"middle":"start").text(i.start),k||p.append("text").attr("x",m+c).attr("y",b).attr("class","packetByte end").attr("dominant-baseline","auto").attr("text-anchor","end").text(i.end)}},"drawWord"),_={byteFontSize:"10px",startByteColor:"black",endByteColor:"black",labelColor:"black",labelFontSize:"12px",titleColor:"black",titleFontSize:"14px",blockStrokeColor:"black",blockStrokeWidth:"1",blockFillColor:"#efefef"},Nt={parser:M,db:f,renderer:{draw:N},styles:n(({packet:t}={})=>{const e=$(_,t);return`
	.packetByte {
		font-size: ${e.byteFontSize};
	}
	.packetByte.start {
		fill: ${e.startByteColor};
	}
	.packetByte.end {
		fill: ${e.endByteColor};
	}
	.packetLabel {
		fill: ${e.labelColor};
		font-size: ${e.labelFontSize};
	}
	.packetTitle {
		fill: ${e.titleColor};
		font-size: ${e.titleFontSize};
	}
	.packetBlock {
		stroke: ${e.blockStrokeColor};
		stroke-width: ${e.blockStrokeWidth};
		fill: ${e.blockFillColor};
	}
	`},"styles")};export{Nt as diagram};

exports.id=696,exports.ids=[696],exports.modules={2234:(t,e,i)=>{i.d(e,{TimelineWebviewProvider:()=>TimelineWebviewProvider});var s=i(1398),o=i(1518),r=i(3088),a=i(1403),n=i(5662),h=i(4301),l=i(1078),d=i(377),c=i(6612),u=i(4941),p=i(4342),g=i(6851),m=i(7747),b=i(3958),v=i(5576),y=i(998),f=i(6430),S=i(5510);let w="timeline",T=new S.Q2(w,"point/open"),x=new S.Q2(w,"period/update"),C=new S.C1(w,"didChange");var D=Object.defineProperty,_=Object.getOwnPropertyDescriptor,R=(t,e,i,s)=>{for(var o,r=s>1?void 0:s?_(e,i):e,a=t.length-1;a>=0;a--)(o=t[a])&&(r=(s?o(e,i,r):o(r))||r);return s&&r&&D(e,i,r),r};let TimelineWebviewProvider=class TimelineWebviewProvider{constructor(t,e){this.container=t,this.host=e,this._context={uri:void 0,period:"3|M",etagRepositories:this.container.git.etag,etagRepository:0,etagSubscription:this.container.subscription.etag},this.host.isHost("editor")?this._disposable=s.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)):(this.host.description=o.lD,this._disposable=s.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),s.window.tabGroups.onDidChangeTabGroups(this.onTabsChanged,this),s.window.tabGroups.onDidChangeTabs(this.onTabsChanged,this),this.container.events.on("file:selected",(0,g.s)(this.onFileSelected,250),this)))}_context;_disposable;get activeTabUri(){return(0,c.ek)(s.window.tabGroups.activeTabGroup.activeTab)}dispose(){this._disposable.dispose()}onReloaded(){this.updateState(!0)}canReuseInstance(...t){let e,[i]=t;return null!=i?i instanceof s.Uri?e=i:(0,y.JB)(i)?e=i.uri:(0,f.c)(i)&&null!=i.state.uri&&(e=s.Uri.parse(i.state.uri)):e=this.activeTabUri,e?.toString()===this._context.uri?.toString()||void 0}getSplitArgs(){return null!=this._context.uri?[this._context.uri]:[]}getTelemetryContext(){return{...this.host.getTelemetryContext(),"context.period":this._context.period}}onShowing(t,e,...i){let o,[r]=i;null!=r&&(r instanceof s.Uri?o=r:(0,y.JB)(r)?o=r.uri:(0,f.c)(r)&&(this._context.period=r.state.period,this.host.isHost("editor")&&(o=null!=r.state.uri?s.Uri.parse(r.state.uri):void 0))),this.updateUri(o??this.activeTabUri,!0),t||this.updateState();let a=(0,b.Bq)(l.H.get("visualHistory"),"context.config",{joinArrays:!0});return[!0,{...this.getTelemetryContext(),...a,"context.period":this._context.period}]}includeBootstrap(){return this.getState(this._context)}registerCommands(){let t=[];return this.host.isHost("view")&&t.push((0,h.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0),this),(0,h.Lb)(`${this.host.id}.openInTab`,()=>{null!=this._context.uri&&((0,h.RS)("gitlens.showFileInTimeline",this._context.uri),this.container.telemetry.sendEvent("timeline/action/openInEditor",this.getTelemetryContext()))},this)),t}onVisibilityChanged(t){t&&this.host.isHost("view")&&this.updateUri(this.activeTabUri)}async onMessageReceived(t){switch(!0){case T.is(t):{if(null==t.params.data||!t.params.data.selected||null==this._context.uri)return;let e=this.container.git.getRepository(this._context.uri);if(null==e)return;let i=await e.git.commits().getCommit(t.params.data.id);if(null==i)return;this.container.events.fire("commit:selected",{commit:i,interaction:"active",preserveFocus:!0,preserveVisibility:!1},{source:this.host.id}),this.container.telemetry.sendEvent("timeline/commit/selected",this.getTelemetryContext()),this.container.views.commitDetails.ready||this.container.views.commitDetails.show({preserveFocus:!0},{commit:i,interaction:"active",preserveVisibility:!1});break}case x.is(t):if(this._context.period===t.params.period)return;this.container.telemetry.sendEvent("timeline/period/changed",{...this.getTelemetryContext(),"period.old":this._context.period,"period.new":t.params.period}),this._context.period=t.params.period,this.updateState(!0)}}onTabsChanged(){this.updateUri(this.activeTabUri)}onFileSelected(t){if(null==t.data)return;let e=t.data.uri;null==e||this.container.git.isTrackable(e)||(e=void 0),this.updateUri(this.activeTabUri)}onRepositoriesChanged(t){this._context.etagRepositories!==t.etag&&(this._context.etagRepositories=t.etag,this.updateState())}onRepositoryChanged(t){t.changed(a.Z_.Heads,a.Z_.Index,a.Ti.Any)&&this._context.etagRepository!==t.repository.etag&&(this._context.etagRepository=t.repository.etag,this.updateState())}onSubscriptionChanged(t){this._context.etagSubscription!==t.etag&&(this._context.etagSubscription=t.etag,this.updateState())}async getState(t){let e=l.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",i=l.H.get("defaultDateShortFormat")??"short",s=t.period??"3|M",a=null!=t.uri?await r.nk.fromUri(t.uri):void 0,n=a?.repoPath,h=null!=t.uri&&await (0,d.ZA)(t.uri);if(this.host.isHost("editor")){let t=h?"Visual Folder History":"Visual File History";this.host.title=null==a?t:`${t}: ${a.fileName}`}else this.host.description=a?.fileName??o.lD;let c=await this.container.git.access("timeline",n);return!1===c.allowed?{...this.host.baseWebviewState,dataset:Promise.resolve(function(){let t=[],e=["Eric Amodio","Justin Roberts","Keith Daulton","Ramin Tadayon","Ada Lovelace","Grace Hopper"];for(let i=0;i<10;i++){let s=new Date(new Date().getTime()-Math.floor(7776e6*Math.random()));t.push({commit:String(i),author:e[Math.floor(Math.random()*e.length)],date:s.toISOString(),message:"",additions:0===i?2:9===i?50:Math.floor(20*Math.random())+1,deletions:0===i?1:9===i?25:Math.floor(20*Math.random())+1,sort:s.getTime()})}return t.sort((t,e)=>e.sort-t.sort)}()),period:s,title:"src/app/index.ts",sha:void 0,uri:t.uri?.toString(),uriType:h?"folder":"file",dateFormat:e,shortDateFormat:i,access:c}:null==t.uri||null==a||null==n?{...this.host.baseWebviewState,period:s,title:a?.relativePath,sha:a?.shortSha,uri:t.uri?.toString(),uriType:h?"folder":"file",dateFormat:e,shortDateFormat:i,access:c}:{...this.host.baseWebviewState,dataset:this.getDataset(a,s),period:s,title:a.relativePath,sha:a.shortSha,uri:t.uri.toString(),uriType:h?"folder":"file",dateFormat:e,shortDateFormat:i,access:c}}async getDataset(t,e){let i=t.repoPath,[o,r]=await Promise.allSettled([this.container.git.config(i).getCurrentUser(),this.container.git.commits(i).getLogForPath(t.fsPath,t.sha,{limit:0,since:(function(t){let e;if("all"===t)return;let[i,s]=t.split("|");switch(s){case"D":e=(0,u.Tl)(new Date,{days:-parseInt(i,10)});break;case"M":e=(0,u.Tl)(new Date,{months:-parseInt(i,10)});break;case"Y":e=(0,u.Tl)(new Date,{years:-parseInt(i,10)});break;default:e=(0,u.Tl)(new Date,{months:-3})}return e.getHours()>=12&&e.setDate(e.getDate()+1),e.setHours(0,0,0,0),e})(e)?.toISOString()})]),a=(0,v.Ro)(r);if(null==a)return[];let h=(0,v.Ro)(o),d=[...(0,m.pb)(a.commits.values(),t=>t.file?.stats==null&&1!==(0,n.Zx)(t.stats?.files))];if(0!==d.length){let e=l.H.get("visualHistory.queryLimit")??20,i=this.container.git.getRepository(t),o=i?.provider.name;d.length>e&&(s.window.showWarningMessage(`Unable able to show more than the first ${e} commits for the specified time period because of ${o?`${o} `:""}rate limits.`),d=d.slice(0,20)),await Promise.allSettled(d.map(t=>t.ensureFullDetails()))}let c=h?.name?`${h.name} (you)`:"You",p=[];for(let t of a.commits.values()){let e=t.file?.stats??(1===(0,n.Zx)(t.stats?.files)?t.stats:void 0);p.push({author:"You"===t.author.name?c:t.author.name,additions:e?.additions,deletions:e?.deletions,commit:t.sha,date:t.date.toISOString(),message:t.message??t.summary,sort:t.date.getTime()})}return p.sort((t,e)=>e.sort-t.sort),p}updateUri(t,e){let i;if(null!=t){let e=this.container.git.getRepository(t);i=e?.etag??0}else i=0;if(this._context.etagRepository!==i||this._context.uri?.toString()!==t?.toString()){if(this._context.etagRepository=i,this._context.uri=t,e)return;this.container.telemetry.sendEvent("timeline/editor/changed",this.getTelemetryContext()),this.updateState()}}_notifyDidChangeStateDebounced=void 0;updateState(t=!1){if(t){this.notifyDidChangeState();return}this._notifyDidChangeStateDebounced??=(0,g.s)(this.notifyDidChangeState.bind(this),500),this._notifyDidChangeStateDebounced()}async notifyDidChangeState(){return this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(C,{state:await this.getState(this._context)})}};R([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onTabsChanged",1),R([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onFileSelected",1),R([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onRepositoriesChanged",1),R([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onRepositoryChanged",1),R([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onSubscriptionChanged",1),R([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"getState",1),R([(0,p.Yz)()],TimelineWebviewProvider.prototype,"updateState",1),R([(0,p.Yz)()],TimelineWebviewProvider.prototype,"notifyDidChangeState",1)}};
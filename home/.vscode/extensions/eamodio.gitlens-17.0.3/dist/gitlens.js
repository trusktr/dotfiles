(()=>{var e,t,i,r,s={97:(e,t,i)=>{i.d(t,{k:()=>r.hrtime});var r=i(932)},102:(e,t,i)=>{i.d(t,{oN:()=>CopyRemoteResourceCommandQuickPickItem,zB:()=>OpenRemoteResourceCommandQuickPickItem,ZM:()=>y});var r=i(1398),s=i(9487),o=i(1518),n=i(9703),a=i(8336),l=i(3949),c=i(778),u=i(3711),h=i(8557);function d(e){switch(e.type){case l.J.Branch:return"Branch";case l.J.Branches:return"Branches";case l.J.Commit:return"Commit";case l.J.Comparison:return"Comparison";case l.J.CreatePullRequest:return"Create Pull Request";case l.J.File:return"File";case l.J.Repo:return"Repository";case l.J.Revision:return"File";default:return""}}var p=i(3915),g=i(6461),m=i(6612),f=i(5576),w=i(7079),v=i(6613);let ConfigureCustomRemoteProviderCommandQuickPickItem=class ConfigureCustomRemoteProviderCommandQuickPickItem extends w.Fj{constructor(){super({label:"See how to configure a custom remote provider..."})}async execute(){await r.env.openExternal(r.Uri.parse("https://help.gitkraken.com/gitlens/gitlens-settings/#remote-provider-integration-settings"))}};let CopyOrOpenRemoteCommandQuickPickItem=class CopyOrOpenRemoteCommandQuickPickItem extends w.Fj{constructor(e,t,i,r){super({label:`$(repo) ${e.provider.path}`,description:e.name,buttons:r}),this.remote=e,this.resources=t,this.clipboard=i}async execute(){let e=(await Promise.allSettled(this.resources.map(async e=>{if(e.type===l.J.Comparison)(0,u.Zq)(e.base)===this.remote.name&&(e={...e,base:(0,u.km)(e.base)}),(0,u.Zq)(e.head)===this.remote.name&&(e={...e,head:(0,u.km)(e.head)});else if(e.type===l.J.CreatePullRequest){let t=e.base.branch;if(null==t&&(t=await (0,c.Z5)(n.m.instance,this.remote.repoPath,this.remote.name))&&(t=(0,u.km)(t)),(e={...e,base:{branch:t,remote:{path:this.remote.path,url:this.remote.url,name:this.remote.name}}}).base.remote.url!==e.head.remote.url&&!await this.remote.provider.isReadyForForCrossForkPullRequestUrls()){let e=(0,p.p)(this.remote.provider.id);if(!(e&&await this.showIntegrationConnectionPicker(e,"view")))return}}else if(e.type===l.J.File&&null!=e.branchOrTag&&("bitbucket"===this.remote.provider.id||"bitbucket-server"===this.remote.provider.id)){let{branchOrTag:t}=e,[i,r]=await Promise.allSettled([n.m.instance.git.branches(this.remote.repoPath).getBranches({filter:e=>e.name===t||e.getNameWithoutRemote()===t}),n.m.instance.git.tags(this.remote.repoPath).getTags({filter:e=>e.name===t})]),s=(0,f.Ro)(i)?.values[0]?.sha??(0,f.Ro)(r)?.values[0]?.sha;s&&(e={...e,type:l.J.Revision,sha:s})}return e}))).map(e=>{if("fulfilled"===e.status)return e.value;if(e.reason instanceof a.DD)throw e.reason}).filter(e=>void 0!==e);await (this.clipboard?this.remote.provider.copy(e):this.remote.provider.open(e))}async showIntegrationConnectionPicker(e,t){let i=[],s=r.window.createQuickPick();try{let r=g.Mt[e].name,o=(0,w.Xt)({label:`Connect to ${r}...`,detail:`Connect an integration with ${r} to create cross-repository pull requests`,picked:!0},!0),a=(0,v.Du)(v.WL.Cancel,!1,{label:"Cancel"}),l=new Promise(e=>{i.push(s.onDidHide(()=>e(void 0)),s.onDidAccept(()=>{0!==s.activeItems.length&&e(s.activeItems[0])}))});if(s.ignoreFocusOut=(0,m.dW)(),s.title=`Connect ${r} Integration`,s.placeholder=`Requires an integration with ${r} to create cross-repository pull requests`,s.matchOnDetail=!0,s.items=[o,a],s.show(),await l===o)return await n.m.instance.integrations.connectCloudIntegrations({integrationIds:[e]},{source:t})}finally{s.dispose(),i.forEach(e=>void e.dispose())}return!1}setAsDefault(){return this.remote.setAsDefault(!0)}};let CopyRemoteResourceCommandQuickPickItem=class CopyRemoteResourceCommandQuickPickItem extends w.Fj{constructor(e,t){let i=(0,h.zF)(e);super(`Copy Link to ${d(t)} for ${i?.length?i[0].name:"Remote"}${i?.length===1?"":o.EO.Ellipsis}`,new r.ThemeIcon("copy"),"gitlens.openOnRemote",[{resource:t,remotes:e,clipboard:!0}])}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("URL copied to the clipboard")}};let OpenRemoteResourceCommandQuickPickItem=class OpenRemoteResourceCommandQuickPickItem extends w.Fj{constructor(e,t){let i=(0,h.zF)(e);super(`Open ${d(t)} on ${i?.length===1?i[0].name:`${i?.length?i[0].name:"Remote"}${o.EO.Ellipsis}`}`,new r.ThemeIcon("link-external"),"gitlens.openOnRemote",[{resource:t,remotes:e,clipboard:!1}])}};async function y(e,t,i,o,n){let a,{autoPick:l,clipboard:c,setDefault:u}={autoPick:!1,clipboard:!1,setDefault:!0,...n};if(0===o.length)a=[new ConfigureCustomRemoteProviderCommandQuickPickItem],t="No auto-detected or configured remote providers found";else{if("default"===l&&o.length>1){let e=o.find(e=>e.default);null!=e&&(o=[e])}a=o.map(e=>new CopyOrOpenRemoteCommandQuickPickItem(e,i,c,u?[s.$o]:void 0))}if(l&&1===o.length)return a[0];let h=r.window.createQuickPick();h.ignoreFocusOut=(0,m.dW)();let d=[];try{let i=await new Promise(i=>{d.push(h.onDidHide(()=>i(void 0)),h.onDidAccept(()=>{0!==h.activeItems.length&&i(h.activeItems[0])}),h.onDidTriggerItemButton(async e=>{e.button===s.$o&&e.item instanceof CopyOrOpenRemoteCommandQuickPickItem&&(await e.item.setAsDefault(),i(e.item))})),h.title=e,h.placeholder=t,h.matchOnDetail=!0,h.items=a,h.show()});if(null==i)return;return i}finally{h.dispose(),d.forEach(e=>void e.dispose())}}},133:(e,t,i)=>{i.d(t,{s:()=>r,u:()=>s});let r=864e5;function s(e){let t=Date.now()-e;return t<r?(t<36e5?6e4:36e5)/2:0}},162:(e,t,i)=>{i.d(t,{Id:()=>R,Dv:()=>P,Do:()=>A,WJ:()=>I,ql:()=>D});var r=i(1398),s=i(2458),o=i(4301),n=i(655),a=i(9949),l=i(4342),c=i(7005),u=i(5419),h=i(5576),d=i(4162),p=i(5510),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),w=e=>{throw TypeError(e)},v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o},y=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&w("Object expected"),i&&(r=t[f("asyncDispose")]),void 0===r&&(r=t[f("dispose")],i&&(s=r)),"function"!=typeof r&&w("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},b=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let C=(0,a.N)(),k=new TextDecoder("utf8"),S=new TextEncoder,R=class{constructor(e,t,i,s,o,n){this.container=e,this._commandRegistrar=t,this.descriptor=i,this.instanceId=s,this.parent=o,this.id=i.id,this.webview=o.webview;let a="onDidChangeViewState"in o;this._isInEditor=a,this._originalTitle=i.title,o.title=i.title,this._initializing=n(e,this).then(e=>{if(this.provider=e,this._disposed){e.dispose();return}this.disposable=r.Disposable.from(this._onDidDispose,r.window.onDidChangeWindowState(this.onWindowStateChanged,this),o.webview.onDidReceiveMessage(this.onMessageReceivedCore,this),a?o.onDidChangeViewState(({webviewPanel:e})=>{let{visible:t,active:i,viewColumn:r}=e;this.onParentVisibilityChanged(t,i,null!=this.viewColumn&&this.viewColumn!==r),this._viewColumn=r}):o.onDidChangeVisibility(()=>this.onParentVisibilityChanged(this.visible,this.active)),o.onDidDispose(this.onParentDisposed,this),...this.provider.registerCommands?.()??[],this.provider)})}static async create(e,t,i,r,s,o){let n=new R(e,t,i,r,s,o);return await n.initialize(),n}_onDidDispose=new r.EventEmitter;get onDidDispose(){return this._onDidDispose.event}id;_ready=!1;get ready(){return this._ready}cancellation;disposable;_isInEditor;provider;webview;_viewColumn;get viewColumn(){return this._viewColumn}_disposed=!1;dispose(){this._disposed=!0,this.cancellation?.cancel(),this.cancellation?.dispose(),A(this.descriptor.contextKeyPrefix),this.provider?.onFocusChanged?.(!1),this.provider?.onVisibilityChanged?.(!1),this._ready=!1,this._onDidDispose.fire(),this.disposable?.dispose()}registerWebviewCommand(e,t){return this._commandRegistrar.registerCommand(this.provider,this.id,this.instanceId,e,t)}_initializing;async initialize(){null!=this._initializing&&(await this._initializing,this._initializing=void 0)}getTelemetryContext(){return{"context.webview.id":this.id,"context.webview.type":this.descriptor.type,"context.webview.instanceId":this.instanceId,"context.webview.host":this.isHost("editor")?"editor":"view"}}isHost(e){return"editor"===e?this._isInEditor:!this._isInEditor}get active(){return"active"in this.parent?!this._disposed&&this.parent.active:!this._disposed&&void 0}get badge(){return"badge"in this.parent?this.parent.badge:void 0}set badge(e){if("badge"in this.parent)this.parent.badge=e;else throw Error("The 'badge' property not supported on Webview parent")}_description;get description(){return"description"in this.parent?this.parent.description:this._description}set description(e){"description"in this.parent&&(this.parent.description=e),this._description=e}_originalTitle;get originalTitle(){return this._originalTitle}get title(){return this.parent.title??this._originalTitle}set title(e){this.parent.title=e}get visible(){return!this._disposed&&this.parent.visible}canReuseInstance(e,...t){if(this.isHost("editor"))return(e?.column==null||e.column===this.parent.viewColumn)&&this.provider.canReuseInstance?.(...t)}getSplitArgs(){return this.isHost("view")?[]:this.provider.getSplitArgs?.()??[]}async show(e,t,...i){var s=[];try{let n;null==t&&(t={});let a={...this.getTelemetryContext(),loading:e},l=y(s,new d.e(`WebviewController.show(${this.id})`)),c=await this.provider.onShowing?.(e,t,...i);if(null!=c){let e;if([e,n]=c,!1===e){this.container.telemetry.sendEvent(`${this.descriptor.type}/showAborted`,{...a,duration:l.elapsed()});return}}e&&(this.cancellation??=new r.CancellationTokenSource,this.webview.html=await this.getHtml(this.webview)),this.isHost("editor")?e||this.parent.reveal(t.column??this.parent.viewColumn??this.descriptor.column??r.ViewColumn.Beside,t.preserveFocus??!1):this.isHost("view")&&(await (0,o.S4)(`${this.id}.focus`,t),e&&this.provider.onVisibilityChanged?.(!0)),I(this.descriptor.contextKeyPrefix),this.container.telemetry.sendEvent(`${this.descriptor.type}/shown`,{...a,duration:l.elapsed(),...n})}catch(e){var n=e,a=!0}finally{b(s,n,a)}}get baseWebviewState(){return{webviewId:this.id,webviewInstanceId:this.instanceId,timestamp:Date.now()}}_cspNonce=(0,s.m9)();get cspNonce(){return this._cspNonce}asWebviewUri(e){return this.webview.asWebviewUri(e)}async refresh(e){this.cancellation?.cancel(),this.cancellation=new r.CancellationTokenSource,e&&this.clearPendingIpcNotifications(),this.provider.onRefresh?.(e);let t=this._ready;this._ready=!1;let i=await this.getHtml(this.webview);if(e&&(this.webview.html=""),this.webview.html===i){t&&(this._ready=!0);return}this.webview.html=i}onParentDisposed(){this.dispose()}async onMessageReceivedCore(e){if(null!=e)switch(!0){case p.Ge.is(e):this._ready=!0,this.sendPendingIpcNotifications(),this.provider.onReady?.();break;case p.pY.is(e):this.onViewFocusChanged(e.params);break;case p.Vw.is(e):null!=e.params.args?(0,o.RS)(e.params.command,...e.params.args):(0,o.RS)(e.params.command);break;case p.OG.is(e):{let t=await this.container.subscription.getSubscription(),i=await this.container.productConfig.getApplicablePromo(t.state,e.params.location);this.respond(p.OG,e,{promo:i});break}case p.j0.is(e):this.container.telemetry.sendEvent(e.params.name,{...e.params.data,...this.provider.getTelemetryContext?.()??this.getTelemetryContext()},e.params.source);break;default:this.provider.onMessageReceived?.(e)}}onViewFocusChanged(e){I(this.descriptor.contextKeyPrefix),this.handleFocusChanged(e.focused)}onParentVisibilityChanged(e,t,i){this.descriptor.webviewHostOptions?.retainContextWhenHidden!==!0?e?this._ready?this.sendPendingIpcNotifications():null!=this.provider.onReloaded?(this.clearPendingIpcNotifications(),this.provider.onReloaded()):this.refresh():this._ready=!1:i&&this.refresh(),e?(this.container.usage.track(`${this.descriptor.trackingFeature}:shown`).catch(),I(this.descriptor.contextKeyPrefix),null!=t&&(this.provider.onActiveChanged?.(t),t||this.handleFocusChanged(!1))):(A(this.descriptor.contextKeyPrefix),null!=t&&this.provider.onActiveChanged?.(!1),this.handleFocusChanged(!1)),this.provider.onVisibilityChanged?.(e)}onWindowStateChanged(e){this.visible&&(this.notify(p.RR,{focused:e.focused}),this.provider.onWindowFocusChanged?.(e.focused))}handleFocusChanged(e){this.notify(p.ct,{focused:e}),this.provider.onFocusChanged?.(e)}getRootUri(){return this.container.context.extensionUri}_webRoot;getWebRoot(){return null==this._webRoot&&(this._webRoot=this.asWebviewUri(this.getWebRootUri()).toString()),this._webRoot}_webRootUri;getWebRootUri(){return null==this._webRootUri&&(this._webRootUri=r.Uri.joinPath(this.getRootUri(),"dist","webviews")),this._webRootUri}async getHtml(e){let t=this.getWebRootUri(),i=r.Uri.joinPath(t,this.descriptor.fileName),[s,o,n,a,l]=await Promise.all([r.workspace.fs.readFile(i),this.provider.includeBootstrap?.(),this.provider.includeHead?.(),this.provider.includeBody?.(),this.provider.includeEndOfBody?.()]);return this.replacePromisesWithIpcPromises(o),P(k.decode(s),this.id,this.instanceId,e.cspSource,this._cspNonce,this.asWebviewUri(this.getRootUri()).toString(),this.getWebRoot(),this.isHost("editor")?"editor":"view",o,n,a,l)}nextIpcId(){return`host:${C.next()}`}async notify(e,t,i){let r;if(this.replacePromisesWithIpcPromises(t),e.pack&&null!=t){let i=(0,d.u)((0,u.jr)(`${(0,c.zu)(this)}.notify serializing msg=${e.method}`,!0),{log:!1,logLevel:"debug"});r=S.encode(JSON.stringify(t)),i?.stop()}let s={id:this.nextIpcId(),scope:e.scope,method:e.method,params:r??t,packed:null!=r,completionId:i},o=await this.postMessage(s);return o?this._pendingIpcNotifications.clear():e===p.Fh?this._pendingIpcPromiseNotifications.add({msg:s,timestamp:Date.now()}):this.addPendingIpcNotificationCore(e,s),o}respond(e,t,i){return this.notify(e.response,i,t.completionId)}replacePromisesWithIpcPromises(e){let t=[];if(this.replacePromisesWithIpcPromisesCore(e,t),0===t.length)return;let i=this.cancellation?.token;queueMicrotask(()=>{for(let[e,r]of t)e.then(e=>{if(!i?.isCancellationRequested)return this.notify(p.Fh,{status:"fulfilled",value:e},r.id)},e=>{if(!i?.isCancellationRequested)return this.notify(p.Fh,{status:"rejected",reason:e},r.id)})})}replacePromisesWithIpcPromisesCore(e,t){if(null!=e&&"object"==typeof e)for(let i in e){let r=e[i];if(r instanceof Promise){let s={__ipc:"promise",id:this.nextIpcId(),method:p.Fh.method};e[i]=s,t.push([r,s])}this.replacePromisesWithIpcPromisesCore(r,t)}}async postMessage(e){let t,i;if(!this._ready)return Promise.resolve(!1);let s=(0,u.dQ)(),o=Promise.race([this.webview.postMessage(e).then(e=>(clearTimeout(t),e),e=>(clearTimeout(t),c.Vy.error(e,s),!1)),new Promise(e=>{t=setTimeout(()=>{(0,u.TT)(s,void 0,"TIMEDOUT"),e(!1)},3e4)})]);if(this.isHost("view")){let e=await (0,h.wW)(o,void 0,100);i=e.paused?await r.window.withProgress({location:{viewId:this.id}},()=>e.value):e.value}else i=await o;return i}_pendingIpcNotifications=new Map;_pendingIpcPromiseNotifications=new Set;addPendingIpcNotification(e,t,i){this.addPendingIpcNotificationCore(e,t.get(e)?.bind(i))}addPendingIpcNotificationCore(e,t){e.reset&&this._pendingIpcNotifications.clear(),null!=t&&this._pendingIpcNotifications.set(e,{msg:t,timestamp:Date.now()})}clearPendingIpcNotifications(){this._pendingIpcNotifications.clear()}sendPendingIpcNotifications(){if(!this._ready||0===this._pendingIpcNotifications.size&&0===this._pendingIpcPromiseNotifications.size)return;let e=[...this._pendingIpcNotifications.values(),...this._pendingIpcPromiseNotifications.values()].sort((e,t)=>e.timestamp-t.timestamp);for(let{msg:t}of(this._pendingIpcNotifications.clear(),this._pendingIpcPromiseNotifications.clear(),e.values()))"function"==typeof t?t():this.postMessage(t)}};function P(e,t,i,r,s,o,n,a,l,c,u,h){return e.replace(/#{(head|body|endOfBody|webviewId|webviewInstanceId|placement|cspSource|cspNonce|root|webroot|state)}/g,(e,d)=>{switch(d){case"head":return c??"";case"body":return u??"";case"state":return null!=l?JSON.stringify(l).replace(/"/g,"&quot;"):"";case"endOfBody":return`${null!=l?`<script type="text/javascript" nonce="${s}">window.bootstrap=${JSON.stringify(l)};</script>`:""}${h??""}`;case"webviewId":return t;case"webviewInstanceId":return i??"";case"placement":return a;case"cspSource":return r;case"cspNonce":return s;case"root":return o;case"webroot":return n;default:return""}})}function A(e){(0,n.o)(`${e}:visible`,!1)}function I(e){(0,n.o)(`${e}:visible`,!0)}function D(e,t,i,s=!1){let o=!1;for(let[n,a]of Object.entries(i)){let i=e[n];if(s||!(i instanceof r.Uri)&&!(a instanceof r.Uri)||i?.toString()!==a?.toString()){if(!s&&i===a&&(void 0!==a||n in e)&&(null==t||!(n in t)))continue;null==t&&(t={}),t[n]=a,o=!0}}return[o,t]}v([(0,l.Yz)({args:!1})],R.prototype,"show",1),v([(0,l.Yz)()],R.prototype,"refresh",1),v([(0,l.Yz)()],R.prototype,"onParentDisposed",1),v([(0,l.Yz)({args:{0:e=>null!=e?`${e.id}, method=${e.method}`:"<undefined>"}})],R.prototype,"onMessageReceivedCore",1),v([(0,l.Yz)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],R.prototype,"onViewFocusChanged",1),v([(0,l.Yz)()],R.prototype,"onParentVisibilityChanged",1),v([(e,t,i)=>{let r;if("function"==typeof i.value?r=i.value:"function"==typeof i.get&&(r=i.get),void 0===r)throw Error("Not supported");let s=`$sequentialize$${t}`;i.value=function(...e){Object.prototype.hasOwnProperty.call(this,s)||Object.defineProperty(this,s,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let t=this[s],i=async()=>await r.apply(this,e);return t=null==t?i():t.then(i,i),this[s]=t,t}},(0,l.Yz)({args:!1,enter:e=>`(${e.id}|${e.method}${e.completionId?`+${e.completionId}`:""})`})],R.prototype,"postMessage",1),R=v([(0,l.Is)(e=>`WebviewController(${e.id}${null!=e.instanceId?`|${e.instanceId}`:""})`)],R)},166:(e,t,i)=>{i.d(t,{j:()=>n});var r=i(6006),s=i(3934),o=i(377);function n(e,t){let i=(0,o.Sp)(e),n=(0,r.P8)(i);if(t?.truncateTo!=null&&n.length>=t.truncateTo)return(0,s.kU)(n,t.truncateTo);if(t?.suffix){if(null!=t.truncateTo&&n.length+t.suffix.length>=t.truncateTo)return`${(0,s.kU)(n,t.truncateTo-t.suffix.length)}${t.suffix}`;n+=t.suffix}if(t?.fileOnly)return n;let a=(0,o.A3)(i,t?.relativeTo);return a?(n=`/${n}`,t?.truncateTo!=null&&n.length+a.length>=t.truncateTo)?`${(0,s.Es)(a,t.truncateTo-n.length)}${n}`:`${a}${n}`:n}},181:e=>{e.exports=require("buffer")},255:(e,t,i)=>{i.d(t,{Zr:()=>G,jg:()=>eC,p9:()=>H,Qj:()=>z,e2:()=>Y,wS:()=>K,C6:()=>Z,aG:()=>J,c1:()=>X,Re:()=>ei,uV:()=>er,aL:()=>ee,gw:()=>et,t$:()=>es,GW:()=>eo,iM:()=>en,YR:()=>ea,g0:()=>ec,UA:()=>el,FF:()=>eu,Tq:()=>eh,RX:()=>ed,l7:()=>ep,sL:()=>eg,tY:()=>ev,UI:()=>ew,x$:()=>em,cf:()=>eb});var r=i(1398),s=i(1518),o=i(9703),n=i(6250),a=i(1192),l=i(1729),c=i(7528),u=i(7222),h=i(4693),d=i(7488),p=i(5507),g=i(1974),m=i(3949),f=i(1403),w=i(5738),v=i(6424),y=i(1081),b=i(3934),C=i(8554),k=i(8811),S=i(311),R=i(2636),P=i(8557),A=i(6599),I=i(2126),D=i(7079),$=i(6613),T=i(7947),E=i(102),_=i(4301),O=i(1078),x=i(166),F=i(6612),L=i(892),B=i(6851),U=i(7747),N=i(7005),q=i(5576),W=i(4112),M=i(9487);function G(e,t,i,r){let o;return 1===i.repos.length?r?`${e}${(0,b.xv)(r,s.uR-e.length)}`:e:(o=null!=t.repo?`${r??""}${(0,b.eV)(s.EO.Dot,2,2)}${t.repo.formattedName}`:1===t.repos.length?`${r??""}${(0,b.eV)(s.EO.Dot,2,2)}${t.repos[0].formattedName}`:`${(0,b.eV)(s.EO.Dot,2,2)}${t.repos.length} repositories`,`${e}${(0,b.xv)(o,s.uR-e.length)}`)}async function H(e,t){return z(e,["branches"],{buttons:t?.buttons,filter:t?.filter!=null?{branches:t.filter}:void 0,picked:t?.picked,sort:t?.sort==null||{branches:t.sort}})}async function V(e,t){return null==e?[]:(await e.git.remotes().getRemotes(t?.filter!=null?{filter:t.filter}:void 0)).map(e=>(0,T.G0)(e,t?.picked!=null&&("string"==typeof t.picked?e.name===t.picked:t.picked.includes(e.name)),{buttons:t?.buttons,upstream:!0}))}async function j(e,t){return z(e,["tags"],{buttons:t?.buttons,filter:t?.filter!=null?{tags:t.filter}:void 0,picked:t?.picked,sort:t?.sort==null||{tags:t.sort}})}async function Q(e,{buttons:t,excludeOpened:i,filter:n,includeStatus:a,picked:l}){let c=e instanceof f.LN?await e.git.worktrees()?.getWorktrees():e;if(null==c)return[];let u=(0,L.x1)(await Promise.allSettled((0,U.Tj)(c,async e=>{let c;if(i&&e.opened||n?.(e)===!1)return;let u=!1;if(a)try{c=await e.getStatus()}catch(t){N.Vy.error(t,`Worktree status failed: ${e.uri.toString(!0)}`),u=!0}return function(e,t,i,n){let a,l,c="",u="";if(n?.type&&(c="worktree"),n?.includeStatus){let t="",i=0;n?.status!=null?n.status.upstream?.missing?(t+=s.EO.Warning,i+=3):(n.status.upstream?.state.behind?t+=s.EO.ArrowDown:i+=2,n.status.upstream?.state.ahead?t+=s.EO.ArrowUp:i+=2,n.status.hasChanges?t+="±":i+=2):i+=6,i>0&&(t+=" ".repeat(i));let r=e.formattedDate;r&&(c?c+=`  ${s.EO.Dot}  ${e.formattedDate}`:c=r),t&&(u+=u?`  ${s.EO.Dot}  ${t}`:t)}switch(e.type){case"bare":l="(bare)",a=new r.ThemeIcon("folder");break;case"branch":l=e.branch?.name??"unknown",a=(0,k.BI)(o.m.instance,e.branch);break;case"detached":l=(0,C.pV)(e.sha),a=new r.ThemeIcon("git-commit")}return{label:n?.checked?`${l}${(0,b.eV)("$(check)",2)}`:l,description:c?` ${c}`:void 0,detail:n?.path?`${u?`${u}  `:""}${i?`${s.EO.Warning} (missing)`:"$(folder)"} ${e.friendlyPath}`:u,alwaysShow:n?.alwaysShow,buttons:n?.buttons,picked:t,item:e,opened:e.opened,hasChanges:n?.status?.hasChanges,iconPath:a}}(e,null!=l&&("string"==typeof l?e.uri.toString()===l:l.includes(e.uri.toString())),u,{buttons:t,includeStatus:a,path:!0,status:c})})),e=>"fulfilled"===e.status?e.value:void 0);return(0,y.xG)(u)}async function z(e,t,{buttons:i,filter:r,picked:s,sort:o}={}){let n,a,l;if(null==e)return[];let c=!1;if(e instanceof f.LN||1===e.length){c=!0;let i=e instanceof f.LN?e:e[0],[s,u,h]=await Promise.allSettled([t.includes("branches")?(0,S.Ao)(i):void 0,t.includes("branches")?i.git.branches().getBranches({filter:r?.branches,sort:"boolean"==typeof o?o:o?.branches}):void 0,t.includes("tags")?i.git.tags().getTags({filter:r?.tags,sort:!0}):void 0]);n=(0,q.Ro)(s),a=(0,q.Ro)(u)?.values??[],l=(0,q.Ro)(h)?.values??[]}else{let[i,s,c]=await Promise.allSettled([t.includes("branches")?(0,S.Ao)(e):void 0,t.includes("branches")?Promise.allSettled(e.map(e=>e.git.branches().getBranches({filter:r?.branches,sort:"boolean"==typeof o?o:o?.branches}))):void 0,t.includes("tags")?Promise.allSettled(e.map(e=>e.git.tags().getTags({filter:r?.tags,sort:"boolean"==typeof o?o:o?.tags}))):void 0]);n=(0,q.Ro)(i);let u="fulfilled"===s.status?s.value?.filter(e=>"fulfilled"===e.status)?.map(e=>e.value.values):void 0,h="fulfilled"===c.status?c.value?.filter(e=>"fulfilled"===e.status)?.map(e=>e.value.values):void 0;t.includes("branches")&&null!=u&&(a=(0,y.Xn)((0,L.E$)(u,(e,t)=>e.name===t.name))),t.includes("tags")&&null!=h&&(l=(0,y.uO)((0,L.E$)(h,(e,t)=>e.name===t.name)))}return(null==a||0===a.length)&&(null==l||0===l.length)?[]:null!=a&&0!==a.length&&(null==l||0===l.length)?[(0,D.uK)("Branches"),...await Promise.all(a.filter(e=>!e.remote).map(e=>(0,T.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote",worktree:n?.has(e.id)}))),(0,D.uK)("Remote Branches"),...await Promise.all(a.filter(e=>e.remote).map(e=>(0,T.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote"})))]:null!=l&&0!==l.length&&(null==a||0===a.length)?l.map(e=>(0,T.iq)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:c})):[(0,D.uK)("Branches"),...await Promise.all(a.filter(e=>!e.remote).map(e=>(0,T.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,worktree:n?.has(e.id)}))),(0,D.uK)("Tags"),...l.map(e=>(0,T.iq)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:c,type:!0})),(0,D.uK)("Remote Branches"),...await Promise.all(a.filter(e=>e.remote).map(e=>(0,T.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote"})))]}function Y(e,t){return async(i,r)=>{let s=!1;if(r.startsWith("#")&&(s=!0,r=r.substring(1)),null==e)return!1;if(Array.isArray(e)){if(1!==e.length)return!1;e=e[0]}if(s&&t?.ranges&&(0,C.p8)(r))return i.items=[(0,T.vS)(r,e.path,!0,{alwaysShow:!0,buttons:t?.buttons,ref:!1,icon:!1})],!0;if(!await e.git.refs().isValidReference(r))return!!s&&(i.items=[(0,$.Du)($.WL.Back,!0,{label:"Enter a reference or commit SHA"})],!0);if(!s&&await e.git.refs().hasBranchOrTag({filter:{branches:e=>e.name.includes(r),tags:e=>e.name.includes(r)}}))return!1;let o=await e.git.commits().getCommit(r);return i.items=[await (0,T.Rc)(o,!0,{alwaysShow:!0,buttons:t?.buttons,compact:!0,icon:"avatar"})],!0}}async function*K(e,t,i){let r=(0,W.TX)({title:G(i.title??t.title,e,t),placeholder:i.placeholder??"Branch name",value:i.value,prompt:i.prompt??"Please provide a new branch name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid branch name"];if("repo"in e)return await e.repo.git.refs().checkIfCouldBeValidBranchOrTagName(t)?await e.repo.git.branches().getBranch(t)?[!1,`A branch named '${t}' already exists`]:[!0,void 0]:[!1,`'${t}' isn't a valid branch name`];let i=!0;for(let i of e.repos){if(!await i.git.refs().checkIfCouldBeValidBranchOrTagName(t))return[!1,`'${t}' isn't a valid branch name`];if(await i.git.branches().getBranch(t))return[!1,`A branch named '${t}' already exists`]}return[!0,void 0]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*Z(e,t,i){let r=(0,W.TX)({title:G(i.title??t.title,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote name",validate:async t=>null==t?[!1,void 0]:0===(t=t.trim()).length?[!1,"Please enter a valid remote name"]:/[^a-zA-Z0-9-_.]/.test(t)?[!1,`'${t}' isn't a valid remote name`]:"repo"in e&&0!==(await e.repo.git.remotes().getRemotes({filter:e=>e.name===t})).length?[!1,`A remote named '${t}' already exists`]:[!0,void 0]}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*J(e,t,i){let r=(0,W.TX)({title:G(i.title??t.title,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote URL",validate:e=>{if(null==e)return[!1,void 0];if(0===(e=e.trim()).length)return[!1,"Please enter a valid remote URL"];let t=w.vw.test(e);return[t,t?void 0:`'${e}' isn't a valid remote URL`]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*X(e,t,i){let r=(0,W.TX)({title:G(i.title??t.title,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter tag name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid tag name"];if("repo"in e){let i=await e.repo.git.refs().checkIfCouldBeValidBranchOrTagName(t);return[i,i?void 0:`'${t}' isn't a valid tag name`]}let i=!0;for(let i of e.repos)if(!await i.git.refs().checkIfCouldBeValidBranchOrTagName(t))return[!1,`'${t}' isn't a valid branch name`];return[!0,void 0]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}function*ee(e,t,{filter:i,picked:r,placeholder:s,title:o}){let a=H(e.repo,{buttons:[M.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:e),l=(0,W.Ac)({title:G(o??t.title,e,t),placeholder:t=>t?s:`No branches found in ${e.repo.formattedName}`,matchOnDetail:!0,items:a,onDidClickItemButton:(e,t,{item:i})=>{t===M.yi&&n._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await n._c(i,{select:!0,focus:!1,expand:!0})}}),c=yield l;return(0,W.fg)(l,e,c)?c[0].item:W.Lt}function*et(e,t,{filter:i,picked:r,placeholder:s,emptyPlaceholder:o,sort:a,title:l}){let c=H(e.repo,{buttons:[M.yi],filter:i,picked:r,sort:a}).then(e=>e.length?e:[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]),u=(0,W.Ac)({multiselect:!0,title:G(l??t.title,e,t),placeholder:t=>t?s:o??`No branches found in ${e.repo.formattedName}`,matchOnDetail:!0,items:c,onDidClickItemButton:(e,t,{item:i})=>{t===M.yi&&n._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await n._c(i,{select:!0,focus:!1,expand:!0})}}),h=yield u;return(0,W.fg)(u,e,h)?h.map(e=>e.item):W.Lt}function*ei(e,t,{filter:i,picked:r,placeholder:s,title:o,value:l,additionalButtons:c,ranges:u}){t.showTags=!0;let h=new M.y2(t.showTags),p=async()=>z(e.repo,t.showTags?["branches","tags"]:["branches"],{buttons:"boolean"==typeof t.pickCommitForItem?[M.ig,M.yi]:[M.yi],filter:i,picked:r,sort:!0}),g=p().then(e=>0===e.length?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:e),m=(0,W.Ac)({title:G(o??t.title,e,t),placeholder:i=>i?`${"string"==typeof s?s:s(t)} (or enter a revision using #)`:`No branches${t.showTags?" or tags":""} found in ${e.repo.formattedName}`,matchOnDescription:!0,matchOnDetail:!0,value:l,selectValueWhenShown:!0,items:g,additionalButtons:[...c??[],h],onDidClickItemButton:(e,i,{item:r})=>i===M.ig?(t.pickCommitForItem=!0,!0):(i===M.yi&&((0,R.gC)(r)?n._c(r,{select:!0,focus:!1,expand:!0}):(0,R.A1)(r)?d._c(r,{select:!0,focus:!1,expand:!0}):(0,R.bv)(r)&&a.JX(r,{pin:!1,preserveFocus:!0})),!1),onDidClickButton:async(i,r)=>{if(r===h){i.busy=!0;try{t.showTags=!t.showTags,h.on=t.showTags;let r=await p();i.placeholder=0===r.length?`${e.repo.formattedName} has no branches${t.showTags?" or tags":""}`:`${"string"==typeof s?s:s(t)} (or enter a revision using #)`,i.items=r}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{(0,R.gC)(i)?n._c(i,{select:!0,focus:!1,expand:!0}):(0,R.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,R.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0})},onValidateValue:Y(e.repo,{ranges:u})}),f=yield m;return(0,W.fg)(m,e,f)?f[0].item:W.Lt}function*er(e,t,{allowCreate:i,filter:s,picked:o,placeholder:l,title:c,value:u}){t.showTags=1===e.repos.length;let h=new M.y2(t.showTags),p={label:"Create New Branch...",iconPath:new r.ThemeIcon("plus"),alwaysShow:!0,item:""},g={label:"Choose a Pull Request...",iconPath:new r.ThemeIcon("git-pull-request"),alwaysShow:!0,item:(0,W.$t)("gitlens.showLaunchpad",{source:"quick-wizard"})},m=()=>z(e.repos,t.showTags?["branches","tags"]:["branches"],{buttons:[M.yi],filter:{branches:1===e.repos.length?void 0:e=>!e.remote,...s},picked:o??e.reference?.ref,sort:{branches:{orderBy:"date:desc"},tags:{orderBy:"date:desc"}}}),f=m().then(e=>0===e.length?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:i?[p,g,...e]:[g,...e]),w=(0,W.Ac)({title:G(c??t.title,e,t),placeholder:i=>i?`${"string"==typeof l?l:l(t)} (or enter a revision using #)`:`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`,matchOnDescription:!0,matchOnDetail:!0,value:u??((0,R.bv)(e.reference)?e.reference.ref:void 0),selectValueWhenShown:!0,items:f,additionalButtons:[h],onDidChangeValue:e=>(p.item=e.value,!0),onDidClickItemButton:(e,t,{item:i})=>{!("string"==typeof i||(0,W.h8)(i))&&t===M.yi&&((0,R.gC)(i)?n._c(i,{select:!0,focus:!1,expand:!0}):(0,R.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,R.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0}))},onDidClickButton:async(i,r)=>{if(r===h){i.busy=!0;try{t.showTags=!t.showTags,h.on=t.showTags;let r=await m();i.placeholder=0===r.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`:`${"string"==typeof l?l:l(t)} (or enter a revision using #)`,i.items=r}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{!("string"==typeof i||(0,W.h8)(i))&&((0,R.gC)(i)?n._c(i,{select:!0,focus:!1,expand:!0}):(0,R.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,R.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0}))},onValidateValue:Y(e.repos)}),v=yield w;return(0,W.fg)(w,e,v)?v[0].item:W.Lt}async function*es(e,t,{ignoreFocusOut:i,log:r,onDidLoadMore:s,picked:o,placeholder:n,showInSideBarCommand:l,showInSideBarButton:c,title:u}){async function h(e){if(null==e)return[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)];let t=[M.kk,M.yi];(0,U.$1)(e.commits)?.[1].file!=null&&t.splice(0,0,M.Q8);let i=(0,L.x1)(await Promise.allSettled((0,U.Tj)(e.commits.values(),async e=>(0,T.Rc)(e,null!=o&&("string"==typeof o?e.ref===o:o.includes(e.ref)),{buttons:t,compact:!0,icon:"avatar"}))),e=>"fulfilled"===e.status?e.value:void 0);return e.hasMore&&i.push((0,$.Du)($.WL.LoadMore)),i}let d=h(r).then(e=>null!=l?[l,...e]:e),p=(0,W.Ac)({title:G(u??t.title,e,t),placeholder:"string"==typeof n?n:n(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,value:"string"==typeof o&&r?.count===0?o:void 0,selectValueWhenShown:!0,items:d,onDidLoadMore:async e=>(e.keepScrollPosition=!0,r=await r?.more?.(O.H.get("advanced.maxListItems")),s?.(r),"string"!=typeof n&&(e.placeholder=n(t,r)),h(r)),additionalButtons:[...c?.button!=null?[c?.button]:[],...r?.hasMore?[M.TR]:[]],onDidClickItemButton:(e,t,i)=>{if(!D.Fj.is(i))switch(t){case M.kk:a.JX(i.item,{pin:!1,preserveFocus:!0});break;case M.yi:a._c(i.item,{select:!0,focus:!1,expand:!0});break;case M.Q8:{let e=i.item.file?.path;null!=e&&a.eX(e,i.item)}}},onDidClickButton:(e,t)=>{if(null==r)return;let i=e.activeItems.filter(e=>!D.Fj.is(e));t===c?.button&&c.onDidClick(i)},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{let i=e.activeItems.filter(e=>!D.Fj.is(e));"ctrl+right"===t?a.JX(i[0].item,{pin:!1,preserveFocus:!0}):await a._c(i[0].item,{select:!0,focus:!1,expand:!0})},onValidateValue:Y(e.repo,{buttons:[M.kk,M.yi]})}),g=yield p;return(0,W.fg)(p,e,g)?D.Fj.is(g[0])?((0,W.nH)(e),await g[0].execute(),W.Lt):g[0].item:W.Lt}function*eo(e,t,{log:i,onDidLoadMore:r,picked:s,placeholder:o,title:n}){async function l(e){return null==e?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:(0,L.x1)(await Promise.allSettled((0,U.Tj)(e.commits.values(),async e=>(0,T.Rc)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[M.kk,M.yi],compact:!0,icon:"avatar"}))),e=>"fulfilled"===e.status?e.value:void 0)}let c=(0,W.Ac)({title:G(n??t.title,e,t),multiselect:null!=i,placeholder:"string"==typeof o?o:o(t,i),matchOnDescription:!0,matchOnDetail:!0,items:l(i),onDidLoadMore:async e=>(e.keepScrollPosition=!0,i=await i?.more?.(O.H.get("advanced.maxListItems")),r?.(i),"string"!=typeof o&&(e.placeholder=o(t,i)),l(i)),additionalButtons:[...i?.hasMore?[M.TR]:[]],onDidClickItemButton:(e,t,{item:i})=>{switch(t){case M.kk:a.JX(i,{pin:!1,preserveFocus:!0});break;case M.yi:a._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{"ctrl+right"===t?a.JX(i,{pin:!1,preserveFocus:!0}):await a._c(i,{select:!0,focus:!1,expand:!0})}}),u=yield c;return(0,W.fg)(c,e,u)?u.map(e=>e.item):W.Lt}function*en(e,t,i="Choose contributors"){async function r(){let t=(await o.m.instance.git.getOrOpenScmRepository(e.repo.path))?.inputBox.value,i=[];for(let r of(await e.repo.git.contributors().getContributors()))i.push(await (0,v.N)(r,t?.includes(r.getCoauthor()),{buttons:[M.yi]}));return(0,y.tB)(i)}let s=(0,W.Ac)({title:G(t.title,e,t),allowEmpty:!0,multiselect:!0,placeholder:i,matchOnDescription:!0,items:r(),onDidClickItemButton:(e,t,{item:i})=>{t===M.yi&&l._(i,{select:!0,focus:!1,expand:!0})},onDidChangeSelection:(0,B.s)((e,t)=>{if(!e.canSelectMany||e.busy)return;let i=!1;for(let r of e.items){if((0,$.hr)(r))continue;let e=t.includes(r);(r.picked!==e||r.alwaysShow!==e)&&(r.alwaysShow=r.picked=e,i=!0)}i&&(e.items=(0,y.tB)([...e.items]),e.selectedItems=t)},10),keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{l._(i,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,W.fg)(s,e,n)?n.map(e=>e.item):W.Lt}function*ea(e,t,{filter:i,picked:r,placeholder:s,title:o}){let n=V(e.repo,{buttons:[M.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:e),a=(0,W.Ac)({title:G(o??t.title,e,t),placeholder:t=>t?s:`No remotes found in ${e.repo.formattedName}`,matchOnDetail:!0,items:n,onDidClickItemButton:(e,t,{item:i})=>{t===M.yi&&c._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await c._c(i,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l[0].item:W.Lt}async function*el(e,t,i="Choose a repository"){if("string"==typeof e.repo&&(e.repo=o.m.instance.git.getRepository(e.repo),null!=e.repo))return e.repo;let r=e.repo??await o.m.instance.git.getOrOpenRepositoryForEditor(),s=(0,W.Ac)({title:t.title,placeholder:0===t.repos.length?`${i} \u2014 no opened repositories found`:i,items:0===t.repos.length?[(0,$.Du)($.WL.Cancel,!0,{label:"Cancel",detail:"No opened repositories found"})]:Promise.all(t.repos.map(e=>(0,T.sS)(e,e.id===r?.id,{branch:!0,buttons:[M.yi],fetched:!0,status:!0}))),onDidClickItemButton:(e,i,{item:r})=>{i===M.yi&&u._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,i,{item:r})=>{u._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,W.fg)(s,e,n)?n[0].item:W.Lt}async function*ec(e,t,i){let r;if(i={placeholder:"Choose repositories",skipIfPossible:!1,...i},null!=e.repos)if((0,L.Bo)(e.repos)){if(r=(0,L.x1)(e.repos,e=>t.repos.find(t=>t.path===e)),i.skipIfPossible&&0!==r.length&&e.repos.length===r.length)return r}else r=e.repos;else{let e=await o.m.instance.git.getOrOpenRepositoryForEditor();r=null!=e?[e]:[]}let s=(0,W.Ac)({multiselect:!0,title:t.title,placeholder:0===t.repos.length?`${i.placeholder} \u2014 no opened repositories found`:i.placeholder,items:0===t.repos.length?[(0,$.Du)($.WL.Cancel,!0,{label:"Cancel",detail:"No opened repositories found"})]:Promise.all(t.repos.map(e=>(0,T.sS)(e,r.some(t=>t.id===e.id),{branch:!0,buttons:[M.yi],fetched:!0,status:!0}))),onDidClickItemButton:(e,i,{item:r})=>{i===M.yi&&u._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,i,{item:r})=>{u._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,W.fg)(s,e,n)?n.map(e=>e.item):W.Lt}function*eu(e,t,{ignoreFocusOut:i,gitStash:r,picked:s,placeholder:o,title:n}){let a=(0,W.Ac)({title:G(n??t.title,e,t),placeholder:"string"==typeof o?o:o(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:[...(0,U.Tj)(r.stashes.values(),e=>(0,T.rA)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[M.kk],compact:!0,icon:!0}))],onDidClickItemButton:(e,t,{item:i})=>{t===M.kk&&h.JX(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await h.JX(i,{pin:!1,preserveFocus:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l[0].item:W.Lt}function*eh(e,t,{ignoreFocusOut:i,gitStash:r,picked:s,placeholder:o,title:n}){let a=(0,W.Ac)({title:G(n??t.title,e,t),multiselect:!0,placeholder:"string"==typeof o?o:o(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:[...(0,U.Tj)(r.stashes.values(),e=>(0,T.rA)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[M.kk],compact:!0,icon:!0}))],onDidClickItemButton:(e,t,{item:i})=>{t===M.kk&&h.JX(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await h.JX(i,{pin:!1,preserveFocus:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l.map(e=>e.item):W.Lt}function*ed(e,t,{filter:i,picked:r,placeholder:s,title:o}){let n=j(e.repo,{buttons:[M.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:e),a=(0,W.Ac)({multiselect:!0,title:G(o??t.title,e,t),placeholder:t=>t?s:`No tags found in ${e.repo.formattedName}`,matchOnDetail:!0,items:n,onDidClickItemButton:(e,t,{item:i})=>{t===M.yi&&d._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await d._c(i,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l.map(e=>e.item):W.Lt}function*ep(e,t,{excludeOpened:i,filter:r,includeStatus:s,picked:o,placeholder:n,title:a}){let l=Q(t.worktrees??e.repo,{buttons:[M.xU,M.yi],excludeOpened:i,filter:r,includeStatus:s,picked:o}).then(e=>0===e.length?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:e),c=(0,W.Ac)({title:G(a??t.title,e,t),placeholder:t=>t?n:`No worktrees found in ${e.repo.formattedName}`,matchOnDetail:!0,items:l,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case M.xU:(0,F.OH)(i.uri,{location:"newWindow"});break;case M.yi:p._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await p._c(i,{select:!0,focus:!1,expand:!0})}}),u=yield c;return(0,W.fg)(c,e,u)?u[0].item:W.Lt}function*eg(e,t,{excludeOpened:i,filter:r,includeStatus:s,picked:o,placeholder:n,title:a}){let l=Q(t.worktrees??e.repo,{buttons:[M.xU,M.yi],excludeOpened:i,filter:r,includeStatus:s,picked:o}).then(e=>0===e.length?[(0,$.Du)($.WL.Back,!0),(0,$.Du)($.WL.Cancel)]:e),c=(0,W.Ac)({multiselect:!0,title:G(a??t.title,e,t),placeholder:t=>t?n:`No worktrees found in ${e.repo.formattedName}`,matchOnDetail:!0,items:l,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case M.xU:(0,F.OH)(i.uri,{location:"newWindow"});break;case M.yi:p._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await p._c(i,{select:!0,focus:!1,expand:!0})}}),u=yield c;return(0,W.fg)(c,e,u)?u.map(e=>e.item):W.Lt}function*em(e,t){let i=(0,W.Ac)({title:G((0,R.M4)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,R.M4)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:ef(e),onDidClickItemButton:(t,i,r)=>{switch(i){case M.kk:(0,R.Nf)(e.reference)?h.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case M.yi:(0,R.Nf)(e.reference)?h._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),r=yield i;return(0,W.fg)(i,e,r)?r[0]:W.Lt}async function ef(e){let t,i=[new I._w(e.reference),new I.bO(e.reference)];if((0,g.kk)(e.reference))i.push((0,D.uK)("Actions"),new T.$N("Apply Stash...",{command:"stash",state:{subcommand:"apply",repo:e.repo,reference:e.reference}}),new T.$N("Rename Stash...",{command:"stash",state:{subcommand:"rename",repo:e.repo,reference:e.reference}}),new T.$N("Drop Stash...",{command:"stash",state:{subcommand:"drop",repo:e.repo,references:[e.reference]}}),(0,D.uK)(),new I.Xx(e.reference));else{let r=await e.repo.git.remotes().getRemotesWithProviders({sort:!0});r?.length&&i.push((0,D.uK)((0,P.lb)(r)??"Remote"),new E.zB(r,{type:m.J.Commit,sha:e.reference.sha}),new E.oN(r,{type:m.J.Commit,sha:e.reference.sha})),i.push((0,D.uK)("Actions"));let s=await e.repo.git.branches().getBranch(),[o,n]=await Promise.all([null!=s?e.repo.git.branches().getBranchesWithCommits([e.reference.ref],s.name,{commitDate:(0,g.WM)(e.reference)?e.reference.committer.date:void 0}):void 0,!s?.remote&&s?.upstream!=null?e.reference.isPushed():void 0]);o?.length?((t=!n)&&i.push(new T.$N("Push to Commit...",{command:"push",state:{repos:e.repo,reference:e.reference}})),i.push(new T.$N("Revert Commit...",{command:"revert",state:{repo:e.repo,references:[e.reference]}}),new T.$N(`Reset ${s?.name??"Current Branch"} to Commit...`,{command:"reset",state:{repo:e.repo,reference:e.reference}}),new T.$N(`Reset ${s?.name??"Current Branch"} to Previous Commit...`,{command:"reset",state:{repo:e.repo,reference:(0,R.kA)(`${e.reference.ref}^`,e.reference.repoPath,{refType:"revision",name:`${e.reference.name}^`,message:e.reference.message})}}))):i.push(new T.$N("Cherry Pick Commit...",{command:"cherry-pick",state:{repo:e.repo,references:[e.reference]}})),i.push(new T.$N(`Rebase ${s?.name??"Current Branch"} onto Commit...`,{command:"rebase",state:{repo:e.repo,destination:e.reference}}),new T.$N("Switch to Commit...",{command:"switch",state:{repos:[e.repo],reference:e.reference}}),(0,D.uK)(),new T.$N("Create Branch at Commit...",{command:"branch",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),new T.$N("Create Tag at Commit...",{command:"tag",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),(0,D.uK)("Copy"),new I.$t(e.reference),new I.Xx(e.reference))}return i.push((0,D.uK)("Open"),new I.MO(e.reference),new I.ps(e.reference),new I.X8(e.reference),(0,D.uK)(),new I.zR(e.reference),new I.IJ(e.reference)),i.push((0,D.uK)("Compare"),new I.ln(e.reference),new I.Wq(e.reference)),i.push((0,D.uK)(),new I.Y7(e.reference),new I.Tw(e.reference)),i.push((0,D.uK)("Browse"),new I.qB(e.reference,{openInNewWindow:!1}),new I.qB(e.reference,{before:!0,openInNewWindow:!1}),new I.qB(e.reference,{openInNewWindow:!0}),new I.qB(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new I.o3(e.reference,{unpublished:t,hint:"Click to see all changed files"})),i}function*ew(e,t,i){e.reference.files;let r=(0,W.Ac)({title:G((0,R.M4)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,R.M4)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:[new I.o3(e.reference,{picked:null==e.fileName,hint:`Click to see ${(0,g.kk)(e.reference)?"stash":"commit"} actions`}),(0,D.uK)("Files"),...e.reference.files?.map(t=>new I.p1(e.reference,t,i?.picked===t.path))??[]],matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case M.kk:(0,R.Nf)(e.reference)?h.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case M.yi:(0,R.Nf)(e.reference)?h._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),s=yield r;return(0,W.fg)(r,e,s)?s[0]:W.Lt}function*ev(e,t){let i=(0,W.Ac)({title:G((0,R.M4)(e.reference,{capitalize:!0,icon:!1}),e,t,`${(0,b.eV)(s.EO.Dot,2,2)}${(0,x.j)(e.fileName,{fileOnly:!0})}`),placeholder:`${(0,x.j)(e.fileName,{relativeTo:e.repo.path})} in ${(0,R.M4)(e.reference,{icon:!1})}`,ignoreFocusOut:!0,items:ey(e),matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case M.kk:(0,R.Nf)(e.reference)?h.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case M.yi:(0,R.Nf)(e.reference)?h._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),r=yield i;return(0,W.fg)(i,e,r)?r[0]:W.Lt}async function ey(e){let t=await e.reference.findFile(e.fileName);if(null==t)return[];let i=[new I._w(e.reference),new I.bO(e.reference)];if((0,g.kk)(e.reference))i.push((0,D.uK)(),new I.Xx(e.reference),(0,D.uK)("Actions"),new I.Zq(e.reference,t),new I.$I(e.reference,t),(0,D.uK)(),new I.Xx(e.reference));else{let r=await e.repo.git.remotes().getRemotesWithProviders({sort:!0});r?.length&&i.push((0,D.uK)((0,P.lb)(r)??"Remote"),new E.zB(r,{type:m.J.Revision,fileName:e.fileName,commit:e.reference}),new E.oN(r,{type:m.J.Revision,fileName:e.fileName,commit:e.reference}),(0,D.uK)(),new E.zB(r,{type:m.J.Commit,sha:e.reference.ref}),new E.oN(r,{type:m.J.Commit,sha:e.reference.sha})),i.push((0,D.uK)("Actions"),new I.Zq(e.reference,t),new I.$I(e.reference,t),(0,D.uK)("Copy"),new I.$t(e.reference),new I.Xx(e.reference))}return i.push((0,D.uK)("Open"),new I.NH(e.reference,e.fileName),new I.S5(e.reference,e.fileName),new I.EG(e.reference,e.fileName),(0,D.uK)()),"D"!==t.status&&i.push(new I.Kw(e.reference,t)),i.push(new I.bi(e.reference,t)),i.push((0,D.uK)("Compare"),new I.ln(e.reference),new I.Wq(e.reference)),i.push((0,D.uK)("Browse"),new I.qB(e.reference,{openInNewWindow:!1}),new I.qB(e.reference,{before:!0,openInNewWindow:!1}),new I.qB(e.reference,{openInNewWindow:!0}),new I.qB(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new I.o3(e.reference,{file:t,hint:"Click to see all changed files"})),i}function*eb(e,t){let i=t.status.getUpstreamStatus({expand:!0,separator:", "}),s=t.status.getFormattedDiffStatus({expand:!0,separator:", "}),o=(0,W.Ac)({title:G(t.title,e,t),placeholder:i?`${i}, ${s}`:s,ignoreFocusOut:!0,items:function(e,t){let i,s=[],o=t.status.computeWorkingTreeStatus();return i=0===o.staged&&0===o.unstaged?"No working tree changes":`$(files) ${o.staged?`${(0,b.td)("staged file",o.staged)} (${o.stagedStatus})`:""}${o.unstaged?`${o.staged?", ":""}${(0,b.td)("unstaged file",o.unstaged)} (${o.unstagedStatus})`:""}`,t.status.upstream?(0===t.status.upstream.state.ahead&&0===t.status.upstream.state.behind?s.push((0,$.Du)($.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is up to date with $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.upstream.state.ahead&&0!==t.status.upstream.state.behind?s.push((0,$.Du)($.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} has diverged from $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.upstream.state.ahead?s.push((0,$.Du)($.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is ahead of $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.upstream.state.behind&&s.push((0,$.Du)($.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is behind $(git-branch) ${t.status.upstream?.name}`,detail:i})),0!==t.status.upstream.state.behind&&s.push(new T.$N(`$(cloud-download) ${(0,b.td)("commit",t.status.upstream.state.behind)} behind`,{command:"log",state:{repo:e.repo,reference:(0,R.kA)((0,C.Xn)(t.status.ref,t.status.upstream?.name,".."),e.repo.path)}})),0!==t.status.upstream.state.ahead&&s.push(new T.$N(`$(cloud-upload) ${(0,b.td)("commit",t.status.upstream.state.ahead)} ahead`,{command:"log",state:{repo:e.repo,reference:(0,R.kA)((0,C.Xn)(t.status.upstream?.name,t.status.ref,".."),e.repo.path)}}))):s.push((0,$.Du)($.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} has no upstream`,detail:i})),t.status.files.length&&(s.push(new I.aY(o.stagedAddsAndChanges.concat(o.unstagedAddsAndChanges))),s.push(new I.Ol(o.stagedAddsAndChanges.concat(o.unstagedAddsAndChanges)))),o.staged>0&&(s.push(new I.aY(o.stagedAddsAndChanges,"Open Staged Files")),s.push(new I.Ol(o.stagedAddsAndChanges,"Open Only Staged Files"))),o.unstaged>0&&(s.push(new I.aY(o.unstagedAddsAndChanges,"Open Unstaged Files")),s.push(new I.Ol(o.unstagedAddsAndChanges,"Open Only Unstaged Files"))),t.status.files.length&&s.push(new D.Fj("Close Unchanged Files",new r.ThemeIcon("x"),"gitlens.closeUnchangedFiles")),s}(e,t),keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),n=yield o;return(0,W.fg)(o,e,n)?n[0]:W.Lt}async function*eC(e,t,i,s){let n,a=await e.git.access(s,t.repo?.path);if(a.allowed)return a;let l=[];if(a.subscription.current.account?.verified===!1)l.push((0,$.Du)($.WL.RequiresVerification,!0),(0,D.uK)(),(0,$.Du)($.WL.Cancel)),n="You must verify your email before you can continue";else{if(null==a.subscription.required)return a;let t=await e.productConfig.getApplicablePromo(a.subscription.current.state,"gate"),i=t?.content?.quickpick.detail;switch(s){case"graph":case"timeline":case"worktrees":n=(0,A.zx)(a.subscription.required)&&null!=a.subscription.current.account?"Pro feature — requires GitLens Pro for use on privately-hosted repos":"Pro feature — requires a trial or GitLens Pro for use on privately-hosted repos";break;default:n=(0,A.zx)(a.subscription.required)&&null!=a.subscription.current.account?"Pro feature — requires GitLens Pro":"Pro feature — requires a trial or GitLens Pro"}(0,A.zx)(a.subscription.required)&&null!=a.subscription.current.account?l.push((0,$.Du)($.WL.RequiresPaidSubscription,!0,{detail:i}),(0,D.uK)(),(0,$.Du)($.WL.Cancel)):null!=a.subscription.current.account||(0,A.lc)(a.subscription.current)?l.push((0,$.Du)($.WL.StartProTrial,!0),(0,$.Du)($.WL.SignIn),(0,D.uK)(),(0,$.Du)($.WL.Cancel)):l.push((0,$.Du)($.WL.StartPreview,!0),(0,D.uK)(),(0,$.Du)($.WL.Cancel))}switch(s){case"launchpad":l.splice(0,0,(0,$.Du)($.WL.Cancel,void 0,{label:"Launchpad prioritizes your pull requests to keep you focused and your team unblocked",detail:"Click to learn more about Launchpad",iconPath:new r.ThemeIcon("rocket"),onDidSelect:()=>void(0,_.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad",detail:"info"}})}),(0,D.uK)());break;case"startWork":l.splice(0,0,(0,$.Du)($.WL.Noop,void 0,{label:"Start work on an issue from your connected integrations",iconPath:new r.ThemeIcon("issues")}),(0,D.uK)());break;case"associateIssueWithBranch":l.splice(0,0,(0,$.Du)($.WL.Noop,void 0,{label:"Connect your branches to their associated issues in Home view",iconPath:new r.ThemeIcon("issues")}),(0,D.uK)());break;case"worktrees":l.splice(0,0,(0,$.Du)($.WL.Noop,void 0,{label:"Worktrees minimize context switching by allowing simultaneous work on multiple branches",iconPath:(0,F.G5)(o.m.instance,"icon-repo.svg")}))}let c=(0,W.Ac)({title:i.title,placeholder:n,items:l,buttons:[],isConfirmationStep:!0}),u=yield c;return(0,W.fg)(c,t,u)?a:W.Lt}},311:(e,t,i)=>{i.d(t,{Ao:()=>a,PU:()=>l,vJ:()=>o,vV:()=>n});var r=i(7747),s=i(1125);function o(e){let t;return e?.size&&((t=new Set((0,r.x1)(e,([e,t])=>t.opened?e:void 0))).size||(t=void 0)),t}async function n(e,t,i,r,o){function n(e){return e.upstream?.name!=null&&(i.includes(e.upstream.name)||e.upstream.name.startsWith("remotes/")&&i.includes(e.upstream.name.substring(8)))}if(null==i||Array.isArray(i)||(i=[i]),r??=await e.git.worktrees()?.getWorktrees(),r?.length)for(let a of r){if(a.branch?.name===t)return a;if(null==i||null==a.branch)continue;let r=(o??=new s.t(t=>e.git.branches().getBranches(null!=t?{paging:t}:void 0))).values();if(Symbol.asyncIterator in r){for await(let e of r)if(e.name===a.branch.name){if(n(e))return a;break}}else for(let e of r)if(e.name===a.branch.name){if(n(e))return a;break}}}async function a(e,t){let i=new Map;if(null==e)return i;async function r(e){let r=e.git.worktrees();null!=r&&l(await r.getWorktrees(),{includeDefault:t?.includeDefault,worktreesByBranch:i})}return Array.isArray(e)?await Promise.allSettled(e.map(async e=>r(e))):await r(e),i}function l(e,t){let i=t?.worktreesByBranch??new Map;if(null==e)return i;for(let r of e)null!=r.branch&&(t?.includeDefault||!r.isDefault)&&i.set(r.branch.id,r);return i}},377:(e,t,i)=>{i.d(t,{A3:()=>p,K9:()=>u,Sp:()=>l,Uf:()=>g,V8:()=>d,ZA:()=>h,pW:()=>c});var r=i(6928),s=i(1398),o=i(1518),n=i(6006);let a=/^([a-zA-Z][\w+.-]+):/;function l(e){if("string"==typeof e){if(!a.test(e))return(0,n.Fd)(e);e=s.Uri.parse(e,!0)}return(0,n.Fd)(e.scheme===o.xB.File?e.fsPath:e.path)}function c(e){return s.Uri.joinPath(e,"*")}function u(e,t){if("string"!=typeof e&&"string"!=typeof t&&(e.scheme!==t.scheme||e.authority!==t.authority))return!1;let i=l(t);i.startsWith("/")||(i=`${i}/`),i.endsWith("/*")?i=i.substring(0,i.length-1):i.endsWith("/")||(i=`${i}/`);let r=l(e);return r.startsWith("/")||(r=`${r}/`),r.startsWith(i)}async function h(e){try{if(((await s.workspace.fs.stat(e)).type&s.FileType.Directory)===s.FileType.Directory)return!0}catch{}return!1}function d(e,t,i){e=a.test(e)?s.Uri.parse(e,!0).path:(0,n.Fd)(e),t=a.test(t)?s.Uri.parse(t,!0).path:(0,n.Fd)(t);let r=(0,n.vO)(`${t}/`,`${e}/`,"/",i);return r>0?t.substring(r+1):t}function p(e,t){let i=(0,r.dirname)(e);if(!i||"."===i||i===t)return"";if(!t)return i;let[s]=g(i,t);return s}function g(e,t,i=!1,o){if(e=l(e),t){let i;t=a.test(t)?l(i=s.Uri.parse(t,!0)):(0,n.Fd)(t);let r=(0,n.vO)(`${t}/`,`${e}/`,"/",o);r>0?(t=e.substring(0,r),e=e.substring(r+1)):e.startsWith("/")&&(e=e.slice(1)),null!=i&&(t=i.with({path:t}).toString())}else t=(0,n.Fd)(i?(0,r.dirname)(e):""),e=i?(0,r.basename)(e):e;return[e,t]}},450:(e,t,i)=>{i.d(t,{GQ:()=>n,OM:()=>c,V8:()=>o,b4:()=>a,gz:()=>l,wj:()=>h});var r=i(1338),s=i(8554);function o(e){return{query:e.pattern,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function n(e){return{pattern:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function a(e){return`${"query"in e?e.query:e.pattern}|${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}`}function l(e){return e.map(e=>`#:${"string"==typeof e?(0,s.pV)(e):e.name}`).join(" ")}function c(e){let t,i,o,n,a=new Map;do{if(n=r.dI.exec(e.query),n?.groups==null)break;if(t=r.xT.get(n.groups.op),{value:i,text:o}=n.groups,o&&(r.xT.has(o.trim())||(t="@me"===o?"author:":(0,s.HH)(o)?"commit:":"message:",i=o)),t&&i){let e=a.get(t);null==e&&(e=new Set,a.set(t,e)),e.add(i)}}while(null!=n)return a}let u=/"/g;function h(e,t){let i,r,s=c(e),o=new Set,n=[],a=s.get("commit:");if(null!=a){for(let e of a)o.add(e.replace(u,""));i=o}else for([r,a]of(o.add("--all"),o.add(e.matchRegex?"--extended-regexp":"--fixed-strings"),e.matchRegex&&!e.matchCase&&o.add("--regexp-ignore-case"),s.entries()))switch(r){case"message:":for(let t of(e.matchAll&&o.add("--all-match"),a))t&&(t=t.replace(u,e.matchRegex?"\\b":""))&&o.add(`--grep=${t}`);break;case"author:":for(let i of a)if(i&&(i=i.replace(u,e.matchRegex?"\\b":""))){if("@me"===i){if(t?.name==null)continue;i=t.name}if(i.startsWith("@")){o.add(`--author=${i.slice(1)}`);continue}o.add(`--author=${i}`)}break;case"change:":for(let t of a)if(t){if(t.startsWith('"')&&!(t=t.replace(u,"")))continue;o.add(e.matchRegex?`-G${t}`:`-S${t}`)}break;case"file:":for(let t of a)if(t)if(t.startsWith('"')){if(!(t=t.replace(u,"")))continue;n.push(t)}else{let i=e.matchCase?"":":(icase)";/[/\\*?|![\]{}]/.test(t)?n.push(`${i}${t}`):t.indexOf(".")>0?n.push(`${i}**/${t}`):n.push(`${i}*${t}*`)}break;case"type:":for(let e of a)"stash"===e&&(o.has("--no-walk")||o.add("--no-walk"))}return{args:[...o.values()],files:n,shas:i}}},457:(e,t,i)=>{i.d(t,{LT:()=>h,PY:()=>a,Q7:()=>n,U4:()=>d,aT:()=>c,rK:()=>u,tp:()=>l});var r,s,o,n=((r=n||{}).GitHub="github",r.GitLab="gitlab",r.Bitbucket="bitbucket",r.AzureDevOps="azureDevOps",r),a=((s=a||{}).BitbucketServer="bitbucket-server",s.GitHubEnterprise="github-enterprise",s.CloudGitHubEnterprise="cloud-github-enterprise",s.CloudGitLabSelfHosted="cloud-gitlab-self-hosted",s.GitLabSelfHosted="gitlab-self-hosted",s),l=((o=l||{}).Jira="jira",o.Trello="trello",o);let c=["jira"],u=["github","cloud-github-enterprise","gitlab","cloud-gitlab-self-hosted","azureDevOps","bitbucket","bitbucket-server","jira"];function h(e){return u.includes(e)}let d=[{id:"github",name:"GitHub",icon:"gl-provider-github",supports:["prs","issues"],requiresPro:!1},{id:"cloud-github-enterprise",name:"GitHub Enterprise",icon:"gl-provider-github",supports:["prs","issues"],requiresPro:!0},{id:"gitlab",name:"GitLab",icon:"gl-provider-gitlab",supports:["prs","issues"],requiresPro:!1},{id:"cloud-gitlab-self-hosted",name:"GitLab Self-Hosted",icon:"gl-provider-gitlab",supports:["prs","issues"],requiresPro:!0},{id:"azureDevOps",name:"Azure DevOps",icon:"gl-provider-azdo",supports:["prs","issues"],requiresPro:!0},{id:"bitbucket",name:"Bitbucket",icon:"gl-provider-bitbucket",supports:["prs","issues"],requiresPro:!1},{id:"bitbucket-server",name:"Bitbucket Data Center",icon:"gl-provider-bitbucket",supports:["prs"],requiresPro:!0},{id:"jira",name:"Jira",icon:"gl-provider-jira",supports:["issues"],requiresPro:!0}]},458:(e,t,i)=>{i.d(t,{c:()=>c,s:()=>GitContributor});var r=i(1398),s=i(6525),o=i(4941),n=i(4499),a=Object.defineProperty,l=Object.getOwnPropertyDescriptor;function c(e){return e instanceof GitContributor}let GitContributor=class GitContributor{constructor(e,t,i,r,s,o,n,a,l,c,u){this.repoPath=e,this.name=t,this.email=i,this.current=r,this.commits=s,this.latestCommitDate=o,this.firstCommitDate=n,this.stats=a,this.username=l,this.avatarUrl=c,this.id=u}get label(){return this.name??this.username}formatDate(e){return null!=this.latestCommitDate?(0,o.Yq)(this.latestCommitDate,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(e){return null!=this.latestCommitDate?(0,o.PI)(this.latestCommitDate,e):""}getAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.m_)(this.email,void 0,e)}getCoauthor(){return`${this.name}${this.email?` <${this.email}>`:""}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?l(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&a(t,i,o)})([(0,n.B)(e=>e??"MMMM Do, YYYY h:mma")],GitContributor.prototype,"formatDate",1)},495:(e,t,i)=>{i.d(t,{Kb:()=>m,dF:()=>f,dV:()=>EnrichmentService,pn:()=>g,u7:()=>w});var r=i(457),s=i(8336),o=i(4342),n=i(7005),a=i(5419),l=i(6103),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o),o};let EnrichmentService=class EnrichmentService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async delete(e,t){let i=(0,a.dQ)();try{let i=await this.connection.fetchGkApi(`v1/enrich-items/${e}`,{method:"DELETE"});if(!i.ok)throw Error(`Unable to ${t} item '${e}':  (${i.status}) ${i.statusText}`)}catch(e){throw n.Vy.error(e,i),e}}async get(e,t){let i=(0,a.dQ)();try{let i=await this.connection.fetchGkApi("v1/enrich-items",{method:"GET"});if(t?.isCancellationRequested)throw new s.AL;let r=await i.json();if(t?.isCancellationRequested)throw new s.AL;return null==e?r.data:r.data.filter(t=>t.type===e)}catch(e){if(e instanceof s.WT)return[];throw n.Vy.error(e,i),e}}getPins(e){return this.get("pin",e)}getSnoozed(e){return this.get("snooze",e)}async pinItem(e){let t=(0,a.dQ)();try{if(!await (0,l.G5)(this.container,"Pinning is a Preview feature and requires an account.",{source:"launchpad",detail:"pin"}))throw Error("Unable to pin item: account required");let t={provider:e.provider,entityType:e.type,entityId:e.id,entityUrl:e.url},i=await this.connection.fetchGkApi("v1/enrich-items/pin",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw Error(`Unable to pin item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw n.Vy.error(e,t),e}}unpinItem(e){return this.delete(e,"unpin")}async snoozeItem(e){let t=(0,a.dQ)();try{if(!await (0,l.G5)(this.container,"Snoozing is a Preview feature and requires an acccount.",{source:"launchpad",detail:"snooze"}))throw Error("Unable to snooze item: subscription required");let t={provider:e.provider,entityType:e.type,entityId:e.id,entityUrl:e.url};null!=e.expiresAt&&(t.expiresAt=e.expiresAt);let i=await this.connection.fetchGkApi("v1/enrich-items/snooze",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw Error(`Unable to snooze item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw n.Vy.error(e,t),e}}unsnoozeItem(e){return this.delete(e,"unsnooze")}};h([(0,o.Rm)()],EnrichmentService.prototype,"get",1),h([(0,o.Rm)()],EnrichmentService.prototype,"getPins",1),h([(0,o.Rm)()],EnrichmentService.prototype,"getSnoozed",1),h([(0,o.Rm)({args:{0:e=>`${e.id} (${e.provider} ${e.type})`}})],EnrichmentService.prototype,"pinItem",1),h([(0,o.Rm)()],EnrichmentService.prototype,"unpinItem",1),h([(0,o.Rm)({args:{0:e=>`${e.id} (${e.provider} ${e.type})`}})],EnrichmentService.prototype,"snoozeItem",1),h([(0,o.Rm)()],EnrichmentService.prototype,"unsnoozeItem",1);let d={"azure-devops":"azure",bitbucket:"bitbucket","bitbucket-server":"bitbucket",custom:void 0,gerrit:void 0,gitea:void 0,github:"github","cloud-github-enterprise":"github","cloud-gitlab-self-hosted":"gitlab",gitlab:"gitlab","google-source":void 0},p={[r.Q7.AzureDevOps]:"azure",[r.Q7.GitLab]:"gitlab",[r.Q7.GitHub]:"github",[r.Q7.Bitbucket]:"bitbucket",[r.PY.CloudGitHubEnterprise]:"github",[r.PY.GitHubEnterprise]:"github",[r.PY.CloudGitLabSelfHosted]:"gitlab",[r.PY.GitLabSelfHosted]:"gitlab",[r.PY.BitbucketServer]:"bitbucket",[r.tp.Jira]:"jira",[r.tp.Trello]:"trello"};function g(e){let t=d[e];if(null==t)throw Error(`Unknown remote provider '${e}'`);return t}function m(e){return null!=d[e]}function f(e){return null!=p[e]}function w(e){let t=p[e];if(null==t)throw Error(`Unknown integration id '${e}'`);return t}},655:(e,t,i)=>{i.d(t,{SD:()=>l,o:()=>c,wt:()=>a});var r=i(1398),s=i(4301);let o=new Map,n=new r.EventEmitter,a=n.event;function l(e,t){return o.get(e)??t}async function c(e,t){o.get(e)!==t&&(null==t?o.delete(e):o.set(e,t),await (0,s.S4)("setContext",e,t??void 0),n.fire(e))}},710:(e,t,i)=>{function r(e){return null!=e&&"webview"in e&&null!=e.webview}function s(e){return null!=e&&"webview"in e&&null!=e.webview&&"webviewItem"in e}function o(e){return null!=e&&"webview"in e&&null!=e.webview&&"webviewItemGroup"in e}function n(e){return JSON.stringify(e)}i.d(t,{C9:()=>n,PH:()=>o,RR:()=>r,sc:()=>s})},778:(e,t,i)=>{i.d(t,{Z5:()=>o,b3:()=>n,y1:()=>s});var r=i(5576);async function s(e,t,i){let[s,a,l]=await Promise.allSettled([e.git.branches(t.repoPath).getBaseBranchName?.(t.name),o(e,t.repoPath,t.getRemoteName()),n(e,t,{cancellation:i?.cancellation,timeout:i?.timeout})]),c=(0,r.Ro)(s);return{baseBranch:c,defaultBranch:(0,r.Ro)(a),targetBranch:(0,r.Ro)(l)??{value:void 0,paused:!1}}}async function o(e,t,i,r){let s=await e.git.branches(t).getDefaultBranchName(i);if(null!=s)return s;let o=await e.git.remotes(t).getBestRemoteWithIntegration();if(null==o)return;let n=await o.getIntegration(),a=await n?.getDefaultBranch?.(o.provider.repoDesc,r);return a&&`${o.name}/${a?.name}`}async function n(e,t,i){let s=await e.git.branches(t.repoPath).getTargetBranchName?.(t.name);return null!=s?{value:s,paused:!1}:i?.cancellation?.isCancellationRequested?{value:void 0,paused:!1}:(0,r.wW)((i?.associatedPullRequest??t?.getAssociatedPullRequest())?.then(i=>{if(i?.refs?.base==null)return;let r=`${t.getRemoteName()}/${i.refs.base.branch}`;return e.git.branches(t.repoPath).setTargetBranchName?.(t.name,r),r}),i?.cancellation,i?.timeout)}},786:(e,t,i)=>{i.d(t,{VV:()=>GitDocumentState,_j:()=>g});var r=i(3088),s=i(1078),o=i(6612),n=i(4342),a=i(6851),l=i(7005),c=i(5419),u=Object.defineProperty,h=Object.getOwnPropertyDescriptor,d=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};let GitDocumentState=class GitDocumentState{blameCache=new Map;diffCache=new Map;logCache=new Map;clearBlame(e){if(null==e){this.blameCache.clear();return}this.blameCache.delete(e)}clearDiff(e){if(null==e){this.diffCache.clear();return}this.diffCache.delete(e)}clearLog(e){if(null==e){this.logCache.clear();return}this.logCache.delete(e)}getBlame(e){return this.blameCache.get(e)}getDiff(e){return this.diffCache.get(e)}getLog(e){return this.logCache.get(e)}setBlame(e,t){if(null==t){this.blameCache.delete(e);return}this.blameCache.set(e,t)}setDiff(e,t){if(null==t){this.diffCache.delete(e);return}this.diffCache.set(e,t)}setLog(e,t){if(null==t){this.logCache.delete(e);return}this.logCache.set(e,t)}};let p=class{constructor(e,t,i,r,s){this.container=e,this.tracker=t,this.document=i,this._onDidChangeBlameState=r,this.dirty=s}static async create(e,t,i,r,s,o){let n=new p(e,t,i,r,o);return await n.initialize(s),n}state;_disposable;_disposed=!1;_tracked=!1;_pendingUpdates;_updateDebounced;_uri;dispose(){this.state=void 0,this._disposed=!0,this._disposable?.dispose()}_loading=!1;async initialize(e){this._uri=await r.nk.fromUri(this.document.uri),!this._disposed&&(this._pendingUpdates={...this._pendingUpdates,reason:"initialize",forceDirtyIdle:!0},e&&(this._loading=!0,this.update().finally(()=>this._loading=!1)))}get blameable(){return null==this._blameFailure&&this._tracked}get canDirtyIdle(){if(!this.document.isDirty)return!1;let e=s.H.get("advanced.blame.sizeThresholdAfterEdit");return!(e>0&&this.document.lineCount>e)}_dirtyIdle=!1;setDirtyIdle(){return this._dirtyIdle=this.canDirtyIdle,this._dirtyIdle}_forceDirtyStateChangeOnNextDocumentChange=!1;get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}get lineCount(){return this.document.lineCount}get uri(){return this._uri}async getStatus(){return null!=this._pendingUpdates&&await this.update(),{blameable:this.blameable,tracked:this._tracked,dirtyIdle:this._dirtyIdle}}is(e){return e===this.document}refresh(e){if(null==this._pendingUpdates&&"visible"===e)return;let t=(0,c.dQ)();switch(this._blameFailure=void 0,this._dirtyIdle=!1,null!=this.state&&(this.state=void 0,l.Vy.log(t,`Reset state, reason=${e}`)),e){case"changed":return;case"saved":this._pendingUpdates={...this._pendingUpdates,reason:e,forceBlameChange:!0};break;case"repositoryChanged":this._pendingUpdates={...this._pendingUpdates,reason:e}}(0,o.G1)(this.document)&&"visible"!==e?this.update():(0,o.LH)(this.document)&&(this._updateDebounced??=(0,a.s)(this.update.bind(this),100),this._updateDebounced())}_blameFailure;setBlameFailure(e){let t=this.blameable;this._blameFailure=e,t&&(this._pendingUpdates={...this._pendingUpdates,reason:"blame-failed",forceBlameChange:!0},(0,o.G1)(this.document)&&this.update())}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}async update(){let e=this._pendingUpdates;if(this._pendingUpdates=void 0,this._disposed||null==this._uri){this._tracked=!1;return}this._dirtyIdle=!!(this.document.isDirty&&e?.forceDirtyIdle&&this.canDirtyIdle);let t=e?.forceBlameChange?void 0:this.blameable,i=this.container.git.getRepository(this._uri);if(this._tracked=null!=i&&await this.container.git.isTracked(this._uri),this.tracker.updateContext(this.document.uri,this.blameable,this._tracked),!this._loading&&t!==this.blameable){let e={editor:(0,o.rp)(this.document),document:this,blameable:this.blameable};this._onDidChangeBlameState(e)}}};async function g(e,t,i,r,s,o){return p.create(e,t,i,r,s,o)}d([(0,n.Yz)()],p.prototype,"initialize",1),d([(0,n.Yz)()],p.prototype,"refresh",1),d([(0,n.Yz)()],p.prototype,"update",1),p=d([(0,n.Is)((e,t)=>`${t}(${l.Vy.toLoggable(e.document)})`)],p)},857:e=>{e.exports=require("os")},861:(e,t,i)=>{i.d(t,{l:()=>GitStatus});var r=i(4499),s=i(3934),o=i(3711),n=i(889),a=i(1079),l=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o};let GitStatus=class GitStatus{constructor(e,t,i,r,s,n,a=!1){this.container=e,this.repoPath=t,this.branch=i,this.sha=r,this.files=s,this.upstream=n,this.rebasing=a,this.detached=(0,o.xM)(i),this.detached&&(this.branch=(0,o.n$)(this.sha))}detached;get branchStatus(){return null==this.upstream?this.detached?"detached":"local":this.upstream.missing?"missingUpstream":this.upstream.state.ahead&&this.upstream.state.behind?"diverged":this.upstream.state.ahead?"ahead":this.upstream.state.behind?"behind":"upToDate"}get hasChanges(){return 0!==this.files.length}get hasConflicts(){return this.files.some(e=>e.conflicted)}get conflicts(){return this.files.filter(e=>e.conflicted)}get hasUntrackedChanges(){return this.files.some(e=>e.workingTreeStatus===a.KZ.Untracked)}get untrackedChanges(){return this.files.filter(e=>e.workingTreeStatus===a.KZ.Untracked)}get hasWorkingTreeChanges(){return this.files.some(e=>null!=e.workingTreeStatus)}get workingTreeChanges(){return this.files.filter(e=>null!=e.workingTreeStatus)}get ref(){return this.detached?this.sha:this.branch}computeWorkingTreeStatus(){let e=0,t=0,i=0,r=0,s=0,o=0,n=0,l=0,c=0,u=[],h=[],d=[];for(let p of this.files){switch(p.conflictStatus){case void 0:break;case a.Vk.AddedByBoth:case a.Vk.AddedByUs:case a.Vk.AddedByThem:e++,h.push(p);break;case a.Vk.DeletedByBoth:case a.Vk.DeletedByUs:case a.Vk.DeletedByThem:t++;break;default:i++,u.push(p)}switch(p.indexStatus){case void 0:break;case a.NO.Added:r++,h.push(p);break;case a.NO.Deleted:l++;break;default:o++,h.push(p)}switch(p.workingTreeStatus){case void 0:case a.KZ.Ignored:break;case a.KZ.Added:case a.KZ.Untracked:s++,d.push(p);break;case a.KZ.Deleted:c++;break;default:n++,d.push(p)}}let p=e+i+t,g=r+o+l,m=s+n+c;return{conflicted:p,conflictedAddsAndChanges:u,conflictedStatus:p>0?`+${e} ~${i} -${t}`:"",staged:g,stagedStatus:g>0?`+${r} ~${o} -${l}`:"",stagedAddsAndChanges:h,unstaged:m,unstagedStatus:m>0?`+${s} ~${n} -${c}`:"",unstagedAddsAndChanges:d}}getDiffStatus(){let e={added:0,deleted:0,changed:0};if(0===this.files.length)return e;for(let t of this.files)switch(t.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}return e}getFormattedDiffStatus({compact:e,empty:t,expand:i,prefix:r="",separator:o=" ",suffix:n=""}={}){let{added:a,changed:l,deleted:c}=this.getDiffStatus();if(0===a&&0===l&&0===c)return t??"";if(i){let e="";return a&&(e+=`${(0,s.td)("file",a)} added`),l&&(e+=`${0===e.length?"":o}${(0,s.td)("file",l)} changed`),c&&(e+=`${0===e.length?"":o}${(0,s.td)("file",c)} deleted`),`${r}${e}${n}`}let u="";return e?(0!==a&&(u+=`+${a}`),0!==l&&(u+=`${0===u.length?"":o}~${l}`),0!==c&&(u+=`${0===u.length?"":o}-${c}`)):u+=`+${a}${o}~${l}${o}-${c}`,`${r}${u}${n}`}async getRemote(){if(null==this.upstream)return;let e=await this.container.git.remotes(this.repoPath).getRemotesWithProviders();if(0===e.length)return;let t=(0,o.Zq)(this.upstream?.name);return e.find(e=>e.name===t)}getUpstreamStatus(e){return(0,n.u)(this.upstream,e)}};u([(0,r.B)()],GitStatus.prototype,"hasConflicts",1),u([(0,r.B)()],GitStatus.prototype,"conflicts",1),u([(0,r.B)()],GitStatus.prototype,"hasUntrackedChanges",1),u([(0,r.B)()],GitStatus.prototype,"untrackedChanges",1),u([(0,r.B)()],GitStatus.prototype,"hasWorkingTreeChanges",1),u([(0,r.B)()],GitStatus.prototype,"workingTreeChanges",1),u([(0,r.B)()],GitStatus.prototype,"computeWorkingTreeStatus",1),u([(0,r.B)()],GitStatus.prototype,"getDiffStatus",1),u([(0,r.B)()],GitStatus.prototype,"getRemote",1)},889:(e,t,i)=>{i.d(t,{u:()=>o});var r=i(1518),s=i(3934);function o(e,t){if(null==e)return t?.empty??"";let{state:{ahead:i,behind:o}}=e;if(!o&&!i)return t?.empty??"";let n=!0,a=!1,l=!1,c="",u=" ",h="";if(null!=t&&({count:n=!0,expand:a=!1,icons:l=!1,prefix:c="",separator:u=" ",suffix:h=""}=t),a){let t="";return e.missing?t="missing":(o&&(t+=`${(0,s.td)("commit",o,{infix:l?"$(arrow-down) ":void 0})} behind`),i&&(t+=`${0===t.length?"":u}${(0,s.td)("commit",i,{infix:l?"$(arrow-up) ":void 0})} ahead`,h.includes(e.name.split("/")[0])&&(t+=" of"))),`${c}${t}${h}`}let d=n&&!e.missing;return`${c}${d?o:""}${d||0!==o?r.EO.ArrowDown:""}${u}${d?i:""}${d||0!==i?r.EO.ArrowUp:""}${h}`}},892:(e,t,i)=>{i.d(t,{Ay:()=>u,Bo:()=>c,E$:()=>l,EG:()=>h,Kl:()=>a,eC:()=>o,pW:()=>s,x1:()=>n});var r=i(7747);function s(e){let t=0;for(let i of e)t+=i.length;return t}function o(e){return null==e?void 0:Array.isArray(e)?e:[e]}function n(e,t){let i=0;return e.reduce((e,r)=>{let s=t(r,i++);return null!=s&&e.push(s),e},[])}function a(e,t){let i=e.length;for(;i--;)if(t(e[i],i,e))return i;return -1}function l(e,t){let i=[],r=e.length;e:for(let s of e[0]){let o=r-1;for(;o--;)if(!e[o+1].some(e=>t(e,s)))break e;i.some(e=>t(e,s))||i.push(s)}return i}function c(e){return"string"==typeof e[0]}function u(e,t,i,r=!1,s){let o={name:"",relativePath:"",children:new Map,descendants:[]},n=e.reduce((e,r)=>{let s=e,o="";for(let e of t(r)){o=i(o,e),void 0===s.children&&(s.children=new Map);let t=s.children.get(e);void 0===t&&(t={name:e,relativePath:o,parent:s,children:void 0,descendants:void 0},s.children.set(e,t)),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(r),s=t}return s.value=r,e},o);return r&&(n=function e(t,i,r=!0,s){if(void 0===t.children)return t;let o=[...t.children.values()];for(let t of o)e(t,i,!1,s);if(!r&&1===o.length){let e=o[0];(void 0===e.value||s?.(e.value))&&(t.name=i(t.name,e.name),t.relativePath=e.relativePath,t.children=e.children,t.descendants=e.descendants,t.value=e.value)}return t}(n,i,!0,s)),n}function h(e,t){return(0,r.fj)(new Set(e),t)}},905:(e,t,i)=>{i.d(t,{N:()=>v});var r=i(1398),s=i(8191),o=i(3088),n=i(1974),a=i(2636),l=i(9403),c=i(4301),u=i(9439),h=i(7005),d=i(4338),p=i(2713),g=i(5813),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};let v=class extends d.dY{constructor(e){super("gitlens.showQuickCommitFileDetails"),this.container=e}static createMarkdownCommandLink(e){return(0,u.J)("gitlens.showQuickCommitFileDetails",e)}async preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),"viewItem"===e.type&&(t={...t,sha:e.node.uri.sha},(0,g.j7)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let a;if(null!=(t=(0,p.q)(t,e))){if(null!=(i={...i}).revisionUri?(a=o.nk.fromRevisionUri(r.Uri.parse(i.revisionUri,!0)),i.sha=a.sha):a=await o.nk.fromUri(t),null==i.sha){let t=i.line??e?.selection.active.line;if(null==t)return;try{let e=await this.container.git.getBlameForLine(a,t);if(null==e){(0,l.gD)("Unable to show commit file details");return}if(e.commit.isUncommitted){(0,l.CR)("Unable to show commit file details");return}i.sha=e.commit.sha,i.commit=e.commit}catch(e){h.Vy.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),(0,l.qQ)("Unable to show commit file details");return}}try{if(null==i.commit&&(null!=i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),null==i.commit&&(i.fileLog=void 0)),null==i.fileLog)){let e=i.commit?.repoPath??a.repoPath;if(i.commit=await this.container.git.commits(e).getCommitForFile(a,i.sha),null==i.commit){(0,l.pW)("Unable to show commit file details");return}}if(null==i.commit){(0,l.pW)("Unable to show commit file details");return}let e=i.commit?.file?.path??a.fsPath;(0,n.WM)(i.commit)&&null==i.commit.files&&await i.commit.ensureFullDetails(),await (0,s.b)({command:"show",state:{repo:i.commit.repoPath,reference:i.commit,fileName:e}})}catch(e){h.Vy.error(e,"ShowQuickCommitFileDetailsCommand"),(0,l.qQ)("Unable to show commit file details")}}}};v=w([(0,c.G5)()],v);let y=class extends d.dY{constructor(e){super(["gitlens.showQuickRevisionDetails","gitlens.showQuickRevisionDetailsInDiffLeft","gitlens.showQuickRevisionDetailsInDiffRight"]),this.container=e}async execute(e,t){if(null!=(t=(0,p.q)(t,e)))try{let e=await o.nk.fromUri(t);if(e?.sha==null)return;await (0,s.b)({command:"show",state:{repo:e.repoPath,reference:(0,a.kA)(e.sha,e.repoPath,{refType:"revision"}),fileName:e.fsPath}})}catch(e){h.Vy.error(e,"ShowQuickCommitRevisionCommand"),(0,l.qQ)("Unable to show commit details")}}};y=w([(0,c.G5)()],y)},909:(e,t,i)=>{i.d(t,{W:()=>ContributorNode});var r=i(1398),s=i(6525),o=i(1518),n=i(1078),a=i(4941),l=i(3500),c=i(4342),u=i(7747),h=i(3934),d=i(9642),p=i(2199),g=i(6339),m=i(3957),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o};let ContributorNode=class ContributorNode extends d.eu{constructor(e,t,i,r,s){super("contributor",e,t,i),this.parent=i,this.contributor=r,this.options=s,this.updateContext({contributor:r}),this._uniqueId=(0,d.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(e){let t=`${this.contributor.name}${this.contributor.email?` <${this.contributor.email}>`:""}`;return"markdown"===e&&this.contributor.email?`[${t}](mailto:${this.contributor.email})`:t}getUrl(){return this.contributor.email?`mailto:${this.contributor.email}`:""}get repoPath(){return this.contributor.repoPath}async getChildren(){let e=await this.getLog();if(null==e)return[new g.S2(this.view,this,"No commits could be found.")];let t=await this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath),i=[...(0,m.h)((0,u.Tj)(e.commits.values(),e=>new p.e(this.view,this,e,void 0,void 0,t)),this)];return e.hasMore&&i.push(new g.cb(this.view,this,i[i.length-1])),i}async getTreeItem(){let e,t,i=this.options?.presence?.get(this.contributor.email),l=null!=this.contributor.stats?` (${(0,h.td)("file",this.contributor.stats.files)}, +${(0,a.bH)(this.contributor.stats.additions)} -${(0,a.bH)(this.contributor.stats.additions)} ${(0,h.td)("line",this.contributor.stats.additions+this.contributor.stats.deletions,{only:!0})})`:"",c=new r.TreeItem(this.contributor.current?`${this.contributor.label} (you)`:this.contributor.label,r.TreeItemCollapsibleState.Collapsed);if(c.id=this.id,c.contextValue=this.contributor.current?`${d.U0.Contributor}+current`:d.U0.Contributor,c.description=`${null!=i&&"offline"!==i.status?`${i.statusText} ${o.EO.Space}${o.EO.Dot}${o.EO.Space} `:""}${null!=this.contributor.latestCommitDate?`${this.contributor.formatDateFromNow()}, `:""}${(0,h.td)("commit",this.contributor.commits)}${l}`,this.view.config.avatars){let r=n.H.get("hovers.avatarSize");if(e=await this.contributor.getAvatarUri({defaultStyle:n.H.get("defaultGravatarsStyle"),size:r}),null!=i){let o=`${this.contributor.commits?"You are":`${this.contributor.label} is`} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;t=`![${o}](${e.toString(!0)}|width=${r},height=${r} "${o}")![${o}](${(0,s.Sk)(i.status)} "${o}")`}else t=`![${this.contributor.label}](${e.toString(!0)}|width=${r},height=${r} "${this.contributor.label}")`}let u=null!=this.contributor.stats?`\\
${(0,h.td)("file",this.contributor.stats.files)} changed, ${(0,h.td)("addition",this.contributor.stats.additions)}, ${(0,h.td)("deletion",this.contributor.stats.deletions)}`:"",p=this.contributor.email?`__[${this.contributor.name}](mailto:${this.contributor.email} "Email ${this.contributor.label} (${this.contributor.email})")__`:`__${this.contributor.label}__`,g=null!=this.contributor.latestCommitDate?`Last commit ${this.contributor.formatDateFromNow()} (${this.contributor.formatDate()})\\
`:"",m=new r.MarkdownString(`${null!=t?t:""} &nbsp;${p} 

${g}${(0,h.td)("commit",this.contributor.commits)}${u}`);return m.supportHtml=!0,m.isTrusted=!0,c.tooltip=m,c.iconPath=e,c}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return this._log??=await this.view.container.git.commits(this.uri.repoPath).getLog(this.options?.ref,{all:this.options?.all,limit:this.limit??this.view.config.defaultItemLimit,merges:this.options?.showMergeCommits,authors:[{name:this.contributor.name,email:this.contributor.email,username:this.contributor.username,id:this.contributor.id}]}),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};v([(0,l.G)(),(0,c.Yz)()],ContributorNode.prototype,"refresh",1),v([(0,l.G)()],ContributorNode.prototype,"loadMore",1)},926:(e,t,i)=>{i.d(t,{Dz:()=>c,H8:()=>u,MA:()=>p,XN:()=>m,aM:()=>g,cG:()=>h});var r=i(4478),s=i(457),o=i(7005),n=i(5952),a=i(6461);function l(e){return void 0!==e.uuid}function c(e){let t=r.EntityType.Issue;"pullrequest"===e.type&&(t=r.EntityType.PullRequest);let i=function(e){switch(e){case"github":return r.EntityIdentifierProviderType.Github;case"cloud-github-enterprise":return r.EntityIdentifierProviderType.GithubEnterprise;case"cloud-gitlab-self-hosted":return r.EntityIdentifierProviderType.GitlabSelfHosted;case"gitlab":return r.EntityIdentifierProviderType.Gitlab;case"jira":return r.EntityIdentifierProviderType.Jira;case"azure":case"azureDevOps":case"azure-devops":return r.EntityIdentifierProviderType.Azure;case"bitbucket":return r.EntityIdentifierProviderType.Bitbucket;case"bitbucket-server":return r.EntityIdentifierProviderType.BitbucketServer;default:throw Error(`Unknown provider type '${e}'`)}}(e.provider.id),s=null;i!==r.EntityIdentifierProviderType.Github||(0,a.EO)(e.provider.domain)||(i=r.EntityIdentifierProviderType.GithubEnterprise,s=e.provider.domain),i!==r.EntityIdentifierProviderType.Gitlab||(0,a.Gz)(e.provider.domain)||(i=r.EntityIdentifierProviderType.GitlabSelfHosted,s=e.provider.domain);let o=null,n=null,c=null,u=null;if(i===r.EntityIdentifierProviderType.Jira){if("issue"!==e.type||null==e.project)throw Error("Jira issues must have a project");o=e.project.id,n=e.project.resourceId}else if(i===r.EntityIdentifierProviderType.Azure){let i=l(e)?e.underlyingPullRequest?.project:e.project;if(null==i)throw Error("Azure issues and PRs must have a project to be encoded");if(o=i.id,c=i.resourceName,u=l(e)?e.underlyingPullRequest?.repository.id:e.repository?.id,t===r.EntityType.PullRequest&&null==u)throw Error("Azure PRs must have a repository ID to be encoded")}else(i===r.EntityIdentifierProviderType.Bitbucket||i===r.EntityIdentifierProviderType.BitbucketServer)&&(u=l(e)?e.underlyingPullRequest?.repository.id:e.repository?.id);let h=l(e)?e.graphQLId:e.nodeId;return i===r.EntityIdentifierProviderType.Azure&&(h=l(e)?e.underlyingPullRequest?.id:e.id),{accountOrOrgId:null,organizationName:c,projectId:o,repoId:u??null,resourceId:n,provider:i,entityType:t,version:r.EntityVersion.One,domain:s,entityId:h}}function u(e){switch(e.provider){case r.EntityIdentifierProviderType.Github:return s.Q7.GitHub;case r.EntityIdentifierProviderType.GithubEnterprise:return d(e)&&e.metadata.isCloudEnterprise?s.PY.CloudGitHubEnterprise:s.PY.GitHubEnterprise;case r.EntityIdentifierProviderType.Gitlab:return s.Q7.GitLab;case r.EntityIdentifierProviderType.GitlabSelfHosted:return d(e)&&e.metadata.isCloudEnterprise?s.PY.CloudGitLabSelfHosted:s.PY.GitLabSelfHosted;case r.EntityIdentifierProviderType.Jira:return s.tp.Jira;case r.EntityIdentifierProviderType.Azure:return s.Q7.AzureDevOps;case r.EntityIdentifierProviderType.Bitbucket:return s.Q7.Bitbucket;case r.EntityIdentifierProviderType.BitbucketServer:return d(e)&&e.metadata.isCloudEnterprise?s.PY.BitbucketServer:void 0;default:return}}function h(e,t){let i={key:t.key,name:t.name,id:void 0,owner:void 0};if((0,n.yK)(t))i.owner=t.owner;else if((0,n.dQ)(t))i.id=t.id;else throw Error("Invalid owner");return{...c(e),metadata:{id:e.id,owner:i,createdDate:new Date().toISOString(),isCloudEnterprise:(0,a.Ii)(e.provider.id)}}}function d(e){return null!=e&&"object"==typeof e&&"provider"in e&&null!=e.provider&&"entityType"in e&&null!=e.entityType&&"version"in e&&null!=e.version&&"entityId"in e&&null!=e.entityId&&"metadata"in e&&null!=e.metadata&&"object"==typeof e.metadata&&"id"in e.metadata&&null!=e.metadata.id&&"owner"in e.metadata&&null!=e.metadata.owner&&"createdDate"in e.metadata&&null!=e.metadata.createdDate}function p(e){let t=JSON.parse(e);if(!(Array.isArray(t)&&t.every(e=>d(e))))return o.Vy.error("Invalid entity identifiers in git config"),[];for(let e of t)if(e.provider===r.EntityIdentifierProviderType.Jira&&(null==e.resourceId||null==e.projectId)){o.Vy.error("Invalid Jira issue in git config");continue}return t}async function g(e,t){if(t.entityType!==r.EntityType.Issue||t.provider!==r.EntityIdentifierProviderType.Jira&&t.provider!==r.EntityIdentifierProviderType.Github&&t.provider!==r.EntityIdentifierProviderType.Gitlab&&t.provider!==r.EntityIdentifierProviderType.GithubEnterprise&&t.provider!==r.EntityIdentifierProviderType.GitlabSelfHosted&&t.provider!==r.EntityIdentifierProviderType.Bitbucket&&t.provider!==r.EntityIdentifierProviderType.BitbucketServer&&t.provider!==r.EntityIdentifierProviderType.Azure)return;let i=u(t);if(null==i)return;let s=await e.integrations.get(i);if(null!=s)return s.getIssue({id:t.metadata.owner.id,key:t.metadata.owner.key,owner:t.metadata.owner.owner,name:t.metadata.owner.name},t.metadata.id)}function m(e){let t="azure"===e.provider.id||s.Q7.AzureDevOps||"azure-devops";return e.repository?{key:`${e.repository.owner}/${e.repository.repo}`,owner:e.repository.owner,name:e.repository.repo}:e.project?{key:t?e.project.id:e.project.resourceId,id:t?e.project.id:e.project.resourceId,owner:t?e.project.resourceName:void 0,name:t?e.project.name:e.project.resourceName}:void 0}},928:e=>{var t=Object.defineProperty,i=Object.getOwnPropertyDescriptor,r=Object.getOwnPropertyNames,s=Object.prototype.hasOwnProperty,o=(e,i)=>{for(var r in i)t(e,r,{get:i[r],enumerable:!0})},n={};o(n,{EntityIdentifierUtils:()=>a}),e.exports=((e,o,n,a)=>{if(o&&"object"==typeof o||"function"==typeof o)for(let l of r(o))s.call(e,l)||l===n||t(e,l,{get:()=>o[l],enumerable:!(a=i(o,l))||a.enumerable});return e})(t({},"__esModule",{value:!0}),n);var a={};o(a,{decode:()=>k,decodeV0:()=>S,encode:()=>C,validate:()=>b});var l=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.entityId)throw Error("Missing required fields for Azure DevOps issue uniqueId");let t=[];return t.push("azure"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Azure DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:null,entityId:e[6]}}},c=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.repoId||!e.entityId)throw Error("Missing required fields for Azure DevOps pull request uniqueId");let t=[];return t.push("azure"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<8)throw Error("Invalid Azure DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:e[6],entityId:e[7]}}},u=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},h=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},d=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},p=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},g=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},m=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},f=class{constructor(){}validate(e){if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.projectId||!e.entityId)throw Error("Missing required fields for Jira issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"jira"==e.provider?(t.push(""),t.push(e.resourceId)):(t.push(e.domain),t.push("")),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Jira issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:""==e[4]?null:e[4],accountOrOrgId:null,organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},w=class{constructor(){}validate(e){if(!e.accountOrOrgId)throw Error("accountOrOrgId is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.accountOrOrgId||!e.projectId||!e.entityId)throw Error("Missing required fields for Trello issue uniqueId");let t=[];return t.push("trello"),t.push("issue"),t.push("1"),t.push(""),t.push(e.accountOrOrgId),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Trello issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:e[4],organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},v=(e,t)=>{if("issue"!==t&&"pr"!==t)throw Error("unknown entityType");switch(e){case"azure":return"pr"===t?new c:new l;case"bitbucket":case"bitbucketServer":return"pr"===t?new h:new u;case"github":case"githubEnterprise":return"pr"===t?new p:new d;case"gitlab":case"gitlabSelfHosted":return"pr"===t?new m:new g;case"jira":case"jiraServer":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new f;case"trello":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new w;default:throw Error("unknown provider")}},y=e=>{if(!e.entityType)throw Error("entityType is required");if(!e.provider)throw Error("provider is required");if(!e.entityId)throw Error("entityID is required")},b=e=>{if("0"===e.version){y(e);return}v(e.provider,e.entityType).validate(e)},C=e=>v(e.provider,e.entityType).encode(e),k=e=>{let t=JSON.parse(e);if(!t||!t.length)throw Error("invalid issue unique id");return v(t[0],t[1]).decode(t)},S=(e,t,i)=>{if(!i)throw Error("entityID is required");try{let r=JSON.parse(i);if(!r||!r.length)throw Error("Invalid pull request uniqueId");let s=[e,t,"0",...r];return v(e,t).decode(s)}catch{return{provider:e,entityType:t,version:"0",domain:"",resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:i}}}},932:e=>{e.exports=require("process")},998:(e,t,i)=>{i.d(t,{JB:()=>n,d5:()=>a,sN:()=>o});var r=i(8238),s=i(9642);function o(e,t){return null!=e&&e instanceof s.eu&&(null==t||(Array.isArray(t)?t.includes(e.type):e.type===t))}function n(e){return o(e,"folder")||o(e,r.fc)}function a(e){return o(e,r.Oi)}},1078:(e,t,i)=>{i.d(t,{H:()=>n,V:()=>Configuration});var r=i(1398),s=i(1518),o=i(3958);let Configuration=class Configuration{static configure(e){e.subscriptions.push(r.workspace.onDidChangeConfiguration(n.onConfigurationChanged,n))}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeAny=new r.EventEmitter;get onDidChangeAny(){return this._onDidChangeAny.event}onConfigurationChanged(e){this._onDidChangeAny.fire(e),e.affectsConfiguration(s.Od)&&(this._overrides?.onDidChange!=null&&(e=this._overrides.onDidChange(e)),this._onDidChange.fire(e))}_overrides;dispose(){this._onDidChange.dispose(),this._onDidChangeAny.dispose()}applyOverrides(e){this._overrides=e}clearOverrides(){null!=this._overrides&&(this._overrides.get=void 0,this._overrides.getAll=void 0,queueMicrotask(()=>this._overrides=void 0))}get(e,t,i,o){let n=void 0===i?r.workspace.getConfiguration(s.Od,t).get(e):r.workspace.getConfiguration(s.Od,t).get(e,i);return o||this._overrides?.get==null?n:this._overrides.get(e,n)}getAll(e){let t=r.workspace.getConfiguration().get(s.Od);return e||this._overrides?.getAll==null?t:this._overrides.getAll(t)}getAny(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}getCore(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}changed(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(`${s.Od}.${t}`,i)):e.affectsConfiguration(`${s.Od}.${t}`,i))}changedAny(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(t,i)):e.affectsConfiguration(t,i))}changedCore(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(t,i)):e.affectsConfiguration(t,i))}inspect(e,t){return r.workspace.getConfiguration(s.Od,t).inspect(void 0===e?s.Od:e)}inspectAny(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}inspectCore(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}isUnset(e,t){let i=this.inspect(e,t);return void 0===i.workspaceFolderValue&&void 0===i.workspaceValue&&void 0===i.globalValue}async migrate(e,t,i){let s=this.inspect(e);if(void 0===s)return!1;let o=!1;return void 0!==s.globalValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),o=!0),void 0!==s.workspaceValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),o=!0),void 0!==s.workspaceFolderValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder),o=!0),o||void 0===i.fallbackValue||(await this.update(t,i.fallbackValue,r.ConfigurationTarget.Global),o=!0),o}async migrateIfMissing(e,t,i){let s=this.inspect(e);if(void 0===s)return;let o=this.inspect(t);void 0!==s.globalValue&&o?.globalValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),void 0!==s.workspaceValue&&o?.workspaceValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),void 0!==s.workspaceFolderValue&&o?.workspaceFolderValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder)}matches(e,t,i){return e===t}name(e){return e}update(e,t,i){return r.workspace.getConfiguration(s.Od).update(e,t,i)}updateAny(e,t,i,s){return r.workspace.getConfiguration(void 0,i===r.ConfigurationTarget.Global?void 0:s).update(e,t,i)}updateEffective(e,t){let i=this.inspect(e);return void 0!==i.workspaceFolderValue?t===i.workspaceFolderValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.WorkspaceFolder):void 0!==i.workspaceValue?t===i.workspaceValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.Workspace):i.globalValue===t||void 0===i.globalValue&&t===i.defaultValue?Promise.resolve(void 0):this.update(e,(0,o.t7)(t,i.defaultValue)?void 0:t,r.ConfigurationTarget.Global)}};let n=new Configuration},1079:(e,t,i)=>{i.d(t,{KZ:()=>l,NO:()=>a,Vk:()=>n});var r,s,o,n=((r=n||{}).AddedByBoth="AA",r.AddedByUs="AU",r.AddedByThem="UA",r.DeletedByBoth="DD",r.DeletedByUs="DU",r.DeletedByThem="UD",r.ModifiedByBoth="UU",r),a=((s=a||{}).Modified="M",s.Added="A",s.Deleted="D",s.Renamed="R",s.Copied="C",s.Unchanged=".",s.Untracked="?",s.Ignored="!",s.UpdatedButUnmerged="U",s),l=((o=l||{}).Modified="M",o.Added="A",o.Deleted="D",o.Untracked="?",o.Ignored="!",o)},1081:(e,t,i)=>{i.d(t,{KW:()=>c,Xn:()=>a,ZE:()=>u,tB:()=>l,uO:()=>h,xG:()=>d});var r=i(1078),s=i(3934),o=i(458),n=i(5186);function a(e,t){switch((t={current:!0,groupByType:!0,orderBy:r.H.get("sortBranchesBy"),...t}).orderBy){case"date:asc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openedWorktreesByBranch?(t.openedWorktreesByBranch.has(e.id)?-1:1)-(t.openedWorktreesByBranch.has(i.id)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(t.groupByType?(i.remote?-1:1)-(e.remote?-1:1):0)||(null==e.date?-1:e.date.getTime())-(null==i.date?-1:i.date.getTime())||(0,s.wN)(e.name,i.name));case"name:asc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openedWorktreesByBranch?(t.openedWorktreesByBranch.has(e.id)?-1:1)-(t.openedWorktreesByBranch.has(i.id)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(t.groupByType?(i.remote?-1:1)-(e.remote?-1:1):0)||(0,s.wN)(e.name,i.name));case"name:desc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openedWorktreesByBranch?(t.openedWorktreesByBranch.has(e.id)?-1:1)-(t.openedWorktreesByBranch.has(i.id)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(t.groupByType?(i.remote?-1:1)-(e.remote?-1:1):0)||(0,s.wN)(i.name,e.name));default:return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openedWorktreesByBranch?(t.openedWorktreesByBranch.has(e.id)?-1:1)-(t.openedWorktreesByBranch.has(i.id)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(t.groupByType?(i.remote?-1:1)-(e.remote?-1:1):0)||(null==i.date?-1:i.date.getTime())-(null==e.date?-1:e.date.getTime())||(0,s.wN)(i.name,e.name))}}function l(e,t){t={picked:!0,current:!0,orderBy:r.H.get("sortContributorsBy"),...t};let i=e=>(0,o.c)(e)?e:e.item,n=(e,i)=>!t.picked||(0,o.c)(e)||(0,o.c)(i)?0:(e.picked?-1:1)-(i.picked?-1:1);switch(t.orderBy){case"count:asc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||e.commits-r.commits||(e.latestCommitDate?.getTime()??0)-(r.latestCommitDate?.getTime()??0)});case"date:desc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(r.latestCommitDate?.getTime()??0)-(e.latestCommitDate?.getTime()??0)||r.commits-e.commits});case"date:asc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(e.latestCommitDate?.getTime()??0)-(r.latestCommitDate?.getTime()??0)||r.commits-e.commits});case"name:asc":return e.sort((e,r)=>{let o=n(e,r);return e=i(e),r=i(r),o||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(0,s.wN)(e.name??e.username,r.name??r.username)});case"name:desc":return e.sort((e,r)=>{let o=n(e,r);return e=i(e),r=i(r),o||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(0,s.wN)(r.name??r.username,e.name??e.username)});case"score:desc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(r.stats?.contributionScore??0)-(e.stats?.contributionScore??0)||r.commits-e.commits||(r.latestCommitDate?.getTime()??0)-(e.latestCommitDate?.getTime()??0)});case"score:asc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(e.stats?.contributionScore??0)-(r.stats?.contributionScore??0)||e.commits-r.commits||(e.latestCommitDate?.getTime()??0)-(r.latestCommitDate?.getTime()??0)});default:return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||r.commits-e.commits||(r.latestCommitDate?.getTime()??0)-(e.latestCommitDate?.getTime()??0)})}}function c(e){return e.sort((e,t)=>(e.default?-1:1)-(t.default?-1:1)||("origin"===e.name?-1:1)-("origin"===t.name?-1:1)||("upstream"===e.name?-1:1)-("upstream"===t.name?-1:1)||(0,s.wN)(e.name,t.name))}function u(e,t){switch((t={orderBy:r.H.get("sortRepositoriesBy"),...t}).orderBy){case"name:asc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(0,s.wN)(e.name,t.name));case"name:desc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(0,s.wN)(t.name,e.name));case"lastFetched:asc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(e.lastFetchedCached??0)-(t.lastFetchedCached??0));case"lastFetched:desc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(t.lastFetchedCached??0)-(e.lastFetchedCached??0));default:return e}}function h(e,t){switch((t={orderBy:r.H.get("sortTagsBy"),...t}).orderBy){case"date:asc":return e.sort((e,t)=>(e.date?.getTime()??0)-(t.date?.getTime()??0));case"name:asc":return e.sort((e,t)=>(0,s.wN)(e.name,t.name));case"name:desc":return e.sort((e,t)=>(0,s.wN)(t.name,e.name));default:return e.sort((e,t)=>(t.date?.getTime()??0)-(e.date?.getTime()??0))}}function d(e,t){t={orderBy:r.H.get("sortBranchesBy"),...t};let i=e=>(0,n.M)(e)?e:e.item;switch(t.orderBy){case"date:asc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(e.isDefault?-1:1)-(t.isDefault?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||(null==e.date?-1:e.date.getTime())-(null==t.date?-1:t.date.getTime())||(0,s.wN)(e.name,t.name)));case"name:asc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(e.isDefault?-1:1)-(t.isDefault?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||("main"===e.name?-1:1)-("main"===t.name?-1:1)||("master"===e.name?-1:1)-("master"===t.name?-1:1)||("develop"===e.name?-1:1)-("develop"===t.name?-1:1)||(0,s.wN)(e.name,t.name)));case"name:desc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(e.isDefault?-1:1)-(t.isDefault?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||("main"===e.name?-1:1)-("main"===t.name?-1:1)||("master"===e.name?-1:1)-("master"===t.name?-1:1)||("develop"===e.name?-1:1)-("develop"===t.name?-1:1)||(0,s.wN)(t.name,e.name)));default:return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(e.isDefault?-1:1)-(t.isDefault?-1:1)||(null==t.date?-1:t.date.getTime())-(null==e.date?-1:e.date.getTime())||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||(0,s.wN)(t.name,e.name)))}}},1121:(e,t,i)=>{i.d(t,{F7:()=>l,It:()=>n,Je:()=>o,LT:()=>a,xq:()=>c});var r=i(457),s=i(1078);let o="did-authenticate-cloud-integration";function n(){return s.H.get("cloudIntegrations.enabled",void 0,!0)?r.rK:r.aT}function a(e){return n().includes(e)}let l={jira:r.tp.Jira,trello:r.tp.Trello,gitlab:r.Q7.GitLab,github:r.Q7.GitHub,githubEnterprise:r.PY.CloudGitHubEnterprise,gitlabSelfHosted:r.PY.CloudGitLabSelfHosted,bitbucket:r.Q7.Bitbucket,bitbucketServer:r.PY.BitbucketServer,azure:r.Q7.AzureDevOps},c={[r.tp.Jira]:"jira",[r.tp.Trello]:"trello",[r.Q7.GitLab]:"gitlab",[r.Q7.GitHub]:"github",[r.Q7.Bitbucket]:"bitbucket",[r.Q7.AzureDevOps]:"azure",[r.PY.CloudGitHubEnterprise]:"githubEnterprise",[r.PY.CloudGitLabSelfHosted]:"gitlabSelfHosted",[r.PY.BitbucketServer]:"bitbucketServer",[r.PY.GitHubEnterprise]:void 0,[r.PY.GitLabSelfHosted]:void 0}},1125:(e,t,i)=>{i.d(t,{t:()=>PageableResult});let PageableResult=class PageableResult{constructor(e,t){this.fetch=e,this.cached=t}cached;async *values(){if(null!=this.cached)for(let e of this.cached.values)yield e;let e=this.cached;for(;null==e||e.paging?.more;)for(let t of(e=await this.fetch(e?.paging),null==this.cached?this.cached=e:(this.cached.values.push(...e.values),this.cached.paging=e.paging),e.values))yield t}}},1192:(e,t,i)=>{i.d(t,{$5:()=>T,$s:()=>S,DD:()=>$,Di:()=>J,E9:()=>j,G4:()=>M,JX:()=>G,Kg:()=>x,Km:()=>U,MQ:()=>Q,P3:()=>k,Qv:()=>R,Tq:()=>F,Ux:()=>D,VX:()=>q,WD:()=>P,YF:()=>y,YS:()=>_,_c:()=>W,cs:()=>O,eU:()=>C,eX:()=>I,fl:()=>A,gV:()=>B,m:()=>N,nA:()=>E,tl:()=>H,uT:()=>b,vM:()=>L,wq:()=>V});var r=i(1398),s=i(1518),o=i(9703),n=i(2845),a=i(4301),l=i(1078),c=i(6612),u=i(5576),h=i(3088),d=i(1974),p=i(9349),g=i(6066),m=i(1920),f=i(3447),w=i(2636),v=i(8554);async function y(e,t,i){let s=!1,n=t.ref,a=i?.ref;if("string"!=typeof e){if("?"===e.status)n=`${n}^3`,s=!0;else if("A"===e.status)s=!0;else if("D"===e.status){let i=h.nk.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i)}catch{s=!0,[n,a]=[""===a?"HEAD":a??`${n}^`,n]}}}if(s){let i=h.nk.fromFile(e,t.repoPath);await o.m.instance.git.applyChangesToWorkingFile(i,n,a),await F(i,{preserveFocus:!0,preview:!1})}else await F(e,t,{preserveFocus:!0,preview:!1}),await o.m.instance.git.applyChangesToWorkingFile(h.nk.fromFile(e,t.repoPath,n),n,a)}async function b(e){await r.env.clipboard.writeText(e.ref)}async function C(e){let t;if((0,d.WM)(e))null==(t=e).message&&await t.ensureFullDetails();else if(null==(t=await o.m.instance.git.commits(e.repoPath).getCommit(e.ref)))return;let i=t.message??t.summary;await r.env.clipboard.writeText(i)}async function k(e,t,i,r,s){let{files:o,refs:n}=await Z(t,s);return i??=!l.H.get("views.openChangesInMultiDiffEditor"),r?.title||(r={...r,title:`Changes in ${(0,v.pV)(t.sha,{strings:{working:"Working Tree"}})}`}),P(e,o,n,i,r)}async function S(e){let{files:t}=await Z(e);if(await z(t,{message:`Are you sure you want to externally open the changes for each of the ${t.length} files?`,confirmButton:"Open Changes",threshold:10}))for(let i of t)D(i,e)}async function R(e,t,i,r,s){let{files:o}=await Z(t,s);return A(e,o,t,i??=!l.H.get("views.openChangesInMultiDiffEditor"),r)}async function P(e,t,i,o,n){let a;if(o??=!l.H.get("views.openChangesInMultiDiffEditor")){if(!await z(t,{message:`Are you sure you want to open the changes for each of the ${t.length} files?`,confirmButton:"Open Changes",threshold:10}))return;for(let e of(n={preserveFocus:!0,preview:!1,...n},t))""===i.rhs?await $(e,{repoPath:i.repoPath,ref:i.lhs},n):await I(e,i,n);return}if(!await z(t,{message:`Are you sure you want to view the changes for all ${t.length} files?`,confirmButton:"View Changes",threshold:50}))return;null!=n&&({title:a,...n}=n),a??=`Changes between ${(0,v.pV)(i.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,v.pV)(i.rhs,{strings:{working:"Working Tree"}})}`;let{git:u}=e,h=[];for(let e of t){let t="D"===e.status?void 0:await u.getBestRevisionUri(i.repoPath,e.path,i.rhs);""===i.rhs&&(t=null!=t?await u.getWorkingUri(i.repoPath,t):r.Uri.from({scheme:"untitled",authority:"",path:u.getAbsoluteUri(e.path,i.repoPath).fsPath}));let s="A"===e.status?void 0:await u.getBestRevisionUri(i.repoPath,e.originalPath??e.path,i.lhs),o=("D"===e.status?s:t)??u.getAbsoluteUri(e.path,i.repoPath);(t?.scheme!=="untitled"||null!=s)&&h.push({uri:o,lhs:s,rhs:t})}await (0,c.RZ)(h,a,n)}async function A(e,t,i,r,s){return P(e,t,{repoPath:i.repoPath,lhs:i.ref,rhs:""},r,s)}async function I(e,t,i){let s=(0,d.WM)(t);if("string"==typeof e||e instanceof r.Uri){if(!s)throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}else if(!s&&""===t.rhs)return $(e,{repoPath:t.repoPath,ref:t.lhs},i);if(i={preserveFocus:!0,preview:!1,...i},"A"===e.status&&s){let r=await t.getCommitForFile(e);(0,a.RS)("gitlens.diffWithPrevious",{commit:r,showOptions:i});return}let o=s?{repoPath:t.repoPath,rhs:t.sha,lhs:t.unresolvedPreviousSha}:t,n=h.nk.fromFile(e,o.repoPath),l="R"===e.status||"C"===e.status?h.nk.fromFile(e,o.repoPath,o.lhs,!0):n;await (0,a.RS)("gitlens.diffWith",{repoPath:o.repoPath,lhs:{uri:l,sha:o.lhs,title:i?.lhsTitle},rhs:{uri:n,sha:o.rhs,title:i?.rhsTitle},showOptions:i})}async function D(e,t,i){if("string"==typeof e){if(!(0,d.WM)(t))throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}return o.m.instance.git.diff(t.repoPath).openDiffTool?.(h.nk.fromFile(e,e.repoPath??t.repoPath),{ref1:(0,v._k)(t.ref)?"":`${t.ref}^`,ref2:(0,v._k)(t.ref)?"":t.ref,staged:(0,v.KH)(t.ref)||null!=e.indexStatus,tool:i})}async function $(e,t,i){let s;if("string"==typeof e||e instanceof r.Uri){if(!(0,d.WM)(t))throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}"D"!==e.status&&(s=(0,d.WM)(t)?{repoPath:t.repoPath,ref:t.sha}:t,i={preserveFocus:!0,preview:!1,...i},await (0,a.Y0)("gitlens.diffWithWorking",void 0,{uri:h.nk.fromFile(e,s.repoPath,s.ref),showOptions:i,lhsTitle:i?.lhsTitle}))}async function T(e,t,i){t.lhs=t.lhs||"HEAD",t.rhs=t.rhs||"HEAD";let{files:r}=await (0,m.Hn)(e,t.repoPath,(0,v.Xn)(t.lhs,t.rhs,"..."),""===t.rhs);await P(e,r??[],t,!1,i)}async function E(e,t,i,r){return o.m.instance.git.diff(e).openDirectoryCompare?.(t,i,r)}async function _(e){return E(e.repoPath,e.ref,`${e.ref}^`)}async function O(e){return E(e.repoPath,e.ref,void 0)}async function x(e,t,i,o){let n,{git:a}=e;if(""===i.lhs)throw Error("Cannot get files for comparisons of a ref with working tree");n=""===i.rhs?i.lhs:`${i.lhs}..${i.rhs}`;let l=a.getRelativePath(t,i.repoPath),c=await a.diff(i.repoPath).getDiffStatus(n,void 0,{path:l});if(null==c){r.window.showWarningMessage(`No changes in '${l}' between ${(0,v.pV)(i.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,v.pV)(i.rhs,{strings:{working:"Working Tree"}})}`);return}let u=`Changes in ${l} between ${(0,v.pV)(i.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,v.pV)(i.rhs,{strings:{working:"Working Tree"}})}`;return P(e,c,i,!1,{...o,title:u})}async function F(e,t,i){let s;if(e instanceof r.Uri)s=e,i=t;else if(s=h.nk.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return;i={preserveFocus:!0,preview:!1,...i},await (0,a.Y0)("gitlens.openWorkingFile",void 0,{uri:s,showOptions:i})}async function L(e,t,i){let s,a;if(e instanceof r.Uri){if((0,d.WM)(t))throw Error("Invalid arguments");s=e,i=t}else{let i;if(!(0,d.WM)(t))throw Error("Invalid arguments");if("string"==typeof e){let r=await t.findFile(e);if(null==r)throw Error("Invalid arguments");i=r}else i=e;s=o.m.instance.git.getRevisionUri("D"===i.status?await t.getPreviousSha()??g.nB:t.sha,i,t.repoPath)}let{annotationType:l,line:u,...p}={preserveFocus:!0,preview:!1,...i};null!=u&&0!==u&&(p.selection=new r.Range(u,0,u,0));let m=await h.nk.fromUri(s);try{a=await (0,c.Ol)(s,{throwOnError:!0,...p})}catch(t){if(!t?.message?.includes("Unable to resolve nonexistent file")){r.window.showErrorMessage(`Unable to open '${m.relativePath}' in revision '${m.sha}'`);return}let e=await (0,n.G)(o.m.instance,(0,w.kA)(m.sha,m.repoPath),{ignoreFocusOut:!0,initialPath:m.relativePath,title:`Open File at Revision \u2022 Unable to open '${m.relativePath}'`,placeholder:"Choose a file revision to open",keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,c.Ol)(t,{...p,preserveFocus:!0,preview:!0})}}});if(null==e)return;a=await (0,c.Ol)(e,p)}null!=l&&null!=a&&await o.m.instance.fileAnnotations.show(a,l,{selection:{line:u}})}async function B(e,t){let i;if(e instanceof r.Uri)i=e;else{if(null==t)throw Error("Invalid arguments");if(i=h.nk.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return}await (0,a.RS)("gitlens.openFileOnRemote",i,{sha:t?.ref})}async function U(e,t,i){let{files:r,ref:s,options:n}=await Y(e,t,i);if(!await z(r,{message:`Are you sure you want to open each of the ${r.length} files?`,confirmButton:"Open Files",threshold:10}))return;let a=(await Promise.all(r.map(e=>o.m.instance.git.getWorkingUri(s.repoPath,h.nk.fromFile(e,s.repoPath,s.ref))))).filter(e=>!!e);(0,c.JR)(a,n)}async function N(e,t,i){let{files:r,refs:s,options:n}=await K(e,t,i);await z(r,{message:`Are you sure you want to open each of the ${r.length} file revisions?`,confirmButton:"Open Revisions",threshold:10})&&(0,c.JR)(r.map(e=>o.m.instance.git.getRevisionUri("D"===e.status?s.lhs:s.rhs,e,s.repoPath)),n)}async function q(e,t){let i,s;if("string"==typeof e)i=e,s=t.ref;else if(i=e.path,"D"===e.status){let i=h.nk.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i),s=`${t.ref}^`}catch{s=t.ref}}else s="?"===e.status?`${t.ref}^3`:t.ref;await o.m.instance.git.checkout(t.repoPath,s,{path:i})}function W(e,t){return o.m.instance.views.revealCommit(e,t)}async function M(e,t){let i;if(null==t){await (0,a.RS)("gitlens.showQuickCommitDetails",{commit:e});return}i=t instanceof r.Uri?t:h.nk.fromFile(t,e.repoPath,e.ref),await (0,a.RS)("gitlens.showQuickCommitFileDetails",i,{sha:e.sha,commit:e})}function G(e,t){let{preserveFocus:i,...r}={...t,commit:e};return o.m.instance.views.commitDetails.show({preserveFocus:i},r)}function H(e,t){let{preserveFocus:i,...r}={...t,commit:e};return o.m.instance.views.graphDetails.show({preserveFocus:i},r)}async function V(e,t){await (0,a.RS)("gitlens.showInCommitGraph",{ref:(0,f.rd)(e),preserveFocus:t?.preserveFocus})}async function j(e,t){let i;(0,d.WM)(t)?(null==t.files&&await t.ensureFullDetails(),i=t.files??[]):i=t.map(t=>new p.l(e,t.repoPath,t.path,t.status,t.originalPath)),await z(i,{message:`Are you sure you want to open each of the ${i.length} files?`,confirmButton:"Open Files",threshold:10})&&await (0,a.RS)("gitlens.openOnlyChangedFiles",{uris:i.filter(e=>"D"!==e.status).map(e=>e.uri)})}async function Q(e,t){let i=await e.git.getOrOpenScmRepository(t.repoPath),s=await i?.getCommit("HEAD");if(s?.hash!==t.ref){r.window.showWarningMessage(`Commit ${(0,w.M4)(t,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`);return}let o=await e.git.status(t.repoPath).getStatus();if(o?.files.length){let e={title:"Undo Commit"};if(await r.window.showWarningMessage(`You have uncommitted changes in the working tree.

Do you still want to undo ${(0,w.M4)(t,{capitalize:!1,icon:!1})}?`,{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return}await (0,a.wS)("git.undoCommit",t.repoPath)}async function z(e,t){if(e.length<=t.threshold)return!0;let i={title:t.confirmButton??"Open"},s={title:t.cancelButton??"Cancel",isCloseAffordance:!0};return await r.window.showWarningMessage(t.message,{modal:!0},i,s)===i}async function Y(e,t,i){return(0,d.WM)(e)?(null==e.files&&await e.ensureFullDetails(),{commit:e,files:e.files??[],options:t,ref:{repoPath:e.repoPath,ref:e.sha}}):{files:e,options:i,ref:t}}async function K(e,t,i){return(0,d.WM)(e)?(null==e.files&&await e.ensureFullDetails(),{commit:e,files:e.files??[],options:t,refs:{repoPath:e.repoPath,rhs:e.sha,lhs:e.resolvedPreviousSha??await e.getPreviousSha()??e.unresolvedPreviousSha}}):{files:e,options:i,refs:t}}async function Z(e,t){return null==e.files&&await e.ensureFullDetails(),{files:(null!=t?e.files?.filter(t):e.files)??[],refs:{repoPath:e.repoPath,rhs:e.sha,lhs:e.resolvedPreviousSha??await e.getPreviousSha()??e.unresolvedPreviousSha}}}async function J(e,t,i,r){let s=e.git.commits(t);if(await s.isAncestorOf(i,r))return[r,i];if(await s.isAncestorOf(r,i))return[i,r];let[o,n]=await Promise.allSettled([s.getCommit(i),s.getCommit(r)]),a=(0,u.Ro)(o),l=(0,u.Ro)(n);return null!=l&&null!=a&&l.date>a.date?[r,i]:[i,r]}},1201:(e,t,i)=>{i.d(t,{u:()=>RemoteProvider});var r=i(1398),s=i(6612),o=i(4499),n=i(1212),a=i(5576),l=i(3949),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;let RemoteProvider=class RemoteProvider{constructor(e,t,i="https",r,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=r}_name;get autolinks(){return[{url:this.issueLinkPattern,prefix:"",title:`Open Issue #<num> on ${this.name}`,referenceType:"branch",alphanumeric:!1,ignoreCase:!0}]}get avatarUri(){}get displayPath(){return this.path}get icon(){return"remote"}get owner(){return this.splitPath()[0]}get remoteKey(){return this.domain?`${this.domain}/${this.path}`:this.path}get repoDesc(){return{owner:this.owner,name:this.repoName}}get providerDesc(){if(null!=this.gkProviderId&&null!=this.owner&&null!=this.repoName)return{id:this.gkProviderId,repoDomain:this.owner,repoName:this.repoName}}get repoName(){return this.splitPath()[1]}get supportedFeatures(){return{}}async copy(e){let t=await this.getUrlsFromResources(e);t.length&&await r.env.clipboard.writeText(t.join("\n"))}async open(e){let t=await this.getUrlsFromResources(e);return!!t.length&&(await Promise.allSettled(t.map(s.CZ))).every(e=>!0===(0,a.Ro)(e))}url(e,t){switch(e.type){case l.J.Branch:return this.getUrlForBranch(e.branch);case l.J.Branches:return this.getUrlForBranches();case l.J.Commit:return this.getUrlForCommit(e.sha);case l.J.Comparison:return this.getUrlForComparison(e.base,e.head,e.notation??"...");case l.J.CreatePullRequest:return this.getUrlForCreatePullRequest(e,t);case l.J.File:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,void 0,e.range);case l.J.Repo:return this.getUrlForRepository();case l.J.Revision:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,null!=e.sha?e.sha:void 0,e.range);default:return}}get baseUrl(){return this.getRepoBaseUrl(this.path)}getRepoBaseUrl(e){return`${this.protocol}://${this.domain}/${e}`}formatName(e){return null!=this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){let e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}async isReadyForForCrossForkPullRequestUrls(){return Promise.resolve(!0)}getUrlForRepository(){return this.baseUrl}encodeUrl(e){return(0,n.W)(e)?.replace(/#/g,"%23")}async getUrlsFromResources(e){let t=[];if(Array.isArray(e))for(let i of e)t.push(this.url(i));else t.push(this.url(e));return(await Promise.allSettled(t)).map(e=>(0,a.Ro)(e)).filter(e=>null!=e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o)})([(0,o.B)()],RemoteProvider.prototype,"remoteKey",1)},1212:(e,t,i)=>{function r(e){if(null!=e)return encodeURI(e.replace(/%20/g," "))}i.d(t,{W:()=>r})},1220:(e,t,i)=>{i.d(t,{Ff:()=>c,cQ:()=>l,hd:()=>o.default});var r=i(932),s=i(5682),o=i(8401),n=i(1078),a=i(7005);function l(e){let t,i=n.H.get("proxy");if(null!=i?(t=i.url??void 0,e=e??i.strictSSL):"off"===n.H.getCore("http.proxySupport",void 0,"override")?e=e??!0:(e=e??n.H.getCore("http.proxyStrictSSL",void 0,!0),t=n.H.getCore("http.proxy")||r.env.HTTPS_PROXY||r.env.HTTP_PROXY),t){a.Vy.debug(`Using https proxy: ${t}`);let i=new URL(t);return new s.HttpsProxyAgent({host:i.hostname,port:i.port,protocol:i.protocol,auth:i.username||i.password?`${i.username}:${i.password}`:void 0,path:i.pathname,rejectUnauthorized:e})}if(!1===e)return new s.HttpsProxyAgent({rejectUnauthorized:!1})}async function c(e,t){if("force"!==e)return t();let i=r.env.NODE_TLS_REJECT_UNAUTHORIZED;r.env.NODE_TLS_REJECT_UNAUTHORIZED="0";try{return await t()}finally{r.env.NODE_TLS_REJECT_UNAUTHORIZED=i}}},1251:(e,t,i)=>{let r=i(6990),s=/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/y,o=/[\x00-\x1F\x7F-\x9F]{1,1000}/y,n=/(?:\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation}|\p{Emoji}\uFE0F)(?:\u200d(?:\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation}|\p{Emoji}\uFE0F))*/yu,a=/[\x20-\x7E\xA0-\xFF]{1,1000}/y,l=/\p{M}+/gu,c={limit:1/0,ellipsis:""},u=(e,t={},i={})=>{let h=t.limit??1/0,d=t.ellipsis??"",p=t?.ellipsisWidth??(d?u(d,c,i).width:0),g=i.ansiWidth??0,m=i.controlWidth??0,f=i.ambiguousWidth??1,w=i.emojiWidth??2,v=i.fullWidthWidth??2,y=i.regularWidth??1,b=i.wideWidth??2,C=0,k=0,S=e.length,R=0,P=!1,A=S,I=Math.max(0,h-p),D=0,$=0,T=0,E=0;e:for(;;){if($>D||k>=S&&k>C){for(let t of(R=0,(e.slice(D,$)||e.slice(C,k)).replaceAll(l,""))){let e=t.codePointAt(0)||0;if(T+(E=(0,r.isFullWidth)(e)?v:(0,r.isWide)(e)?b:f!==y&&(0,r.isAmbiguous)(e)?f:y)>I&&(A=Math.min(A,Math.max(D,C)+R)),T+E>h){P=!0;break e}R+=t.length,T+=E}D=$=0}if(k>=S)break;if(a.lastIndex=k,a.test(e)){if(T+(E=(R=a.lastIndex-k)*y)>I&&(A=Math.min(A,k+Math.floor((I-T)/y))),T+E>h){P=!0;break}T+=E,D=C,$=k,k=C=a.lastIndex;continue}if(s.lastIndex=k,s.test(e)){if(T+g>I&&(A=Math.min(A,k)),T+g>h){P=!0;break}T+=g,D=C,$=k,k=C=s.lastIndex;continue}if(o.lastIndex=k,o.test(e)){if(T+(E=(R=o.lastIndex-k)*m)>I&&(A=Math.min(A,k+Math.floor((I-T)/m))),T+E>h){P=!0;break}T+=E,D=C,$=k,k=C=o.lastIndex;continue}if(n.lastIndex=k,n.test(e)){if(T+w>I&&(A=Math.min(A,k)),T+w>h){P=!0;break}T+=w,D=C,$=k,k=C=n.lastIndex;continue}k+=1}return{width:P?I:T,index:P?A:S,truncated:P,ellipsed:P&&h>=p}};t.A=u},1316:(e,t,i)=>{i.d(t,{A4:()=>U,Cv:()=>D,D5:()=>P,GC:()=>C,Iq:()=>S,LX:()=>N,Lb:()=>u,N9:()=>T,Nb:()=>x,PR:()=>$,QY:()=>m,Sh:()=>h,T$:()=>v,TC:()=>y,Tu:()=>b,UB:()=>d,Yt:()=>c,Zr:()=>g,_L:()=>B,b6:()=>w,eg:()=>p,fF:()=>O,iA:()=>o,jY:()=>k,k$:()=>a,mK:()=>_,qf:()=>A,qy:()=>R,tK:()=>F,tu:()=>f,u:()=>L,vL:()=>E,xy:()=>l,z8:()=>s,zK:()=>n,z_:()=>I});var r=i(5510);let s="commitDetails",o="\0\n\0",n=new r.Q2(s,"commit/suggestChanges"),a=new r.Q2(s,"commit/actions/execute"),l=new r.Q2(s,"file/actions/execute"),c=new r.Q2(s,"file/open"),u=new r.Q2(s,"file/openOnRemote"),h=new r.Q2(s,"file/compareWorking"),d=new r.Q2(s,"file/comparePrevious"),p=new r.Q2(s,"file/stage"),g=new r.Q2(s,"file/unstage"),m=new r.Q2(s,"pickCommit"),f=new r.Q2(s,"searchCommit"),w=new r.Q2(s,"switchMode");new r.Q2(s,"autolinkSettings");let v=new r.Q2(s,"pin"),y=new r.Q2(s,"navigate"),b=new r.Q2(s,"preferences/update"),C=new r.Q2(s,"wip/createPatch"),k=new r.Q2(s,"wip/changeReviewMode"),S=new r.Q2(s,"wip/showCodeSuggestion"),R=new r.Q2(s,"fetch"),P=new r.Q2(s,"publish"),A=new r.Q2(s,"push"),I=new r.Q2(s,"pull"),D=new r.Q2(s,"switch"),$=new r.Q2(s,"openPullRequestChanges"),T=new r.Q2(s,"openPullRequestComparison"),E=new r.Q2(s,"openPullRequestOnRemote"),_=new r.Q2(s,"openPullRequestDetails"),O=new r.Oz(s,"explain"),x=new r.Oz(s,"generate"),F=new r.C1(s,"didChange",!0),L=new r.C1(s,"didChange/wip");new r.C1(s,"org/settings/didChange");let B=new r.C1(s,"didChange/jira"),U=new r.C1(s,"didChange/account"),N=new r.C1(s,"didChange/patch")},1338:(e,t,i)=>{i.d(t,{GZ:()=>r,dI:()=>o,xT:()=>s});let r=new Set(["","=:","message:","@:","author:","#:","commit:","?:","file:","~:","change:","is:","type:"]),s=new Map([["","message:"],["=:","message:"],["message:","message:"],["@:","author:"],["author:","author:"],["#:","commit:"],["commit:","commit:"],["?:","file:"],["file:","file:"],["~:","change:"],["change:","change:"],["is:","type:"],["type:","type:"]]),o=/(?:(?<op>=:|message:|@:|author:|#:|commit:|\?:|file:|~:|change:|is:|type:)\s?(?<value>".+?"|\S+}?))|(?<text>\S+)(?!(?:=|message|@|author|#|commit|\?|file|~|change|is|type):)/g},1398:e=>{e.exports=require("vscode")},1403:(e,t,i)=>{i.d(t,{LN:()=>N,Ti:()=>B,Z6:()=>q,Z_:()=>L});var r,s,o=i(1398),n=i(2458),a=i(1518),l=i(9403),c=i(5319),u=i(4301),h=i(1078),d=i(9949),p=i(3500),g=i(4499),m=i(4342),f=i(6851),w=i(7747),v=i(7005),y=i(5419),b=i(3958),C=i(6006),k=i(3711),S=i(2636),R=Object.defineProperty,P=Object.getOwnPropertyDescriptor,A=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),I=e=>{throw TypeError(e)},D=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?P(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&R(t,i,o),o},$=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&I("Object expected"),i&&(r=t[A("asyncDispose")]),void 0===r&&(r=t[A("dispose")],i&&(s=r)),"function"!=typeof r&&I("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},T=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let E="index,HEAD,*_HEAD,MERGE_*,rebase-apply/**,rebase-merge/**,sequencer/**",_="worktrees/*,worktrees/**/index,worktrees/**/HEAD,worktrees/**/*_HEAD,worktrees/**/MERGE_*,worktrees/**/rebase-merge/**,worktrees/**/rebase-apply/**,worktrees/**/sequencer/**",O=`{${E}}`,x=`{config,refs/**,${_}}`,F=`{${E},config,refs/**,${_}}`;var L=((r=L||{})[r.Unknown=-1]="Unknown",r[r.Index=0]="Index",r[r.Head=1]="Head",r[r.Heads=2]="Heads",r[r.Tags=3]="Tags",r[r.Stash=4]="Stash",r[r.Remotes=5]="Remotes",r[r.Worktrees=6]="Worktrees",r[r.Config=7]="Config",r[r.PausedOperationStatus=8]="PausedOperationStatus",r[r.CherryPick=9]="CherryPick",r[r.Merge=10]="Merge",r[r.Rebase=11]="Rebase",r[r.Revert=12]="Revert",r[r.Closed=100]="Closed",r[r.Ignores=101]="Ignores",r[r.RemoteProviders=102]="RemoteProviders",r[r.Starred=103]="Starred",r[r.Opened=104]="Opened",r),B=((s=B||{})[s.Any=0]="Any",s[s.Exclusive=1]="Exclusive",s);let RepositoryChangeEvent=class RepositoryChangeEvent{constructor(e,t){this.repository=e,this._changes=new Set(t)}_changes;toString(e=!1){return e?`changes=${(0,w.fj)(this._changes,", ")}`:`{ repository: ${this.repository?.name??""}, changes: ${(0,w.fj)(this._changes,", ")} }`}changed(...e){let t=e.slice(0,-1),i=e[e.length-1];if(0===i)return(0,w.zN)(this._changes,e=>t.includes(e));let r=this._changes;1===i&&(t.includes(9)||t.includes(10)||t.includes(11)||t.includes(12)?t.includes(8)||t.push(8):t.includes(8)&&((r=new Set(r)).delete(9),r.delete(10),r.delete(11),r.delete(12)));let s=[...(0,w.pb)(r,e=>t.includes(e))];return 1===i?s.length===r.size:s.length===t.length}with(e){return new RepositoryChangeEvent(this.repository,[...this._changes,...e])}};let U=(0,d.N)(),N=class{constructor(e,t,i,r,s,n,a,l=!1){if(this.container=e,this.providerService=t,this.provider=i,this.folder=r,this.uri=s,this.root=n,null!=r)if(n)this._name=r.name;else{let t=e.git.getRelativePath(s,r.uri);this._name=t||r.name}else this._name=(0,C.P8)(s.path);this.git.config().getGitDir?.().then(e=>{if(e?.commonUri==null)return;let t=e.commonUri.path;t.endsWith("/.git")&&(t=t.substring(0,t.length-5)),this._commonRepositoryName=(0,C.P8)(t);let i=`${this._commonRepositoryName}: `;this._name.startsWith(i)||(this._name=`${i}${this._name}`)}),this.index=r?.index??e.git.repositoryCount,this.id=(0,c.dX)(s),this._suspended=a,this._closed=l,this._disposable=o.Disposable.from(this._onDidChange,this._onDidChangeFileSystem,this.setupRepoWatchers(),h.H.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(),this._orderByLastFetched&&this.getLastFetched()}_onDidChange=new o.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeFileSystem=new o.EventEmitter;get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}_commonRepositoryName;get commonRepositoryName(){return this._commonRepositoryName}get formattedName(){return this.name}id;index;instance=U.next();_name;get name(){return this._name}_idHash;get idHash(){return void 0===this._idHash&&(this._idHash=(0,n.Fx)(this.id)),this._idHash}_disposable;_fireChangeDebounced=void 0;_fireFileSystemChangeDebounced=void 0;_pendingFileSystemChange;_pendingRepoChange;_suspended;setupRepoWatchers(){let e;return this.setupRepoWatchersCore().then(t=>e=t),{dispose:()=>void e?.dispose()}}async setupRepoWatchersCore(){let e=(0,y.dQ)(),t=[];t.push(this.container.events.on("git:cache:reset",e=>{(!e.data.repoPath||e.data.repoPath===this.path)&&e.data.types?.includes("providers")&&this.fireChange(102)}),this.container.events.on("git:repo:change",e=>{e.data.repoPath===this.path&&this.fireChange(...e.data.changes)}));let i=o.workspace.createFileSystemWatcher(new o.RelativePattern(this.uri,"**/.gitignore"));function r(i,r){v.Vy.debug(e,`watching '${i.toString(!0)}' for repository changes`);let s=o.workspace.createFileSystemWatcher(new o.RelativePattern(i,r));return t.push(s,s.onDidChange(e=>this.onRepositoryChanged(e,i,"change")),s.onDidCreate(e=>this.onRepositoryChanged(e,i,"create")),s.onDidDelete(e=>this.onRepositoryChanged(e,i,"delete"))),s}t.push(i,i.onDidChange(this.onGitIgnoreChanged,this),i.onDidCreate(this.onGitIgnoreChanged,this),i.onDidDelete(this.onGitIgnoreChanged,this));let s=await this.git.config().getGitDir?.();return null!=s&&(s?.commonUri==null?r.call(this,s.uri,F):(r.call(this,s.uri,O),r.call(this,s.commonUri,x))),o.Disposable.from(...t)}dispose(){this.unWatchFileSystem(!0),this._disposable.dispose()}toString(){return(0,v.zu)(this)}_closed=!1;get closed(){return this._closed}set closed(e){let t=this._closed!==e;if(this._closed=e,t){var i=[];try{let t=$(i,(0,y.bP)(`${(0,v.zu)(this)}.closed`,!1));v.Vy.debug(t,`setting closed=${e}`),this.fireChange(this._closed?100:104)}catch(e){var r=e,s=!0}finally{T(i,r,s)}}}get etag(){return this._updatedAt}get git(){let e=this.uri;return new Proxy(this.container.git,{get:(t,i)=>{let r=t[i];return"function"==typeof r?(...i)=>r.call(t,e,...i):r}})}get path(){return this.uri.scheme===a.xB.File?(0,C.Fd)(this.uri.fsPath):this.uri.toString()}_orderByLastFetched=!1;get orderByLastFetched(){return this._orderByLastFetched}_updatedAt=0;get updatedAt(){return this._updatedAt}get virtual(){return this.provider.virtual}onConfigurationChanged(e){h.H.changed(e,"sortRepositoriesBy")&&(this._orderByLastFetched=h.H.get("sortRepositoriesBy")?.startsWith("lastFetched:")??!1),null!=e&&h.H.changed(e,"remotes",this.folder?.uri)&&this.fireChange(5)}onFileSystemChanged(e){/\.git(?:\/|\\|$)/.test(e.fsPath)||(this._etagFileSystem=Date.now(),this.fireFileSystemChange(e))}onGitIgnoreChanged(e){this.fireChange(101)}onRepositoryChanged(e,t,i){if(e?.path.includes("/fsmonitor--daemon/"))return;this._lastFetched=void 0,this._orderByLastFetched&&this.getLastFetched();let r=null!=e?/(worktrees|index|HEAD|FETCH_HEAD|ORIG_HEAD|CHERRY_PICK_HEAD|MERGE_HEAD|REBASE_HEAD|rebase-merge|rebase-apply|REVERT_HEAD|config|refs\/(?:heads|remotes|stash|tags))/.exec(this.container.git.getRelativePath(e,t)):void 0;if(null!=r)switch(r[1]){case"config":this.fireChange(7,5);return;case"index":this.fireChange(0);return;case"FETCH_HEAD":return;case"HEAD":this.fireChange(1,2);return;case"ORIG_HEAD":case"refs/heads":this.fireChange(2);return;case"CHERRY_PICK_HEAD":this.fireChange(9,8);return;case"MERGE_HEAD":this.fireChange(10,8);return;case"REBASE_HEAD":case"rebase-merge":case"rebase-apply":this.fireChange(11,8);return;case"REVERT_HEAD":this.fireChange(12,8);return;case"refs/remotes":this.fireChange(5);return;case"refs/stash":this.fireChange(4);return;case"refs/tags":this.fireChange(3);return;case"worktrees":this.fireChange(6);return}this.fireChange(-1)}access(e){return this.container.git.access(e,this.uri)}branchDelete(e,t){Array.isArray(e)||(e=[e]);let i=e.filter(e=>!e.remote);if(0!==i.length){let r=["--delete"];if(t?.force&&r.push("--force"),this.runTerminalCommand("branch",...r,...e.map(e=>e.ref)),t?.remote){let e=i.filter(e=>null!=e.upstream);if(0!==e.length)for(let[t,i]of(0,w.Fi)(e,e=>(0,k.Zq)(e.upstream.name)).entries())this.runTerminalCommand("push","-d",t,...i.map(e=>(0,k.km)(e.upstream.name)))}}let r=e.filter(e=>e.remote);if(0!==r.length)for(let[e,t]of(0,w.Fi)(r,e=>(0,k.Zq)(e.name)).entries())this.runTerminalCommand("push","-d",e,...t.map(e=>(0,S.fC)(e)))}cherryPick(...e){this.runTerminalCommand("cherry-pick",...e)}containsUri(e){return this===this.container.git.getRepository(e)}async fetch(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:null!=i.branch?`${i.pull?"Pulling":"Fetching"} ${i.branch.name}...`:`Fetching ${i.remote?`${i.remote} of `:""}${this.formattedName}...`},()=>this.fetchCore(i)):this.fetchCore(i)}async fetchCore(e){try{await this.git.fetch(e),this.fireChange(-1)}catch(e){v.Vy.error(e),(0,l.qQ)("Unable to fetch repository")}}async getCommonRepository(){let e=await this.git.config().getGitDir?.();return e?.commonUri==null?this:this.container.git.getOrOpenRepository(e.commonUri,{detectNested:!1,force:!0,closeOnOpen:!0})}async getCommonRepositoryUri(){let e=await this.git.config().getGitDir?.();return e?.commonUri?.path.endsWith("/.git")?e.commonUri.with({path:e.commonUri.path.substring(0,e.commonUri.path.length-5)}):e?.commonUri}_lastFetched;get lastFetchedCached(){return this._lastFetched}async getLastFetched(){let e=await this.git.getLastFetchedTimestamp();return null!=e&&(this._lastFetched=e),this._lastFetched??0}merge(...e){this.runTerminalCommand("merge",...e)}async pull(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:`Pulling ${this.formattedName}...`},()=>this.pullCore(i)):this.pullCore(i)}async pullCore(e){try{let t=h.H.getCore("git.pullTags",this.uri);h.H.getCore("git.fetchOnPull",this.uri)&&await this.git.fetch(),await this.git.pull({...e,tags:t}),this.fireChange(-1)}catch(e){v.Vy.error(e),(0,l.qQ)("Unable to pull repository")}}async showCreatePullRequestPrompt(e,t){if(!this.container.actionRunners.count("createPullRequest")||!await (0,l.ky)(t.name))return;let i=await this.git.remotes().getRemote(e);(0,u.ph)("createPullRequest",{repoPath:this.path,remote:null!=i?{name:i.name,provider:null!=i.provider?{id:i.provider.id,name:i.provider.name,domain:i.provider.domain}:void 0,url:i.url}:{name:e},branch:{name:t.name,isRemote:t.remote,upstream:t.upstream?.name}})}async push(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:(0,S.gC)(i.reference)?`${null!=i.publish?"Publishing ":"Pushing "}${i.reference.name}...`:`Pushing ${this.formattedName}...`},()=>this.pushCore(i)):this.pushCore(i)}async pushCore(e){try{await this.git.push({reference:e?.reference,force:e?.force,publish:e?.publish}),(0,S.gC)(e?.reference)&&e?.publish!=null&&this.showCreatePullRequestPrompt(e.publish.remote,e.reference),this.fireChange(-1)}catch(e){v.Vy.error(e),(0,l.qQ)("Unable to push repository")}}rebase(e,...t){this.runTerminalCommand(null!=e&&0!==e.length?`${e.join(" ")} rebase`:"rebase",...t)}resume(){this._suspended&&(this._suspended=!1,null!=this._pendingRepoChange&&this._fireChangeDebounced(),null!=this._pendingFileSystemChange&&this._fireFileSystemChangeDebounced?.())}revert(...e){this.runTerminalCommand("revert",...e)}get starred(){let e=this.container.storage.getWorkspace("starred:repositories");return null!=e&&!0===e[this.id]}star(e){return this.updateStarred(!0,e)}async switch(e,t){let{progress:i,...r}={progress:!0,...t};return i?o.window.withProgress({location:o.ProgressLocation.Notification,title:`Switching ${this.formattedName} to ${e}...`,cancellable:!1},()=>this.switchCore(e,r)):this.switchCore(e,r)}async switchCore(e,t){try{await this.git.checkout(e,t),this.fireChange(-1)}catch(e){v.Vy.error(e),(0,l.qQ)("Unable to switch to reference")}}toAbsoluteUri(e,t){let i=this.container.git.getAbsoluteUri(e,this.uri);return!(t?.validate??!0)||this.containsUri(i)?i:void 0}unstar(e){return this.updateStarred(!1,e)}async updateStarred(e,t){null!=t?await this.updateStarredCore("branches",t.id,e):await this.updateStarredCore("repositories",this.id,e),this.fireChange(103)}async updateStarredCore(e,t,i){let r=`starred:${e}`,s=this.container.storage.getWorkspace(r);s=(0,b.Y8)(s,t,i),await this.container.storage.storeWorkspace(r,s),this.fireChange(103)}_etagFileSystem;get etagFileSystem(){return this._etagFileSystem}suspend(){this._suspended=!0}_fsWatcherDisposable;_fsWatchers=new Map;_fsChangeDelay=2500;watchFileSystem(e=2500){let t=(0,n.uR)();if(this._fsWatchers.set(t,e),null==this._fsWatcherDisposable){let e=o.workspace.createFileSystemWatcher(new o.RelativePattern(this.uri,"**"));this._fsWatcherDisposable=o.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this)),this._etagFileSystem=Date.now()}return this.ensureMinFileSystemChangeDelay(),{dispose:()=>this.unWatchFileSystem(t)}}unWatchFileSystem(e){if("boolean"!=typeof e&&(this._fsWatchers.delete(e),0!==this._fsWatchers.size)){this.ensureMinFileSystemChangeDelay();return}this._etagFileSystem=void 0,this._fsChangeDelay=2500,this._fsWatchers.clear(),this._fsWatcherDisposable?.dispose(),this._fsWatcherDisposable=void 0}ensureMinFileSystemChangeDelay(){let e=(0,w.jk)(this._fsWatchers.values());e!==this._fsChangeDelay&&(this._fsChangeDelay=e,this._fireFileSystemChangeDebounced?.flush(),this._fireFileSystemChangeDebounced?.cancel(),this._fireFileSystemChangeDebounced=void 0)}fireChange(...e){let t=(0,y.dQ)();if(this._updatedAt=Date.now(),this._fireChangeDebounced??=(0,f.s)(this.fireChangeCore.bind(this),250),this._pendingRepoChange=this._pendingRepoChange?.with(e)??new RepositoryChangeEvent(this,e),this.providerService.onRepositoryChanged(this,this._pendingRepoChange),this._suspended){v.Vy.debug(t,`queueing suspended ${this._pendingRepoChange.toString(!0)}`);return}this._fireChangeDebounced()}fireChangeCore(){var e=[];try{let t=this._pendingRepoChange;if(null==t)return;this._pendingRepoChange=void 0;let i=$(e,(0,y.bP)(`${(0,v.zu)(this)}.fireChangeCore`,!1));v.Vy.debug(i,`firing ${t.toString(!0)}`);try{this._onDidChange.fire(t)}finally{this.providerService.onDidRepositoryChange.fire(t)}}catch(e){var t=e,i=!0}finally{T(e,t,i)}}fireFileSystemChange(e){let t=(0,y.dQ)();this._updatedAt=Date.now(),this._fireFileSystemChangeDebounced??=(0,f.s)(this.fireFileSystemChangeCore.bind(this),this._fsChangeDelay),this._pendingFileSystemChange??={repository:this,uris:[]};let i=this._pendingFileSystemChange;if(i.uris.push(e),this._suspended){v.Vy.debug(t,`queueing suspended fs changes=${i.uris.map(e=>e.fsPath).join(", ")}`);return}this._fireFileSystemChangeDebounced()}async fireFileSystemChangeCore(){var e=[];try{let t=this._pendingFileSystemChange;if(null==t)return;this._pendingFileSystemChange=void 0;let i=await this.git.excludeIgnoredUris(t.uris);if(0===i.length)return;i.length!==t.uris.length&&(t={...t,uris:i});let r=$(e,(0,y.bP)(`${(0,v.zu)(this)}.fireChangeCore`,!1));v.Vy.debug(r,`firing fs changes=${t.uris.map(e=>e.fsPath).join(", ")}`),this._onDidChangeFileSystem.fire(t)}catch(e){var t=e,i=!0}finally{T(e,t,i)}}async runTerminalCommand(e,...t){await this.git.runGitCommandViaTerminal?.(e,t,{execute:!0}),setTimeout(()=>this.fireChange(-1),2500)}};function q(e){return e instanceof N}D([(0,m.Yz)({singleLine:!0})],N.prototype,"setupRepoWatchersCore",1),D([(0,g.B)()],N.prototype,"git",1),D([(0,m.Yz)()],N.prototype,"onGitIgnoreChanged",1),D([(0,m.Yz)()],N.prototype,"onRepositoryChanged",1),D([(0,m.Rm)()],N.prototype,"access",1),D([(0,m.Rm)()],N.prototype,"branchDelete",1),D([(0,m.Rm)()],N.prototype,"cherryPick",1),D([(0,p.G)(),(0,m.Rm)()],N.prototype,"fetch",1),D([(0,p.G)(),(0,m.Rm)({exit:!0})],N.prototype,"getCommonRepository",1),D([(0,m.Rm)({exit:!0})],N.prototype,"getCommonRepositoryUri",1),D([(0,p.G)()],N.prototype,"getLastFetched",1),D([(0,m.Rm)()],N.prototype,"merge",1),D([(0,p.G)(),(0,m.Rm)()],N.prototype,"pull",1),D([(0,p.G)(),(0,m.Rm)()],N.prototype,"push",1),D([(0,m.Rm)()],N.prototype,"rebase",1),D([(0,m.Rm)()],N.prototype,"revert",1),D([(0,p.G)(),(0,m.Rm)()],N.prototype,"switch",1),D([(0,m.Yz)()],N.prototype,"fireChange",1),D([(0,m.Yz)()],N.prototype,"fireFileSystemChange",1),N=D([(0,m.Is)((e,t)=>`${t}(${e.id}|${e.instance})`)],N)},1454:(e,t,i)=>{i.d(t,{L:()=>DraftService,y:()=>C});var r=i(928),s=i(6525),o=i(1403),n=i(8094),a=i(8554),l=i(4342),c=i(7005),u=i(5419),h=i(5576),d=i(6461),p=i(926),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let DraftService=class DraftService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async createDraft(e,t,i,r){let s=(0,u.dQ)();try{let o,n,a,l=await Promise.allSettled(i.map(e=>this.getCreateDraftPatchRequestFromChange(e)));if(!l.length)throw Error("No changes found");let c=[],u=[];for(let e of l)"fulfilled"===e.status?e.value.contents&&(c.push(e.value),null==o&&(o=e.value.user)):u.push(e.reason);if(u.length)throw AggregateError(u,"Unable to create draft");if("suggested_pr_change"===e){if(r?.prEntityId==null)throw Error("No pull request info provided");a={prEntityId:r.prEntityId};let e=c[0].repository,t=await this.getProviderAuthFromRepoOrIntegrationId(e);if(null==t)throw Error("No provider integration found");n={"Provider-Auth":Buffer.from(JSON.stringify(t)).toString("base64")}}let h=await this.connection.fetchGkApi("v1/drafts",{method:"POST",body:JSON.stringify({type:e,title:t,description:r?.description,visibility:r?.visibility??"public"})});h.ok||await w("Unable to create draft",h,s);let d=(await h.json()).data.id,p=await this.connection.fetchGkApi(`v1/drafts/${d}/changesets`,{method:"POST",body:JSON.stringify({gitUserName:o?.name,gitUserEmail:o?.email,patches:c.map(e=>e.patch)}),headers:n});p.ok||await w(`Unable to create changeset for draft '${d}'`,p,s);let g=(await p.json()).data,m=[],f=0;for(let e of g.patches){let{url:t,method:i,headers:r}=e.secureUploadData,{contents:s,repository:o}=c[f++];if(null==s)throw Error(`No contents found for ${e.baseCommitSha}`);let n=await o.git.diff().getDiffFiles?.(s),a=n?.files.map(t=>({...t,gkRepositoryId:e.gitRepositoryId}))??[];await this.connection.fetch(t,{method:i,headers:{"Content-Type":"text/plain",...r},body:s});let l=b({...e,secureDownloadData:void 0},{contents:s,files:a,repository:o});m.push(l)}let C=await this.connection.fetchGkApi(`v1/drafts/${d}/publish`,{method:"POST",headers:n,body:null!=a?JSON.stringify(a):void 0});C.ok||await w(`Failed to publish draft '${d}'`,C,s);let k=await this.connection.fetchGkApi(`v1/drafts/${d}`,{method:"GET",headers:n});k.ok||await w(`Unable to open draft '${d}'`,k,s);let S=(await k.json()).data,{account:R}=await this.container.subscription.getSubscription(),P=v(S,{account:R});return P.changesets=[{...y({...g,patches:[]}),patches:m}],P}catch(e){throw c.Vy.error(e,s),e}}async getCreateDraftPatchRequestFromChange(e){let t,i=(0,a._k)(e.revision.to),[r,s,o,n,l]=await Promise.allSettled([i?e.repository.git.branches().getBranch().then(e=>null!=e?[e.name]:void 0):e.repository.git.branches().getBranchesWithCommits([e.revision.to,e.revision.from]),null==e.contents?e.repository.git.diff().getDiff?.(e.revision.to,e.revision.from):void 0,e.repository.git.commits().getInitialCommitSha?.(),e.repository.git.remotes().getBestRemoteWithProvider(),e.repository.git.config().getCurrentUser()]),c=(0,h.Ro)(o),u=(0,h.Ro)(n);if(null==u){if(null==c)throw Error("No remote or initial commit found");t={initialCommitSha:c}}else t={initialCommitSha:c,remote:{url:u.url,domain:u.domain,path:u.path},provider:u.provider.providerDesc};let d=(0,h.Ro)(s),p=e.contents??d?.contents;if(null==p)throw Error(`Unable to diff ${e.revision.from} and ${e.revision.to}`);let g=(0,h.Ro)(l),m=(0,h.Ro)(r),f=m?.[0]??"HEAD",w=e.revision.from;if(!(0,a.HH)(w)){let t=await this.container.git.commits(e.repository.uri).getCommit(w);null!=t&&(w=t.sha)}return{patch:{baseCommitSha:w,baseBranchName:f,gitRepoData:t,prEntityId:e.prEntityId},contents:p,repository:e.repository,user:g}}async deleteDraft(e){await this.connection.fetchGkApi(`v1/drafts/${e}`,{method:"DELETE"})}async archiveDraft(e,t){let i=(0,u.dQ)();try{let r,s=t?.providerAuth;if("provider_access"===e.visibility&&null==s&&(s=await this.getProviderAuthForDraft(e),null==s))throw Error("No provider integration found");null!=s&&(r={"Provider-Auth":Buffer.from(JSON.stringify(s)).toString("base64")});let o=await this.connection.fetchGkApi(`v1/drafts/${e.id}/archive`,{method:"POST",body:t?.archiveReason!=null?JSON.stringify({archiveReason:t.archiveReason}):void 0,headers:r});o.ok||await w(`Unable to archive draft '${e.id}'`,o,i)}catch(e){throw c.Vy.error(e,i),e}}async getDraft(e,t){let i,r=(0,u.dQ)();t?.providerAuth&&(i={"Provider-Auth":Buffer.from(JSON.stringify(t.providerAuth)).toString("base64")});let[s,o]=await Promise.allSettled([this.connection.fetchGkApi(`v1/drafts/${e}`,{method:"GET",headers:i}),this.getChangesets(e)]);if("rejected"===s.status)throw c.Vy.error(s.reason,r,`Unable to open draft '${e}': ${s.reason}`),Error(`Unable to open draft '${e}': ${s.reason}`);if("rejected"===o.status)throw c.Vy.error(o.reason,r,`Unable to open changeset for draft '${e}': ${o.reason}`),Error(`Unable to open changesets for draft '${e}': ${o.reason}`);let n=(0,h.Ro)(s);n?.ok||await w(`Unable to open draft '${e}'`,n,r);let a=(await n.json()).data,l=(0,h.Ro)(o),[d,p]=await Promise.allSettled([this.container.subscription.getSubscription(),this.container.organizations.getMembers(a.organizationId)]),g=v(a,{account:(0,h.Ro)(d)?.account,members:(0,h.Ro)(p)});return g.changesets=l,g}async getDrafts(e){return this.getDraftsCore(e?{isArchived:e}:void 0)}async getDraftsCore(e){let t,i=(0,u.dQ)(),r=[],s=!1;if(e?.prEntityId!=null){if(null==e.providerAuth)throw Error("No provider integration found");s=!0,r.push(`prEntityId=${encodeURIComponent(e.prEntityId)}`)}e?.isArchived&&r.push("archived=true"),e?.providerAuth&&(t={"Provider-Auth":Buffer.from(JSON.stringify(e.providerAuth)).toString("base64")});let o=await this.connection.fetchGkApi("/v1/drafts",{method:"GET",headers:t},{query:r.length?r.join("&"):void 0});o.ok||await w("Unable to open drafts",o,i);let n=(await o.json()).data;if(0===n.length)return[];let[a,l]=await Promise.allSettled([this.container.subscription.getSubscription(),this.container.organizations.getMembers()]),c=(0,h.Ro)(a)?.account,d=(0,h.Ro)(l);return n.map(e=>v(e,{account:c,members:d,fromPrEntityId:s}))}async getChangesets(e){let t=(0,u.dQ)();try{let i=await this.connection.fetchGkApi(`/v1/drafts/${e}/changesets`,{method:"GET"});i.ok||await w(`Unable to open changesets for draft '${e}'`,i,t);let r=(await i.json()).data,s=[];for(let e of r){let t=y(e);s.push(t)}return s}catch(e){throw c.Vy.error(e,t),e}}async getPatch(e){let t=await this.getPatchCore(e),i=await this.getPatchDetails(t);return t.contents=i.contents,t.files=i.files,t.repository=i.repository,t}async getPatchCore(e){let t=(0,u.dQ)(),i=await this.connection.fetchGkApi(`/v1/patches/${e}`,{method:"GET"});return i.ok||await w(`Unable to open patch '${e}'`,i,t),b((await i.json()).data)}async getPatchDetails(e){let t="string"==typeof e?await this.getPatchCore(e):e,[i,r]=await Promise.allSettled([this.getPatchContentsCore(t.secureLink),this.getRepositoryOrIdentity(t.draftId,t.gkRepositoryId,{openIfNeeded:!0,skipRefValidation:!0})]),s=(0,h.Ro)(i),n=(0,h.Ro)(r),a="";(0,o.Z6)(n)&&(a=n.path);let l=await this.container.git.diff(a).getDiffFiles?.(s),c=l?.files.map(e=>({...e,gkRepositoryId:t.gkRepositoryId}))??[];return{id:t.id,contents:s,files:c,repository:n}}async getPatchContentsCore(e){let{url:t,method:i,headers:r}=e;return(await this.connection.fetch(t,{method:i,headers:{Accept:"text/plain",...r}})).text()}async updateDraftVisibility(e,t){let i=(0,u.dQ)();try{let r=await this.connection.fetchGkApi(`/v1/drafts/${e}`,{method:"PATCH",body:JSON.stringify({visibility:t})});return r?.ok===!1&&await w(`Unable to update draft '${e}'`,r,i),(await r.json()).data}catch(e){throw c.Vy.error(e,i),e}}async getDraftUsers(e){let t=(0,u.dQ)();try{let i=await this.connection.fetchGkApi(`/v1/drafts/${e}/users`,{method:"GET"});return i?.ok===!1&&await w(`Unable to get users for draft '${e}'`,i,t),(await i.json()).data}catch(e){throw c.Vy.error(e,t),e}}async addDraftUsers(e,t){let i=(0,u.dQ)();try{if(0===t.length)throw Error("No changes found");let r=await this.connection.fetchGkApi(`/v1/drafts/${e}/users`,{method:"POST",body:JSON.stringify({id:e,users:t})});return r?.ok===!1&&await w(`Unable to add users for draft '${e}'`,r,i),(await r.json()).data}catch(e){throw c.Vy.error(e,i),e}}async removeDraftUser(e,t){let i=(0,u.dQ)();try{let r=await this.connection.fetchGkApi(`/v1/drafts/${e}/users/${t}`,{method:"DELETE"});return r?.ok===!1&&await w(`Unable to update user ${t} for draft '${e}'`,r,i),!0}catch(e){throw c.Vy.error(e,i),e}}async getRepositoryOrIdentity(e,t,i){let r=await this.getRepositoryIdentity(e,t);return await this.container.repositoryIdentity.getRepository(r,i)??r}async getRepositoryIdentity(e,t){let i,r=await this.connection.fetchGkApi(`/v1/drafts/${e}/git-repositories/${t}`,{method:"GET"}),s=(await r.json()).data;if("name"in s&&"string"==typeof s.name)i=s.name;else if(s.provider?.repoName!=null)i=s.provider.repoName;else if(s.remote?.url!=null&&s.remote?.domain!=null&&s.remote?.path!=null){let e=(await (0,n.m)(this.container))(s.remote.url,s.remote.domain,s.remote.path);i=e?.repoName??s.remote.path}else i=s.remote?.path??`Unknown ${s.initialCommitSha?` (${(0,a.pV)(s.initialCommitSha)})`:""}`;return{id:s.id,createdAt:new Date(s.createdAt),updatedAt:new Date(s.updatedAt),name:i,initialCommitSha:s.initialCommitSha,remote:s.remote,provider:s.provider}}async getProviderAuthFromRepoOrIntegrationId(e){let t;if((0,o.Z6)(e)){let i=await e.git.remotes().getBestRemoteWithIntegration();if(null==i)return;t=await i.getIntegration()}else{let i=d.Mt[e];if(null==i)return;t=await this.container.integrations.get(e,i.domain)}if(null==t)return;let i=await t.getSession("code-suggest");if(null!=i)return{provider:t.authProvider.id,token:i.accessToken}}async getProviderAuthForDraft(e){let t,i;if(null!=e.changesets&&0!==e.changesets.length){for(let i of e.changesets){let e=i.patches?.find(e=>e.repository??e.gkRepositoryId);null!=e&&(t=e)}if(null!=t){if(null!=t.repository&&(i=t.repository instanceof o.LN?t.repository:await this.container.repositoryIdentity.getRepository(t.repository)),null==i){let r=await this.getRepositoryOrIdentity(e.id,t.gkRepositoryId);if(!(r instanceof o.LN))return;i=r}return this.getProviderAuthFromRepoOrIntegrationId(i)}}}async getCodeSuggestions(e,t,i){if(!(0,d.Ac)(e.provider))return[];let s=(0,p.Dz)(e),o=r.EntityIdentifierUtils.encode(s),n=await this.getProviderAuthFromRepoOrIntegrationId(t);try{return await this.getDraftsCore({prEntityId:o,providerAuth:n,isArchived:i?.includeArchived==null||i.includeArchived})}catch{return[]}}async getCodeSuggestionCounts(e){let t=(0,u.dQ)(),i=e.filter(e=>(0,d.Ac)(e.provider)).map(e=>r.EntityIdentifierUtils.encode((0,p.Dz)(e)));if(0===i.length)return{};let s=JSON.stringify({prEntityIds:i});try{let e=await this.connection.fetchGkApi("v1/drafts/counts",{method:"POST",body:s},{query:"type=suggested_pr_change"});return e.ok||await w("Unable to open code suggestion counts",e,t),(await e.json()).data.counts}catch(e){throw c.Vy.error(e,t),e}}generateWebUrl(e){let t="string"==typeof e?e:e.id;return this.container.urls.getGkDevUrl(["drafts",t])}};async function w(e,t,i){let r;try{r=await t?.json()}catch{}let s="string"==typeof r?.error?r.error:r?.error?.message??t?.statusText,o=null!=t?`${e}: (${t?.status}) ${s}`:e;throw c.Vy.error(void 0,i,o),Error(o)}function v(e,t){let i,r=!1;if(e.createdBy===t?.account?.id)r=!0,i={id:e.createdBy,name:`${t.account.name} (you)`,email:t.account.email,avatarUri:(0,s.m_)(t.account.email)};else{let r;t?.members?.length&&(r=t.members.find(t=>t.id===e.createdBy)),i={id:e.createdBy,name:r?.name??"Unknown",email:r?.email,avatarUri:(0,s.m_)(r?.email)}}let o=e.role;return o||(o=t?.fromPrEntityId===!0?"editor":"viewer"),{draftType:"cloud",type:e.type,id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),author:i,isMine:r,organizationId:e.organizationId||void 0,role:o,isPublished:e.isPublished,title:e.title,description:e.description,deepLinkUrl:e.deepLink,visibility:e.visibility,isArchived:e.isArchived,archivedBy:e.archivedBy,archivedReason:e.archivedReason,archivedAt:null!=e.archivedAt?new Date(e.archivedAt):e.archivedAt,latestChangesetId:e.latestChangesetId}}function y(e){return{id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),draftId:e.draftId,parentChangesetId:e.parentChangesetId,userId:e.userId,gitUserName:e.gitUserName,gitUserEmail:e.gitUserEmail,deepLinkUrl:e.deepLink,patches:e.patches.map(e=>b(e))}}function b(e,t){return{type:"cloud",id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),draftId:e.draftId,changesetId:e.changesetId,userId:e.userId,baseBranchName:e.baseBranchName,baseRef:e.baseCommitSha,gkRepositoryId:e.gitRepositoryId,secureLink:e.secureDownloadData,commit:t?.commit,contents:t?.contents,files:t?.files,repository:t?.repository}}function C(e,t){return null!=e.prEntityId?r.EntityIdentifierUtils.decode(e.prEntityId):t?.prEntityId!=null?r.EntityIdentifierUtils.decode(t.prEntityId):void 0}f([(0,l.Rm)({args:{2:!1}})],DraftService.prototype,"createDraft",1),f([(0,l.Rm)()],DraftService.prototype,"deleteDraft",1),f([(0,l.Rm)({args:{1:e=>JSON.stringify({...e,providerAuth:void 0})}})],DraftService.prototype,"archiveDraft",1),f([(0,l.Rm)({args:{1:e=>JSON.stringify({...e,providerAuth:void 0})}})],DraftService.prototype,"getDraft",1),f([(0,l.Rm)()],DraftService.prototype,"getDrafts",1),f([(0,l.Rm)()],DraftService.prototype,"getChangesets",1),f([(0,l.Rm)()],DraftService.prototype,"getPatch",1),f([(0,l.Rm)({args:{0:e=>"string"==typeof e?e:e.id}})],DraftService.prototype,"getPatchDetails",1),f([(0,l.Rm)()],DraftService.prototype,"updateDraftVisibility",1),f([(0,l.Rm)()],DraftService.prototype,"getDraftUsers",1),f([(0,l.Rm)({args:{1:!1}})],DraftService.prototype,"addDraftUsers",1),f([(0,l.Rm)()],DraftService.prototype,"removeDraftUser",1),f([(0,l.Rm)()],DraftService.prototype,"getRepositoryOrIdentity",1),f([(0,l.Rm)()],DraftService.prototype,"getRepositoryIdentity",1),f([(0,l.Rm)({args:{0:e=>e.id,1:e=>(0,o.Z6)(e)?e.id:e}})],DraftService.prototype,"getCodeSuggestions",1),f([(0,l.Rm)({args:{0:e=>e.map(e=>e.id).join(",")}})],DraftService.prototype,"getCodeSuggestionCounts",1)},1518:(e,t,i)=>{i.d(t,{DS:()=>v,EO:()=>d,HP:()=>g,MV:()=>f,Od:()=>r,WZ:()=>o,fk:()=>p,lD:()=>n,s7:()=>h,tM:()=>a,uR:()=>s,xB:()=>m});let r="gitlens",s=80,o="ᴘʀᴇᴠɪᴇᴡ",n="ᴘʀᴏ",a="ᴾᴿᴼ";var l,c,u,h=((l=h||{})[l.Hash=35]="Hash",l[l.Slash=47]="Slash",l[l.Digit0=48]="Digit0",l[l.Digit1=49]="Digit1",l[l.Digit2=50]="Digit2",l[l.Digit3=51]="Digit3",l[l.Digit4=52]="Digit4",l[l.Digit5=53]="Digit5",l[l.Digit6=54]="Digit6",l[l.Digit7=55]="Digit7",l[l.Digit8=56]="Digit8",l[l.Digit9=57]="Digit9",l[l.Backslash=92]="Backslash",l[l.A=65]="A",l[l.B=66]="B",l[l.C=67]="C",l[l.D=68]="D",l[l.E=69]="E",l[l.F=70]="F",l[l.Z=90]="Z",l[l.a=97]="a",l[l.b=98]="b",l[l.c=99]="c",l[l.d=100]="d",l[l.e=101]="e",l[l.f=102]="f",l[l.z=122]="z",l),d=((c=d||{}).AngleBracketLeftHeavy="❰",c.AngleBracketRightHeavy="❱",c.ArrowBack="↩",c.ArrowDown="↓",c.ArrowDownUp="⇵",c.ArrowDropRight="⤷",c.ArrowHeadRight="➤",c.ArrowLeft="←",c.ArrowLeftDouble="⇐",c.ArrowLeftRight="↔",c.ArrowLeftRightDouble="⇔",c.ArrowLeftRightDoubleStrike="⇎",c.ArrowLeftRightLong="⟷",c.ArrowRight="→",c.ArrowRightDouble="⇒",c.ArrowRightHollow="⇨",c.ArrowUp="↑",c.ArrowUpDown="⇅",c.ArrowUpRight="↗",c.ArrowsHalfLeftRight="⇋",c.ArrowsHalfRightLeft="⇌",c.ArrowsLeftRight="⇆",c.ArrowsRightLeft="⇄",c.Asterisk="∗",c.Bullseye="◎",c.Check="✔",c.Dash="—",c.Dot="•",c.Ellipsis="…",c.EnDash="–",c.Envelope="✉",c.EqualsTriple="≡",c.Flag="⚑",c.FlagHollow="⚐",c.MiddleEllipsis="⋯",c.MuchLessThan="≪",c.MuchGreaterThan="≫",c.Pencil="✎",c.Space=" ",c.SpaceThin=" ",c.SpaceThinnest=" ",c.SquareWithBottomShadow="❏",c.SquareWithTopShadow="❐",c.Warning="⚠",c.ZeroWidthSpace="​",c);let p=Object.freeze({".png":"image/png",".gif":"image/gif",".jpg":"image/jpeg",".jpeg":"image/jpeg",".jpe":"image/jpeg",".webp":"image/webp",".tif":"image/tiff",".tiff":"image/tiff",".bmp":"image/bmp"}),g=Object.freeze(["left","alt+left","ctrl+left","right","alt+right","ctrl+right","alt+,","alt+.","alt+enter","ctrl+enter","escape"]);var m=((u=m||{}).File="file",u.Git="git",u.GitHub="github",u.GitLens="gitlens",u.PRs="pr",u.Remote="vscode-remote",u.Vsls="vsls",u.VslsScc="vsls-scc",u.Virtual="vscode-vfs",u);let f=Object.freeze(new Set(["file","git","gitlens","pr","vscode-remote","vsls","vsls-scc","vscode-vfs","github"])),w="source=gitlens&product=gitlens&utm_source=gitlens-extension&utm_medium=in-app-links",v=Object.freeze({codeSuggest:`https://gitkraken.com/solutions/code-suggest?${w}`,cloudPatches:`https://gitkraken.com/solutions/cloud-patches?${w}`,graph:`https://gitkraken.com/solutions/commit-graph?${w}`,launchpad:`https://gitkraken.com/solutions/launchpad?${w}`,platform:`https://gitkraken.com/devex?${w}`,pricing:`https://gitkraken.com/gitlens/pricing?${w}`,proFeatures:`https://gitkraken.com/gitlens/pro-features?${w}`,security:`https://help.gitkraken.com/gitlens/security?${w}`,workspaces:`https://gitkraken.com/solutions/workspaces?${w}`,cli:`https://gitkraken.com/cli?${w}`,browserExtension:`https://gitkraken.com/browser-extension?${w}`,desktop:`https://gitkraken.com/git-client?${w}`,githubIssues:`https://github.com/gitkraken/vscode-gitlens/issues/?${w}`,githubDiscussions:`https://github.com/gitkraken/vscode-gitlens/discussions/?${w}`,helpCenter:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}`,helpCenterHome:`https://help.gitkraken.com/gitlens/home-view/?${w}`,releaseNotes:`https://help.gitkraken.com/gitlens/gitlens-release-notes-current/?${w}`,acceleratePrReviews:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}#accelerate-pr-reviews`,communityVsPro:`https://help.gitkraken.com/gitlens/gitlens-community-vs-gitlens-pro/?${w}`,homeView:`https://help.gitkraken.com/gitlens/home-view/?${w}&utm_campaign=walkthrough`,interactiveCodeHistory:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}#interactive-code-history`,startIntegrations:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}#improve-workflows-with-integrations`,streamlineCollaboration:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}#streamline-collaboration`})},1665:(e,t,i)=>{i.d(t,{a:()=>MergeConflictIncomingChangesNode});var r=i(1398),s=i(1518),o=i(3088),n=i(2636),a=i(4301),l=i(1078),c=i(9642),u=i(2436);let MergeConflictIncomingChangesNode=class MergeConflictIncomingChangesNode extends c.eu{constructor(e,t,i,r){super("conflict-incoming-changes",o.nk.fromFile(r,i.repoPath,i.HEAD.ref),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){if(null==this._commit){let e="rebase"===this.status.type?this.status.steps.current.commit?.ref:this.status.HEAD.ref;if(null==e)return;this._commit=this.view.container.git.commits(this.status.repoPath).getCommit(e)}return this._commit}getChildren(){return[]}async getTreeItem(){let e=await this.getCommit(),t=new r.TreeItem("Incoming changes",r.TreeItemCollapsibleState.None);return t.contextValue=c.U0.MergeConflictIncomingChanges,t.description=`${(0,n.M4)(this.status.incoming,{expand:!1,icon:!1})}${"rebase"===this.status.type?` (${(0,n.M4)(this.status.steps.current.commit,{expand:!1,icon:!1})})`:` (${(0,n.M4)(this.status.HEAD,{expand:!1,icon:!1})})`}`,t.iconPath=this.view.config.avatars?await e?.getAvatarUri({defaultStyle:l.H.get("defaultGravatarsStyle")})??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.Jl)("vscode.open","Open Revision",this.view.container.git.getRevisionUri(this.status.HEAD.ref,this.file.path,this.status.repoPath)):(0,a.gu)("gitlens.diffWith","Open Changes",{lhs:{sha:this.status.mergeBase,uri:o.nk.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:this.status.HEAD.ref,uri:o.nk.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${null!=this.status.incoming?(0,n.M4)(this.status.incoming,{expand:!1,icon:!1}):"incoming"})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t=await this.getCommit();if(e.isCancellationRequested)return;let i=new r.MarkdownString(`Incoming changes from ${(0,n.M4)(this.status.incoming,{label:!1})}\\
$(file)${s.EO.Space}${this.file.path}`,!0);if(null==t)return i.appendMarkdown("rebase"===this.status.type?`

${(0,n.M4)(this.status.steps.current.commit,{capitalize:!0,label:!1})}`:`

${(0,n.M4)(this.status.HEAD,{capitalize:!0,label:!1})}`),i;let o=await (0,u.m)(this.view.container,t,this.file,this.view.config.formats.commits.tooltipWithStatus,{cancellation:e});return i.appendMarkdown(`

${o}`),i.isTrusted=!0,i}}},1681:(e,t,i)=>{i.d(t,{Wn:()=>o,ZD:()=>s,md:()=>r});let r=["collapseWorktreesWhenPossible","defaultItemLimit","formats","openChangesInMultiDiffEditor","pageItemLimit","showComparisonContributors","showContributorsStatistics","showCurrentBranchOnTop","showRelativeDateMarkers"],s=["branches","commits","commitDetails","contributors","drafts","fileHistory","lineHistory","patchDetails","pullRequest","remotes","repositories","searchAndCompare","stashes","tags","worktrees","workspaces"];function o(e){switch(e){case"silent":return"off";case"errors":return"error";case"verbose":return"info";default:return e}}},1729:(e,t,i)=>{i.d(t,{_:()=>n,s:()=>o});var r=i(9703),s=i(8191);function o(e,t){return(0,s.b)({command:"co-authors",state:{repo:e,contributors:t}})}function n(e,t){return r.m.instance.views.revealContributor(e,t)}},1818:(e,t,i)=>{let r;i.d(t,{d:()=>QuickWizardRootStep,g:()=>e0});var s=i(1398),o=i(6525),n=i(4112),a=i(9487),l=i(255),c=i(1518),u=i(457),h=i(7079),d=i(6613),p=i(8336),g=i(5576),m=i(4301),f=i(1078),w=i(6612),v=i(9949),y=i(4941),b=i(7747),C=i(3934),k=i(6461),S=i(9426),R=i(8286),P=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),A=e=>{throw TypeError(e)},I=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&A("Object expected"),i&&(r=t[P("asyncDispose")]),void 0===r&&(r=t[P("dispose")],i&&(s=r)),"function"!=typeof r&&A("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},D=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let $={type:"integrations",label:"Connect an Additional Integration...",detail:"Connect additional integrations to view their pull requests in Launchpad"},T=(0,v.N)(),E=["draft","other","snoozed"];let LaunchpadCommand=class LaunchpadCommand extends n.d6{source;telemetryContext;savedSearch;constructor(e,t){super(e,"launchpad","launchpad",`GitLens Launchpad\xa0\xA0${c.lD}`,{description:"focus on a pull request"}),t?.source==="launchpad-indicator"&&null==e.storage.get("launchpad:indicator:hasInteracted")&&e.storage.store("launchpad:indicator:hasInteracted",new Date().toISOString()).catch(),this.source={source:t?.source??"commandPalette"},this.container.telemetry.enabled&&(this.telemetryContext={instance:T.next(),"initialState.group":t?.state?.initialGroup,"initialState.selectTopItem":t?.state?.selectTopItem??!1},this.container.telemetry.sendEvent("launchpad/open",{...this.telemetryContext},this.source));let i=0;t?.state?.item!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async ensureIntegrationConnected(e){let t=await this.container.integrations.get(e);if(null==t)return!1;let i=t.maybeConnected??await t.isConnected();return i||(i=await t.connect("launchpad")),i}async *steps(e){var t=[];try{this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let i=this.container.storage.get("launchpad:groups:collapsed");null==i&&(i=E);let r=new Map(i.map(e=>[e,!0]));if(null!=e.initialGroup)for(let t of R.Rp)r.set(t,t!==e.initialGroup);let o=I(t,function(e){let t,i,r,o;function n(){null!=i&&(clearTimeout(i),i=void 0),null==o||o.token.isCancellationRequested||o.cancel()}function a(){n(),r?.pending&&r.cancel(new p.AL),t=void 0}function l(){a(),o?.dispose(),o=void 0}async function c(){if(null==r||null==t)return;n();let e=t,i=r;t=void 0;let a=o=new s.CancellationTokenSource;try{let t=await e(a.token);if(a.token.isCancellationRequested)throw new p.AL;i!==r&&i.pending&&i.fulfill(t),r.pending&&r.fulfill(t)}catch(e){a.token.isCancellationRequested?r!==i&&i.pending&&i.cancel(e):(i!==r&&i.pending&&i.cancel(e),r?.pending&&r.cancel(e))}finally{a.dispose()}}function u(e){return t=e,n(),r?.pending||(r=(0,g.v6)()),i=setTimeout(c,500),r.promise}return u.cancel=a,u.dispose=l,u[Symbol.dispose]=l,u.flush=function(){return null!=t&&(n(),c()),null!=i&&clearTimeout(i),r?.promise},u.pending=function(){return r?.pending??!1},u}(0)),a={result:{items:[]},searchResult:void 0,title:this.title,collapsed:r,telemetryContext:this.telemetryContext,connectedIntegrations:await this.container.launchpad.getConnectedIntegrations(),inSearch:!1,updateItemsDebouncer:o},c=t=>{a.inSearch=!!t&&"mode",a.searchResult=void 0,a.updateItemsDebouncer.cancel(),e.item=void 0},u=!1;for(;this.canStepsContinue(e);){a.title=this.title,a.updateItemsDebouncer.cancel();let t=!1;if(![...a.connectedIntegrations.values()].some(e=>e)){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(u?"launchpad/steps/connect":"launchpad/opened",{...a.telemetryContext,connected:!1},this.source),u=!0;let i=f.H.get("cloudIntegrations.enabled",void 0,!1)?yield*this.confirmCloudIntegrationsConnectStep(e,a):yield*this.confirmLocalIntegrationConnectStep(e,a);if(i===n.Lt)return i;i.resume();let r=i.connected;if(!r)continue;t=!!r}if((yield*(0,l.jg)(this.container,e,a,"launchpad"))!==n.Lt){if(await F(this.container,a,{force:t}),e.counter<1||null==e.item){if(null!=e.id){let t=a.result.items?.find(t=>t.uuid===e.id?.uuid);if(null!=t){e.item={...t,group:e.id.group},e.counter<1&&(e.counter=1);continue}}this.container.telemetry.enabled&&this.container.telemetry.sendEvent(u?"launchpad/steps/main":"launchpad/opened",{...a.telemetryContext,connected:!0},this.source),u=!0;let i=yield*this.pickLaunchpadItemStep(e,a,{picked:e.item?.graphQLId??e.item?.uuid,selectTopItem:e.selectTopItem});if(i===n.Lt){c(!1);continue}if(!(0,d.hr)(i)&&i?.type==="integrations"){c(!1);let i=f.H.get("cloudIntegrations.enabled",void 0,!1)?yield*this.confirmCloudIntegrationsConnectStep(e,a):yield*this.confirmLocalIntegrationConnectStep(e,a);if(i===n.Lt)continue;i.resume(),t=!!i.connected,await F(this.container,a,{force:t}),e.counter--;continue}if(!(0,d.hr)(i)&&i?.type==="searchMode"){c(i.searchMode),e.counter--;continue}e.item={...i.item,group:i.group}}if(null==e.item)throw Error("Missing item");if(this.confirm(e.confirm)){this.sendItemActionTelemetry("select",e.item,e.item.group,a),await this.container.launchpad.ensureLaunchpadItemCodeSuggestions(e.item);let t=yield*this.confirmStep(e,a);if(t===n.Lt)continue;e.action=t}if(e.action&&this.sendItemActionTelemetry(e.action,e.item,e.item.group,a),"string"==typeof e.action)switch(e.action){case"merge":this.container.launchpad.merge(e.item);break;case"open":this.container.launchpad.open(e.item);break;case"soft-open":this.container.launchpad.open(e.item),e.counter=2;continue;case"switch":case"show-overview":this.container.launchpad.switchTo(e.item);break;case"open-worktree":this.container.launchpad.switchTo(e.item,{openInWorktree:!0});break;case"switch-and-code-suggest":case"code-suggest":this.container.launchpad.switchTo(e.item,{startCodeSuggestion:!0});break;case"open-changes":this.container.launchpad.openChanges(e.item);break;case"open-in-graph":this.container.launchpad.openInGraph(e.item)}else e.action?.action==="open-suggestion"&&this.container.launchpad.openCodeSuggestion(e.item,e.action.target);(0,n.nH)(e)}}return e.counter<0?n.Lt:void 0}catch(e){var i=e,r=!0}finally{D(t,i,r)}}*pickLaunchpadItemStep(e,t,{picked:i,selectTopItem:r}){let o=[...t.connectedIntegrations.values()].some(e=>!e),l=(i,r)=>[(0,h.uK)(r?r.toString():void 0),(0,d.Du)(d.WL.Reload,!1,{label:`$(${t.collapsed.get(i)?"chevron-down":"chevron-up"})\xa0\xA0${R.lj.get(i)}\xa0\xA0${R.aL.get(i)?.toUpperCase()}`,onDidSelect:()=>{let r=!t.collapsed.get(i);t.collapsed.set(i,r),null==e.initialGroup&&this.container.storage.store("launchpad:groups:collapsed",Array.from(t.collapsed.keys()).filter(e=>t.collapsed.get(e))),this.container.telemetry.enabled&&(L(t),this.container.telemetry.sendEvent("launchpad/groupToggled",{...t.telemetryContext,group:i,collapsed:r},this.source))}})],p=(e,t,r,o)=>{let n=[];return"mergeable"===e.actionableCategory&&n.push(a.M_),e.isSearched||n.push(e.viewer.pinned?a.wt:a.Zo,e.viewer.snoozed?a.NA:a.KD),n.push(...x(e.provider.id)),e.openRepository?.localBranch?.current||n.push(a.oS),{type:"item",label:e.title.length>60?`${e.title.substring(0,60)}...`:e.title,description:`\xa0 ${e.repository.owner.login}/${e.repository.name}#${e.id} \xa0 ${e.codeSuggestionsCount>0?` $(gitlens-code-suggestion) ${e.codeSuggestionsCount}`:""} \xa0 ${e.isNew?"(New since last view)":""}`,detail:`      ${e.viewer.pinned?"$(pinned) ":""}${e.isDraft&&"draft"!==t?"$(git-pull-request-draft) ":""}${"other"===e.actionableCategory?"":`${R.oJ.get(e.actionableCategory)[0]} \u2022  `}${(0,y.PI)(e.updatedDate)} by @${e.author.username}`,alwaysShow:o,buttons:n,iconPath:e.provider.id===u.Q7.AzureDevOps?new s.ThemeIcon("account"):e.author?.avatarUrl!=null?s.Uri.parse(e.author.avatarUrl):new s.ThemeIcon("account"),item:e,picked:null!=e.graphQLId?e.graphQLId===i||e.graphQLId===r?.graphQLId:null!=e.uuid&&(e.uuid===i||e.uuid===r?.uuid),group:t}},g=(e=[],s)=>{let o=[];if(e.length){let n=(0,S.Vy)(e),a=r&&null==i?n.get("mergeable")?.[0]||n.get("blocked")?.[0]||n.get("follow-up")?.[0]||n.get("needs-review")?.[0]:void 0;for(let[e,i]of n)if(t.inSearch&&(i=i.filter(e=>e.isSearched)),i.length){if(!s&&(o.push(...l(e,i.length)),t.collapsed.get(e)))continue;o.push(...i.map(i=>p(i,e,a,!!t.inSearch)))}}return o};function m(e){let i=t.inSearch?t.searchResult:t.result;if(i?.error!=null)return{title:`${t.title} \xa0\u2022\xa0 Unable to Load Items`,placeholder:`Unable to load items (${"HttpError"===i.error.name&&"status"in i.error&&"number"==typeof i.error.status?`${i.error.status}: ${String(i.error)}`:String(i.error)})`,items:[(0,d.Du)(d.WL.Cancel,void 0,{label:"OK"})]};if(!i?.items.length)return"mode"===t.inSearch?{title:`Search For Pull Request \xa0\u2022\xa0 ${t.title}`,placeholder:"Enter a term to search for a pull request to act on",items:[{type:"searchMode",searchMode:!1,label:"Cancel Searching",detail:e?"No pull requests found":"Go back to Launchpad",alwaysShow:!0,picked:!0}]}:{title:t.title,placeholder:"All done! Take a vacation",items:[{type:"searchMode",searchMode:!0,label:"Search for Pull Request...",alwaysShow:!0,picked:!0}]};let r=g(i.items,e),s=r.some(e=>e.picked);if("mode"===t.inSearch){let i={type:"searchMode",searchMode:!1,label:"Cancel Searching",detail:"Go back to Launchpad",alwaysShow:!0,picked:!e&&!s};return{title:`Search For Pull Request \xa0\u2022\xa0 ${t.title}`,placeholder:"Enter a term to search for a pull request to act on",items:e?[...r,i]:[i,...r]}}let o={type:"searchMode",searchMode:!0,label:"Search for Pull Request...",alwaysShow:!0,picked:!e&&!s};return{title:t.title,placeholder:"Choose a pull request or paste a pull request URL to act on",items:e?[...r,o]:[o,...g(i.items,e)]}}let f=async(e,i)=>{let r=t.inSearch?e.value:void 0;e.busy=!0;try{let s=async s=>{if("mode"===t.inSearch&&(e.items=[{type:"searchMode",searchMode:!1,label:`Searching for "${e.value}"...`,detail:"Click to cancel searching",alwaysShow:!0,picked:!0}]),await F(this.container,t,{force:i?.force,search:r},s),s?.isCancellationRequested)return;let{items:o,placeholder:n,title:a}=m(!!r);e.title=a,e.placeholder=n,e.items=o};i?.immediate?(t.updateItemsDebouncer.cancel(),await s(void 0)):await t.updateItemsDebouncer(s)}finally{e.busy=!1}},v=e=>{let{items:t,placeholder:i,title:r}=m(!!e.value);e.title=r,e.placeholder=i,e.items=t},{items:b,placeholder:C,title:k}=m(),P="mode"===t.inSearch,A=(0,n.Ac)({title:k,placeholder:C,matchOnDescription:!P,matchOnDetail:!P,items:b,buttons:[...P?[s.QuickInputButtons.Back]:[],a.re,...o?[a.Lx]:[],a.F7,a.lA],onDidActivate:e=>{this.savedSearch?.length&&("mode"===t.inSearch&&(e.value=this.savedSearch),this.savedSearch=void 0)},onDidChangeValue:async e=>{let{value:i}=e;if(this.savedSearch=i,!i?.length){t.updateItemsDebouncer.cancel(),t.searchResult=void 0,!0===t.inSearch&&(t.inSearch=!1);let{items:i,placeholder:r,title:s}=m();return e.title=s,e.placeholder=r,e.items=i,!0}if(t.inSearch||this.container.launchpad.isMaybeSupportedLaunchpadPullRequestSearchUrl(i)){let r=!1;if(!t.inSearch){r=i.length>=3;let{items:s}=m(!0);e.items=s,t.inSearch=!0}await f(e,{force:!0,immediate:r})}else{t.updateItemsDebouncer.cancel();let{items:i}=m(!0);e.title=k,e.placeholder=C,e.items=i}return!0},onDidClickButton:async(e,i)=>{switch(i){case a.Lx:return this.sendTitleActionTelemetry("connect",t),this.next([$]);case a.F7:this.sendTitleActionTelemetry("settings",t),s.commands.executeCommand("workbench.action.openSettings","gitlens.launchpad");break;case a.FF:this.sendTitleActionTelemetry("feedback",t),(0,w.CZ)("https://github.com/gitkraken/vscode-gitlens/discussions/3286");break;case a.re:this.sendTitleActionTelemetry("open-on-gkdev",t),(0,w.CZ)(this.container.launchpad.generateWebUrl());break;case a.lA:this.sendTitleActionTelemetry("refresh",t),await f(e,{force:!0,immediate:!0})}},onDidClickItemButton:async(e,i,{group:r,item:s})=>{if(i===a.qk){(0,w.CZ)(c.DS.proFeatures);return}if(s){switch(i){case a.II:case a.iD:case a.Rn:case a.EH:this.sendItemActionTelemetry("soft-open",s,r,t),this.container.launchpad.open(s);break;case a.KD:{this.sendItemActionTelemetry("snooze",s,r,t);let i=t.result.items?.find(e=>e.uuid===s.uuid);null!=i&&(i.viewer.snoozed=!0,v(e)),await this.container.launchpad.snooze(s);break}case a.NA:{this.sendItemActionTelemetry("unsnooze",s,r,t);let i=t.result.items?.find(e=>e.uuid===s.uuid);null!=i&&(i.viewer.snoozed=!1,v(e)),await this.container.launchpad.unsnooze(s);break}case a.Zo:{this.sendItemActionTelemetry("pin",s,r,t);let i=t.result.items?.find(e=>e.uuid===s.uuid);null!=i&&(i.viewer.pinned=!0,v(e)),await this.container.launchpad.pin(s);break}case a.wt:{this.sendItemActionTelemetry("unpin",s,r,t);let i=t.result.items?.find(e=>e.uuid===s.uuid);null!=i&&(i.viewer.pinned=!1,v(e)),await this.container.launchpad.unpin(s);break}case a.M_:this.sendItemActionTelemetry("merge",s,r,t),await this.container.launchpad.merge(s);break;case a.oS:this.sendItemActionTelemetry("open-worktree",s,r,t),await this.container.launchpad.switchTo(s,{openInWorktree:!0})}await f(e)}}}),I=yield A;return(0,n.fg)(A,e,I)?I[0]:n.Lt}*confirmStep(e,t){let i=x(e.item.provider.id);function r(){let t=[(0,h.uK)((0,y.PI)(e.item.updatedDate)),(0,h.Xt)({label:e.item.title,description:`${e.item.repository.owner.login}/${e.item.repository.name}#${e.item.id}`,detail:(0,C.GW)(R.oJ.get(e.item.actionableCategory)[1],{author:e.item.author.username,createdDateRelative:(0,y.PI)(e.item.createdDate)}),iconPath:e.item.provider.id===u.Q7.AzureDevOps?new s.ThemeIcon("account"):e.item.author?.avatarUrl!=null?s.Uri.parse(e.item.author.avatarUrl):void 0,buttons:[...i,...e.item.isSearched?[]:[e.item.viewer.pinned?a.wt:a.Zo,e.item.viewer.snoozed?a.NA:a.KD]]},"soft-open"),(0,d.Du)(d.WL.Noop,!1,{label:""}),...function(e){let t=[];switch(e.actionableCategory){case"mergeable":t.push((0,h.uK)("Status"),_(e),...O(e));break;case"failed-checks":case"conflicts":t.push((0,h.uK)("Status"),_(e));break;case"unassigned-reviewers":case"needs-my-review":case"changes-requested":case"reviewer-commented":case"waiting-for-review":t.push((0,h.uK)("Reviewers"),...O(e))}return e.codeSuggestions?.value!=null&&e.codeSuggestions.value.length>0&&(t.length>0&&t.push((0,d.Du)(d.WL.Noop,!1,{label:""})),t.push((0,h.uK)("Suggestions"),...function(e){if(e.codeSuggestions?.value==null||0===e.codeSuggestions.value.length)return[];let t=[(0,d.Du)(d.WL.Noop,!1,{label:`$(gitlens-code-suggestion) ${(0,C.td)("code suggestion",e.codeSuggestions.value.length)}`})];for(let i of e.codeSuggestions.value)t.push((0,h.Xt)({label:`    ${i.author.name} suggested a code change ${(0,y.PI)(i.createdAt)}: "${i.title}"`,iconPath:i.author.avatarUri??(0,o.m_)(i.author.email),buttons:[a.re]},{action:"open-suggestion",target:i.id}));return t}(e))),t.length>0&&t.push((0,d.Du)(d.WL.Noop,!1,{label:""})),t}(e.item),(0,h.uK)("Actions")];for(let r of e.item.suggestedActions)switch(r){case"merge":{let s,o;e.item.headRepository?.owner!=null&&e.item.headRepository.owner!==e.item.repository.owner?(s=null!=e.item.headRef?`${e.item.headRepository.owner.login}:${e.item.headRef.name}`:"these changes",o=null!=e.item.baseRef?` into ${e.item.repository.owner.login}:${e.item.baseRef.name}`:""):(s=e.item.headRef?.name??"these changes",o=e.item.baseRef?.name?` into ${e.item.baseRef.name}`:""),t.push((0,h.Xt)({label:"Merge...",detail:`Will merge ${s}${o}`,buttons:[...i]},r));break}case"open":t.push((0,h.Xt)({label:`${function(e){switch(e){case"unassigned-reviewers":return"Assign Reviewers";case"failed-checks":return"Resolve Failing Checks";case"conflicts":return"Resolve Conflicts";case"needs-my-review":return"Start Reviewing";case"changes-requested":case"reviewer-commented":return"Respond to Reviewers";case"waiting-for-review":return"Check In with Reviewers";case"draft":return"View draft";default:return"Open"}}(e.item.actionableCategory)} on ${function(e){switch(e){case u.Q7.GitLab:case u.PY.GitLabSelfHosted:case u.PY.CloudGitLabSelfHosted:return"GitLab";case u.Q7.GitHub:case u.PY.GitHubEnterprise:case u.PY.CloudGitHubEnterprise:return"GitHub";case u.Q7.AzureDevOps:return"Azure DevOps";case u.Q7.Bitbucket:return"Bitbucket";case u.PY.BitbucketServer:return"Bitbucket Data Center";default:return e}}(e.item.provider.id)}`,buttons:[...i]},r));break;case"switch":t.push((0,h.Xt)({label:"Switch to Branch",detail:"Will checkout the branch, create or open a worktree"},r));break;case"open-worktree":t.push((0,h.Xt)({label:"Open in Worktree",detail:"Will create or open a worktree in a new window"},r));break;case"switch-and-code-suggest":t.push((0,h.Xt)({label:`Switch & Suggest ${e.item.viewer.isAuthor?"Additional ":""}Code Changes`,detail:"Will checkout and start suggesting code changes"},r));break;case"code-suggest":t.push((0,h.Xt)({label:`Suggest ${e.item.viewer.isAuthor?"Additional ":""}Code Changes`,detail:"Will start suggesting code changes"},r));break;case"show-overview":t.push((0,h.Xt)({label:"Open Details",detail:"Will open the pull request details in the Side Bar"},r));break;case"open-changes":t.push((0,h.Xt)({label:"Open Changes",detail:"Will open the pull request changes for review"},r));break;case"open-in-graph":t.push((0,h.Xt)({label:"Open in Commit Graph"},r))}return t}let l=this.createConfirmStep(`Launchpad \xa0\u2022\xa0 Pull Request ${e.item.repository.owner.login}/${e.item.repository.name}#${e.item.id}`,r(),void 0,{placeholder:"Choose an action to perform",onDidClickItemButton:async(i,s,o)=>{switch(s){case a.II:case a.iD:case a.Rn:case a.EH:this.sendItemActionTelemetry("soft-open",e.item,e.item.group,t),this.container.launchpad.open(e.item);break;case a.re:var n;this.sendItemActionTelemetry("open-suggestion-browser",e.item,e.item.group,t),n=o,n?.item?.action!=null&&n?.item?.target!=null&&this.container.launchpad.openCodeSuggestionInBrowser(o.item.target);break;case a.Zo:this.sendItemActionTelemetry("pin",e.item,e.item.group,t),i.busy=!0,await this.container.launchpad.pin(e.item),i.items=[...r(),(0,h.uK)(),(0,d.Du)(d.WL.Cancel)],i.busy=!1;break;case a.wt:this.sendItemActionTelemetry("unpin",e.item,e.item.group,t),i.busy=!0,await this.container.launchpad.unpin(e.item),i.items=[...r(),(0,h.uK)(),(0,d.Du)(d.WL.Cancel)],i.busy=!1;break;case a.KD:this.sendItemActionTelemetry("snooze",e.item,e.item.group,t),i.busy=!0,this.container.launchpad.snooze(e.item),i.items=[...r(),(0,h.uK)(),(0,d.Du)(d.WL.Cancel)],i.busy=!1;break;case a.NA:this.sendItemActionTelemetry("unsnooze",e.item,e.item.group,t),this.container.launchpad.unsnooze(e.item),i.items=[...r(),(0,h.uK)(),(0,d.Du)(d.WL.Cancel)],i.busy=!1}}}),c=yield l;return(0,n.fg)(l,e,c)?c[0].item:n.Lt}async *confirmLocalIntegrationConnectStep(e,t){let i=(0,b.zN)(t.connectedIntegrations.values(),e=>e)?[]:[(0,d.Du)(d.WL.Cancel,void 0,{label:"Launchpad prioritizes your pull requests to keep you focused and your team unblocked",detail:"Click to learn more about Launchpad",iconPath:new s.ThemeIcon("rocket"),onDidSelect:()=>void(0,m.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad",detail:"info"}})}),(0,h.uK)()];for(let e of S.UZ)if(!t.connectedIntegrations.get(e))switch(e){case u.Q7.GitHub:i.push((0,h.Xt)({label:"Connect to GitHub...",detail:"Will connect to GitHub to provide access your pull requests and issues"},e));break;case u.Q7.GitLab:i.push((0,h.Xt)({label:"Connect to GitLab...",detail:"Will connect to GitLab to provide access your pull requests and issues"},e))}let r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an Integration`,i,(0,d.Du)(d.WL.Cancel,!1,{label:"Cancel"}),{placeholder:"Connect an integration to get started with Launchpad",buttons:[],ignoreFocusOut:!1}),o=yield r;if((0,n.fg)(r,e,o)){let e=r.freeze?.(),t=o[0].item;return{connected:!!await this.ensureIntegrationConnected(t)&&t,resume:()=>e?.dispose()}}return n.Lt}async *confirmCloudIntegrationsConnectStep(e,t){let i=(0,b.zN)(t.connectedIntegrations.values(),e=>e),r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an ${i?"Additional ":""}Integration`,[...i?[]:[(0,d.Du)(d.WL.Cancel,void 0,{label:"Launchpad prioritizes your pull requests to keep you focused and your team unblocked",detail:"Click to learn more about Launchpad",iconPath:new s.ThemeIcon("rocket"),onDidSelect:()=>void(0,m.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad",detail:"info"}})}),(0,h.uK)()],(0,h.Xt)({label:`Connect an ${i?"Additional ":""}Integration...`,detail:i?"Connect additional integrations to view their pull requests in Launchpad":"Connect an integration to accelerate your PR reviews",picked:!0},!0)],(0,d.Du)(d.WL.Cancel,!1,{label:"Cancel"}),{placeholder:i?"Connect additional integrations to Launchpad":"Connect an integration to get started with Launchpad",buttons:[],ignoreFocusOut:!0}),o=yield r;if((0,n.fg)(r,e,o)){let e;r.quickpick&&(e=r.quickpick.placeholder,r.quickpick.placeholder="Connecting integrations...");let t=r.freeze?.(),i=await this.container.integrations.connectCloudIntegrations({integrationIds:S.UZ},{source:"launchpad"});return r.quickpick&&(r.quickpick.placeholder=e),{connected:i,resume:()=>t?.dispose()}}return n.Lt}sendItemActionTelemetry(e,t,i,r){let s;this.container.telemetry.enabled&&null!=(s="string"!=typeof e&&"action"in e?e.action:e)&&this.container.telemetry.sendEvent("select"===s?"launchpad/steps/details":"launchpad/action",{...r.telemetryContext,action:s,"item.id":(0,S.hJ)(t),"item.type":t.type,"item.provider":t.provider.id,"item.actionableCategory":t.actionableCategory,"item.group":i,"item.assignees.count":t.assignees?.length??void 0,"item.createdDate":t.createdDate.getTime(),"item.updatedDate":t.updatedDate.getTime(),"item.isNew":t.isNew,"item.comments.count":t.commentCount??void 0,"item.upvotes.count":t.upvoteCount??void 0,"item.pr.codeSuggestionCount":t.codeSuggestionsCount,"item.pr.isDraft":t.isDraft,"item.pr.mergeableState":t.mergeableState,"item.pr.state":t.state,"item.pr.changes.additions":t.additions??void 0,"item.pr.changes.deletions":t.deletions??void 0,"item.pr.changes.commits":t.commitCount??void 0,"item.pr.changes.files":t.fileCount??void 0,"item.pr.failingCI":t.failingCI,"item.pr.hasConflicts":t.hasConflicts,"item.pr.reviews.count":t.reviews?.length??void 0,"item.pr.reviews.decision":t.reviewDecision??void 0,"item.pr.reviews.changeRequestCount":t.changeRequestReviewCount??void 0,"item.viewer.isAuthor":t.viewer.isAuthor,"item.viewer.isAssignee":t.viewer.isAssignee,"item.viewer.pinned":t.viewer.pinned,"item.viewer.snoozed":t.viewer.snoozed,"item.viewer.pr.canMerge":t.viewer.canMerge,"item.viewer.pr.isReviewer":t.viewer.isReviewer,"item.viewer.pr.shouldAssignReviewer":t.viewer.shouldAssignReviewer,"item.viewer.pr.shouldMerge":t.viewer.shouldMerge,"item.viewer.pr.shouldReview":t.viewer.shouldReview,"item.viewer.pr.waitingOnReviews":t.viewer.waitingOnReviews},this.source)}sendTitleActionTelemetry(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("launchpad/title/action",{...t.telemetryContext,action:e},this.source)}};function _(e){let t,i=e.baseRef?.name!=null?`$(git-branch) ${e.baseRef.name}`:"",r=e.headCommit?.buildStatuses?.[0].state;t=r===k.n2.Success?e.hasConflicts?`$(error) Conflicts with ${i}, but passed CI checks`:"$(pass) No conflicts, and passed CI checks":r===k.n2.Failed?e.hasConflicts?`$(error) Conflicts with ${i}, and failed CI checks`:"$(error) No conflicts, but failed CI checks":e.hasConflicts?`$(error) Conflicts with ${i}`:"$(pass) No conflicts";let s=x(e.provider.id);return(0,h.Xt)({label:t,buttons:[...s]},"soft-open")}function O(e){let t=x(e.provider.id);if(null==e.reviews||0===e.reviews.length)return[(0,h.Xt)({label:"$(info) No reviewers have been assigned",buttons:[...t]},"soft-open")];let i=[];for(let r of e.reviews){let o,n=r.reviewer.username===e.currentViewer.username,a=e.provider.id===u.Q7.AzureDevOps?new s.ThemeIcon("account"):null!=r.reviewer.avatarUrl?s.Uri.parse(r.reviewer.avatarUrl):new s.ThemeIcon("account");switch(r.state){case k.lE.Approved:o=`${n?"You":r.reviewer.username} approved these changes`;break;case k.lE.ChangesRequested:o=`${n?"You":r.reviewer.username} requested changes`;break;case k.lE.Commented:o=`${n?"You":r.reviewer.username} left a comment review`;break;case k.lE.ReviewRequested:o=`${n?"You haven't":`${r.reviewer.username} hasn't`} reviewed these changes yet`}null!=o&&i.push((0,h.Xt)({label:o,iconPath:a,buttons:[...t]},"soft-open"))}return i}function x(e){let t=function(e){switch(e){case u.Q7.GitLab:case u.PY.GitLabSelfHosted:case u.PY.CloudGitLabSelfHosted:return a.iD;case u.Q7.GitHub:case u.PY.GitHubEnterprise:case u.PY.CloudGitHubEnterprise:return a.II;case u.Q7.AzureDevOps:return a.Rn;case u.Q7.Bitbucket:case u.PY.BitbucketServer:return a.EH;default:return}}(e);return null!=t?[t]:[]}async function F(e,t,i,r){let s=await e.launchpad.getCategorizedItems(i,r);t.inSearch?t.searchResult=s:(t.result=s,e.telemetry.enabled&&L(t)),t.connectedIntegrations=await e.launchpad.getConnectedIntegrations()}function L(e){let t;if(null!=e.telemetryContext){if(null!=e.result.error)t={...e.telemetryContext,"items.error":String(e.result.error)};else{let i=(0,S.Zh)(e.result.items);for(let[r,s]of(t={...e.telemetryContext,"items.count":e.result.items.length,"items.timings.prs":e.result.timings?.prs,"items.timings.codeSuggestionCounts":e.result.timings?.codeSuggestionCounts,"items.timings.enrichedItems":e.result.timings?.enrichedItems,"groups.count":i.size},i))t[`groups.${r}.count`]=s,t[`groups.${r}.collapsed`]=e.collapsed.get(r)}e.telemetryContext=t}}function B(e,t){let i=q(e,t);if(!0===(t&&void 0!==t.fallback?t.fallback:B.defaults.fallback)&&""===i){let s="";for(let t=0;t<e.length;t++){let i=function(e,t){let i=e.charCodeAt(t);if(isNaN(i))throw RangeError("Index "+t+' out of range for string "'+e+'"; please open an issue at https://github.com/Trott/slug/issues/new');if(i<55296||i>57343)return[e.charAt(t),t];if(i>=55296&&i<=56319){if(e.length<=t+1)return[" ",t];let i=e.charCodeAt(t+1);return i<56320||i>57343?[" ",t]:[e.charAt(t)+e.charAt(t+1),t+1]}if(0===t)return[" ",t];let r=e.charCodeAt(t-1);if(r<55296||r>56319)return[" ",t];throw Error('String "'+e+'" reaches code believed to be unreachable; please open an issue at https://github.com/Trott/slug/issues/new')}(e,t);t=i[1],s+=i[0]}i=q(r(s),t)}return i}r="undefined"!=typeof window?window.btoa?function(e){return btoa(unescape(encodeURIComponent(e)))}:function(e){let t=unescape(encodeURIComponent(e+"")),i="";for(let e,r,s=0,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";t.charAt(0|s)||(o="=",s%1);i+=o.charAt(63&e>>8-s%1*8)){if((r=t.charCodeAt(s+=3/4))>255)throw Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");e=e<<8|r}return i}:function(e){return Buffer.from(e).toString("base64")};let U={bg:{Й:"Y",й:"y",X:"H",x:"h",Ц:"Ts",ц:"ts",Щ:"Sht",щ:"sht",Ъ:"A",ъ:"a",Ь:"Y",ь:"y"},de:{Ä:"AE",ä:"ae",Ö:"OE",ö:"oe",Ü:"UE",ü:"ue"},sr:{đ:"dj",Đ:"DJ"},uk:{И:"Y",и:"y",Й:"Y",й:"y",Ц:"Ts",ц:"ts",Х:"Kh",х:"kh",Щ:"Shch",щ:"shch",Г:"H",г:"h"}},N={};function q(e,t){if("string"!=typeof e)throw Error("slug() requires a string argument, received "+typeof e);"string"==typeof t&&(t={replacement:t}),(t=t?Object.assign({},t):{}).mode=t.mode||B.defaults.mode;let i=B.defaults.modes[t.mode],r=["replacement","multicharmap","charmap","remove","lower","trim"];for(let e,s=0,o=r.length;s<o;s++)t[e=r[s]]=e in t?t[e]:i[e];let s=U[t.locale]||N,o=[];for(let e in t.multicharmap){if(!Object.prototype.hasOwnProperty.call(t.multicharmap,e))continue;let i=e.length;-1===o.indexOf(i)&&o.push(i)}o=o.sort(function(e,t){return t-e});let n="rfc3986"===t.mode?/[^\w\s\-.~]/:/[^A-Za-z0-9\s]/,a="";for(let i,r=0,l=e.length;r<l;r++){i=e[r];let l=!1;for(let s=0;s<o.length;s++){let n=o[s],a=e.substr(r,n);if(t.multicharmap[a]){r+=n-1,i=t.multicharmap[a],l=!0;break}}l||(i=s[i]?s[i]:t.charmap[i]?t.charmap[i].replace(t.replacement," "):i.includes(t.replacement)?i.replace(t.replacement," "):i.replace(n,"")),a+=i}return t.remove&&(a=a.replace(t.remove,"")),t.trim&&(a=a.trim()),a=a.replace(/\s+/g,t.replacement),t.lower&&(a=a.toLowerCase()),a}let W={फ़:"Fi",ग़:"Ghi",ख़:"Khi",क़:"Qi",ड़:"ugDha",ढ़:"ugDhha",य़:"Yi",ज़:"Za",בִי:"i",בֵ:"e",בֵי:"e",בֶ:"e",בַ:"a",בָ:"a",בֹ:"o",וֹ:"o",בֻ:"u",וּ:"u",בּ:"b",כּ:"k",ךּ:"k",פּ:"p",שׁ:"sh",שׂ:"s",בְ:"e",חֱ:"e",חֲ:"a",חֳ:"o",בִ:"i"},M={À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",Æ:"AE",Ç:"C",È:"E",É:"E",Ê:"E",Ë:"E",Ì:"I",Í:"I",Î:"I",Ï:"I",Ð:"D",Ñ:"N",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ő:"O",Ø:"O",Ō:"O",Ù:"U",Ú:"U",Û:"U",Ü:"U",Ű:"U",Ý:"Y",Þ:"TH",ß:"ss",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",æ:"ae",ç:"c",è:"e",é:"e",ê:"e",ë:"e",ì:"i",í:"i",î:"i",ï:"i",ð:"d",ñ:"n",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ő:"o",ø:"o",ō:"o",Œ:"OE",œ:"oe",ù:"u",ú:"u",û:"u",ü:"u",ű:"u",ý:"y",þ:"th",ÿ:"y",ẞ:"SS",α:"a",β:"b",γ:"g",δ:"d",ε:"e",ζ:"z",η:"h",θ:"th",ι:"i",κ:"k",λ:"l",μ:"m",ν:"n",ξ:"3",ο:"o",π:"p",ρ:"r",σ:"s",τ:"t",υ:"y",φ:"f",χ:"x",ψ:"ps",ω:"w",ά:"a",έ:"e",ί:"i",ό:"o",ύ:"y",ή:"h",ώ:"w",ς:"s",ϊ:"i",ΰ:"y",ϋ:"y",ΐ:"i",Α:"A",Β:"B",Γ:"G",Δ:"D",Ε:"E",Ζ:"Z",Η:"H",Θ:"Th",Ι:"I",Κ:"K",Λ:"L",Μ:"M",Ν:"N",Ξ:"3",Ο:"O",Π:"P",Ρ:"R",Σ:"S",Τ:"T",Υ:"Y",Φ:"F",Χ:"X",Ψ:"PS",Ω:"W",Ά:"A",Έ:"E",Ί:"I",Ό:"O",Ύ:"Y",Ή:"H",Ώ:"W",Ϊ:"I",Ϋ:"Y",ş:"s",Ş:"S",ı:"i",İ:"I",ğ:"g",Ğ:"G",а:"a",б:"b",в:"v",г:"g",д:"d",е:"e",ё:"yo",ж:"zh",з:"z",и:"i",й:"j",к:"k",л:"l",м:"m",н:"n",о:"o",п:"p",р:"r",с:"s",т:"t",у:"u",ф:"f",х:"h",ц:"c",ч:"ch",ш:"sh",щ:"sh",ъ:"u",ы:"y",ь:"",э:"e",ю:"yu",я:"ya",А:"A",Б:"B",В:"V",Г:"G",Д:"D",Е:"E",Ё:"Yo",Ж:"Zh",З:"Z",И:"I",Й:"J",К:"K",Л:"L",М:"M",Н:"N",О:"O",П:"P",Р:"R",С:"S",Т:"T",У:"U",Ф:"F",Х:"H",Ц:"C",Ч:"Ch",Ш:"Sh",Щ:"Sh",Ъ:"U",Ы:"Y",Ь:"",Э:"E",Ю:"Yu",Я:"Ya",Є:"Ye",І:"I",Ї:"Yi",Ґ:"G",є:"ye",і:"i",ї:"yi",ґ:"g",č:"c",ď:"d",ě:"e",ň:"n",ř:"r",š:"s",ť:"t",ů:"u",ž:"z",Č:"C",Ď:"D",Ě:"E",Ň:"N",Ř:"R",Š:"S",Ť:"T",Ů:"U",Ž:"Z",ľ:"l",ĺ:"l",ŕ:"r",Ľ:"L",Ĺ:"L",Ŕ:"R",ą:"a",ć:"c",ę:"e",ł:"l",ń:"n",ś:"s",ź:"z",ż:"z",Ą:"A",Ć:"C",Ę:"E",Ł:"L",Ń:"N",Ś:"S",Ź:"Z",Ż:"Z",ā:"a",ē:"e",ģ:"g",ī:"i",ķ:"k",ļ:"l",ņ:"n",ū:"u",Ā:"A",Ē:"E",Ģ:"G",Ī:"I",Ķ:"K",Ļ:"L",Ņ:"N",Ū:"U",أ:"a",إ:"i",ب:"b",ت:"t",ث:"th",ج:"g",ح:"h",خ:"kh",د:"d",ذ:"th",ر:"r",ز:"z",س:"s",ش:"sh",ص:"s",ض:"d",ط:"t",ظ:"th",ع:"aa",غ:"gh",ف:"f",ق:"k",ك:"k",ل:"l",م:"m",ن:"n",ه:"h",و:"o",ي:"y",ء:"aa",ة:"a",آ:"a",ا:"a",پ:"p",ژ:"zh",گ:"g",چ:"ch",ک:"k",ی:"i",ė:"e",į:"i",ų:"u",Ė:"E",Į:"I",Ų:"U",ț:"t",Ț:"T",ţ:"t",Ţ:"T",ș:"s",Ș:"S",ă:"a",Ă:"A",Ạ:"A",Ả:"A",Ầ:"A",Ấ:"A",Ậ:"A",Ẩ:"A",Ẫ:"A",Ằ:"A",Ắ:"A",Ặ:"A",Ẳ:"A",Ẵ:"A",Ẹ:"E",Ẻ:"E",Ẽ:"E",Ề:"E",Ế:"E",Ệ:"E",Ể:"E",Ễ:"E",Ị:"I",Ỉ:"I",Ĩ:"I",Ọ:"O",Ỏ:"O",Ồ:"O",Ố:"O",Ộ:"O",Ổ:"O",Ỗ:"O",Ơ:"O",Ờ:"O",Ớ:"O",Ợ:"O",Ở:"O",Ỡ:"O",Ụ:"U",Ủ:"U",Ũ:"U",Ư:"U",Ừ:"U",Ứ:"U",Ự:"U",Ử:"U",Ữ:"U",Ỳ:"Y",Ỵ:"Y",Ỷ:"Y",Ỹ:"Y",Đ:"D",ạ:"a",ả:"a",ầ:"a",ấ:"a",ậ:"a",ẩ:"a",ẫ:"a",ằ:"a",ắ:"a",ặ:"a",ẳ:"a",ẵ:"a",ẹ:"e",ẻ:"e",ẽ:"e",ề:"e",ế:"e",ệ:"e",ể:"e",ễ:"e",ị:"i",ỉ:"i",ĩ:"i",ọ:"o",ỏ:"o",ồ:"o",ố:"o",ộ:"o",ổ:"o",ỗ:"o",ơ:"o",ờ:"o",ớ:"o",ợ:"o",ở:"o",ỡ:"o",ụ:"u",ủ:"u",ũ:"u",ư:"u",ừ:"u",ứ:"u",ự:"u",ử:"u",ữ:"u",ỳ:"y",ỵ:"y",ỷ:"y",ỹ:"y",đ:"d",Ә:"AE",ә:"ae",Ғ:"GH",ғ:"gh",Қ:"KH",қ:"kh",Ң:"NG",ң:"ng",Ү:"UE",ү:"ue",Ұ:"U",ұ:"u",Һ:"H",һ:"h",Ө:"OE",ө:"oe",ђ:"dj",ј:"j",љ:"lj",њ:"nj",ћ:"c",џ:"dz",Ђ:"Dj",Ј:"j",Љ:"Lj",Њ:"Nj",Ћ:"C",Џ:"Dz",ǌ:"nj",ǉ:"lj",ǋ:"NJ",ǈ:"LJ",अ:"a",आ:"aa",ए:"e",ई:"ii",ऍ:"ei",ऎ:"ae",ऐ:"ai",इ:"i",ओ:"o",ऑ:"oi",ऒ:"oii",ऊ:"uu",औ:"ou",उ:"u",ब:"B",भ:"Bha",च:"Ca",छ:"Chha",ड:"Da",ढ:"Dha",फ:"Fa",ग:"Ga",घ:"Gha",ग़:"Ghi",ह:"Ha",ज:"Ja",झ:"Jha",क:"Ka",ख:"Kha",ख़:"Khi",ल:"L",ळ:"Li",ऌ:"Li",ऴ:"Lii",ॡ:"Lii",म:"Ma",न:"Na",ङ:"Na",ञ:"Nia",ण:"Nae",ऩ:"Ni",ॐ:"oms",प:"Pa",क़:"Qi",र:"Ra",ऋ:"Ri",ॠ:"Ri",ऱ:"Ri",स:"Sa",श:"Sha",ष:"Shha",ट:"Ta",त:"Ta",ठ:"Tha",द:"Tha",थ:"Tha",ध:"Thha",ड़:"ugDha",ढ़:"ugDhha",व:"Va",य:"Ya",य़:"Yi",ज़:"Za",ə:"e",Ə:"E",ა:"a",ბ:"b",გ:"g",დ:"d",ე:"e",ვ:"v",ზ:"z",თ:"t",ი:"i",კ:"k",ლ:"l",მ:"m",ნ:"n",ო:"o",პ:"p",ჟ:"zh",რ:"r",ს:"s",ტ:"t",უ:"u",ფ:"p",ქ:"k",ღ:"gh",ყ:"q",შ:"sh",ჩ:"ch",ც:"ts",ძ:"dz",წ:"ts",ჭ:"ch",ხ:"kh",ჯ:"j",ჰ:"h",ב:"v",גּ:"g",ג:"g",ד:"d",דּ:"d",ה:"h",ו:"v",ז:"z",ח:"h",ט:"t",י:"y",כ:"kh",ך:"kh",ל:"l",מ:"m",ם:"m",נ:"n",ן:"n",ס:"s",פ:"f",ף:"f",ץ:"ts",צ:"ts",ק:"k",ר:"r",תּ:"t",ת:"t"};B.charmap=Object.assign({},M),B.multicharmap=Object.assign({},W),B.defaults={charmap:B.charmap,mode:"pretty",modes:{rfc3986:{replacement:"-",remove:null,lower:!0,charmap:B.charmap,multicharmap:B.multicharmap,trim:!0},pretty:{replacement:"-",remove:null,lower:!0,charmap:B.charmap,multicharmap:B.multicharmap,trim:!0}},multicharmap:B.multicharmap,fallback:!0},B.reset=function(){B.defaults.modes.rfc3986.charmap=B.defaults.modes.pretty.charmap=B.charmap=B.defaults.charmap=Object.assign({},M),B.defaults.modes.rfc3986.multicharmap=B.defaults.modes.pretty.multicharmap=B.multicharmap=B.defaults.multicharmap=Object.assign({},W),N=""},B.extend=function(e){let t=Object.keys(e),i={},r={};for(let s=0;s<t.length;s++)t[s].length>1?i[t[s]]=e[t[s]]:r[t[s]]=e[t[s]];Object.assign(B.charmap,r),Object.assign(B.multicharmap,i)},B.setLocale=function(e){N=U[e]||{}};var G=i(2458),H=i(3467);async function V(e,t,i){let r=function(e){if(null==e.repository)throw Error("Missing repository");return{remote:{url:e.repository.url,domain:e.provider.domain},name:`${e.repository.owner}/${e.repository.repo}`,provider:{id:e.provider.id,domain:e.provider.domain,repoDomain:e.repository.owner,repoName:e.repository.repo,repoOwnerDomain:e.repository.owner}}}(t),o=await e.repositoryIdentity.getRepository(r,{openIfNeeded:!0,keepOpen:!1,prompt:!1});if(null==o&&!i?.skipVirtual){let i=function(e){if(null==e.repository)throw Error("Missing repository");if("github"!==e.provider.id)return;let t=s.Uri.parse(e.repository.url??e.url);return t.with({scheme:c.xB.Virtual,authority:"github",path:t.path})}(t);null!=i&&(o=await e.git.getOrOpenRepository(i,{closeOnOpen:!0,detectNested:!1}))}return null==o&&i?.promptIfNeeded&&(o=await e.repositoryIdentity.getRepository(r,{openIfNeeded:!0,keepOpen:!1,prompt:!0})),o}var j=i(6189),Q=i(926);let z=[u.Q7.GitHub,u.PY.CloudGitHubEnterprise,u.Q7.GitLab,u.PY.CloudGitLabSelfHosted,u.Q7.AzureDevOps,u.Q7.Bitbucket,u.tp.Jira],Y=(0,v.N)(),K={label:"Connect an Additional Integration...",detail:"Connect additional integrations to view and start work on their issues",item:void 0},Z={label:"Manage integrations...",detail:"Manage your connected integrations",item:void 0};let StartWorkBaseCommand=class StartWorkBaseCommand extends n.d6{source;telemetryContext;telemetryEventKey;constructor(e,t,i="startWork",r="startWork",s=`Start Work\xa0\xA0${c.lD}`,o="Start work on an issue",n="startWork"){super(e,i,r,s,{description:o}),this.telemetryEventKey=n,this.source={source:t?.source??"commandPalette"},this.container.telemetry.enabled&&(this.telemetryContext={instance:Y.next()},this.container.telemetry.sendEvent(`${this.telemetryEventKey}/open`,{...this.telemetryContext},this.source)),this.initialState={counter:0}}async *steps(e){this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let t={result:void 0,title:this.title,telemetryContext:this.telemetryContext,connectedIntegrations:await ee(this.container)},i=!1;for(;this.canStepsContinue(e);){let r;if(t.title=this.title,![...t.connectedIntegrations.values()].some(e=>e)){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(i?`${this.telemetryEventKey}/steps/connect`:`${this.telemetryEventKey}/opened`,{...t.telemetryContext,connected:!1},this.source),i=!0;let r=f.H.get("cloudIntegrations.enabled",void 0,!1)?yield*this.confirmCloudIntegrationsConnectStep(e,t):yield*this.confirmLocalIntegrationConnectStep(e,t);if(r===n.Lt)return r;if(r.resume(),!r.connected)continue}if("startWork"===this.key?r="startWork":"associateIssueWithBranch"===this.key&&(r="associateIssueWithBranch"),null==r||(yield*(0,l.jg)(this.container,e,t,r))!==n.Lt){if(e.counter<1||null==e.item){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(i?`${this.telemetryEventKey}/steps/issue`:`${this.telemetryEventKey}/opened`,{...t.telemetryContext,connected:!0},this.source),i=!0;let r=yield*this.pickStartWorkIssueStep(e,t);if(r===n.Lt)continue;e.item=r,this.container.telemetry.enabled&&this.container.telemetry.sendEvent(`${this.telemetryEventKey}/issue/chosen`,{...t.telemetryContext,...X(r),connected:!0},this.source)}if(null==e.item)throw Error("Missing item");this.continuation&&(yield*this.continuation(e,t)),(0,n.nH)(e)}}return e.counter<0?n.Lt:void 0}async getIssueRepositoryIfExists(e){try{return await V(this.container,e)}catch{return}}async *confirmLocalIntegrationConnectStep(e,t){t.result=void 0;let i=[];for(let e of z)t.connectedIntegrations.get(e)||e===u.Q7.GitHub&&i.push((0,h.Xt)({label:"Connect to GitHub...",detail:"Will connect to GitHub to provide access to your pull requests and issues"},e));let r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an Integration`,i,(0,d.Du)(d.WL.Cancel,!1,{label:"Cancel"}),{placeholder:this.overrides?.placeholders?.localIntegrationConnect??"Connect an integration to view its issues in Start Work",buttons:[],ignoreFocusOut:!1}),s=yield r;if((0,n.fg)(r,e,s)){let e=r.freeze?.(),t=s[0].item;return{connected:!!await this.ensureIntegrationConnected(t)&&t,resume:()=>e?.dispose()}}return n.Lt}async ensureIntegrationConnected(e){let t=await this.container.integrations.get(e);if(null==t)return!1;let i=t.maybeConnected??await t.isConnected();return i||(i=await t.connect(this.overrides?.ownSource??"startWork")),i}async *confirmCloudIntegrationsConnectStep(e,t,i){let r,s,o=(0,b.zN)(t.connectedIntegrations.values(),e=>e);if(t.result=void 0,null==i?(r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an ${o?"Additional ":""}Integration`,[(0,h.Xt)({label:`Connect an ${o?"Additional ":""}Integration...`,detail:o?"Connect additional integrations to view their issues":"Connect an integration to accelerate your work",picked:!0},!0)],(0,d.Du)(d.WL.Cancel,!1,{label:"Cancel"}),{placeholder:o?this.overrides?.placeholders?.cloudIntegrationConnectHasConnected??"Connect additional integrations to Start Work":this.overrides?.placeholders?.cloudIntegrationConnectNoConnected??"Connect an integration to get started with Start Work",buttons:[],ignoreFocusOut:!0}),s=yield r):(r=i,s=[!0]),(0,n.fg)(r,e,s)){let e;r.quickpick&&(e=r.quickpick.placeholder,r.quickpick.placeholder="Connecting integrations...");let t=r.freeze?.(),i=await this.container.integrations.connectCloudIntegrations({integrationIds:z},{source:this.overrides?.ownSource??"startWork"});return r.quickpick&&(r.quickpick.placeholder=e),{connected:i,resume:()=>t?.dispose()}}return n.Lt}async *pickStartWorkIssueStep(e,t){let i=[...t.connectedIntegrations.values()].some(e=>!e),r=t=>{var i;let r=t.issue.url?function(e){switch(e){case u.Q7.AzureDevOps:return a.Rn;case u.Q7.Bitbucket:return a.EH;case u.Q7.GitHub:case u.PY.CloudGitHubEnterprise:return a.II;case u.Q7.GitLab:case u.PY.CloudGitLabSelfHosted:return a.iD;case u.tp.Jira:return a.z3;default:return}}(t.issue.provider.id):void 0,o=t.issue.body?`${i=200," ".repeat(200)}

${t.issue.body}`:"";return{label:t.issue.title.length>60?`${t.issue.title.substring(0,60)}...`:t.issue.title,description:`\xa0 ${t.issue.repository?`${t.issue.repository.owner}/${t.issue.repository.repo}#`:""}${t.issue.id} \xa0`,detail:`      ${(0,y.PI)(t.issue.updatedDate)} by @${t.issue.author.name}${o}`,iconPath:t.issue.author?.avatarUrl!=null?s.Uri.parse(t.issue.author.avatarUrl):void 0,item:t,picked:t.issue.id===e.item?.issue.id,buttons:r?[r]:[]}},o=e=>{let t=[];return e.items?.length&&t.push(...e.items.map(r)),t},l=async e=>{e.busy=!0;try{var r;await J(this.container,t);let{items:s,placeholder:n}=(r=this.overrides?.placeholders?.issueSelection,t.result?.items.length?{placeholder:r??"Choose an issue to start working on",items:[...o(t.result),(0,d.Du)(d.WL.Cancel)]}:{placeholder:"No issues found for your open repositories.",items:[i?K:Z,(0,d.Du)(d.WL.Cancel)]});e.placeholder=n,e.items=s}catch{e.placeholder="Error retrieving issues",e.items=[(0,d.Du)(d.WL.Cancel)]}finally{e.busy=!1}},c=(0,n.Ac)({title:t.title,placeholder:"Loading...",matchOnDescription:!0,matchOnDetail:!0,items:[],buttons:[...i?[a.Lx]:[]],onDidActivate:l,onDidClickButton:async(e,i)=>{if(i===a.Lx)return this.sendTitleActionTelemetry("connect",t),this.next([K])},onDidClickItemButton:(e,i,{item:r})=>{switch(i){case a.Rn:case a.EH:case a.II:case a.iD:case a.z3:this.sendItemActionTelemetry("soft-open",r,t),this.open(r);return;default:return!1}},onDidChangeValue:()=>!0}),h=yield c;if(!(0,n.fg)(c,e,h))return n.Lt;let p=h[0];if(p===K){this.sendTitleActionTelemetry("connect",t);let i=f.H.get("cloudIntegrations.enabled",void 0,!1)?yield*this.confirmCloudIntegrationsConnectStep(e,t,c):yield*this.confirmLocalIntegrationConnectStep(e,t);return i===n.Lt?i:(i.resume(),n.Lt)}return p===Z?(this.sendActionTelemetry("manage",t),(0,m.RS)("gitlens.plus.cloudIntegrations.manage",{source:{source:this.overrides?.ownSource??"startWork"}}),(0,n.nH)(e),n.Lt):{...p.item}}open(e){null!=e.issue.url&&(0,w.CZ)(e.issue.url)}sendItemActionTelemetry(e,t,i){this.container.telemetry.sendEvent(`${this.telemetryEventKey}/issue/action`,{...i.telemetryContext,...X(t),action:e,connected:!0})}sendTitleActionTelemetry(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(`${this.telemetryEventKey}/title/action`,{...t.telemetryContext,connected:!0,action:e},this.source)}sendActionTelemetry(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(`${this.telemetryEventKey}/action`,{...t.telemetryContext,connected:!0,action:e},this.source)}};let StartWorkCommand=class StartWorkCommand extends StartWorkBaseCommand{overrides;async *continuation(e,t){let i=e.item.issue,r=i&&await this.getIssueRepositoryIfExists(i);(yield*e0(this.container,{command:"branch",state:{subcommand:"create",repo:r,name:i?`${B(i.id,{lower:!1})}-${B(i.title)}`:void 0,suggestNameOnly:!0,suggestRepoOnly:!0,confirmOptions:["--switch","--worktree"],associateWithIssue:i}},this.pickedVia))!==n.Lt?e.counter=0:(0,n.nH)(e)}};let AssociateIssueWithBranchCommand=class AssociateIssueWithBranchCommand extends StartWorkBaseCommand{branch;overrides={ownSource:"associateIssueWithBranch",placeholders:{cloudIntegrationConnectHasConnected:"Connect additional integrations to associate their issues with your branches",cloudIntegrationConnectNoConnected:"Connect an integration to associate its issues with your branches",localIntegrationConnect:"Connect an integration to associate its issues with your branches",issueSelection:"Choose an issue to associate with your branch"}};constructor(e,t){super(e,{command:"associateIssueWithBranch",source:t?.source??"commandPalette"},"associateIssueWithBranch","associateIssueWithBranch",`Associate Issue with Branch\xa0\xA0${c.lD}`,"Associate an issue with your branch","associateIssueWithBranch"),this.branch=t?.branch}async *continuation(e,t){if(!this.container.git.openRepositories.length)return;let i=e.item.issue;if(null==this.branch&&(this.branch=await (0,j.Ol)(`Associate Issue with Branch\xa0\xA0${c.lD}`,"Choose a branch to associate the issue with",this.container.git.openRepositories,{filter:e=>!e.remote})),null==this.branch)return;let r=(0,Q.XN)(i);null!=r&&(await (0,H.IZ)(this.container,this.branch,{...i,type:"issue"},r),(0,n.nH)(e))}};async function J(e,t){var i;t.connectedIntegrations=await ee(e);let r=[...t.connectedIntegrations.keys()].filter(e=>!!t.connectedIntegrations.get(e));t.result??={items:(await e.integrations.getMyIssues(r,{openRepositoriesOnly:!0}))?.map(e=>({issue:e}))??[]},e.telemetry.enabled&&((i=t).telemetryContext={...i.telemetryContext,"items.count":i.result?.items.length??0})}function X(e){return{"item.id":(0,G.Fx)(e.issue.id),"item.type":e.issue.type,"item.provider":e.issue.provider.id,"item.assignees.count":e.issue.assignees?.length??void 0,"item.createdDate":e.issue.createdDate.getTime(),"item.updatedDate":e.issue.updatedDate.getTime(),"item.comments.count":e.issue.commentsCount??void 0,"item.upvotes.count":e.issue.thumbsUpCount??void 0,"item.issue.state":e.issue.state}}async function ee(e){let t=new Map;return await Promise.allSettled(z.map(async i=>{let r=await e.integrations.get(i);if(null==r){t.set(i,!1);return}let s=(r.maybeConnected??await r.isConnected())&&await r.access();t.set(i,s)})),t}var et=i(655),ei=i(1403),er=i(311),es=i(2636),eo=i(9403);function en(e,t,i,r){var s,o;return{...i,item:t,picked:i.picked??(s=e,void 0===(o=t)?0===s.length:Array.isArray(o)?0===o.length?0===s.length:o.every(e=>s.includes(e)):s.includes(o)),context:r}}var ea=i(892),el=i(7005);let ec=new Map([["create","Create"],["delete","Delete"],["prune","Prune"],["rename","Rename"]]);function eu(e,t){return null==t?e:`${ec.get(t)} ${e}`}let BranchGitCommand=class BranchGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"branch","branch","Branch",{description:"create, prune, rename, or delete branches"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t?.state.subcommand){case"create":null!=t.state.flags&&i++,null!=t.state.reference&&i++,!t.state.suggestNameOnly&&null!=t.state.name&&i++,t.state.suggestRepoOnly&&null!=t.state.repo&&i--;break;case"delete":case"prune":null!=t.state.references&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.name&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&"prune"!==this.subcommand&&"rename"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={associatedView:this.container.views.branches,repos:this.container.git.openRepositories,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=eu("delete"===e.subcommand||"prune"===e.subcommand?"Branches":this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo||e?.subcommand==="create"&&e.suggestRepoOnly)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}switch(e.subcommand){case"create":if(!(e.repo instanceof ei.LN)||"create"!==e.subcommand)throw Error("Missing repository");yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":if(!(e.repo instanceof ei.LN)||"delete"!==e.subcommand)throw Error("Missing repository");yield*this.deleteCommandSteps(e,t);break;case"prune":if(!(e.repo instanceof ei.LN)||"prune"!==e.subcommand)throw Error("Missing repository");yield*this.deleteCommandSteps(e,t);break;case"rename":if(!(e.repo instanceof ei.LN)||"rename"!==e.subcommand)throw Error("Missing repository");yield*this.renameCommandSteps(e,t),e.name=void 0;break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new branch",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified branches",picked:"delete"===e.subcommand,item:"delete"},{label:"prune",description:"deletes local branches with missing upstreams",picked:"prune"===e.subcommand,item:"prune"},{label:"rename",description:"renames the specified branch",picked:"rename"===e.subcommand,item:"rename"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.Re)(e,t,{placeholder:"Choose a base to create the new branch from",picked:e.reference?.ref??(await e.repo.git.branches().getBranch())?.ref,title:"Select Base to Create Branch From",value:(0,es.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name||e.suggestNameOnly){let i=yield*(0,l.wS)(e,t,{title:`${t.title} from ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.name??((0,es.gC)(e.reference)&&e.reference.remote?(0,es.fC)(e.reference):void 0)});if(i===n.Lt)continue;e.name=i}if(this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}if(e.flags.includes("--worktree")){if((yield*e0(this.container,{command:"worktree",state:{subcommand:"create",reference:e.reference,createBranch:e.name,repo:e.repo}},this.pickedVia))!==n.Lt)continue;(0,n.nH)(e);return}if((0,n.nH)(e),e.flags.includes("--switch"))await e.repo.switch(e.reference.ref,{createBranch:e.name});else try{await e.repo.git.branches().createBranch?.(e.name,e.reference.ref)}catch(e){return el.Vy.error(e),(0,eo.qQ)("Unable to create branch")}if(null!=e.associateWithIssue){let t=e.associateWithIssue,i=await e.repo.git.branches().getBranch(e.name),r=(0,Q.XN)(t);null!=i&&null!=r&&await (0,H.IZ)(this.container,i,{...t,type:"issue"},r)}}}*createCommandConfirmStep(e,t){let i=[];e.confirmOptions||i.push(en(e.flags,[],{label:t.title,detail:`Will create a new branch named ${e.name} from ${(0,es.M4)(e.reference)}`})),(!e.confirmOptions||e.confirmOptions.includes("--switch"))&&i.push(en(e.flags,["--switch"],{label:"Create & Switch to Branch",detail:`Will create and switch to a new branch named ${e.name} from ${(0,es.M4)(e.reference)}`})),(!e.confirmOptions||e.confirmOptions.includes("--worktree"))&&i.push(en(e.flags,["--worktree"],{label:`${t.title} in New Worktree`,description:"avoids modifying your working tree",detail:`Will create a new worktree for a new branch named ${e.name} from ${(0,es.M4)(e.reference)}`}));let r=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),i,t),s=yield r;return(0,n.fg)(r,e,s)?s[0].item:n.Lt}async *deleteCommandSteps(e,t){let i="prune"===e.subcommand;for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let r=await (0,er.Ao)(e.repo,{includeDefault:!0});if(e.counter<3||null==e.references||Array.isArray(e.references)&&0===e.references.length){t.title=eu("Branches",e.subcommand);let s=yield*(0,l.gw)(e,t,{filter:i?e=>!e.current&&!!e.upstream?.missing&&!r.get(e.id)?.isDefault:e=>!e.current&&!r.get(e.id)?.isDefault,picked:e.references?.map(e=>e.ref),placeholder:i?"Choose branches with missing upstreams to delete":"Choose branches to delete",emptyPlaceholder:i?`No branches with missing upstreams in ${e.repo.formattedName}`:void 0,sort:{current:!1,missingUpstream:!0}});if(s===n.Lt)break;e.references=s}t.title=eu((0,C.td)("Branch",e.references.length,{only:!0,plural:"Branches"}),"prune"===e.subcommand?"delete":e.subcommand);if(!Array.isArray(e.references))throw Error("Missing branches");let s=this.getSelectedWorktrees(e,r);if(s.length&&(yield*e0(this.container,{command:"worktree",state:{subcommand:"delete",repo:e.repo,uris:s.map(e=>e.uri),startingFromBranchDelete:!0,overrides:{title:`Delete ${1===s.length?"Worktree":"Worktrees"} for ${1===s.length?"Branch":"Branches"}`}}},this.pickedVia))!==n.Lt){e.counter--;continue}let o=yield*this.deleteCommandConfirmStep(e,t);o!==n.Lt&&(e.flags=o,(0,n.nH)(e),e.repo.branchDelete(e.references,{force:e.flags.includes("--force"),remote:e.flags.includes("--remotes")}))}}getSelectedWorktrees(e,t){let i=[];for(let r of(0,ea.eC)(e.references)){let e=t.get(r.id);null==e||e.isDefault||i.push(e)}return i}*deleteCommandConfirmStep(e,t){let i=[en(e.flags,[],{label:t.title,detail:`Will delete ${(0,es.M4)(e.references)}`})];!e.references.every(e=>e.remote)&&(i.push(en(e.flags,["--force"],{label:`Force ${t.title}`,description:"--force",detail:`Will forcibly delete ${(0,es.M4)(e.references)}`})),"prune"!==e.subcommand&&e.references.some(e=>null!=e.upstream)&&i.push((0,h.uK)(),en(e.flags,["--remotes"],{label:"Delete Local & Remote Branches",description:"--remotes",detail:`Will delete ${(0,es.M4)(e.references)} and any remote tracking branches`}),en(e.flags,["--force","--remotes"],{label:"Force Delete Local & Remote Branches",description:"--force --remotes",detail:`Will forcibly delete ${(0,es.M4)(e.references)} and any remote tracking branches`})));let r=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),i,t),s=yield r;return(0,n.fg)(r,e,s)?s[0].item:n.Lt}async *renameCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.aL)(e,t,{filter:e=>!e.remote,picked:e.reference?.ref,placeholder:"Choose a branch to rename"});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,l.wS)(e,t,{title:`${t.title} ${(0,es.M4)(e.reference,!1)}`,value:e.name??e.reference.name});if(i===n.Lt)continue;e.name=i}let i=yield*this.renameCommandConfirmStep(e,t);if(i!==n.Lt){e.flags=i,(0,n.nH)(e);try{await e.repo.git.branches().renameBranch?.(e.reference.ref,e.name)}catch(e){return el.Vy.error(e),(0,eo.qQ)("Unable to rename branch")}}}}*renameCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,["-m"],{label:t.title,detail:`Will rename ${(0,es.M4)(e.reference)} to ${e.name}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var eh=i(8554);let CherryPickGitCommand=class CherryPickGitCommand extends n.d6{constructor(e,t){super(e,"cherry-pick","cherry-pick","Cherry Pick",{description:"integrates changes from specified commits into the current branch"});let i=0;t?.state?.repo!=null&&i++,t?.state?.references!=null&&(Array.isArray(t.state.references)?t.state.references.length>0&&((0,es.bv)(t.state.references[0])?i+=2:i++):i++),this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.cherryPick(...e.flags,...e.references.map(e=>e.ref).reverse())}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"cherry"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,destination:void 0,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.destination){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,es.M4)(t.destination,{icon:!1,label:!1})}`,e.counter<2||null==e.references||0===e.references.length){let r=yield*(0,l.Re)(e,t,{filter:{branches:e=>e.id!==t.destination.id},placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to cherry-pick from`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.references?.[0]?.ref:void 0});if(r===n.Lt){i&&e.counter--;continue}(0,es.bv)(r)?(e.references=[r],t.selectedBranchOrTag=void 0):t.selectedBranchOrTag=r}if(null==t.selectedBranchOrTag&&e.references?.length){let i=await e.repo.git.branches().getBranchesWithCommits(e.references.map(e=>e.ref),void 0,{mode:"contains"});if(i.length){let r=await e.repo.git.branches().getBranch(i[0]);null!=r&&(t.selectedBranchOrTag=r)}}if(e.counter<3&&null!=t.selectedBranchOrTag){let i=(0,eh.Xn)(t.destination.ref,t.selectedBranchOrTag.ref,".."),r=t.cache.get(i);null==r&&(r=e.repo.git.commits().getLog(i,{merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,l.GW)(e,t,{log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),picked:e.references?.map(e=>e.ref),placeholder:(e,t)=>null==t?`No pickable commits found on ${(0,es.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose commits to cherry-pick into ${(0,es.M4)(e.destination,{icon:!1})}`});if(s===n.Lt)continue;e.references=s}if(this.confirm(e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will apply ${(0,es.M4)(e.references,{label:!1})} to ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will edit and apply ${(0,es.M4)(e.references,{label:!1})} to ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--no-commit"],{label:`${this.title} without Committing`,description:"--no-commit",detail:`Will apply ${(0,es.M4)(e.references,{label:!1})} to ${(0,es.M4)(t.destination,{label:!1})} without Committing`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var ed=i(6006);let CoAuthorsGitCommand=class CoAuthorsGitCommand extends n.d6{constructor(e,t){super(e,"co-authors","co-authors","Add Co-Authors",{description:"adds co-authors to a commit message"});let i=0;t?.state?.repo!=null&&i++,t?.state?.contributors!=null&&(!Array.isArray(t.state.contributors)||0!==t.state.contributors.length)&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async execute(e){let t=await this.container.git.getOrOpenScmRepository(e.repo.path);if(null==t)return;let i=t.inputBox.value,r=i.indexOf("Co-authored-by: ");for(let t of(-1!==r&&(i=i.substring(0,r-1).trimEnd()),null==e.contributors||Array.isArray(e.contributors)||(e.contributors=[e.contributors]),e.contributors)){let e;e=i.includes("Co-authored-by: ")?"\n":0!==i.length&&i.endsWith("\n")?"\n\n":"\n\n\n",i+=`${e}Co-authored-by: ${t.getCoauthor()}`}t.inputBox.value=i,await (0,m.S4)("workbench.view.scm")}async *steps(e){let t={repos:this.container.git.openRepositories,activeRepo:void 0,associatedView:this.container.views.contributors,title:this.title},i=await this.container.git.getOpenScmRepositories();i.length&&(t.repos=t.repos.filter(e=>i.find(t=>(0,ed.Fd)(t.rootUri.fsPath)===e.path)),t.activeRepo=await this.container.git.getOrOpenRepositoryForEditor(),null==t.activeRepo||i.some(e=>e.rootUri.fsPath===t.activeRepo.path)||(t.activeRepo=void 0));let r=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(e.counter<2||null==e.contributors){let i=yield*(0,l.iM)(e,t,"Choose contributors to add as co-authors");if(i===n.Lt){r&&e.counter--;continue}e.contributors=i}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}};let FetchGitCommand=class FetchGitCommand extends n.d6{constructor(e,t){super(e,"fetch","fetch","Fetch",{description:"fetches changes from one or more remotes"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){return(0,es.gC)(e.reference)?e.repos[0].fetch({branch:e.reference}):this.container.git.fetchAll(e.repos,{all:e.flags.includes("--all"),prune:e.flags.includes("--prune")})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,ea.Bo)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,l.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r="";if(1===e.repos.length){let t=await e.repos[0].getLastFetched();0!==t&&(r=`${(0,C.eV)(c.EO.Dot,2,2)}Last fetched ${(0,y.PI)(new Date(t))}`)}if(1===e.repos.length&&(0,es.gC)(e.reference))i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t,r),[en(e.flags,[],{label:this.title,detail:`Will fetch ${(0,es.M4)(e.reference)}`})]);else{let s=1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repos`;i=(0,n.VW)((0,l.Zr)(`Confirm ${this.title}`,e,t,r),[en(e.flags,[],{label:this.title,detail:`Will fetch ${s}`}),en(e.flags,["--prune"],{label:`${this.title} & Prune`,description:"--prune",detail:`Will fetch and prune ${s}`}),en(e.flags,["--all"],{label:`${this.title} All`,description:"--all",detail:`Will fetch all remotes of ${s}`}),en(e.flags,["--all","--prune"],{label:`${this.title} All & Prune`,description:"--all --prune",detail:`Will fetch and prune all remotes of ${s}`})],t)}let s=yield i;return(0,n.fg)(i,e,s)?s[0].item:n.Lt}};var ep=i(1192),eg=i(1974),em=i(166);let LogGitCommand=class LogGitCommand extends n.d6{constructor(e,t){super(e,"log","history","Commits",{description:"aka log, shows commit history"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&(i++,"HEAD"!==t.state.reference&&(0,es.bv)(t.state.reference)&&!(0,es.SN)(t.state.reference)&&i++),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"log"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,selectedBranchOrTag:void 0,title:this.title},i=!1;for(;this.canStepsContinue(e);){let r;if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(!(e.repo instanceof ei.LN))throw Error("Missing repository");if("HEAD"===e.reference){let t=await e.repo.git.branches().getBranch();e.reference=t}if(e.counter<2||null==e.reference){let r=yield*(0,l.Re)(e,t,{placeholder:"Choose a branch or tag to show its commit history",picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,ranges:!0});if(r===n.Lt){i&&e.counter--;continue}e.reference=r,t.selectedBranchOrTag=void 0}if((!(0,es.bv)(e.reference)||(0,es.SN)(e.reference))&&(t.selectedBranchOrTag=e.reference),t.title=`${this.title}${(0,C.eV)(c.EO.Dot,2,2)}${(0,es.M4)(t.selectedBranchOrTag,{icon:!1})}`,e.fileName&&(t.title+=`${(0,C.eV)(c.EO.Dot,2,2)}${(0,em.j)(e.fileName,{fileOnly:!0,truncateTo:c.uR-t.title.length-3})}`),e.counter<3&&null!=t.selectedBranchOrTag){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=null!=e.fileName?e.repo.git.commits().getLogForPath(e.fileName,i):e.repo.git.commits().getLog(i),t.cache.set(i,r));let s=yield*(0,l.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found in ${(0,es.M4)(e.selectedBranchOrTag,{icon:!1})}`:"Choose a commit",picked:e.reference?.ref});if(s===n.Lt)continue;e.reference=s}e.reference instanceof eg.Yg&&null==e.reference.file||(e.reference=await e.repo.git.commits().getCommit(e.reference.ref)),e.openPickInView?((0,ep.JX)(e.reference,{pin:!1,preserveFocus:!1}),r=n.Lt):r=yield*e0(this.container,{command:"show",state:{repo:e.repo,reference:e.reference,fileName:e.fileName}},this.pickedVia),e.counter--,r===n.Lt&&(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}};var ef=i(6599);let MergeGitCommand=class MergeGitCommand extends n.d6{constructor(e,t){super(e,"merge","merge","Merge",{description:"integrates changes from a specified branch into the current branch"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.merge(...e.flags,e.reference.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.destination){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,es.M4)(t.destination,{icon:!1,label:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){let r=new a.m(t.pickCommit,t,()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit}),s=yield*(0,l.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to merge`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(s===n.Lt){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,es.bv)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=e.repo.git.commits().getLog(i,{merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,l.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,es.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to merge into ${(0,es.M4)(e.destination,{icon:!1})}`,picked:e.reference?.ref});if(s===n.Lt)continue;e.reference=s}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r,o=await e.repo.git.commits().getLeftRightCommitCount((0,eh.Xn)(t.destination.ref,e.reference.ref,"...")),a=`Merge ${(0,es.M4)(e.reference,{icon:!1,label:!1})} into ${(0,es.M4)(t.destination,{icon:!1,label:!1})} `,c=null!=o?o.right:0;if(0===c){let i=this.createConfirmStep((0,l.Zr)(a,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:`${(0,es.M4)(t.destination,{capitalize:!0,label:!1})} is already up to date with ${(0,es.M4)(e.reference,{label:!1})}`}),{placeholder:`Nothing to merge; ${(0,es.M4)(t.destination,{label:!1,icon:!1})} is already up to date`}),r=yield i;return(0,n.fg)(i,e,r),n.Lt}let u=[en(e.flags,[],{label:this.title,detail:`Will merge ${(0,C.td)("commit",c)} from ${(0,es.M4)(e.reference,{label:!1})} into ${(0,es.M4)(t.destination,{label:!1})}`,picked:!0}),en(e.flags,["--ff-only"],{label:`Fast-forward ${this.title}`,description:"--ff-only",detail:`Will fast-forward merge ${(0,C.td)("commit",c)} from ${(0,es.M4)(e.reference,{label:!1})} into ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--squash"],{label:`Squash ${this.title}`,description:"--squash",detail:`Will squash ${(0,C.td)("commit",c)} from ${(0,es.M4)(e.reference,{label:!1})} into one when merging into ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--no-ff"],{label:`No Fast-forward ${this.title}`,description:"--no-ff",detail:`Will create a merge commit when merging ${(0,C.td)("commit",c)} from ${(0,es.M4)(e.reference,{label:!1})} into ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--no-ff","--no-commit"],{label:`Don't Commit ${this.title}`,description:"--no-commit --no-ff",detail:`Will pause before committing the merge of ${(0,C.td)("commit",c)} from ${(0,es.M4)(e.reference,{label:!1})} into ${(0,es.M4)(t.destination,{label:!1})}`})],p=await this.container.subscription.getSubscription();(0,ef.k0)(p?.state)&&(i=e.repo.git.branches().getPotentialMergeOrRebaseConflict?.(t.destination.name,e.reference.ref));let g=[];i&&(i?.then(e=>{if(g.splice(0,1,null==e?(0,d.Du)(d.WL.Noop,!1,{label:"No Conflicts Detected",iconPath:new s.ThemeIcon("check")}):(0,d.Du)(d.WL.Noop,!1,{label:"Conflicts Detected",detail:`Will result in ${(0,C.td)("conflicting file",e.files.length)} that will need to be resolved`,iconPath:new s.ThemeIcon("warning")})),null!=r.quickpick){let e=r.quickpick.activeItems;r.quickpick.items=[...g,...u],r.quickpick.activeItems=e}}),g.push((0,d.Du)(d.WL.Noop,!1,{label:`$(loading~spin) \xa0Detecting Conflicts...`}),(0,h.uK)())),r=this.createConfirmStep((0,l.Zr)(`Confirm ${a}`,e,t),[...g,...u]);let m=yield r;return(0,n.fg)(r,e,m)?m[0].item:n.Lt}};var ew=i(2995);let PullGitCommand=class PullGitCommand extends n.d6{constructor(e,t){super(e,"pull","pull","Pull",{description:"fetches and integrates changes from a remote into the current branch"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){if((0,es.gC)(e.reference)&&(!(0,ew.P)(e.reference)||!e.reference.current)){let t=await e.repos[0].git.branches().getBranch();if(t?.name!==e.reference.name)return e.repos[0].fetch({branch:e.reference,pull:!0})}return this.container.git.pullAll(e.repos,{rebase:e.flags.includes("--rebase")})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,ea.Bo)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,l.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}await this.execute(e),(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i;if(e.repos.length>1)i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will pull ${e.repos.length} repos`}),en(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull ${e.repos.length} repos by rebasing`})]);else if((0,es.gC)(e.reference))if(e.reference.remote)i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a remote branch"}));else{let[r]=e.repos,s=await r.git.branches().getBranch(e.reference.name);i=s?.upstream==null?this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a branch until it has been published"})):this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will pull${s.upstream.state.behind?` ${(0,C.td)("commit",s.upstream.state.behind)} into ${(0,es.M4)(s)}`:` into ${(0,es.M4)(s)}`}`})])}else{let[r]=e.repos,[s,o]=await Promise.all([r.git.status().getStatus(),r.getLastFetched()]),n="";0!==o&&(n=`${(0,C.eV)(c.EO.Dot,2,2)}Last fetched ${(0,y.PI)(new Date(o))}`);let u=s?.upstream?.state.behind?` ${(0,C.td)("commit",s.upstream.state.behind)} into $(repo) ${r.formattedName}`:` into $(repo) ${r.formattedName}`;i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t,n),[en(e.flags,[],{label:this.title,detail:`Will pull${u}`}),en(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull and rebase${u}`})],void 0,{additionalButtons:[a.yn],onDidClickButton:async(e,i)=>{if(i!==a.yn||e.busy)return!1;e.title=`Confirm ${t.title}${(0,C.eV)(c.EO.Dot,2,2)}Fetching${c.EO.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}})}let r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var ev=i(3711);let PushGitCommand=class PushGitCommand extends n.d6{constructor(e,t){super(e,"push","push","Push",{description:"pushes changes from the current branch to a remote"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){let t=e.flags.indexOf("--set-upstream");return -1!==t?this.container.git.pushAll(e.repos,{force:!1,publish:{remote:e.flags[t+1]},reference:e.reference}):this.container.git.pushAll(e.repos,{force:e.flags.includes("--force"),reference:e.reference})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,ea.Bo)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else if(null!=e.reference){let i=yield*(0,l.UA)({...e,repos:void 0,repo:e.reference.repoPath},t);if(i===n.Lt)break;e.repos=[i]}else{let i=yield*(0,l.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r=f.H.getCore("git.useForcePushWithLease")??!0,s=r&&(f.H.getCore("git.useForcePushIfIncludes")??!0)&&await this.container.git.supports(e.repos[0].uri,"git:push:force-if-includes");if(e.repos.length>1)i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will push ${e.repos.length} repos`}),en(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${e.repos.length} repos`})]);else{let[o]=e.repos,n=[];if((0,es.gC)(e.reference))if(e.reference.remote)i=this.createConfirmStep((0,l.Zr)(t.title,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:"Cannot push a remote branch"}),{placeholder:"Cannot push a remote branch"});else{let a=await o.git.branches().getBranch(e.reference.name);if(null!=a&&a?.upstream==null){for(let t of(await o.git.remotes().getRemotes()))n.push(en(e.flags,["--set-upstream",t.name,a.name],{label:`Publish ${a.name} to ${t.name}`,detail:`Will publish ${(0,es.M4)(a)} to ${t.name}`}));i=n.length?this.createConfirmStep((0,l.Zr)("Confirm Publish",e,t),n,void 0,{placeholder:"Confirm Publish"}):this.createConfirmStep((0,l.Zr)("Publish",e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:"No remotes found"}),{placeholder:"Cannot publish; No remotes found"})}else i=a?.upstream?.state.behind?this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${a?.upstream.state.ahead?` ${(0,C.td)("commit",a.upstream.state.ahead)}`:""}${a.getRemoteName()?` to ${a.getRemoteName()}`:""}${null!=a&&a.upstream.state.behind>0?`, overwriting ${(0,C.td)("commit",a.upstream.state.behind)}${a?.getRemoteName()?` on ${a.getRemoteName()}`:""}`:""}`})],(0,d.Du)(d.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,es.M4)(a)} is behind ${a.getRemoteName()} by ${(0,C.td)("commit",a.upstream.state.behind)}`})):a?.upstream?.state.ahead?this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[a.getRemoteName()],{label:this.title,detail:`Will push ${(0,C.td)("commit",a.upstream.state.ahead)} from ${(0,es.M4)(a)} to ${a.getRemoteName()}`})]):this.createConfirmStep((0,l.Zr)(t.title,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:"No commits found to push"}),{placeholder:"Nothing to push; No commits found to push"})}else{let u=await o.git.status().getStatus(),h={refType:"branch",name:u?.branch??"HEAD",ref:u?.branch??"HEAD",remote:!1,repoPath:o.path};if(u?.upstream?.state.ahead===0){if(!(0,es.gC)(e.reference)&&null==u.upstream){let t;for(let i of(null!=e.reference?t=` up to and including ${(0,es.M4)(e.reference,{label:!1})}`:(e.reference=h,t=""),await o.git.remotes().getRemotes()))n.push(en(e.flags,["--set-upstream",i.name,u.branch],{label:`Publish ${h.name} to ${i.name}`,detail:`Will publish ${(0,es.M4)(h)}${t} to ${i.name}`}))}i=n.length?this.createConfirmStep((0,l.Zr)("Confirm Publish",e,t),n,void 0,{placeholder:"Confirm Publish"}):null==u.upstream?this.createConfirmStep((0,l.Zr)("Publish",e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:"No remotes found"}),{placeholder:"Cannot publish; No remotes found"}):this.createConfirmStep((0,l.Zr)(t.title,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:`No commits ahead of ${(0,ev.Zq)(u.upstream?.name)}`}),{placeholder:`Nothing to push; No commits ahead of ${(0,ev.Zq)(u.upstream?.name)}`})}else{let n,p="",g=await o.getLastFetched();0!==g&&(p=`${(0,C.eV)(c.EO.Dot,2,2)}Last fetched ${(0,y.PI)(new Date(g))}`),n=null!=e.reference?`${u?.upstream?.state.ahead?` commits up to and including ${(0,es.M4)(e.reference,{label:!1})}`:""}${u?.upstream?` to ${(0,ev.Zq)(u.upstream?.name)}`:""}`:`${u?.upstream?.state.ahead?` ${(0,C.td)("commit",u.upstream.state.ahead)}`:""}${u?.upstream?` to ${(0,ev.Zq)(u.upstream?.name)}`:""}`,(i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t,p),[...u?.upstream?.state.behind?[]:[en(e.flags,[],{label:this.title,detail:`Will push${n}`})],en(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${n}${u?.upstream?.state.behind?`, overwriting ${(0,C.td)("commit",u.upstream.state.behind)}${u?.upstream?` on ${(0,ev.Zq)(u.upstream?.name)}`:""}`:""}`})],u?.upstream?.state.behind?(0,d.Du)(d.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,es.M4)(h)} is behind${u?.upstream?` ${(0,ev.Zq)(u.upstream?.name)}`:""} by ${(0,C.td)("commit",u.upstream.state.behind)}`}):void 0)).additionalButtons=[a.yn],i.onDidClickButton=async(e,i)=>{if(i!==a.yn||e.busy)return!1;e.title=`Confirm ${t.title}${(0,C.eV)(c.EO.Dot,2,2)}Fetching${c.EO.Ellipsis}`,e.busy=!0;try{return await o.fetch({progress:!0}),!0}finally{e.busy=!1}}}}}let o=yield i;return(0,n.fg)(i,e,o)?o[0].item:n.Lt}};let RebaseGitCommand=class RebaseGitCommand extends n.d6{constructor(e,t){super(e,"rebase","rebase","Rebase",{description:"integrates changes from a specified branch into the current branch, by changing the base of the branch and reapplying the commits on top"});let i=0;t?.state?.repo!=null&&i++,t?.state?.destination!=null&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}async execute(e){let t;if(e.flags.includes("--interactive")){await this.container.rebaseEditor.enableForNextUse();let e=await (0,w.Xz)();t=["-c",`"sequence.editor=${e}"`]}e.repo.rebase(t,...e.flags,e.destination.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,branch:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.branch){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.branch=i}if(t.title=`${this.title} ${(0,es.M4)(t.branch,{icon:!1,label:!1})} onto`,t.pickCommitForItem=!1,e.counter<2||null==e.destination){let r=new a.m(t.pickCommit,t,()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit}),s=yield*(0,l.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to rebase onto`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.destination?.ref:void 0,additionalButtons:[r]});if(s===n.Lt){i&&e.counter--;continue}e.destination=s,t.selectedBranchOrTag=void 0}if((0,es.bv)(e.destination)||(t.selectedBranchOrTag=e.destination),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.destination.ref===t.branch.ref)){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=e.repo.git.commits().getLog(i,{merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,l.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,es.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to rebase ${(0,es.M4)(e.branch,{icon:!1})} onto`,picked:e.destination?.ref});if(s===n.Lt)continue;e.destination=s}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r,o=await e.repo.git.commits().getLeftRightCommitCount((0,eh.Xn)(e.destination.ref,t.branch.ref,"..."),{excludeMerges:!0}),a=`${t.title} ${(0,es.M4)(e.destination,{icon:!1,label:!1})}`,c=null!=o?o.right:0,u=null!=o?o.left:0;if(0===u&&0===c){let i=this.createConfirmStep((0,l.Zr)(a,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:`${(0,es.M4)(t.branch,{capitalize:!0})} is already up to date with ${(0,es.M4)(e.destination,{label:!1})}`}),{placeholder:`Nothing to rebase; ${(0,es.M4)(t.branch,{label:!1,icon:!1})} is already up to date`}),r=yield i;return(0,n.fg)(i,e,r),n.Lt}let p=[en(e.flags,["--interactive"],{label:`Interactive ${this.title}`,description:"--interactive",detail:`Will interactively update ${(0,es.M4)(t.branch,{label:!1})} by applying ${(0,C.td)("commit",c)} on top of ${(0,es.M4)(e.destination,{label:!1})}`,picked:0===u})];u>0&&p.unshift(en(e.flags,[],{label:this.title,detail:`Will update ${(0,es.M4)(t.branch,{label:!1})} by applying ${(0,C.td)("commit",c)} on top of ${(0,es.M4)(e.destination,{label:!1})}`,picked:!0}));let g=await this.container.subscription.getSubscription();(0,ef.k0)(g?.state)&&(i=e.repo.git.branches().getPotentialMergeOrRebaseConflict?.(t.branch.name,e.destination.ref));let m=[];i&&(i?.then(e=>{if(m.splice(0,1,null==e?(0,d.Du)(d.WL.Noop,!1,{label:"No Conflicts Detected",iconPath:new s.ThemeIcon("check")}):(0,d.Du)(d.WL.Noop,!1,{label:"Conflicts Detected",detail:`Will result in ${(0,C.td)("conflicting file",e.files.length)} that will need to be resolved`,iconPath:new s.ThemeIcon("warning")})),null!=r.quickpick){let e=r.quickpick.activeItems;r.quickpick.items=[...m,...p],r.quickpick.activeItems=e}}),m.push((0,d.Du)(d.WL.Noop,!1,{label:`$(loading~spin) \xa0Detecting Conflicts...`}),(0,h.uK)())),r=this.createConfirmStep((0,l.Zr)(`Confirm ${a}`,e,t),[...m,...p]);let f=yield r;return(0,n.fg)(r,e,f)?f[0].item:n.Lt}};var ey=i(7528);let eb=new Map([["add","Add"],["prune","Prune"],["remove","Remove"]]);let RemoteGitCommand=class RemoteGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"remote","remote","Remote",{description:"add, prune, or remove remotes"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t?.state.subcommand){case"add":null!=t.state.name&&i++,null!=t.state.url&&i++;break;case"prune":case"remove":null!=t.state.remote&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"remove"!==this.subcommand&&"prune"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.remotes,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,r=this.title,t.title=null==(s=e.subcommand)?r:`${eb.get(s)} ${r}`,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}switch(e.subcommand){case"add":var r,s;if(!(e.repo instanceof ei.LN)||"add"!==e.subcommand)throw Error("Missing repository");yield*this.addCommandSteps(e,t),e.name=void 0,e.url=void 0;break;case"prune":if(!(e.repo instanceof ei.LN)||"prune"!==e.subcommand)throw Error("Missing repository");yield*this.pruneCommandSteps(e,t);break;case"remove":if(!(e.repo instanceof ei.LN)||"remove"!==e.subcommand)throw Error("Missing repository");yield*this.removeCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"add",description:"adds a new remote",picked:"add"===e.subcommand,item:"add"},{label:"prune",description:"prunes remote branches on the specified remote",picked:"prune"===e.subcommand,item:"prune"},{label:"remove",description:"removes the specified remote",picked:"remove"===e.subcommand,item:"remove"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *addCommandSteps(e,t){null==e.flags&&(e.flags=["-f"]);let i=0!==(await e.repo.git.remotes().getRemotes({filter:t=>t.name===e.name})).length;for(;this.canStepsContinue(e);){if(e.counter<3||null==e.name||i){let r=yield*(0,l.C6)(e,t,{placeholder:"Please provide a name for the remote",value:e.name});if(r===n.Lt)continue;if(i=0!==(await e.repo.git.remotes().getRemotes({filter:e=>e.name===r})).length){e.counter--;continue}e.name=r}if(e.counter<4||null==e.url){let i=yield*(0,l.aG)(e,t,{placeholder:"Please provide a URL for the remote",value:e.url});if(i===n.Lt)continue;e.url=i}if(this.confirm(e.confirm)){let i=yield*this.addCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e);let r=await e.repo.git.remotes().addRemoteWithResult?.(e.name,e.url,e.flags.includes("-f")?{fetch:!0}:void 0);!1!==e.reveal&&(0,ey._c)(r,{focus:!0,select:!0})}}*addCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:t.title,detail:`Will add remote '${e.name}' for ${e.url}`}),en(e.flags,["-f"],{label:`${t.title} and Fetch`,description:"-f",detail:`Will add and fetch remote '${e.name}' for ${e.url}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *removeCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){let[t]=await e.repo.git.remotes().getRemotes({filter:t=>t.name===e.remote});null!=t?e.remote=t:e.remote=void 0}if(e.counter<3||null==e.remote){let i=yield*(0,l.YR)(e,t,{picked:e.remote?.name,placeholder:"Choose remote to remove"});if(i===n.Lt)break;e.remote=i}if("string"==typeof e.remote)throw Error("Missing remote");if((yield*this.removeCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{await e.repo.git.remotes().removeRemote?.(e.remote.name)}catch(e){el.Vy.error(e),(0,eo.qQ)("Unable to remove remote")}}}}*removeCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will remove remote '${e.remote.name}'`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}async *pruneCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){let[t]=await e.repo.git.remotes().getRemotes({filter:t=>t.name===e.remote});null!=t?e.remote=t:e.remote=void 0}if(e.counter<3||null==e.remote){let i=yield*(0,l.YR)(e,t,{picked:e.remote?.name,placeholder:"Choose a remote to prune"});if(i===n.Lt)break;e.remote=i}if("string"==typeof e.remote)throw Error("Missing remote");(yield*this.pruneCommandConfirmStep(e,t))!==n.Lt&&((0,n.nH)(e),e.repo.git.remotes().pruneRemote?.(e.remote.name))}}*pruneCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will prune remote '${e.remote.name}'`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}};let ResetGitCommand=class ResetGitCommand extends n.d6{constructor(e,t){super(e,"reset","reset","Reset",{description:"resets the current branch to a specified commit"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:t?.confirm??!0,...t?.state},this._canSkipConfirm=!this.initialState.confirm}_canSkipConfirm=!1;get canSkipConfirm(){return this._canSkipConfirm}async execute(e){try{await e.repo.git.reset({hard:e.flags.includes("--hard"),soft:e.flags.includes("--soft")},e.reference.ref)}catch(e){el.Vy.error(e,this.title),(0,eo.qQ)(e.message)}}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.destination){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,es.M4)(t.destination,{icon:!1})}`,e.counter<2||null==e.reference){let r=t.destination.ref,s=t.cache.get(r);null==s&&(s=e.repo.git.commits().getLog(r,{merges:"first-parent"}),t.cache.set(r,s));let o=yield*(0,l.t$)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:`Choose a commit to reset ${e.destination.name} to`,picked:e.reference?.ref});if(o===n.Lt){i&&e.counter--;continue}e.reference=o}if(this.confirm(e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e),await this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will reset (leaves changes in the working tree) ${(0,es.M4)(t.destination)} to ${(0,es.M4)(e.reference)}`}),en(e.flags,["--soft"],{label:`Soft ${this.title}`,description:"--soft",detail:`Will soft reset (leaves changes in the index and working tree) ${(0,es.M4)(t.destination)} to ${(0,es.M4)(e.reference)}`}),en(e.flags,["--hard"],{label:`Hard ${this.title}`,description:"--hard",detail:`Will hard reset (discards all changes) ${(0,es.M4)(t.destination)} to ${(0,es.M4)(e.reference)}`})]),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};let RevertGitCommand=class RevertGitCommand extends n.d6{constructor(e,t){super(e,"revert","revert","Revert",{description:"undoes the changes of specified commits, by creating new commits with inverted changes"});let i=0;t?.state?.repo!=null&&i++,t?.state?.references!=null&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.revert(...e.flags,...e.references.map(e=>e.ref).reverse())}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.destination){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.destination=i}if(e.counter<2||null==e.references||0===e.references.length){let r=t.destination.ref,s=t.cache.get(r);null==s&&(s=e.repo.git.commits().getLog(r,{merges:"first-parent"}),t.cache.set(r,s));let o=yield*(0,l.GW)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:"Choose commits to revert",picked:e.references?.map(e=>e.ref)});if(o===n.Lt){i&&e.counter--;continue}e.references=o}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,["--no-edit"],{label:this.title,description:"--no-edit",detail:`Will revert ${(0,es.M4)(e.references)}`}),en(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will revert and edit ${(0,es.M4)(e.references)}`})]),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var eC=i(1338),ek=i(450),eS=i(5367),eR=i(4498),eP=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),eA=e=>{throw TypeError(e)},eI=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&eA("Object expected"),i&&(r=t[eP("asyncDispose")]),void 0===r&&(r=t[eP("dispose")],i&&(s=r)),"function"!=typeof r&&eA("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},eD=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let e$={iconPath:new s.ThemeIcon("person-add"),tooltip:"Pick Authors"},eT={iconPath:new s.ThemeIcon("new-file"),tooltip:"Pick Files"},eE={iconPath:new s.ThemeIcon("new-folder"),tooltip:"Pick Folder"},e_=new Map([["","Search by Message"],["=:","Search by Message"],["message:","Search by Message"],["@:","Search by Author"],["author:","Search by Author"],["#:","Search by Commit SHA"],["commit:","Search by Commit SHA"],["?:","Search by File"],["file:","Search by File"],["~:","Search by Changes"],["change:","Search by Changes"],["type:","Search by Type"]]);let SearchGitCommand=class SearchGitCommand extends n.d6{constructor(e,t){super(e,"search","search","Commit Search",{description:"aka grep, searches for commits"});let i=0;t?.state?.repo!=null&&i++,t?.state?.query!=null&&!t.prefillOnly&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isMatch(e){return super.isMatch(e)||"grep"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"grep"===e}async *steps(e){let t={container:this.container,repos:this.container.git.openRepositories,associatedView:this.container.views.searchAndCompare,commit:void 0,hasVirtualFolders:(0,et.SD)("gitlens:hasVirtualFolders",!1),resultsKey:void 0,resultsPromise:void 0,title:this.title},i=f.H.get("gitCommands.search");null==e.matchAll&&(e.matchAll=i.matchAll),null==e.matchCase&&(e.matchCase=i.matchCase),null==e.matchRegex&&(e.matchRegex=i.matchRegex),null==e.showResultsInSideBar&&(e.showResultsInSideBar=i.showResultsInSideBar??void 0);let r=!1;for(;this.canStepsContinue(e);){let i;if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(e.counter<2||null==e.query){let i=yield*this.pickSearchOperatorStep(e,t);if(i===n.Lt){r&&e.counter--,e.query=void 0;continue}e.query=i}let s={query:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex},o=(0,ek.b4)(s);if((null==t.resultsPromise||t.resultsKey!==o)&&(t.resultsPromise=e.repo.git.commits().searchCommits(s),t.resultsKey=o),e.showResultsInSideBar){this.container.views.searchAndCompare.search(e.repo.path,s,{label:{label:`for ${e.query}`}},t.resultsPromise,e.showResultsInSideBar instanceof eR.X?e.showResultsInSideBar:void 0);break}if(e.counter<3||null==t.commit){let i=e.repo.path,r=yield*(0,l.t$)(e,t,{ignoreFocusOut:!0,log:await t.resultsPromise,onDidLoadMore:e=>t.resultsPromise=Promise.resolve(e),placeholder:(t,i)=>null==i?`No results for ${e.query}`:`${(0,C.td)("result",i.count,{format:e=>i.hasMore?`${e}+`:String(e)})} for ${e.query}`,picked:t.commit?.ref,showInSideBarCommand:new h.g5("$(link-external)  Show Results in Side Bar",()=>void this.container.views.searchAndCompare.search(i,s,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)),showInSideBarButton:{button:a.UM,onDidClick:()=>void this.container.views.searchAndCompare.search(i,s,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)}});if(r===n.Lt){e.counter--;continue}t.commit=r}e.openPickInView?((0,ep.JX)(t.commit,{pin:!1,preserveFocus:!1}),i=n.Lt):i=yield*e0(this.container,{command:"show",state:{repo:e.repo,reference:t.commit}},this.pickedVia),e.counter--,i===n.Lt&&(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}*pickSearchOperatorStep(e,t){let i=[{label:e_.get(""),description:`pattern or message: pattern or =: pattern ${c.EO.Dash} use quotes to search for phrases`,alwaysShow:!0,item:"message:"},{label:e_.get("author:"),description:"author: pattern or @: pattern",buttons:[e$],alwaysShow:!0,item:"author:"},{label:e_.get("commit:"),description:"commit: sha or #: sha",alwaysShow:!0,item:"commit:"},t.hasVirtualFolders?void 0:{label:e_.get("file:"),description:"file: glob or ?: glob",buttons:[eT,eE],alwaysShow:!0,item:"file:"},t.hasVirtualFolders?void 0:{label:e_.get("change:"),description:"change: pattern or ~: pattern",alwaysShow:!0,item:"change:"}].filter(e=>null!=e),r=new a.XS(e.matchCase),s=new a.S(e.matchAll),o=new a.w7(e.matchRegex),u=(0,n.Ac)({title:(0,l.Zr)(t.title,e,t),placeholder:'e.g. "Updates dependencies" author:eamodio',ignoreFocusOut:!0,matchOnDescription:!0,matchOnDetail:!0,additionalButtons:[r,s,o],items:i,value:e.query,selectValueWhenShown:!1,onDidAccept:async i=>{let r=i.selectedItems[0];return!(0,d.hr)(r)&&(!eC.GZ.has(r.item)||(await eO(r,{},i,u,e,t),!1))},onDidClickButton:(t,i)=>{i===r?(e.matchCase=!e.matchCase,r.on=e.matchCase):i===s?(e.matchAll=!e.matchAll,s.on=e.matchAll):i===o&&(e.matchRegex=!e.matchRegex,o.on=e.matchRegex)},onDidClickItemButton:async function(i,r,s){return r===e$?await eO(s,{author:!0},i,u,e,t):r===eT?await eO(s,{file:{type:"file"}},i,u,e,t):r===eE&&await eO(s,{file:{type:"folder"}},i,u,e,t),!1},onDidChangeValue:r=>{let s=r.value.trim();e.counter=s?3:2;let o=(0,ek.OM)({query:s,matchCase:e.matchCase,matchAll:e.matchAll,matchRegex:e.matchRegex});return r.title=(0,l.Zr)(1===o.size?`Commit ${e_.get((0,b.$1)(o.keys()))}`:t.title,e,t),0===r.value.length?r.items=i:(r.ignoreFocusOut=!0,u.ignoreFocusOut=!0,r.items=[{label:"Search for",description:r.value,item:r.value,picked:!0},...i],r.activeItems=[r.items[0]]),!0}}),h=yield u;return(0,n.fg)(u,e,h)?(e.counter--,h[0].item.trim()):(e.counter--,n.Lt)}};async function eO(e,t,i,r,o,n){let a=(0,ek.OM)({query:i.value,matchCase:o.matchCase,matchAll:o.matchAll}),l=!1;if(t?.author&&"author:"===e.item){var c=[];try{eI(c,r.freeze?.());let e=a.get("author:"),t=await (0,eS.W)(n.container,o.repo,"Search by Author","Choose contributors to include commits from",{appendReposToTitle:!0,clearButton:!0,ignoreFocusOut:!0,multiselect:!0,picked:t=>null!=e&&(null!=t.email&&e.has(t.email)||null!=t.name&&e.has(t.name)||null!=t.username&&e.has(t.username))});if(null!=t){let e=t.map(e=>e.email??e.name??e.username).filter(e=>null!=e);e.length?a.set("author:",new Set(e)):a.delete("author:")}else l=!0}catch(e){var u=e,h=!0}finally{eD(c,u,h)}}else if(t?.file&&"file:"===e.item){var d=[];try{eI(d,r.freeze?.());let e=a.get("file:"),i=await s.window.showOpenDialog({canSelectFiles:"file"===t.file.type,canSelectFolders:"folder"===t.file.type,canSelectMany:"file"===t.file.type,title:"Search by File",openLabel:"Add to Search",defaultUri:o.repo.folder?.uri});if(i?.length)for(let t of(null==e&&(e=new Set,a.set("file:",e)),i))e.add(n.container.git.getRelativePath(t,o.repo.uri));else l=!0;(null==e||0===e.size)&&a.delete("file:")}catch(e){var p=e,g=!0}finally{eD(d,p,g)}}else{let t=a.get(e.item);l=!t?.has("")}i.value=`${(0,b.fj)((0,b.Tj)(a.entries(),([e,t])=>`${e}${(0,b.fj)(t,` ${e}`)}`)," ")}${l?` ${e.item}`:""}`,r.onDidChangeValue(i)}var ex=i(2126),eF=i(7947);let ShowGitCommand=class ShowGitCommand extends n.d6{constructor(e,t){super(e,"show","show","Show",{description:"shows information about a git reference"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,t?.state?.fileName!=null&&(i+=2),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}getStepState(e){let t=super.getStepState(e);return{...t,startingStep:e?Math.min(t.startingStep??0,1):0}}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(!(e.repo instanceof ei.LN))throw Error("Missing repository");if((e.counter<2||null==e.reference||!(0,eg.WM)(e.reference)||null!=e.reference.file)&&(null==e.reference||(0,eg.WM)(e.reference)||(e.reference=await this.container.git.commits(e.reference.repoPath).getCommit(e.reference.ref)),e.counter<2||null==e.reference)){let r=yield*(0,l.t$)(e,t,{log:{repoPath:e.repo.path,commits:new Map,sha:void 0,range:void 0,count:0,limit:void 0,hasMore:!1},placeholder:"Enter a reference or commit SHA",picked:e.reference?.ref});if(r===n.Lt){i&&e.counter--;continue}e.reference=r}if(!(0,eg.WM)(e.reference))throw Error("Missing reference");if(e.counter<3){null==e.reference.files&&await e.reference.ensureFullDetails();let i=yield*(0,l.x$)(e,t);if(i===n.Lt)continue;if(i instanceof eF.$N){let t=yield*i.executeSteps(this.pickedVia);e.counter--,t===n.Lt&&(0,n.nH)(e);continue}if(i instanceof h.Fj&&!(i instanceof ex.o3)){(0,n.nH)(e),i.execute();break}}if(e.counter<4||null==e.fileName){let i=yield*(0,l.UI)(e,t,{picked:e.fileName});if(i===n.Lt)continue;if(i instanceof ex.o3){e.counter-=2;continue}e.fileName=i.file.path}if(!e.fileName)throw Error("Missing filename");let r=yield*(0,l.tY)(e,t);if(r!==n.Lt){if(r instanceof ex.o3){e.counter-=2;continue}if(r instanceof eF.$N){yield*r.executeSteps(this.pickedVia),e.counter--;continue}if(r instanceof h.Fj){(0,n.nH)(e),r.execute();break}}}return e.counter<0?n.Lt:void 0}};var eL=i(4693),eB=i(4505),eU=i(6066),eN=i(5419),eq=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),eW=e=>{throw TypeError(e)},eM=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&eW("Object expected"),i&&(r=t[eq("asyncDispose")]),void 0===r&&(r=t[eq("dispose")],i&&(s=r)),"function"!=typeof r&&eW("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},eG=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let eH=new Map([["apply","Apply"],["drop","Drop"],["list","List"],["pop","Pop"],["push","Push"],["rename","Rename"]]);function eV(e,t){return null==t?e:`${eH.get(t)} ${e}`}let StashGitCommand=class StashGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"stash","stash","Stash",{description:"shelves (stashes) local changes to be reapplied later"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"apply":case"pop":null!=t.state.reference&&i++;break;case"drop":null!=t.state.references&&i++;break;case"push":null!=t.state.message&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.message&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand&&"list"!==this.subcommand}get canSkipConfirm(){return"drop"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.stashes,readonly:(0,et.SD)("gitlens:readonly",!1)||(0,et.SD)("gitlens:untrusted",!1)||(0,et.SD)("gitlens:hasVirtualFolders",!1),title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,t.readonly&&(e.subcommand="list"),e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=eV(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}switch(e.subcommand){case"apply":case"pop":yield*this.applyOrPopCommandSteps(e,t);break;case"drop":yield*this.dropCommandSteps(e,t);break;case"list":yield*this.listCommandSteps(e,t);break;case"push":yield*this.pushCommandSteps(e,t);break;case"rename":yield*this.renameCommandSteps(e,t),e.message=void 0;break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"apply",description:"integrates changes from the specified stash into the current branch",picked:"apply"===e.subcommand,item:"apply"},{label:"drop",description:"deletes the specified stashes",picked:"drop"===e.subcommand,item:"drop"},{label:"list",description:"lists the saved stashes",picked:"list"===e.subcommand,item:"list"},{label:"pop",description:"integrates changes from the specified stash into the current branch and deletes the stash",picked:"pop"===e.subcommand,item:"pop"},{label:"push",description:"saves your local changes to a new stash and discards them from the working tree and index",picked:"push"===e.subcommand,item:"push"},{label:"rename",description:"renames the specified stash",picked:"rename"===e.subcommand,item:"rename"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *applyOrPopCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.FF)(e,t,{gitStash:await e.repo.git.stash()?.getStash(),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to apply to your working tree",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}if(this.confirm(e.confirm)){let i=yield*this.applyOrPopCommandConfirmStep(e,t);if(i===n.Lt)continue;e.subcommand=i}(0,n.nH)(e);try{if(await e.repo.git.stash()?.applyStash("pop"===e.subcommand?`stash@{${e.reference.number}}`:e.reference.ref,{deleteAfter:"pop"===e.subcommand}),e.reference.message){let t=await this.container.git.getScmRepository(e.repo.path);null==t||t.inputBox.value||(t.inputBox.value=e.reference.message)}}catch(e){el.Vy.error(e,t.title),eB.Uz.is(e,eB.W.WorkingChanges)?s.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"):(0,eo.qQ)(e.message)}}}*applyOrPopCommandConfirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:"pop"===e.subcommand?`Will delete ${(0,es.M4)(e.reference)} and apply the changes to the working tree`:`Will apply the changes from ${(0,es.M4)(e.reference)} to the working tree`,item:e.subcommand},{label:eV(this.title,"pop"===e.subcommand?"apply":"pop"),detail:"pop"===e.subcommand?`Will apply the changes from ${(0,es.M4)(e.reference)} to the working tree`:`Will delete ${(0,es.M4)(e.reference)} and apply the changes to the working tree`,item:"pop"===e.subcommand?"apply":"pop"}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[a.kk,a.yi],onDidClickButton:(t,i)=>{i===a.kk?(0,eL.JX)(e.reference,{pin:!1,preserveFocus:!0}):i===a.yi&&(0,eL._c)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *dropCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||!e.references?.length){let i=yield*(0,l.Tq)(e,t,{gitStash:await e.repo.git.stash()?.getStash(),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose stashes to delete",picked:e.references?.map(e=>e.ref)});if(i===n.Lt)break;e.references=i}if(t.title=eV((0,C.td)("Stash",e.references.length,{only:!0,plural:"Stashes"}),e.subcommand),(yield*this.dropCommandConfirmStep(e,t))!==n.Lt)for(let i of((0,n.nH)(e),e.references.sort((e,t)=>parseInt(t.number,10)-parseInt(e.number,10)),e.references))try{await e.repo.git.stash()?.deleteStash(`stash@{${i.number}}`,i.ref)}catch(e){el.Vy.error(e,t.title),(0,eo.qQ)(`Unable to delete stash@{${i.number}}${i.message?`: ${i.message}`:""}`)}}}*dropCommandConfirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,es.M4)(e.references)}`}],void 0,{placeholder:`Confirm ${t.title}`}),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}async *listCommandSteps(e,t){for(t.title="Stashes";this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.FF)(e,t,{gitStash:await e.repo.git.stash()?.getStash(),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}let i=yield*e0(this.container,{command:"show",state:{repo:e.repo,reference:e.reference}},this.pickedVia);e.counter--,i===n.Lt&&(0,n.nH)(e)}}async *pushCommandSteps(e,t){let i;for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.message){if(null==e.message){let t=await this.container.git.getScmRepository(e.repo.path);e.message=t?.inputBox.value}let i=yield*this.pushCommandInputMessageStep(e,t);if(i===n.Lt)break;e.message=i}if(this.confirm(i??e.confirm)){let i=yield*this.pushCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}try{e.flags.includes("--snapshot")?await e.repo.git.stash()?.saveSnapshot(e.message):await e.repo.git.stash()?.saveStash(e.message,e.uris,{includeUntracked:e.flags.includes("--include-untracked"),keepIndex:e.flags.includes("--keep-index"),onlyStaged:e.flags.includes("--staged")}),(0,n.nH)(e)}catch(o){if(el.Vy.error(o,t.title),o instanceof eB.Oo){if(o.reason===eB.C6.NothingToSave){if(!e.flags.includes("--include-untracked")){i=!0,s.window.showWarningMessage('No changes to stash. Choose the "Push & Include Untracked" option, if you have untracked files.');continue}s.window.showInformationMessage("No changes to stash.");return}if(o.reason===eB.C6.ConflictingStagedAndUnstagedLines&&e.flags.includes("--staged")){let t={title:"Stash Everything"},i={title:"Cancel",isCloseAffordance:!0};if(await s.window.showErrorMessage(`Changes were stashed, but the working tree cannot be updated because at least one file has staged and unstaged changes on the same line(s)

Do you want to try again by stashing both your staged and unstaged changes?`,{modal:!0},t,i)===t){null==e.uris&&(e.uris=e.onlyStagedUris),e.flags.splice(e.flags.indexOf("--staged"),1);continue}return}}let r=o?.message??o?.toString()??"";if(r.includes("newer version of Git")){s.window.showErrorMessage(`Unable to stash changes. ${r}`);return}(0,eo.qQ)("Unable to stash changes");return}}}async *pushCommandInputMessageStep(e,t){var i=[];try{let r=eM(i,(0,eN.bP)(`${(0,el.zu)(this)}.pushCommandInputMessageStep`,!1)),o={iconPath:new s.ThemeIcon("sparkle"),tooltip:"Generate Stash Message"},a=(0,n.TX)({title:(0,l.Zr)(t.title,e,t,null!=e.uris?`${(0,C.eV)(c.EO.Dot,2,2)}${1===e.uris.length?(0,em.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`:void 0),placeholder:"Please provide a stash message",value:e.message,prompt:"Enter stash message",buttons:(0,et.SD)("gitlens:gk:organization:ai:enabled")?[s.QuickInputButtons.Back,o]:[s.QuickInputButtons.Back],validate:e=>[!0,void 0],onDidClickButton:async(t,i)=>{if(i===o){var n=[];try{let i=eM(n,a.freeze?.());try{let r=await e.repo.git.diff().getDiff?.(e.flags.includes("--staged")?eU.id:eU.SU,void 0,e.uris?.length?{uris:e.uris}:void 0);if(!r?.contents){s.window.showInformationMessage("No changes to generate a stash message from.");return}let o=(0,g.v6)();o.promise.then(e=>{t.validationMessage={severity:s.InputBoxValidationSeverity.Info,message:`$(loading~spin) Generating stash message with ${e.name}...`},i?.dispose()},()=>{t.validationMessage=void 0,i?.dispose()});let n=await this.container.ai.generateStashMessage(r.contents,{source:"quick-wizard"},{generating:o});t.validationMessage=void 0;let a=n?.parsed.summary;null!=a&&(e.message=a,t.value=a)}catch(e){el.Vy.error(e,r,"generateStashMessage"),t.validationMessage={severity:s.InputBoxValidationSeverity.Error,message:e.message}}}catch(e){var l=e,c=!0}finally{eG(n,l,c)}}}}),u=yield a;if(!(0,n.wc)(a,e,u)||!await (0,n.Ss)(a,e,u))return n.Lt;return u}catch(e){var r=e,o=!0}finally{eG(i,r,o)}}*pushCommandConfirmStep(e,t){let i=e.flags.includes("--staged"),r=[];i&&r.push("--staged");let s=[];e.uris?.length?(e.flags.includes("--include-untracked")&&r.push("--include-untracked"),s.push(en(e.flags,[...r],{label:t.title,detail:`Will stash changes from ${1===e.uris.length?(0,em.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`})),e.flags.includes("--include-untracked")||s.push(en(e.flags,[...r,"--keep-index"],{label:`${t.title} & Keep Staged`,detail:`Will stash changes from ${1===e.uris.length?(0,em.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}, but will keep staged files intact`}))):(s.push(en(e.flags,[...r],{label:t.title,detail:`Will stash ${i?"staged":"uncommitted"} changes`}),en(e.flags,[...r,"--snapshot"],{label:`${t.title} Snapshot`,detail:"Will stash uncommitted changes without changing the working tree"})),i||(s.push(en(e.flags,[...r,"--include-untracked"],{label:`${t.title} & Include Untracked`,description:"--include-untracked",detail:"Will stash uncommitted changes, including untracked files"})),s.push(en(e.flags,[...r,"--keep-index"],{label:`${t.title} & Keep Staged`,description:"--keep-index",detail:`Will stash ${i?"staged":"uncommitted"} changes, but will keep staged files intact`}))));let o=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),s,void 0,{placeholder:`Confirm ${t.title}`}),a=yield o;return(0,n.fg)(o,e,a)?a[0].item:n.Lt}async *renameCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.FF)(e,t,{gitStash:await e.repo.git.stash()?.getStash(),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to rename",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.message){let i=yield*this.renameCommandInputMessageStep(e,t);if(i===n.Lt)continue;e.message=i}if(!this.confirm(e.confirm)||(yield*this.renameCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{await e.repo.git.stash()?.renameStash(e.reference.name,e.reference.ref,e.message,e.reference.stashOnRef)}catch(e){el.Vy.error(e,t.title),(0,eo.qQ)(e.message)}}}}async *renameCommandInputMessageStep(e,t){let i=(0,n.TX)({title:(0,l.Zr)(t.title,e,t),placeholder:`Please provide a new message for ${(0,es.M4)(e.reference,{icon:!1})}`,value:e.message??e.reference?.message,prompt:"Enter new stash message"}),r=yield i;return(0,n.wc)(i,e,r)&&await (0,n.Ss)(i,e,r)?r:n.Lt}*renameCommandConfirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will rename ${(0,es.M4)(e.reference)}`,item:e.subcommand}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[a.kk,a.yi],onDidClickButton:(t,i)=>{i===a.kk?(0,eL.JX)(e.reference,{pin:!1,preserveFocus:!0}):i===a.yi&&(0,eL._c)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};let StatusGitCommand=class StatusGitCommand extends n.d6{constructor(e,t){super(e,"status","status","Status",{description:"shows status information about a repository"});let i=0;t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,status:void 0,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(t.status=await e.repo.git.status().getStatus(),null==t.status)return;t.title=`${this.title}${(0,C.eV)(c.EO.Dot,2,2)}${(0,es.M4)((0,es.kA)(t.status.branch,e.repo.path,{refType:"branch",name:t.status.branch,remote:!1,upstream:t.status.upstream}),{icon:!1})}`;let r=yield*(0,l.cf)(e,t);if(r===n.Lt){i&&e.counter--;continue}if(r instanceof eF.$N){let t=yield*r.executeSteps(this.pickedVia);e.counter--,t===n.Lt&&(0,n.nH)(e);continue}if(r instanceof h.Fj){(0,n.nH)(e),r.execute();break}}}};let SwitchGitCommand=class SwitchGitCommand extends n.d6{constructor(e,t){super(e,"switch","switch","Switch to...",{description:"aka checkout, switches to a specified branch"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}_canConfirmOverride;get canConfirm(){return this._canConfirmOverride??!0}async execute(e){await s.window.withProgress({location:s.ProgressLocation.Notification,title:`${(0,es.gC)(e.reference)||e.createBranch?"Switching to":"Checking out"} ${(0,es.M4)(e.reference,{icon:!1,label:!1})} in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`},()=>Promise.all(e.repos.map(t=>t.switch(e.reference.ref,{createBranch:e.createBranch,progress:!1})))),null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref)}isMatch(e){return super.isMatch(e)||"checkout"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"checkout"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,canSwitchToLocalBranch:void 0,promptToCreateBranch:!1,showTags:!1,title:this.title};null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,ea.Bo)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,l.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}if(e.counter<2||null==e.reference){let r=yield*(0,l.uV)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to switch to`,allowCreate:1===e.repos.length});if(r===n.Lt){i&&e.counter--;continue}if("string"==typeof r){yield*e0(this.container,{command:"branch",state:{subcommand:"create",repo:e.repos[0],name:r,suggestNameOnly:!0,flags:["--switch"]}},this.pickedVia),(0,n.nH)(e);return}if((0,n.h8)(r)){(0,m.RS)(r.command,r.args),(0,n.nH)(e);return}e.reference=r}if(t.canSwitchToLocalBranch=void 0,(0,es.gC)(e.reference)&&!e.reference.remote){e.createBranch=void 0;let t=await this.container.git.worktrees(e.reference.repoPath)?.getWorktree(t=>t.branch?.name===e.reference.name);if(null!=t&&!t.isDefault){if(null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref),(yield*e0(this.container,{command:"worktree",state:{subcommand:"open",worktree:t,openOnly:!0,overrides:{disallowBack:!0,confirmation:e.worktreeDefaultOpen?void 0:{title:`Confirm Switch to Worktree \u2022 ${(0,es.M4)(e.reference,{icon:!1,label:!1})}`,placeholder:`${(0,es.M4)(e.reference,{capitalize:!0,icon:!1})} is linked to a worktree`}},onWorkspaceChanging:e.onWorkspaceChanging,repo:e.repos[0],worktreeDefaultOpen:e.worktreeDefaultOpen}},this.pickedVia))===n.Lt&&!e.worktreeDefaultOpen)continue;(0,n.nH)(e);return}}else if((0,es.gC)(e.reference)&&e.reference.remote){let{values:i}=await this.container.git.branches(e.reference.repoPath).getBranches({filter:t=>t.upstream?.name===e.reference.name,sort:{orderBy:"date:desc"}});if(i.length){if(t.canSwitchToLocalBranch=i[0],e.createBranch=void 0,t.promptToCreateBranch=!1,e.worktreeDefaultOpen){e.reference=t.canSwitchToLocalBranch;continue}}else t.promptToCreateBranch=!0}if(e.worktreeDefaultOpen||this.confirm(!!t.promptToCreateBranch||!!t.canSwitchToLocalBranch||e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;switch(i){case"switchToLocalBranch":e.reference=t.canSwitchToLocalBranch;continue;case"switchToLocalBranchAndFastForward":e.fastForwardTo=e.reference,e.reference=t.canSwitchToLocalBranch;continue;case"switchToNewBranch":{t.title="Switch to New Branch",this._canConfirmOverride=!1;let i=yield*(0,l.wS)(e,t,{title:`${t.title} from ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.createBranch??((0,es.gC)(e.reference)&&e.reference.remote?(0,es.fC)(e.reference):void 0)});if(this._canConfirmOverride=void 0,i===n.Lt)continue;e.createBranch=i;break}case"switchViaWorktree":case"switchToLocalBranchViaWorktree":case"switchToNewBranchViaWorktree":if((yield*e0(this.container,{command:"worktree",state:{subcommand:"create",reference:"switchToLocalBranchViaWorktree"===i?t.canSwitchToLocalBranch:e.reference,createBranch:"switchToNewBranchViaWorktree"===i?e.createBranch:void 0,repo:e.repos[0],onWorkspaceChanging:e.onWorkspaceChanging,worktreeDefaultOpen:e.worktreeDefaultOpen}},this.pickedVia))===n.Lt&&!e.worktreeDefaultOpen)continue;(0,n.nH)(e);return}}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=(0,es.gC)(e.reference)&&!e.reference.remote,r=(0,es.gC)(e.reference)&&e.reference.remote;if(e.worktreeDefaultOpen&&1===e.repos.length)return i?"switchViaWorktree":e.createBranch||null==t.canSwitchToLocalBranch?"switchToNewBranchViaWorktree":"switchToLocalBranchViaWorktree";let s=[];(0,es.gC)(e.reference)||s.push({label:`Checkout to ${(0,es.eN)(e.reference)}`,description:"(detached)",detail:`Will checkout to ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switch"}),!e.createBranch&&(null!=t.canSwitchToLocalBranch?(s.push((0,h.uK)("Local")),s.push({label:"Switch to Local Branch",description:"",detail:`Will switch to local ${(0,es.M4)(t.canSwitchToLocalBranch)} for ${(0,es.M4)(e.reference)}`,item:"switchToLocalBranch"}),1===e.repos.length&&s.push({label:"Switch to Local Branch & Fast-Forward",description:"",detail:`Will switch to and fast-forward local ${(0,es.M4)(t.canSwitchToLocalBranch)}`,item:"switchToLocalBranchAndFastForward"})):i&&s.push({label:"Switch to Branch",description:"",detail:`Will switch to ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switch"})),(!i||e.createBranch||t.promptToCreateBranch)&&(r?(s.length&&s.push((0,h.uK)("Remote")),s.push({label:"Create & Switch to New Local Branch",description:"",detail:`Will create and switch to a new local branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranch"})):(s.length&&s.push((0,h.uK)("Branch")),s.push({label:`Create & Switch to New Branch from ${(0,es.eN)(e.reference)}`,description:"",detail:`Will create and switch to a new branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranch"}))),1===e.repos.length&&(s.length&&s.push((0,h.uK)("Worktree")),i?s.push({label:"Create Worktree for Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for ${(0,es.M4)(e.reference)}`,item:"switchViaWorktree"}):e.createBranch||null==t.canSwitchToLocalBranch?r?s.push({label:"Create Worktree for New Local Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for a new local branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranchViaWorktree"}):s.push({label:`Create Worktree for New Branch from ${(0,es.eN)(e.reference)}...`,description:"avoids modifying your working tree",detail:`Will create a new worktree for a new branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranchViaWorktree"}):s.push({label:"Create Worktree for Local Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for local ${(0,es.M4)(t.canSwitchToLocalBranch)}`,item:"switchToLocalBranchViaWorktree"})),r&&!e.createBranch&&(s.length&&s.push((0,h.uK)("Checkout")),s.push({label:"Checkout to Remote Branch",description:"(detached)",detail:`Will checkout to ${(0,es.M4)(e.reference)}`,item:"switch"}));let o=this.createConfirmStep((0,l.Zr)(`Confirm Switch to ${(0,es.M4)(e.reference,{icon:!1,capitalize:!0})}`,e,t),s,void 0,{placeholder:`Confirm ${t.title}`}),a=yield o;return(0,n.fg)(o,e,a)?a[0].item:n.Lt}};let ej=new Map([["create","Create"],["delete","Delete"]]);function eQ(e,t){return null==t?e:`${ej.get(t)} ${e}`}let TagGitCommand=class TagGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"tag","tag","Tag",{description:"create, or delete tags"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"create":null!=t.state.reference&&i++,null!=t.state.name&&i++,null!=t.state.message&&i++;break;case"delete":null!=t.state.references&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.tags,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}switch(t.title=eQ("delete"===e.subcommand?"Tags":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":yield*this.deleteCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new tag",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified tags",picked:"delete"===e.subcommand,item:"delete"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new tag from`,picked:e.reference?.ref??(await e.repo.git.branches().getBranch())?.ref,title:`${t.title} from`,value:(0,es.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,l.c1)(e,t,{placeholder:"Please provide a name for the new tag",title:`${t.title} at ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1})}`,value:e.name??((0,es.A1)(e.reference)?void 0:(0,es.fC)(e.reference))});if(i===n.Lt)continue;e.name=i}if(e.counter<5||null==e.message){let i=yield*this.createCommandInputMessageStep(e,t);if(i===n.Lt)continue;e.message=i}if(0===e.message.length||e.flags.includes("-m")||e.flags.push("-m"),this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e);try{await e.repo.git.tags().createTag?.(e.name,e.reference.ref,e.message)}catch(e){el.Vy.error(e,t.title),(0,eo.qQ)(e)}}}async *createCommandInputMessageStep(e,t){let i=(0,n.TX)({title:(0,l.Zr)(`${t.title} at ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1})}`,e,t),placeholder:"Please provide an optional message to annotate the tag",value:e.message,prompt:"Enter optional message"}),r=yield i;return(0,n.wc)(i,e,r)&&await (0,n.Ss)(i,e,r)?r:n.Lt}*createCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,0!==e.message.length?["-m"]:[],{label:t.title,description:0!==e.message.length?"-m":"",detail:`Will create a new tag named ${e.name} at ${(0,es.M4)(e.reference)}`}),en(e.flags,0!==e.message.length?["--force","-m"]:["--force"],{label:`Force ${t.title}`,description:`--force${0!==e.message.length?" -m":""}`,detail:`Will forcibly create a new tag named ${e.name} at ${(0,es.M4)(e.reference)}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *deleteCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||0===e.references.length){t.title=eQ("Tags",e.subcommand);let i=yield*(0,l.RX)(e,t,{picked:e.references?.map(e=>e.ref),placeholder:"Choose tags to delete"});if(i===n.Lt)break;e.references=i}if(t.title=eQ((0,C.td)("Tag",e.references.length,{only:!0}),e.subcommand),(yield*this.deleteCommandConfirmStep(e,t))!==n.Lt)for(let{ref:i}of((0,n.nH)(e),e.references))try{await e.repo.git.tags().deleteTag?.(i)}catch(e){el.Vy.error(e,t.title),(0,eo.qQ)(e)}}}*deleteCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,es.M4)(e.references)}`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}};var ez=i(8191),eY=i(5507),eK=i(3447),eZ=i(377);let eJ=new Map([[void 0,`Worktrees ${c.tM}`],["create","Create Worktree"],["delete","Delete Worktrees"],["open","Open Worktree"],["copy-changes","Copy Changes to Worktree"]]);function eX(e,t){return`${eJ.get(e)}${t??""}`}let WorktreeGitCommand=class WorktreeGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"worktree","worktree",`Worktrees ${c.tM}`,{description:`${c.lD}\xa0\xA0open, create, or delete worktrees`});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"create":null!=t.state.uri&&i++,null!=t.state.reference&&i++;break;case"delete":null!=t.state.uris&&(!Array.isArray(t.state.uris)||0!==t.state.uris.length)&&i++;break;case"open":case"copy-changes":null!=t.state.worktree&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}_canSkipConfirmOverride;get canSkipConfirm(){return this._canSkipConfirmOverride??"open"===this.subcommand}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.worktrees,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=e.overrides?.title??this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=e.overrides?.title??eX(e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}"copy-changes"!==e.subcommand&&(e.repo=await e.repo.getCommonRepository()??e.repo);if(null==e.repo||"string"==typeof e.repo)throw Error("Missing repository");if((yield*(0,l.jg)(this.container,e,t,"worktrees"))!==n.Lt){switch(e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.uri=void 0;break;case"delete":null==e.uris||Array.isArray(e.uris)||(e.uris=[e.uris]),yield*this.deleteCommandSteps(e,t);break;case"open":yield*this.openCommandSteps(e,t);break;case"copy-changes":yield*this.copyChangesCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"open",description:"opens the specified worktree",picked:"open"===e.subcommand,item:"open"},{label:"create",description:"creates a new worktree",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified worktrees",picked:"delete"===e.subcommand,item:"delete"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==t.defaultUri&&(t.defaultUri=await e.repo.git.worktrees()?.getWorktreesDefaultUri()),null==e.flags&&(e.flags=[]),t.pickedRootFolder=void 0,t.pickedSpecificFolder=void 0,e.confirm=!0,this._canSkipConfirmOverride=void 0;this.canStepsContinue(e);){let i;if(e.counter<3||null==e.reference){let i=yield*(0,l.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new worktree from`,picked:e.reference?.ref??(await e.repo.git.branches().getBranch())?.ref,title:"Select Branch to Create Worktree From",value:(0,es.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}null==e.uri&&(e.uri=t.defaultUri),e.worktree=(0,es.gC)(e.reference)&&!e.reference.remote?await (0,er.vV)(e.repo,e.reference.name,void 0,t.worktrees):void 0;let r=(0,es.gC)(e.reference)&&e.reference?.remote;if((r||null!=e.worktree)&&!e.flags.includes("-b")&&e.flags.push("-b"),r){e.createBranch=(0,es.fC)(e.reference);let t=await e.repo.git.branches().getBranch(e.createBranch);null==t||t.remote||(e.createBranch=t.name)}if(e.flags.includes("-b")){let i;if(null!=e.createBranch){let t=await e.repo.git.refs().checkIfCouldBeValidBranchOrTagName(e.createBranch);t&&(t=null==await e.repo.git.branches().getBranch(e.createBranch)),t||(i=e.createBranch,e.createBranch=void 0)}if(null==e.createBranch){let r=yield*(0,l.wS)(e,t,{title:`${t.title} and New Branch from ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:i});if(r===n.Lt){e.flags=[];continue}e.createBranch=r}}if(this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;if("string"==typeof i[0])switch(i[0]){case"changeRoot":{let i=yield*this.createCommandChoosePathStep(e,t,{title:"Choose a Different Root Folder for this Worktree",label:"Choose Root Folder",pickedUri:t.pickedRootFolder,defaultUri:t.pickedRootFolder??t.defaultUri});if(i===n.Lt)continue;e.uri=i,t.pickedRootFolder=e.uri,t.pickedSpecificFolder=void 0;continue}case"chooseFolder":{let i=yield*this.createCommandChoosePathStep(e,t,{title:"Choose a Specific Folder for this Worktree",label:"Choose Worktree Folder",pickedUri:t.pickedRootFolder,defaultUri:t.pickedSpecificFolder??t.defaultUri});if(i===n.Lt)continue;e.uri=i,t.pickedRootFolder=void 0,t.pickedSpecificFolder=e.uri;continue}}[e.uri,e.flags]=i}e.confirm=!0,this._canSkipConfirmOverride=void 0;let o=e.flags.includes("--direct")?e.uri:s.Uri.joinPath(e.uri,...(e.createBranch??e.reference.name).replace(/\\/g,"/").split("/"));try{null!=e.addRemote&&await e.repo.git.remotes().addRemote?.(e.addRemote.name,e.addRemote.url,{fetch:!0}),i=await e.repo.git.worktrees()?.createWorktreeWithResult(o.fsPath,{commitish:e.reference?.name,createBranch:e.flags.includes("-b")?e.createBranch:void 0,detach:e.flags.includes("--detach"),force:e.flags.includes("--force")}),e.result?.fulfill(i)}catch(t){if(eB.iX.is(t,eB.O7.AlreadyCheckedOut)&&!e.flags.includes("--force")){let t={title:"Create New Branch"},i={title:"Create Anyway"},r={title:"Cancel",isCloseAffordance:!0},o=await s.window.showWarningMessage(`Unable to create the new worktree because ${(0,es.M4)(e.reference,{icon:!1,quoted:!0})} is already checked out.

Would you like to create a new branch for this worktree or forcibly create it anyway?`,{modal:!0},t,i,r);if(o===t){e.flags.push("-b"),this._canSkipConfirmOverride=!0,e.confirm=!1;continue}if(o===i){e.flags.push("--force"),this._canSkipConfirmOverride=!0,e.confirm=!1;continue}}else if(eB.iX.is(t,eB.O7.AlreadyExists)){let e={title:"OK"},t={title:"Open Folder"};s.window.showErrorMessage(`Unable to create a new worktree in '${(0,w.kZ)(o)}' because the folder already exists and is not empty.`,e,t).then(e=>{e===t&&(0,w.mP)(o)})}else(0,eo.qQ)(`Unable to create a new worktree in '${(0,w.kZ)(o)}.`)}if((0,n.nH)(e),null==i)break;!1!==e.reveal&&setTimeout(()=>{this.container.views.worktrees.visible&&(0,eY._c)(i,{select:!0,focus:!1})},100);let a=f.H.get("worktrees.openAfterCreate");if("never"!==a){let r;switch(a){case"always":r=(0,eY.F8)("currentWindow");break;case"alwaysNewWindow":r=(0,eY.F8)("newWindow");break;case"onlyWhenEmpty":r=(0,eY.F8)(s.workspace.workspaceFolders?.length?"newWindow":"currentWindow");break;default:r=[]}yield*this.openCommandSteps({subcommand:"open",repo:e.repo,worktree:i,flags:r,counter:3,confirm:"prompt"===a,openOnly:!0,overrides:{disallowBack:!0},isNewWorktree:!0,worktreeDefaultOpen:e.worktreeDefaultOpen,onWorkspaceChanging:e.onWorkspaceChanging},t)}}}*createCommandChoosePathStep(e,t,i){let r=(0,n.CO)({show:async r=>{let o=await s.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,defaultUri:i.pickedUri??e.uri??t.defaultUri,openLabel:i.label,title:i.title});return null==o||0===o.length?d.WL.Back:o[0]}}),o=yield r;return(0,n.wc)(r,e,o)?o:n.Lt}async *createCommandConfirmStep(e,t){let i,r=!1;null!=t.pickedSpecificFolder&&(r=!0);let o=t.pickedSpecificFolder??t.pickedRootFolder??e.uri,a=await e.repo.getCommonRepositoryUri()??e.repo.uri,c=`${(0,ed.P8)(a.path)}.worktrees`;null!=t.pickedRootFolder?i=t.pickedRootFolder:a.toString()!==o.toString()?i=(0,eZ.K9)(o,a)?s.Uri.joinPath(a,"..",c):(0,ed.P8)(o.path)===c?o=s.Uri.joinPath(o,".."):s.Uri.joinPath(o,c):(i=s.Uri.joinPath(a,"..",c),r=!1);let u=(0,C.Es)((0,w.kZ)(o),60),d=null!=e.reference?(0,es.fC)(e.reference):void 0,p=`<root>/${(0,C.Es)(d?.replace(/\\/g,"/")??"",65)}`,g=`<root>/${e.createBranch||"<new-branch-name>"}`,m=(0,es.gC)(e.reference),f=(0,es.gC)(e.reference)&&e.reference?.remote,v=en(e.flags,e.createBranch?["-b"]:[],{label:f?"Create Worktree from New Local Branch":m?"Create Worktree from Branch":t.title,description:"",detail:`Will create worktree in $(folder) ${e.createBranch?g:p}`},i),y=[];if(r)e.createBranch||y.push(en(e.flags,["--direct"],{label:f?"Create Worktree from Local Branch":m?"Create Worktree from Branch":t.title,description:"",detail:`Will create worktree directly in $(folder) ${(0,C.Es)(u,60)}`},o)),y.push(en(e.flags,["-b","--direct"],{label:f?"Create Worktree from New Local Branch":"Create Worktree from New Branch",description:"",detail:`Will create worktree directly in $(folder) ${(0,C.Es)(u,60)}`},o));else{if(e.worktreeDefaultOpen)return[v.context,v.item];y.push(v)}r||y.push((0,h.uK)(),en([],[],{label:"Change Root Folder...",description:`$(folder) ${(0,C.Es)(t.pickedRootFolder?u:`${u}/${c}`,65)}`,picked:!1},"changeRoot")),y.push(en([],[],{label:"Choose a Specific Folder...",description:"",picked:!1},"chooseFolder"));let b=(0,n.VW)((0,l.Zr)(`Confirm ${t.title} \u2022 ${e.createBranch||(0,es.M4)(e.reference,{icon:!1,label:!1})}`,e,t),y,t),k=yield b;return(0,n.fg)(b,e,k)?[k[0].context,k[0].item]:n.Lt}async *deleteCommandSteps(e,t){for(t.worktrees=await e.repo.git.worktrees()?.getWorktrees()??[],null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uris||0===e.uris.length){t.title=eX(e.subcommand);let i=yield*(0,l.sL)(e,t,{excludeOpened:!0,filter:e=>!e.isDefault,includeStatus:!0,picked:e.uris?.map(e=>e.toString()),placeholder:"Choose worktrees to delete"});if(i===n.Lt)break;e.uris=i.map(e=>e.uri)}t.title=eX(e.subcommand);let i=yield*this.deleteCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i;let r=[];for(let i of e.uris){let o=!1,n=!1,a=e.flags.includes("--delete-branches"),l=e.flags.includes("--force"),c=t.worktrees.find(e=>e.uri.toString()===i.toString());for(;;){n=!1;try{if(l){let e;try{e=await c?.getStatus()}catch{}if(e?.hasChanges&&!o){let e={title:"Force Delete"},t={title:"Cancel",isCloseAffordance:!0};if(await s.window.showWarningMessage(`The worktree in '${i.fsPath}' has uncommitted changes.

Deleting it will cause those changes to be FOREVER LOST.
This is IRREVERSIBLE!

Are you sure you still want to delete it?`,{modal:!0},e,t)!==e)return}}await e.repo.git.worktrees()?.deleteWorktree(i,{force:l}),n=!0}catch(e){if(o=!1,eB.N$.is(e)){if(e.reason===eB.z2.DefaultWorkingTree){s.window.showErrorMessage("Cannot delete the default worktree.");break}if(e.reason===eB.z2.DirectoryNotEmpty){let e={title:"Open Folder"},t={title:"OK",isCloseAffordance:!0};await s.window.showErrorMessage(`Unable to fully clean up the delete worktree in '${i.fsPath}' because the folder is not empty.`,{modal:!0},e,t)===e&&(0,w.mP)(i),n=!0;break}if(!l){let t={title:"Force Delete"},r={title:"Cancel",isCloseAffordance:!0};if(await s.window.showErrorMessage(e.reason===eB.z2.HasChanges?`Unable to delete worktree because there are UNCOMMITTED changes in '${i.fsPath}'.

Forcibly deleting it will cause those changes to be FOREVER LOST.
This is IRREVERSIBLE!

Would you like to forcibly delete it?`:`Unable to delete worktree in '${i.fsPath}'.

Would you like to try to forcibly delete it?`,{modal:!0},t,r)===t){l=!0,o=e.reason===eB.z2.HasChanges;continue}break}}(0,eo.qQ)(`Unable to delete worktree in '${i.fsPath}. ex=${String(e)}`)}break}n&&a&&c?.branch&&r.push((0,eK.iw)(c?.branch))}(0,n.nH)(e),r.length&&(0,ez.b)({command:"branch",state:{subcommand:"delete",repo:e.repo,references:r}})}}*deleteCommandConfirmStep(e,t){t.title=1===e.uris.length?"Delete Worktree":"Delete Worktrees";let i=1===e.uris.length?"Delete Worktree":"Delete Worktrees",r=1===e.uris.length?"Branch":"Branches",s="";e.startingFromBranchDelete&&(s=` for ${r}`,t.title=`${t.title}${s}`);let o=1===e.uris.length?`delete worktree in $(folder) ${(0,w.kZ)(e.uris[0])}`:`delete ${e.uris.length} worktrees`,a=1===e.uris.length?"delete the worktree and then prompt to delete the associated branch":`delete ${e.uris.length} worktrees and then prompt to delete the associated branches`,c=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:`${i}${s}`,detail:`Will ${o}`}),en(e.flags,["--force"],{label:`Force ${i}${s}`,description:"includes ANY UNCOMMITTED changes",detail:`Will forcibly ${o}`}),...e.startingFromBranchDelete?[]:[(0,h.uK)(),en(e.flags,["--delete-branches"],{label:`${i} & ${r}`,detail:`Will ${a}`}),en(e.flags,["--force","--delete-branches"],{label:`Force ${i} & ${r}`,description:"includes ANY UNCOMMITTED changes",detail:`Will forcibly ${a}`})]],t),u=yield c;return(0,n.fg)(c,e,u)?u[0].item:n.Lt}async *openCommandSteps(e,t){for(null==e.flags&&(e.flags=[]),this._canSkipConfirmOverride=!0;this.canStepsContinue(e);){if(e.counter<3||null==e.worktree){t.title=eX(e.subcommand),t.worktrees??=await e.repo.git.worktrees()?.getWorktrees()??[];let i=yield*(0,l.l7)(e,t,{excludeOpened:!0,includeStatus:!0,picked:e.worktree?.uri?.toString(),placeholder:"Choose worktree to open"});if(i===n.Lt)break;e.worktree=i}if(t.title=eX(e.subcommand,` \u2022 ${e.worktree.name}`),this.confirm(e.confirm)){let i=yield*this.openCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}if((0,n.nH)(e),e.flags.includes("--reveal-explorer"))(0,w.mP)(e.worktree.uri);else{let t,i=await e.repo.getCommonRepository()??e.repo;t=i.name!==e.worktree.name?`${i.name}: ${e.worktree.name}`:e.worktree.name;let r=(0,eY.VO)(e.flags);("currentWindow"===r||"newWindow"===r)&&await e.onWorkspaceChanging?.(e.isNewWorktree),(0,w.OH)(e.worktree.uri,{location:(0,eY.VO)(e.flags),name:t})}}}*openCommandConfirmStep(e,t){let i=en(e.flags,["--new-window"],{label:"Open Worktree in a New Window",detail:"Will open the worktree in a new window"}),r=en(e.flags,[],{label:"Open Worktree",detail:"Will open the worktree in the current window"});if("new"===e.worktreeDefaultOpen)return i.item;if("current"===e.worktreeDefaultOpen)return r.item;let s=[r,i,en(e.flags,["--add-to-workspace"],{label:"Add Worktree to Workspace",detail:"Will add the worktree into the current workspace"})];e.openOnly||s.push((0,h.uK)(),en(e.flags,["--reveal-explorer"],{label:"Reveal in File Explorer",description:`$(folder) ${(0,C.Es)((0,w.kZ)(e.worktree.uri),40)}`,detail:"Will open the worktree in the File Explorer"}));let o=(0,n.VW)((0,l.Zr)(e.overrides?.confirmation?.title??`Confirm ${t.title}`,e,t),s,t,void 0,{disallowBack:e.overrides?.disallowBack,placeholder:e.overrides?.confirmation?.placeholder??"Confirm Open Worktree"}),a=yield o;return(0,n.fg)(o,e,a)?a[0].item:n.Lt}async *copyChangesCommandSteps(e,t){for(;this.canStepsContinue(e);){if(t.title=e?.overrides?.title??eX(e.subcommand),e.counter<3||null==e.worktree){let i;switch(t.worktrees??=await e.repo.git.worktrees()?.getWorktrees()??[],e.changes.type){case"index":t.title=e?.overrides?.title??"Copy Staged Changes to Worktree",i="Choose a worktree to copy your staged changes to";break;case"working-tree":t.title=e?.overrides?.title??"Copy Working Changes to Worktree",i="Choose a worktree to copy your working changes to";break;default:t.title=e?.overrides?.title??"Copy Changes to Worktree",i="Choose a worktree to copy changes to"}let r=yield*(0,l.l7)(e,t,{excludeOpened:!0,includeStatus:!0,picked:e.worktree?.uri?.toString(),placeholder:i});if(r===n.Lt)break;e.worktree=r}if(!e.changes.contents||!e.changes.baseSha){let t=await e.repo.git.diff().getDiff?.("index"===e.changes.type?eU.id:eU.SU,"HEAD",{includeUntracked:"index"!==e.changes.type});if(!t?.contents){s.window.showErrorMessage("No changes to copy"),(0,n.nH)(e);break}e.changes.contents=t.contents,e.changes.baseSha=t.from}if(!(0,eh.HH)(e.changes.baseSha)){let t=await e.repo.git.refs().resolveReference(e.changes.baseSha,void 0,{force:!0});null!=t&&(e.changes.baseSha=t)}if(!this.confirm(e.confirm)||(yield*this.copyChangesCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{let t=this.container.git.patch(e.worktree.uri),i=await t?.createUnreachableCommitForPatch(e.changes.contents,e.changes.baseSha,"Copied Changes");if(null==i)return;await t?.applyUnreachableCommitForPatch(i.sha,{stash:!1}),s.window.showInformationMessage("Changes copied successfully")}catch(e){if(e instanceof p.AL)return;if(e instanceof eB.ol)if(e.reason===eB.a_.AppliedWithConflicts)s.window.showWarningMessage("Changes copied with conflicts");else if(e.reason===eB.a_.ApplyAbortedWouldOverwrite){s.window.showErrorMessage("Unable to copy changes as some local changes would be overwritten");return}else{s.window.showErrorMessage(`Unable to copy changes: ${e.message}`);return}else{s.window.showErrorMessage(`Unable to copy changes: ${e.message}`);return}}yield*this.openCommandSteps({subcommand:"open",repo:e.repo,worktree:e.worktree,flags:[],counter:3,confirm:!0,openOnly:!0,overrides:{disallowBack:!0}},t)}}}async *copyChangesCommandConfirmStep(e,t){let i=await e.repo.git.diff().getDiffFiles?.(e.changes.contents),r=i?.files.length??0,s=[];switch(e.changes.type){case"index":s.push({label:"Copy Staged Changes to Worktree",detail:`Will copy the staged changes${r>0?` (${(0,C.td)("file",r)})`:""} to worktree '${e.worktree.name}'`});break;case"working-tree":s.push({label:"Copy Working Changes to Worktree",detail:`Will copy the working changes${r>0?` (${(0,C.td)("file",r)})`:""} to worktree '${e.worktree.name}'`});break;default:s.push(en([],[],{label:"Copy Changes to Worktree",detail:`Will copy the changes${r>0?` (${(0,C.td)("file",r)})`:""} to worktree '${e.worktree.name}'`}))}let o=(0,n.VW)(`Confirm ${t.title} \u2022 ${e.worktree.name}`,s,t),a=yield o;return(0,n.fg)(o,e,a)?void 0:n.Lt}};function e0(e,t,i){let r=new QuickWizardRootStep(e,t),s=r.find(t.command);return null==s?function*(){}():(r.setCommand(s,i),s.executeSteps())}let QuickWizardRootStep=class QuickWizardRootStep{constructor(e,t){this.container=e;let i=(0,et.SD)("gitlens:hasVirtualFolders",!1),r=i||(0,et.SD)("gitlens:readonly",!1)||(0,et.SD)("gitlens:untrusted",!1);if(this.items=[r?void 0:new BranchGitCommand(e,t?.command==="branch"?t:void 0),r?void 0:new CherryPickGitCommand(e,t?.command==="cherry-pick"?t:void 0),i?void 0:new CoAuthorsGitCommand(e,t?.command==="co-authors"?t:void 0),r?void 0:new FetchGitCommand(e,t?.command==="fetch"?t:void 0),new LogGitCommand(e,t?.command==="log"?t:void 0),r?void 0:new MergeGitCommand(e,t?.command==="merge"?t:void 0),r?void 0:new PullGitCommand(e,t?.command==="pull"?t:void 0),r?void 0:new PushGitCommand(e,t?.command==="push"?t:void 0),r?void 0:new RebaseGitCommand(e,t?.command==="rebase"?t:void 0),r?void 0:new RemoteGitCommand(e,t?.command==="remote"?t:void 0),r?void 0:new ResetGitCommand(e,t?.command==="reset"?t:void 0),r?void 0:new RevertGitCommand(e,t?.command==="revert"?t:void 0),new SearchGitCommand(e,t?.command==="search"||t?.command==="grep"?t:void 0),new ShowGitCommand(e,t?.command==="show"?t:void 0),i?void 0:new StashGitCommand(e,t?.command==="stash"?t:void 0),i?void 0:new StatusGitCommand(e,t?.command==="status"?t:void 0),r?void 0:new SwitchGitCommand(e,t?.command==="switch"||t?.command==="checkout"?t:void 0),r?void 0:new TagGitCommand(e,t?.command==="tag"?t:void 0),i?void 0:new WorktreeGitCommand(e,t?.command==="worktree"?t:void 0)].filter(e=>null!=e),"usage"===f.H.get("gitCommands.sortBy")){let t=e.storage.getWorkspace("gitComandPalette:usage");null!=t&&this.items.sort((e,i)=>(t[i.key]??0)-(t[e.key]??0))}this.hiddenItems=[],t?.command==="launchpad"&&this.hiddenItems.push(new LaunchpadCommand(e,t)),t?.command==="startWork"&&this.hiddenItems.push(new StartWorkCommand(e,t)),t?.command==="associateIssueWithBranch"&&this.hiddenItems.push(new AssociateIssueWithBranchCommand(e,t))}type="pick";buttons=[];ignoreFocusOut=!1;items;matchOnDescription=!0;placeholder="Choose a command";title="GitLens";hiddenItems;_command;get command(){return this._command}find(e,t=!1){if(t){let t=e.toLowerCase();return this.items.find(e=>e.isFuzzyMatch(t))??this.hiddenItems.find(e=>e.isFuzzyMatch(t))}return this.items.find(t=>t.isMatch(e))??this.hiddenItems.find(t=>t.isMatch(e))}setCommand(e,t){null!=this._command&&(this._command.picked=!1),null!=e&&(e.picked=!0,e.pickedVia=t),this._command=e,null!=e&&this.updateCommandUsage(e.key,Date.now())}async updateCommandUsage(e,t){let i=this.container.storage.getWorkspace("gitComandPalette:usage");void 0===i&&(i=Object.create(null)),i[e]=t,await this.container.storage.storeWorkspace("gitComandPalette:usage",i)}}},1881:(e,t,i)=>{i.d(t,{c:()=>o});var r=i(1398),s=i(1220);let o=(0,i(4465).An)((e,t,i,o)=>(0,s.Ff)(e.integrations.ignoreSSLErrors({id:t,domain:i.domain}),async()=>{let e=await r.authentication.getSession(t,i.scopes,{createIfNone:o?.createIfNeeded,silent:o?.silent,forceNewSession:o?.forceNewSession});if(null!=e)return{...e,cloud:!1,domain:i.domain}}))},1920:(e,t,i)=>{i.d(t,{Hn:()=>o,R6:()=>n,i9:()=>a});var r=i(5576),s=i(3934);async function o(e,t,i,o){let n=e.git.diff(t),[a,l,c,u]=await Promise.allSettled([n.getDiffStatus(i),o?n.getDiffStatus("HEAD"):void 0,n.getChangedFilesCount(i),o?n.getChangedFilesCount("HEAD"):void 0]),h=(0,r.Ro)(a)??[],d=(0,r.Ro)(c);if(o){let e=(0,r.Ro)(l);if(null!=e)if(0===h.length)h=e??[];else for(let t of e){let e=h.findIndex(e=>e.path===t.path);-1!==e?h.splice(e,1,t):h.push(t)}let t=(0,r.Ro)(u);null!=t&&(d=null==d?t:{additions:d.additions+t.additions,deletions:d.deletions+t.deletions,files:h.length,approximated:!0})}return{label:`${(0,s.td)("file",h.length,{zero:"No"})} changed`,files:h,stats:d}}function n(e,t,i,r){return async s=>{let o=await e.git.commits(t).getLog(i,{limit:s,authors:r}),n={log:o,hasMore:o?.hasMore??!0};return n.hasMore&&(n.more=async e=>{n.log=await n.log?.more?.(e)??n.log,n.hasMore=n.log?.hasMore??!0}),n}}async function a(e,t,i,o){let n;if(""===o)throw Error("Cannot get files for comparisons of a ref with working tree");n=""===i?o:`${o}..${i}`;let a=e.git.diff(t),[l,c]=await Promise.allSettled([a.getDiffStatus(n),a.getChangedFilesCount(n)]),u=(0,r.Ro)(l)??[];return{label:`${(0,s.td)("file",u.length,{zero:"No"})} changed`,files:u,stats:(0,r.Ro)(c)}}},1974:(e,t,i)=>{i.d(t,{M7:()=>GitCommitIdentity,WM:()=>k,Yg:()=>P,kk:()=>S});var r=i(1398),s=i(6525),o=i(1518),n=i(4941),a=i(3500),l=i(4499),c=i(7005),u=i(5576),h=i(3934),d=i(3088),p=i(8860),g=i(5662),m=i(8554),f=i(9349),w=i(6066),v=Object.defineProperty,y=Object.getOwnPropertyDescriptor,b=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?y(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&v(t,i,o),o};let C=/stash@{(\d+)}/;function k(e){return e instanceof P}function S(e){return k(e)&&"stash"===e.refType&&!!e.stashName}let R=class _GitCommit{constructor(e,t,i,r,s,n,a,l,c,u,h,d,p,g){this.container=e,this.repoPath=t,this.sha=i,this.author=r,this.committer=s,this.parents=a,this.ref=i,this.shortSha=i.substring(0,this.container.CommitShaFormatting.length),this.tips=d,p?(this.refType="stash",this.stashName=p||void 0,this.stashOnRef=g||void 0,this.number=C.exec(p)?.[1]):this.refType="revision",null!=l?(this._message=l,n!==l?this._summary=`${n} ${o.EO.Ellipsis}`:this._summary=n):(0,m._k)(i,!0)?(this._summary=n,this._message="Uncommitted Changes"):this._summary=`${n} ${o.EO.Ellipsis}`,null!=u&&(this._stats=u),null!=c&&(Array.isArray(c)?this._files=c:c instanceof f.l?this._file=c:(null!=c.file&&(this._file=c.file),null!=c.files&&(this._files=c.files)),this._recomputeStats=!0),null!=h?Array.isArray(h)?this.lines=h:this.lines=[h]:this.lines=[]}_stashUntrackedFilesLoaded=!1;_recomputeStats=!1;lines;ref;refType;shortSha;stashName;number;stashOnRef;tips;toString(){return`${(0,c.zu)(this)}(${this.repoPath}|${this.shortSha})`}get date(){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.date:this.author.date}_file;get file(){return this._file}_files;get files(){return this._files}get formattedDate(){return"absolute"===this.container.CommitDateFormatting.dateStyle?this.formatDate(this.container.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get isUncommitted(){return(0,m._k)(this.sha)}get isUncommittedStaged(){return(0,m.KH)(this.sha)}_message;get message(){return this._message}get name(){return this.stashName?this.stashName:this.shortSha}_stats;get stats(){return this._recomputeStats&&this.computeFileStats(),this._stats}_summary;get summary(){return this._summary}_resolvedPreviousSha;get resolvedPreviousSha(){return this._resolvedPreviousSha}get unresolvedPreviousSha(){let e=this._resolvedPreviousSha??(null!=this.file?this.file.previousSha:this.parents[0])??`${this.sha}^`;return(0,m.i8)(e)?"HEAD":e}_etagFileSystem;hasFullDetails(e){return null!=this.message&&null!=this.files&&(!e?.include?.stats||this.files.some(e=>null!=e.stats))&&(this.isUncommitted&&this._etagFileSystem===this.container.git.getRepository(this.repoPath)?.etagFileSystem||0!==this.parents.length)&&("stash"!==this.refType||this._stashUntrackedFilesLoaded)}async ensureFullDetails(e){if(!this.hasFullDetails(e)){if(this.isUncommitted){let t=this.container.git.getRepository(this.repoPath);if(this._etagFileSystem=t?.etagFileSystem,null!=this._etagFileSystem){let e=await t?.git.status().getStatus();null!=e&&(this._files=e.files.flatMap(e=>e.getPseudoFileChanges()),(0,m.KH)(this.sha)&&(this._files=this._files.filter(e=>e.staged))),this._etagFileSystem=t?.etagFileSystem}if(null==this._files&&(this._files=null!=this.file?[this.file]:[]),e?.include?.stats){let e=await t?.git.diff().getChangedFilesCount(this.sha);this._stats=e,this._recomputeStats=!1}else this._recomputeStats=!0;return}if("stash"===this.refType){let[t]=await Promise.allSettled([this.container.git.stash(this.repoPath)?.getStashCommitFiles(this.sha,e),this.getPreviousSha()]),i=(0,u.Ro)(t);i?.length&&(this._files=i),this._stashUntrackedFilesLoaded=!0}else{let t=this.container.git.commits(this.repoPath),[i,r]=await Promise.allSettled([t.getCommit(this.sha),e?.include?.stats?t.getCommitFilesStats?.(this.sha):void 0,this.getPreviousSha()]),s=(0,u.Ro)(i);null!=s&&(this.parents.push(...s.parents??[]),this._summary=s.summary,this._message=s.message,this._files=s.files??[]);let o=(0,u.Ro)(r);o?.length&&this._files?.length&&(this._files=(0,p.h)(this.container,this._files,o))}if(null!=this._files&&null!=this._file){let e=this._files.find(e=>e.path===this._file.path);null!=e&&(this._file=new f.l(this.container,e.repoPath,e.path,e.status,e.originalPath??this._file.originalPath,e.previousSha??this._file.previousSha,e.stats??this._file.stats))}this._recomputeStats=!0}}computeFileStats(){if(!this._recomputeStats||null==this._files)return;this._recomputeStats=!1;let e={added:0,deleted:0,changed:0},t=0,i=0;for(let r of this._files)switch(null!=r.stats&&(t+=r.stats.additions,i+=r.stats.deletions),r.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}null!=this._stats&&(0===t&&0!==this._stats.additions&&(t=this._stats.additions),0===i&&0!==this._stats.deletions&&(i=this._stats.deletions)),this._stats={...this._stats,files:e,additions:t,deletions:i}}async findFile(e,t,i){if(!this.hasFullDetails(i)&&(await this.ensureFullDetails(i),null==this._files))return;let r=this.container.git.getRelativePath(e,this.repoPath);return this.isUncommitted&&null!=t?this._files?.find(e=>e.path===r&&e.staged===t):this._files?.find(e=>e.path===r)}formatDate(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.formatDate(e):this.author.formatDate(e)}formatDateFromNow(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.fromNow(e):this.author.fromNow(e)}formatStats(e,t){let{stats:i}=this;if(null==i)return t?.empty??"";let{files:r,additions:s,deletions:n}=i;if(0>=(0,g.Zx)(r)&&s<=0&&n<=0)return t?.empty??"";let a=t?.separator??" ";function l(i,r){if("expanded"===e)return`${(0,h.td)("file",r)} ${i}`;let s=`${"added"===i?"+":"deleted"===i?"-":"~"}${r}`;return"stats"===e&&t?.color?`<span style="color:${"added"===i?"var(--vscode-gitDecoration-addedResourceForeground)":"deleted"===i?"var(--vscode-gitDecoration-deletedResourceForeground)":"var(--vscode-gitDecoration-modifiedResourceForeground)"};">${s}</span>`:s}let c=[];if("number"==typeof r)r&&c.push(l("changed",r));else{let{added:t,changed:i,deleted:s}=r;t?c.push(l("added",t)):"stats"===e&&c.push(l("added",0)),i?c.push(l("changed",i)):"stats"===e&&c.push(l("changed",0)),s?c.push(l("deleted",s)):"stats"===e&&c.push(l("deleted",0))}let u=c.join(a);if("stats"===e&&t?.color&&(u=`<span style="background-color:var(--vscode-textCodeBlock-background);border-radius:3px;">&nbsp;${u}&nbsp;&nbsp;</span>`),t?.addParenthesesToFileStats&&(u=`(${u})`),"expanded"===e){let e=[];if(s){let i=(0,h.td)("addition",s);t?.color?e.push(`<span style="color:var(--vscode-gitDecoration-addedResourceForeground);">${i}</span>`):e.push(i)}if(n){let i=(0,h.td)("deletion",n);t?.color?e.push(`<span style="color:var(--vscode-gitDecoration-deletedResourceForeground);">${i}</span>`):e.push(i)}e.length&&(u+=`${c.length?t?.addParenthesesToFileStats?`${o.EO.Space} `:", ":""}${e.join(a)}`)}return u}async getAssociatedPullRequest(e,t){if(e??=await this.container.git.remotes(this.repoPath).getBestRemoteWithIntegration(),e?.hasIntegration())return(await this.container.integrations.getByRemote(e))?.getPullRequestForCommit(e.provider.repoDesc,this.ref,t)}async getEnrichedAutolinks(e){if(!this.isUncommitted&&(e??=await this.container.git.remotes(this.repoPath).getBestRemoteWithIntegration(),e?.provider!=null))return null==this.message&&await this.ensureFullDetails(),this.container.autolinks.getEnrichedAutolinks(this.message??this.summary,e)}getAvatarUri(e){return this.author.getAvatarUri(this,e)}getCachedAvatarUri(e){return this.author.getCachedAvatarUri(e)}async getCommitForFile(e,t){let i="string"==typeof e?this.container.git.getRelativePath(e,this.repoPath):e.path,r=await this.findFile(i,t);if(null!=r)return this.with({sha:r.staged?w.id:this.sha,files:{file:r}})}async getCommitsForFiles(e){return this.hasFullDetails(e)||(await this.ensureFullDetails(e),null!=this._files)?this._files?.map(e=>this.with({files:{file:e}}))??[]:[]}getGitUri(e=!1){let t=this._file?.uri??this.container.git.getAbsoluteUri(this.repoPath,this.repoPath);return e?new d.nk(this._file?.originalUri??t,{repoPath:this.repoPath,sha:this.unresolvedPreviousSha}):new d.nk(t,this)}getPreviousComparisonUrisForLine(e,t){return null!=this.file?this.container.git.diff(this.repoPath).getPreviousComparisonUrisForLine(this.file.uri,e,t??(this.sha===w.SU?void 0:this.sha)):Promise.resolve(void 0)}_previousShaPromise;async getPreviousSha(){if(null==this._previousShaPromise){async function e(){if(null!=this.file){if(null!=this.file.previousSha&&(0,m.HH)(this.file.previousSha))return this.file.previousSha;let e=await this.container.git.refs(this.repoPath).resolveReference((0,m._k)(this.sha,!0)?"HEAD":`${this.sha}^`,this.file.originalPath??this.file.path);return this._resolvedPreviousSha=e,e}let e=this.parents[0];if(null!=e&&(0,m.HH)(e))return this._resolvedPreviousSha=e,e;let t=await this.container.git.refs(this.repoPath).resolveReference((0,m._k)(this.sha,!0)?"HEAD":`${this.sha}^`);return this._resolvedPreviousSha=t,t}this._previousShaPromise=e.call(this)}return this._previousShaPromise}getRepository(){return this.container.git.getRepository(this.repoPath)}async isPushed(){return this.container.git.commits(this.repoPath).hasCommitBeenPushed(this.ref)}with(e){let t={file:this._file,files:this._files};return null!=e.files?(null!=e.files.file?t.file=e.files.file:null===e.files.file&&(t.file=void 0),null!=e.files.files?t.files=e.files.files:null===e.files.files&&(t.files=void 0)):null===e.files&&(t=void 0),new _GitCommit(this.container,this.repoPath,e.sha??this.sha,this.author,this.committer,this.summary,this.getChangedValue(e.parents,this.parents)??[],this.message,t,this.getChangedValue(e.stats,this.stats),this.getChangedValue(e.lines,this.lines),this.tips,this.stashName,this.stashOnRef)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}};b([(0,l.B)()],R.prototype,"isUncommitted",1),b([(0,l.B)()],R.prototype,"isUncommittedStaged",1),b([(0,a.G)()],R.prototype,"ensureFullDetails",1),b([(0,l.B)()],R.prototype,"getGitUri",1),b([(0,l.B)((e,t)=>`${e}|${t??""}`)],R.prototype,"getPreviousComparisonUrisForLine",1),b([(0,a.G)()],R.prototype,"isPushed",1);let P=R;let GitCommitIdentity=class GitCommitIdentity{constructor(e,t,i,r){this.name=e,this.email=t,this.date=i,this.avatarUrl=r}formatDate(e){return(0,n.Yq)(this.date,e??"MMMM Do, YYYY h:mma")}fromNow(e){return(0,n.PI)(this.date,e)}getAvatarUri(e,t){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.m_)(this.email,e,t)}getCachedAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.qJ)(this.email,e)}};b([(0,l.B)(e=>e??"MMMM Do, YYYY h:mma")],GitCommitIdentity.prototype,"formatDate",1)},2070:(e,t,i)=>{i.d(t,{x:()=>FolderNode});var r=i(1398),s=i(3088),o=i(3934),n=i(9642);let FolderNode=class FolderNode extends n.eu{constructor(e,t,i,r,o,a,l){super("folder",s.nk.fromFile(a??o,r),e,t),this.parent=t,this.root=i,this.repoPath=r,this.folderName=o,this.relativePath=a,this.containsWorkingFiles=l,this._uniqueId=(0,n.pF)(`${this.type}+${a??o}`,this.context)}priority=1;get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){let e;if(void 0===this.root.descendants||void 0===this.root.children)return[];if("list"===FolderNode.getFileNesting(this.view.config.files,this.root.descendants,void 0===this.relativePath))this.root.descendants.forEach(e=>e.relativePath=this.root.relativePath),e=this.root.descendants;else for(let t of(e=[],this.root.children.values())){if(void 0===t.value){e.push(new FolderNode(this.view,this.folderName?this:this.parent,t,this.repoPath,t.name,t.relativePath,this.containsWorkingFiles));continue}t.value.parent=this.folderName?this:this.parent,t.value.relativePath=this.root.relativePath,e.push(t.value)}return e.sort((e,t)=>(e instanceof FolderNode?-1:1)-(t instanceof FolderNode?-1:1)||e.priority-t.priority||(0,o.wN)(e.label,t.label)),e}getTreeItem(){let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Expanded);return e.id=this.id,e.contextValue=n.U0.Folder,this.containsWorkingFiles&&(e.contextValue+="+working"),e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}static getFileNesting(e,t,i){let r=e.layout||"auto";if("auto"===r){if(i||e.compact){let i=e.threshold||5;if(t.length<=i)return"list"}return"tree"}return r}}},2126:(e,t,i)=>{i.d(t,{$I:()=>CommitRestoreFileChangesCommandQuickPickItem,$t:()=>CommitCopyIdQuickPickItem,EG:()=>CommitOpenChangesWithDiffToolCommandQuickPickItem,IJ:()=>CommitOpenRevisionsCommandQuickPickItem,Kw:()=>CommitOpenFileCommandQuickPickItem,MO:()=>CommitOpenAllChangesCommandQuickPickItem,NH:()=>CommitOpenChangesCommandQuickPickItem,Ol:()=>OpenOnlyChangedFilesCommandQuickPickItem,S5:()=>CommitOpenChangesWithWorkingCommandQuickPickItem,Tw:()=>CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem,Wq:()=>CommitCompareWithWorkingCommandQuickPickItem,X8:()=>CommitOpenAllChangesWithDiffToolCommandQuickPickItem,Xx:()=>CommitCopyMessageQuickPickItem,Y7:()=>CommitOpenDirectoryCompareCommandQuickPickItem,Zq:()=>CommitApplyFileChangesCommandQuickPickItem,_w:()=>CommitOpenDetailsCommandQuickPickItem,aY:()=>OpenChangedFilesCommandQuickPickItem,bO:()=>CommitOpenInGraphCommandQuickPickItem,bi:()=>CommitOpenRevisionCommandQuickPickItem,ln:()=>CommitCompareWithHEADCommandQuickPickItem,o3:()=>CommitFilesQuickPickItem,p1:()=>CommitFileQuickPickItem,ps:()=>CommitOpenAllChangesWithWorkingCommandQuickPickItem,qB:()=>CommitBrowseRepositoryFromHereCommandQuickPickItem,zR:()=>CommitOpenFilesCommandQuickPickItem});var r=i(1398),s=i(9487),o=i(1518),n=i(9703),a=i(8191),l=i(1192),c=i(4199),u=i(3112),h=i(8811),d=i(6006),p=i(3934),g=i(7079);let CommitFilesQuickPickItem=class CommitFilesQuickPickItem extends g.Fj{constructor(e,t){super({label:e.summary,description:`${c.c.fromTemplate("${author}, ${ago}  $(git-commit)  ${id}",e)}${t?.unpublished?"  (unpublished)":""}`,detail:`${t?.file!=null?`$(file) ${(0,d.P8)(t.file.path)}${t.file.formatStats("expanded",{separator:", ",prefix:` ${o.EO.Dot} `})}`:`$(files) ${e.formatStats("expanded",{separator:", ",empty:"No files changed"})}`}${t?.hint!=null?`${(0,p.eV)(o.EO.Dash,4,2,o.EO.Space)}${t.hint}`:""}`,alwaysShow:!0,picked:t?.picked??!0,buttons:[s.kk,s.yi]},void 0,void 0,void 0,{suppressKeyPress:!0}),this.commit=e}get sha(){return this.commit.sha}};let CommitFileQuickPickItem=class CommitFileQuickPickItem extends g.Fj{constructor(e,t,i){super({label:(0,d.P8)(t.path),description:(0,u.C0)(t,!0),picked:i,iconPath:(0,h.b_)(t.status)}),this.commit=e,this.file=t}get sha(){return this.commit.sha}execute(e){return l.eX(this.file,this.commit,e)}};let CommitBrowseRepositoryFromHereCommandQuickPickItem=class CommitBrowseRepositoryFromHereCommandQuickPickItem extends g.Fj{constructor(e,t){super(`Browse Repository from${t?.before?" Before":""} Here${t?.openInNewWindow?" in New Window":""}`),this.commit=e,this.executeOptions=t,this.iconPath=new r.ThemeIcon("folder-opened")}execute(e){return(0,a.V)(this.commit.getGitUri(),{before:this.executeOptions?.before,openInNewWindow:this.executeOptions?.openInNewWindow})}};let CommitCompareWithHEADCommandQuickPickItem=class CommitCompareWithHEADCommandQuickPickItem extends g.Fj{constructor(e){super("Compare with HEAD"),this.commit=e,this.iconPath=new r.ThemeIcon("compare-changes")}execute(e){return n.m.instance.views.searchAndCompare.compare(this.commit.repoPath,this.commit.ref,"HEAD")}};let CommitCompareWithWorkingCommandQuickPickItem=class CommitCompareWithWorkingCommandQuickPickItem extends g.Fj{constructor(e){super("Compare with Working Tree",new r.ThemeIcon("compare-changes")),this.commit=e}execute(e){return n.m.instance.views.searchAndCompare.compare(this.commit.repoPath,this.commit.ref,"")}};let CommitCopyIdQuickPickItem=class CommitCopyIdQuickPickItem extends g.Fj{constructor(e){super("Copy SHA",new r.ThemeIcon("copy")),this.commit=e}execute(){return l.uT(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("Commit SHA copied to the clipboard")}};let CommitCopyMessageQuickPickItem=class CommitCopyMessageQuickPickItem extends g.Fj{constructor(e){super("Copy Message",new r.ThemeIcon("copy")),this.commit=e}execute(){return l.eU(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage(`${this.commit.stashName?"Stash":"Commit"} Message copied to the clipboard`)}};let CommitOpenAllChangesCommandQuickPickItem=class CommitOpenAllChangesCommandQuickPickItem extends g.Fj{constructor(e){super("Open All Changes",new r.ThemeIcon("git-compare")),this.commit=e}execute(e){return l.P3(n.m.instance,this.commit,void 0,e)}};let CommitOpenAllChangesWithDiffToolCommandQuickPickItem=class CommitOpenAllChangesWithDiffToolCommandQuickPickItem extends g.Fj{constructor(e){super("Open All Changes (difftool)",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.$s(this.commit)}};let CommitOpenAllChangesWithWorkingCommandQuickPickItem=class CommitOpenAllChangesWithWorkingCommandQuickPickItem extends g.Fj{constructor(e){super("Open All Changes with Working Tree",new r.ThemeIcon("git-compare")),this.commit=e}execute(e){return l.Qv(n.m.instance,this.commit,void 0,e)}};let CommitOpenChangesCommandQuickPickItem=class CommitOpenChangesCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open Changes",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(e){return l.eX(this.file,this.commit,e)}};let CommitOpenChangesWithDiffToolCommandQuickPickItem=class CommitOpenChangesWithDiffToolCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open Changes (difftool)",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(){return l.Ux(this.file,this.commit)}};let CommitOpenChangesWithWorkingCommandQuickPickItem=class CommitOpenChangesWithWorkingCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open Changes with Working File",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(e){return l.DD(this.file,this.commit,e)}};let CommitOpenDirectoryCompareCommandQuickPickItem=class CommitOpenDirectoryCompareCommandQuickPickItem extends g.Fj{constructor(e){super("Open Directory Compare",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.YS(this.commit)}};let CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem=class CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem extends g.Fj{constructor(e){super("Open Directory Compare with Working Tree",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.cs(this.commit)}};let CommitOpenDetailsCommandQuickPickItem=class CommitOpenDetailsCommandQuickPickItem extends g.Fj{constructor(e){super("Inspect Commit Details",new r.ThemeIcon("eye")),this.commit=e}execute(e){return l.JX(this.commit,{preserveFocus:e?.preserveFocus})}};let CommitOpenInGraphCommandQuickPickItem=class CommitOpenInGraphCommandQuickPickItem extends g.Fj{constructor(e){super("Open in Commit Graph",new r.ThemeIcon("gitlens-graph")),this.commit=e}execute(e){return l.wq(this.commit,{preserveFocus:e?.preserveFocus})}};let CommitOpenFilesCommandQuickPickItem=class CommitOpenFilesCommandQuickPickItem extends g.Fj{constructor(e){super("Open Files",new r.ThemeIcon("files")),this.commit=e}execute(e){return l.Km(this.commit)}};let CommitOpenFileCommandQuickPickItem=class CommitOpenFileCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open File",new r.ThemeIcon("file")),this.commit=e,this.file=t}execute(e){return l.Tq(this.file,this.commit,e)}};let CommitOpenRevisionsCommandQuickPickItem=class CommitOpenRevisionsCommandQuickPickItem extends g.Fj{constructor(e){super("Open Files at Revision",new r.ThemeIcon("files")),this.commit=e}execute(e){return l.m(this.commit)}};let CommitOpenRevisionCommandQuickPickItem=class CommitOpenRevisionCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open File at Revision",new r.ThemeIcon("file")),this.commit=e,this.file=t}execute(e){return l.vM(this.file,this.commit,e)}};let CommitApplyFileChangesCommandQuickPickItem=class CommitApplyFileChangesCommandQuickPickItem extends g.Fj{constructor(e,t){super("Apply Changes"),this.commit=e,this.file=t}async execute(){return l.YF(this.file,this.commit)}};let CommitRestoreFileChangesCommandQuickPickItem=class CommitRestoreFileChangesCommandQuickPickItem extends g.Fj{constructor(e,t){super({label:"Restore",description:"aka checkout"}),this.commit=e,this.file=t}execute(){return l.VX(this.file,this.commit)}};let OpenChangedFilesCommandQuickPickItem=class OpenChangedFilesCommandQuickPickItem extends g.Fj{constructor(e,t){super(t??"Open All Changed Files",new r.ThemeIcon("files"),"gitlens.openChangedFiles",[{uris:e.map(e=>e.uri)}])}};let OpenOnlyChangedFilesCommandQuickPickItem=class OpenOnlyChangedFilesCommandQuickPickItem extends g.Fj{constructor(e,t){super(t??"Open Changed & Close Unchanged Files",new r.ThemeIcon("files"),"gitlens.openOnlyChangedFiles",[{uris:e.map(e=>e.uri)}])}}},2145:(e,t,i)=>{i.r(t),i.d(t,{AzureDevOpsIntegration:()=>AzureDevOpsIntegration,isAzureCloudDomain:()=>h});var r=i(1398),s=i(457),o=i(5576),n=i(5952),a=i(6461);let l=a.Mt[s.Q7.AzureDevOps],c=Object.freeze({id:l.id,scopes:l.scopes});let AzureDevOpsIntegration=class AzureDevOpsIntegration extends n.T5{authProvider=c;id=s.Q7.AzureDevOps;key=this.id;name="Azure DevOps";get domain(){return l.domain}get apiBaseUrl(){return"https://dev.azure.com"}_accounts;async getProviderCurrentAccount({accessToken:e}){if(this._accounts??=new Map,null==this._accounts.get(e)){let t=await this.getProvidersApi(),i=await t.getCurrentUser(this.id,{accessToken:e});this._accounts.set(e,i?{provider:this,id:i.id,name:i.name??void 0,email:i.email??void 0,avatarUrl:i.avatarUrl??void 0,username:i.username??void 0}:void 0)}return this._accounts.get(e)}_organizations;async getProviderResourcesForUser(e,t=!1){this._organizations??=new Map;let{accessToken:i}=e;if(null==this._organizations.get(i)||t){let t=await this.getProvidersApi(),r=await this.getProviderCurrentAccount(e);if(r?.id==null)return;let s=await t.getAzureResourcesForUser(r.id,{accessToken:i});this._organizations.set(i,null!=s?s.map(e=>({...e,key:e.id})):void 0)}return this._organizations.get(i)}_projects;async getProviderProjectsForResources({accessToken:e},t,i=!1){this._projects??=new Map;let r=[];if(i)r=t;else for(let i of t){let t=`${e}:${i.id}`;null==this._projects.get(t)&&r.push(i)}if(r.length>0){let t=await this.getProvidersApi(),i=(await Promise.allSettled(r.map(i=>t.getAzureProjectsForResource(i.name,{accessToken:e})))).map(e=>(0,o.Ro)(e)?.values).flat().filter(e=>null!=e);for(let t of r){let r=i?.filter(e=>e.namespace===t.name);null!=r&&this._projects.set(`${e}:${t.id}`,r.map(e=>({id:e.id,name:e.name,resourceId:t.id,resourceName:t.name,key:e.id})))}}return t.reduce((t,i)=>{let r=this._projects.get(`${e}:${i.id}`);return null!=r&&t.push(...r),t},[])}async getRepoDescriptorsForProjects(e,t){let i=new Map;if(0===t.length)return i;let r=await this.getProvidersApi(),{accessToken:s}=e;return await Promise.all(t.map(async e=>{let t=(await r.getReposForAzureProject(e.resourceName,e.name,{accessToken:s}))?.values;null!=t&&t.length>0&&i.set(e.id,t.map(t=>({id:t.id,nodeId:t.graphQLId??void 0,resourceName:e.resourceName,name:t.name,projectName:e.name,url:t.webUrl??void 0,cloneUrlHttps:t.httpsUrl??void 0,cloneUrlSsh:t.sshUrl??void 0,key:t.id})))})),i}async mergeProviderPullRequest({accessToken:e},t,i){let r=await this.getProvidersApi();if(null==t.refs||null==t.project)return!1;try{return await r.mergePullRequest(this.id,t,{...i,accessToken:e})}catch(e){return this.showMergeErrorMessage(e),!1}}async showMergeErrorMessage(e){await r.window.showErrorMessage(`${e.message}. Check branch policies, and ensure you have the necessary permissions to merge the pull request.`)}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest({accessToken:e},t,i){return(await this.container.azure)?.getIssueOrPullRequest(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderIssue(e,t,i){let r=await this.getProviderCurrentAccount(e);if(r?.username==null)return;let s=await this.getProviderResourcesForUser(e);if(null==s||0===s.length)return;let o=await this.getProviderProjectsForResources(e,s);if(null==o||0===o.length)return;let n=o.find(e=>e.resourceName===t.owner&&e.name===t.name);if(null!=n)return(await this.container.azure)?.getIssue(this,e.accessToken,n,i,{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,i,r){return(await this.container.azure)?.getPullRequestForBranch(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getRepoInfo(e){return(await this.getProvidersApi()).getRepo(this.id,e.owner,e.name,e.project,{accessToken:this._session?.accessToken})}async getProviderRepositoryMetadata(e,t,i){return Promise.resolve(void 0)}async searchProviderMyPullRequests(e,t){let i=await this.getProvidersApi();if(null!=t)return;let r=await this.getProviderCurrentAccount(e);if(r?.username==null)return;let s=await this.getProviderResourcesForUser(e);if(null==s||0===s.length)return;let o=await this.getProviderProjectsForResources(e,s);if(null==o||0===o.length)return;let n=Array.from((await this.getRepoDescriptorsForProjects(e,o)??new Map).values()).filter(e=>null!=e).flat(),a=o.map(e=>({namespace:e.resourceName,project:e.name})),l=(await i.getPullRequestsForAzureProjects(a,{accessToken:e.accessToken,assigneeLogins:[r.username]}))?.map(e=>this.fromAzureProviderPullRequest(e,n,o)),c=(await i.getPullRequestsForAzureProjects(a,{accessToken:e.accessToken,authorLogin:r.username}))?.map(e=>this.fromAzureProviderPullRequest(e,n,o)),u=new Map;for(let e of c??[])u.set(e.id,e);for(let e of l??[])null==u.get(e.id)&&u.set(e.id,e);return Array.from(u.values())}async searchProviderMyIssues(e,t){let i=await this.getProvidersApi(),r=await this.getProviderCurrentAccount(e);if(r?.username==null)return;let s=await this.getProviderResourcesForUser(e);if(null==s||0===s.length)return;let o=await this.getProviderProjectsForResources(e,s);if(null==o||0===o.length)return;let n=(await Promise.all(o.map(async t=>(await i.getIssuesForAzureProject(t.resourceName,t.name,{accessToken:e.accessToken,assigneeLogins:[r.username]})).values.map(e=>(0,a.J3)(e,this,{project:t}))))).flat(),l=(await Promise.all(o.map(async t=>(await i.getIssuesForAzureProject(t.resourceName,t.name,{accessToken:e.accessToken,authorLogin:r.username})).values.map(e=>(0,a.J3)(e,this,{project:t}))))).flat(),c=new Map;for(let e of l??[])c.set(e.id,e);for(let e of n??[])null==c.get(e.id)&&c.set(e.id,e);return Array.from(c.values())}async providerOnConnect(){if(null==this._session)return;let e=this.container.storage.get(`azure:${this._session.accessToken}:account`),t=this.container.storage.get(`azure:${this._session.accessToken}:organizations`),i=this.container.storage.get(`azure:${this._session.accessToken}:projects`),r=e?.data?{...e.data,provider:this}:void 0,s=t?.data?.map(e=>({...e})),o=i?.data?.map(e=>({...e}));for(let n of(null==e&&null!=(r=await this.getProviderCurrentAccount(this._session))&&(await this.container.storage.deleteWithPrefix("azure"),await this.container.storage.store(`azure:${this._session.accessToken}:account`,{v:1,timestamp:Date.now(),data:{id:r.id,name:r.name,email:r.email,avatarUrl:r.avatarUrl,username:r.username}})),this._accounts??=new Map,this._accounts.set(this._session.accessToken,r),null==t&&(s=await this.getProviderResourcesForUser(this._session,!0),await this.container.storage.store(`azure:${this._session.accessToken}:organizations`,{v:1,timestamp:Date.now(),data:s})),this._organizations??=new Map,this._organizations.set(this._session.accessToken,s),null==i&&s?.length&&(o=await this.getProviderProjectsForResources(this._session,s),await this.container.storage.store(`azure:${this._session.accessToken}:projects`,{v:1,timestamp:Date.now(),data:o})),this._projects??=new Map,o??[])){let e=`${this._session.accessToken}:${n.resourceId}`,t=this._projects.get(e);null==t?this._projects.set(e,[n]):t.some(e=>e.id===n.id)||t.push(n)}}providerOnDisconnect(){this._organizations=void 0,this._projects=void 0,this._accounts=void 0}fromAzureProviderPullRequest(e,t,i){let r,s=t.find(t=>t.name===e.repository.name),o=null!=e.headRepository?t.find(t=>t.name===e.headRepository.name):void 0;return null!=s&&(e.repository.remoteInfo={...e.repository.remoteInfo,cloneUrlHTTPS:s.cloneUrlHttps??"",cloneUrlSSH:s.cloneUrlSsh??""}),null!=o&&(e.headRepository={...e.headRepository,id:e.headRepository?.id??o.id,name:e.headRepository?.name??o.name,owner:{login:e.headRepository?.owner.login??o.resourceName},remoteInfo:{...e.headRepository?.remoteInfo,cloneUrlHTTPS:o.cloneUrlHttps??"",cloneUrlSSH:o.cloneUrlSsh??""}}),s?.projectName!=null&&(r=i.find(e=>e.name===s.projectName)),(0,a.QF)(e,this,{project:r})}};let u=/^dev\.azure\.com$|\bvisualstudio\.com$/i;function h(e){return null!=e&&u.test(e)}},2199:(e,t,i)=>{i.d(t,{e:()=>CommitNode});var r=i(1398),s=i(4199),o=i(4301),n=i(1078),a=i(655),l=i(892),c=i(6006),u=i(5576),h=i(3934),d=i(7640),p=i(9642),g=i(6729),m=i(7473),f=i(2070),w=i(7524);let CommitNode=class CommitNode extends g.t{constructor(e,t,i,r,s,o,n={}){super("commit",i.getGitUri(),e,t),this.commit=i,this.unpublished=r,this.branch=s,this.getBranchAndTagTips=o,this._options=n,this.updateContext({commit:i}),this._uniqueId=(0,p.pF)(this.type,this.context)}dispose(){super.dispose(),this.children=void 0}get id(){return this._uniqueId}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this.branch?.current&&this.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}_children;get children(){return this._children}set children(e){this._children!==e&&((0,d.lm)(this._children,e),this._children=e)}async getChildren(){if(null==this.children){let e,t,i=this.commit,r=[];if("tags"!==this.view.type&&!this.unpublished&&this.view.config.pullRequests?.enabled&&this.view.config.pullRequests?.showForCommits&&null==this.context.pullRequest&&(0,a.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes(i.repoPath)&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,u.v6)();let t=this.getAssociatedPullRequest(i);queueMicrotask(async()=>{await e?.promise;let r=!1,s=setTimeout(()=>{r=!0,this.view.triggerNodeChange(this)},250),o=await t;clearTimeout(s),null!=o&&null!=this.children&&this.children.unshift(new w.Xu(this.view,this,o,i)),(r||null!=o)&&this.view.triggerNodeChange(this)})}for(let e of(await i.getCommitsForFiles({include:{stats:!0}})))r.push(new m.k(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){let e=(0,l.Ay)(r,e=>e.uri.relativePath.split("/"),(...e)=>(0,c.Fd)((0,c.HS)(...e)),this.view.config.files.compact);r=new f.x(this.view,this,e,this.repoPath,"",void 0).getChildren()}else r.sort((e,t)=>(0,h.wN)(e.label,t.label));null!=t&&r.unshift(new w.Xu(this.view,this,t,i)),this.children=r,setTimeout(()=>e?.fulfill(),1)}return this.children}async getTreeItem(){let e=s.c.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:n.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),t=new r.TreeItem(e,this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=`${p.U0.Commit}${this.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this.unpublished?"+unpublished":""}`,t.description=s.c.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:n.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),t.iconPath=null!=this.getState("pendingPullRequest")?new r.ThemeIcon("loading~spin"):this.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):this.view.config.avatars?await this.commit.getAvatarUri({defaultStyle:n.H.get("defaultGravatarsStyle")}):void 0,t}getCommand(){return(0,o.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{commit:this.commit,uri:this.uri,line:0,showOptions:{preserveFocus:!0,preview:!0}})}refresh(e){super.refresh?.(e),this.children=void 0,e&&this.deleteState()}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}async getTooltip(e){let t,i,[o,a]=await Promise.allSettled([this.view.container.git.remotes(this.commit.repoPath).getBestRemotesWithProviders(e),this.commit.ensureFullDetails({include:{stats:!0}})]);if(e.isCancellationRequested)return;let l=(0,u.Ro)(o,[]),[c]=l;if(c?.hasIntegration()){let[r,s]=await Promise.allSettled([(0,u.zu)(this.commit.getEnrichedAutolinks(c),e),this.getAssociatedPullRequest(this.commit,c)]);if(e.isCancellationRequested)return;let o=(0,u.Ro)(r);o?.paused||(t=o?.value),i=(0,u.Ro)(s)}let h=await s.c.fromTemplateAsync(this.getTooltipTemplate(),this.commit,{enrichedAutolinks:t,dateFormat:n.H.get("defaultDateFormat"),getBranchAndTagTips:this.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:i,outputFormat:"markdown",remotes:l,unpublished:this.unpublished}),d=new r.MarkdownString(h,!0);return d.supportHtml=!0,d.isTrusted=!0,d}getTooltipTemplate(){return this.view.config.formats.commits.tooltip}}},2203:e=>{e.exports=require("stream")},2336:(e,t,i)=>{i.d(t,{DP:()=>CloudIntegrationAuthenticationProvider,Ht:()=>BuiltInAuthenticationProvider,RH:()=>LocalIntegrationAuthenticationProvider});var r=i(1398),s=i(457),o=i(4342),n=i(1881),a=i(6461),l=i(1121),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o),o};let d=0x40000000-1;let IntegrationAuthenticationProviderBase=class IntegrationAuthenticationProviderBase{constructor(e,t,i){this.container=e,this.authenticationService=t,this.configuredIntegrationService=i}disposables=[];cloud=!1;dispose(){this.disposables.forEach(e=>void e.dispose())}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}async deleteSession(e){let t=await this.configuredIntegrationService.getConfigured({id:this.authProviderId,domain:(0,a.NT)(this.authProviderId)?e?.domain:void 0,type:this.cloud?"cloud":"local"});await this.configuredIntegrationService.deleteStoredSessions(this.authProviderId,e,this.cloud?void 0:"local"),null!=t&&t.length>0&&this.fireDidChange()}async deleteAllSessions(){let e=await this.configuredIntegrationService.getConfigured({id:this.authProviderId,type:this.cloud?"cloud":"local"});await this.configuredIntegrationService.deleteAllStoredSessions(this.authProviderId,this.cloud?void 0:"local"),null!=e&&e.length>0&&this.fireDidChange()}async getSession(e,t){let i,r;t?.forceNewSession?await this.configuredIntegrationService.deleteStoredSessions(this.authProviderId,e,this.cloud?void 0:"local"):(i=await this.configuredIntegrationService.getStoredSession(this.authProviderId,e,this.cloud?"cloud":"local"),r=i?.accessToken);let s=i?.expiresAt!=null&&new Date(i.expiresAt).getTime()<Date.now();return(null==i||s)&&(!this.cloud&&(t?.createIfNeeded||t?.forceNewSession)?i=await this.getNewSession(e):this.cloud&&(i=await this.getNewSession(e,{...t,refreshIfExpired:s})),null!=i&&await this.configuredIntegrationService.storeSession(this.authProviderId,i)),r!==i?.accessToken&&this.fireDidChange(),i}fireDidChange(){queueMicrotask(()=>this._onDidChange.fire())}};h([(0,o.Yz)()],IntegrationAuthenticationProviderBase.prototype,"deleteSession",1),h([(0,o.Yz)()],IntegrationAuthenticationProviderBase.prototype,"deleteAllSessions",1),h([(0,o.Yz)()],IntegrationAuthenticationProviderBase.prototype,"getSession",1);let LocalIntegrationAuthenticationProvider=class LocalIntegrationAuthenticationProvider extends IntegrationAuthenticationProviderBase{async getNewSession(e){return this.createSession(e)}};let CloudIntegrationAuthenticationProvider=class CloudIntegrationAuthenticationProvider extends IntegrationAuthenticationProviderBase{cloud=!0;async getNewSession(e,t){if(t?.forceNewSession){if(!await this.disconnectCloudSession())return;this.connectCloudSession(!1,t?.source);return}let i=t?.refreshIfExpired||t?.createIfNeeded||t?.forceNewSession||t?.sync?await this.getCloudSession(e):void 0;if(t?.createIfNeeded&&null==i){if(!await this.connectCloudSession(!0,t?.source))return;i=await this.getSession(e,{source:t?.source})}return i}async connectCloudSession(e,t){return!!(0,l.LT)(this.authProviderId)&&this.container.integrations.connectCloudIntegrations({integrationIds:[this.authProviderId],skipIfConnected:e,skipPreSync:!0},{source:t??"integrations",detail:{action:"connect",integration:this.authProviderId}})}async getCloudSession(e){let t;if(!await this.container.subscription.getAuthenticationSession(!1))return;let i=await this.container.cloudIntegrations;if(null==i)return;let r=await i.getConnectionSession(this.authProviderId);if(r?.expiresIn===0&&(this.authProviderId===s.Q7.GitHub||(0,a.Ii)(this.authProviderId))&&(r.expiresIn=d),null!=r&&r.expiresIn<60&&(r=await i.getConnectionSession(this.authProviderId,r.accessToken)),r){try{t=new URL(r.domain).protocol}catch{t=void 0}return{id:this.configuredIntegrationService.getSessionId(e),accessToken:r.accessToken,scopes:e.scopes,account:{id:"",label:""},cloud:!0,expiresAt:new Date(1e3*r.expiresIn+Date.now()),domain:e.domain,protocol:t??void 0}}}async disconnectCloudSession(){if(!await this.container.subscription.getAuthenticationSession(!1))return!1;let e=await this.container.cloudIntegrations;return null!=e&&e.disconnect(this.authProviderId)}};let BuiltInAuthenticationProvider=class BuiltInAuthenticationProvider extends LocalIntegrationAuthenticationProvider{constructor(e,t,i,s){super(e,t,i),this.authProviderId=s,this.disposables.push(r.authentication.onDidChangeSessions(e=>{e.provider.id===this.authProviderId&&this.fireDidChange()}))}createSession(){throw Error("Method `createSession` should never be used in BuiltInAuthenticationProvider")}async getSession(e,t){if(null==e)return;let{createIfNeeded:i,forceNewSession:r}=t??{};return(0,n.c)(this.container,this.authProviderId,e,r?{forceNewSession:!0}:i?{createIfNeeded:!0}:{silent:!0})}};h([(0,o.Yz)()],BuiltInAuthenticationProvider.prototype,"getSession",1)},2425:(e,t,i)=>{i.d(t,{q:()=>d});var r=i(1398),s=i(9624),o=i(9703),n=i(2995),a=i(1974),l=i(1403),c=i(9123),u=i(998);function h(...e){if(0===e.length)return"";if(e.length>1)return JSON.stringify(e,s.q);let[t]=e;if(null==t)return"";switch(typeof t){case"string":return t;case"number":case"boolean":case"undefined":case"symbol":case"bigint":return String(t);default:if(t instanceof Error)return String(t);if(t instanceof r.Uri){if("sha"in t&&"string"==typeof t.sha&&t.sha)return`${t.sha}:${t.toString()}`;return t.toString()}if((0,l.Z6)(t)||(0,n.P)(t)||(0,a.WM)(t)||(0,c.d)(t)||(0,u.sN)(t))return t.toString();if((0,o.u)(t))return"<container>";return JSON.stringify(t,s.q)}}function d(e,t,...i){let r;if(0===i.length)return e;if(null!=t)try{r=t(...i)}catch{r=h(...i)}else r=h(...i);return`${e}$${r}`}},2436:(e,t,i)=>{i.d(t,{f:()=>FileRevisionAsCommitNode,m:()=>w});var r=i(1398),s=i(4199),o=i(5030),n=i(3088),a=i(2775),l=i(4301),c=i(1078),u=i(6006),h=i(5576),d=i(8710),p=i(9642),g=i(6729),m=i(9412),f=i(1665);let FileRevisionAsCommitNode=class FileRevisionAsCommitNode extends g.p{constructor(e,t,i,r,s={}){super("file-commit",n.nk.fromFile(i,r.repoPath,r.sha),e,t,i),this.commit=r,this._options=s}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this._options.branch?.current&&this._options.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}async getChildren(){if(!this.commit.file?.hasConflicts)return[];let e=await this.view.container.git.status(this.commit.repoPath).getPausedOperationStatus?.();return null==e?[]:[new m.N(this.view,this,e,this.file),new f.a(this.view,this,e,this.file)]}async getTreeItem(){if(null==this.commit.file){let e=await this.commit.getCommitForFile(this.file);if(null==e){let e=await this.view.container.git.commits(this.repoPath).getLogForPath(this.file.path,this.commit.sha,{limit:2});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}let e=new r.TreeItem(s.c.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:c.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),this.commit.file?.hasConflicts?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);if(e.contextValue=this.contextValue,e.description=s.c.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:c.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),e.resourceUri=(0,d.E)("commit-file",{status:this.file.status}),!this.commit.isUncommitted&&this.view.config.avatars&&(e.iconPath=this._options.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):await this.commit.getAvatarUri({defaultStyle:c.H.get("defaultGravatarsStyle")})),null==e.iconPath){let t=(0,a.O)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,u.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,u.HS)("images","light",t))}}return e.command=this.getCommand(),e}get contextValue(){return this.commit.isUncommitted?this.commit.file?.hasConflicts?`${p.U0.File}+conflicted`:this.commit.isUncommittedStaged?`${p.U0.File}+staged`:`${p.U0.File}+unstaged`:`${p.U0.File}+committed${this._options.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this._options.unpublished?"+unpublished":""}`}getCommand(){let e;return(e=this.commit.lines.length?this.commit.lines[0].line-1:this._options.selection?.active.line??0,this.commit.file?.hasConflicts)?(0,l.gu)("gitlens.diffWith","Open Changes",{lhs:{sha:"MERGE_HEAD",uri:n.nk.fromFile(this.file,this.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:n.nk.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}}):(0,l.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{commit:this.commit,uri:n.nk.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getConflictBaseUri(){if(!this.commit.file?.hasConflicts)return;let e=await this.view.container.git.refs(this.repoPath).getMergeBase("MERGE_HEAD","HEAD");return n.nk.fromFile(this.file,this.repoPath,e??"HEAD")}async getTooltip(e){let t=await w(this.view.container,this.commit,this.file,this.view.config.formats.commits.tooltipWithStatus,{getBranchAndTagTips:this._options.getBranchAndTagTips,unpublished:this._options.unpublished,cancellation:e}),i=new r.MarkdownString(t,!0);return i.supportHtml=!0,i.isTrusted=!0,i}};async function w(e,t,i,r,n){let a,l,[u,d]=await Promise.allSettled([e.git.remotes(t.repoPath).getBestRemotesWithProviders(n?.cancellation),null==t.message?t.ensureFullDetails():void 0]);if(n?.cancellation?.isCancellationRequested)return;let p=(0,h.Ro)(u,[]),[g]=p;if(g?.hasIntegration()){let[e,i]=await Promise.allSettled([(0,h.zu)(t.getEnrichedAutolinks(g),n?.cancellation),t.getAssociatedPullRequest(g)]),r=(0,h.Ro)(e);r?.paused||(a=r?.value),l=(0,h.Ro)(i)}let m=o.Z.fromTemplate(`\${status}\${ (originalPath)}\${'&nbsp;&nbsp;\u2022&nbsp;&nbsp;'changesDetail}`,i,{outputFormat:"markdown"});return s.c.fromTemplateAsync(r.replace("{{slot-status}}",m),t,{enrichedAutolinks:a,dateFormat:c.H.get("defaultDateFormat"),getBranchAndTagTips:n?.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:l,outputFormat:"markdown",remotes:p,unpublished:n?.unpublished})}},2458:(e,t,i)=>{i.d(t,{m9:()=>s,Fx:()=>o,uR:()=>n});let r=require("crypto");function s(){return(0,r.randomBytes)(16).toString("base64")}function o(e,t="hex"){return(0,r.createHash)("md5").update(e).digest(t)}function n(){return(0,r.randomUUID)()}},2613:e=>{e.exports=require("assert")},2636:(e,t,i)=>{i.d(t,{A1:()=>f,M4:()=>l,Nf:()=>m,SN:()=>g,bv:()=>p,cf:()=>d,eN:()=>u,fC:()=>c,gC:()=>h,kA:()=>a});var r=i(1518),s=i(3934),o=i(3711),n=i(8554);function a(e,t,i={refType:"revision"}){switch(i.refType){case"branch":return{refType:"branch",repoPath:t,ref:e,name:i.name,id:i.id,remote:i.remote,sha:i.sha,upstream:i.upstream};case"stash":return{refType:"stash",repoPath:t,ref:e,sha:e,name:i.name,number:i.number,message:i.message,stashOnRef:i.stashOnRef};case"tag":return{refType:"tag",repoPath:t,ref:e,name:i.name,id:i.id,sha:i.sha};default:return{refType:"revision",repoPath:t,ref:e,sha:e,name:i.name??(0,n.pV)(e,{strings:{working:"Working Tree"}}),message:i.message}}}function l(e,t){let i;if(null==e)return"";if(t=!1===t?{}:{expand:!0,icon:!0,label:t?.label??t?.expand??!0,...t},!Array.isArray(e)||1===e.length){let a=Array.isArray(e)?e[0]:e,l=t?.quoted?`'${a.name}'`:a.name;switch(a.refType){case"branch":{let e;a.remote&&(l=`${(0,o.Zq)(l)}: ${(0,o.km)(l)}`,l=t?.quoted?`'${l}'`:l),e=t.label?t.capitalize&&t.expand?`${a.remote?"Remote ":""}Branch `:`${a.remote?"remote ":""}branch `:"",i=`${e}${t.icon?`$(git-branch)${r.EO.Space}${l}`:l}`;break}case"tag":i=`${t.label?"tag ":""}${t.icon?`$(tag)${r.EO.Space}${l}`:l}`;break;default:if(m(a)){let e;t.expand&&a.message&&(e=`${null!=a.number?`#${a.number}: `:""}${a.message.length>20?`${a.message.substring(0,20).trimEnd()}${r.EO.Ellipsis}`:a.message}`),i=`${t.label?"stash ":""}${t.icon?`$(archive)${r.EO.Space}${e??a.name}`:e??(a.number?`#${a.number}`:a.name)}`}else if((0,n.p8)(a.ref))i=l;else{let e,s;t.expand&&a.message&&(e=a.message.length>20?` (${a.message.substring(0,20).trimEnd()}${r.EO.Ellipsis})`:` (${a.message})`),t.expand&&t.label&&(0,n.zr)(a.ref)?(l=a.name.endsWith("^")?a.name.substring(0,a.name.length-1):a.name,t?.quoted&&(l=`'${l}'`),s="before "):s="",i=`${t.label?`${s}commit `:""}${t.icon?`$(git-commit)${r.EO.Space}${l}${e??""}`:`${l}${e??""}`}`}}return t.capitalize&&t.expand&&!1!==t.label?(0,s.ZH)(i):i}let a=t.expand?` (${e.map(e=>e.name).join(", ")})`:"";switch(e[0].refType){case"branch":return`${e.length} branches${a}`;case"tag":return`${e.length} tags${a}`;default:return`${e.length} ${m(e[0])?"stashes":"commits"}${a}`}}function c(e){return"branch"===e.refType&&e.remote?(0,o.km)(e.name):e.name}function u(e){switch(e?.refType){case"branch":return"Branch";case"stash":return"Stash";case"tag":return"Tag";default:return"Commit"}}function h(e){return e?.refType==="branch"}function d(e){return null!=e&&"object"==typeof e&&"string"==typeof e.refType&&"string"==typeof e.repoPath&&"string"==typeof e.ref&&"string"==typeof e.name}function p(e){return e?.refType==="revision"}function g(e){return e?.refType==="revision"&&(0,n.p8)(e.ref)}function m(e){return e?.refType==="stash"||e?.refType==="revision"&&!!e?.stashName}function f(e){return e?.refType==="tag"}},2678:(e,t,i)=>{i.d(t,{IT:()=>u,Q:()=>l,U8:()=>n,Xn:()=>p,b9:()=>d,eB:()=>h,jn:()=>a});var r=i(457),s=i(4704),o=i(3934);function n(e){return{provider:e.provider?{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}:void 0,id:e.id,index:e.index,prefix:e.prefix,url:e.url,alphanumeric:e.alphanumeric,ignoreCase:e.ignoreCase,title:e.title,type:e.type,description:e.description,descriptor:e.descriptor}}let a=[r.tp.Jira];function l(e){return!("prefix"in e)&&!("url"in e)}function c(e){return"prefix"in e&&null!=e.prefix&&"url"in e&&null!=e.url}function u(e,t){let i=e.id?e.id:e.alphanumeric?"\\w+":"\\d+",r=!e.id&&e.ignoreCase?"gi":"g";"markdown"===t?e.messageMarkdownRegex??=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,o.$f)((0,o.yz)((0,s.FV)(e.prefix)))}(${i}))\\b`,r):"html"===t?e.messageHtmlRegex??=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,o.$f)((0,o.yz)(e.prefix))}(${i}))\\b`,r):e.messageRegex??=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,o.$f)(e.prefix)}(${i}))\\b`,r)}let h=/<num>/g;function d(e,t){let i,r,s=new Map;for(let[o,n]of t)for(let t of n){if(!c(t)||t.referenceType&&"commit"!==t.referenceType){l(t)&&t.parse(e,s);continue}for(u(t,"plaintext");i=t.messageRegex.exec(e);)[,,,r]=i,s.set(r,{provider:o,id:r,index:i.index,prefix:t.prefix,url:t.url?.replace(h,r),alphanumeric:t.alphanumeric,ignoreCase:t.ignoreCase,title:t.title?.replace(h,r),type:t.type,description:t.description?.replace(h,r),descriptor:t.descriptor})}return s}function p(e,t){let i,r,s=new Map;for(let[o,n]of t)for(let t of n){if(!c(t)||"pullrequest"===t.type||t.referenceType&&"branch"!==t.referenceType)continue;t.branchNameRegex??=RegExp(`(^|\\-|_|\\.|\\/)(?<prefix>${t.prefix})(?<issueKeyNumber>${t.alphanumeric?"\\w":"\\d"}+)(?=$|\\-|_|\\.|\\/)`,"gi");let n=e.matchAll(t.branchNameRegex);do{if(i=n.next(),!i.value?.groups)break;r=i?.value?.groups.issueKeyNumber;let e=i.value.index,a=t.url?.replace(h,r),l=s.get(a)?.index;null!=l&&(e=Math.min(e,l)),s.set(a,{...t,provider:o,id:r,index:e,url:a,title:t.title?.replace(h,r),description:t.description?.replace(h,r),descriptor:t.descriptor})}while(!i.done)}return new Map([...s.entries()].sort((e,t)=>{var i,r;return i=e[1],0===(r=t[1]).index?1:0===i.index?-1:r.prefix.length-i.prefix.length||r.id.length-i.id.length||(null!=r.index&&null!=i.index?-(r.index-i.index):0)}))}},2713:(e,t,i)=>{function r(e,t){return t?.document?.uri??e}i.d(t,{q:()=>r})},2775:(e,t,i)=>{i.d(t,{O:()=>s,m:()=>n});let r={".":void 0,"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",C:"icon-status-copied.svg",AA:"icon-status-conflict.svg",AU:"icon-status-conflict.svg",UA:"icon-status-conflict.svg",DD:"icon-status-conflict.svg",DU:"icon-status-conflict.svg",UD:"icon-status-conflict.svg",UU:"icon-status-conflict.svg",T:"icon-status-modified.svg",U:"icon-status-modified.svg"};function s(e){return r[e]??"icon-status-unknown.svg"}let o={".":"Unchanged","!":"Ignored","?":"Untracked",A:"Added",D:"Deleted",M:"Modified",R:"Renamed",C:"Copied",AA:"Conflict",AU:"Conflict",UA:"Conflict",DD:"Conflict",DU:"Conflict",UD:"Conflict",UU:"Conflict",T:"Modified",U:"Updated but Unmerged"};function n(e){return o[e]??"Unknown"}},2845:(e,t,i)=>{i.d(t,{G:()=>a});var r=i(1398),s=i(377),o=i(6612),n=i(7747);async function a(e,t,i){let a=[],l=t.repoPath,c=t.ref;function u(t){return e.git.getRevisionUri(c,`${l}/${t.item.path}`,l)}try{let t,h=r.window.createQuickPick();h.ignoreFocusOut=i?.ignoreFocusOut??(0,o.dW)();let d=i.initialPath??"";if(i?.keyboard!=null){let{keyboard:r}=i;(t=e.keyboard.createScope(Object.fromEntries(r.keys.map(e=>[e,{onDidPressKey:async e=>{if(0!==h.activeItems.length){let[t]=h.activeItems;if(null!=t.item){let i=h.ignoreFocusOut;h.ignoreFocusOut=!0,await r.onDidPressKey(e,u(t)),h.ignoreFocusOut=i}}}}])))).start(),null!=d&&t.pause(["left","ctrl+left","right","ctrl+right"]),a.push(t)}h.title=i.title,h.placeholder=i?.placeholder??"Search files by name",h.matchOnDescription=!0,h.value=d,h.busy=!0,h.show();let p=await e.git.revision(l).getTreeForRevision(c),g=[...(0,n.x1)(p,e=>{if("blob"!==e.type)return;let[t,i]=(0,s.Uf)(e.path,void 0,!0);return{label:t,description:"."===i?"":i,item:e}})];h.items=g,h.busy=!1;let m=await new Promise(e=>{a.push(h,h.onDidHide(()=>e(void 0)),h.onDidAccept(()=>{0!==h.activeItems.length&&e(h.activeItems[0])}),h.onDidChangeValue(e=>{if(null!=t){for(let i of(0!==e.length?t.pause(["left","ctrl+left","right","ctrl+right"]):t.resume(),g))!i.item.path.includes(e)||i.label.includes(e)||i.description.includes(e)?i.alwaysShow=!1:i.alwaysShow=!0;h.items=g}}))});return null!=m?u(m):void 0}finally{a.forEach(e=>void e.dispose())}}},2895:(e,t,i)=>{i.d(t,{D:()=>C});var r=i(1398),s=i(5516),o=i(8554),n=i(9403),a=i(778),l=i(2636),c=i(6613),u=i(5288),h=i(5725);async function d(e,t,i){let{head:r,base:s}=i??{},n=!1;for(;;){let{title:d,placeholder:p}={title:"Compare",placeholder:"Choose a reference (branch, tag, etc) to compare",...i?.getTitleAndPlaceholder?.(1)};if(null==(t??=(await (0,h.t6)(d))?.path))return;if(null==r||n){let e=await (0,u.nA)(t,d,p,{allowRevisions:{ranges:!0},include:u.m7.BranchesAndTags|u.m7.HEAD,picked:r?.ref,sort:{branches:{current:!0}}});if(null==e.value)return;if((0,o.p8)(e.value.ref)){let i=(0,o.jY)(e.value.ref);if(null!=i)return r=(0,l.kA)(i.left||"HEAD",t,{refType:"revision"}),s=(0,l.kA)(i.right||"HEAD",t,{refType:"revision"}),{repoPath:t,head:r,base:s}}r=e.value}if(null==s||n){if({title:d,placeholder:p}={title:`Compare ${(0,l.M4)(r)} with`,placeholder:"Choose a reference (branch, tag, etc) to compare with",...i?.getTitleAndPlaceholder?.(2,r)},(0,l.gC)(r)){let i=e.git.getRepository(t),o=await i?.git.branches().getBranch(r.name);if(null!=o){let i=await (0,a.y1)(e,o),r=i.targetBranch.paused?i.baseBranch:i.targetBranch.value??i.defaultBranch;null!=r&&(s=(0,l.kA)(r,t,{refType:"revision"}))}}let o=await (0,u.nA)(t,d,p,{allowBack:!0,allowRevisions:!0,exclude:[r.ref],include:u.m7.BranchesAndTags|u.m7.HEAD,picked:s?.ref,sort:{branches:{current:!0}}});if(o.directive===c.WL.Back){n=!0;continue}if(null==o.value)return;s=o.value}break}return{repoPath:t,head:r,base:s}}var p=i(4301),g=i(7251),m=i(7005),f=i(3934),w=i(4338),v=Object.defineProperty,y=Object.getOwnPropertyDescriptor;let b=class extends w.Kt{constructor(e){super("gitlens.ai.generateChangelog"),this.container=e}async execute(e){try{let t=await d(this.container,e?.repoPath,{head:e?.head,getTitleAndPlaceholder:e=>{switch(e){case 1:return{title:"Generate Changelog",placeholder:"Choose a reference (branch, tag, etc) to generate a changelog for"};case 2:return{title:`Generate Changelog \u2022 Select Base to Start From`,placeholder:"Choose a base reference (branch, tag, etc) to generate the changelog from"}}}});if(null==t)return;let i=await this.container.git.refs(t.repoPath).getMergeBase(t.head.ref,t.base.ref);await C(this.container,(0,g.R)(async()=>{let e={base:i?{ref:i,label:i===t.base.ref?`\`${(0,o.pV)(i)}\``:`\`${t.base.ref}@${(0,o.pV)(i)}\``}:{ref:t.base.ref,label:`\`${t.base.ref}\``},head:{ref:t.head.ref,label:`\`${t.head.ref}\``}},r=await this.container.git.commits(t.repoPath).getLog((0,o.Xn)(i??t.base.ref,t.head.ref,".."));return r?.commits?.size?(0,s.f)(this.container,e,r):{changes:[],range:e}}),e?.source??{source:"commandPalette"},{progress:{location:r.ProgressLocation.Notification}})}catch(e){m.Vy.error(e,"GenerateChangelogCommand","execute"),(0,n.qQ)("Unable to generate changelog")}}};async function C(e,t,i,s){let o=await e.ai.generateChangelog(t,i,s),{range:n,changes:{length:a}=[]}=await t.value,l=`# Changelog for ${n.head.label??n.head.ref}
`;null!=o?l+=`> Generated by ${o.model.name} from ${(0,f.td)("commit",a)} between ${n.head.label??n.head.ref} and ${n.base.label??n.base.ref}

----

${o.content}
`:l+=`> No changes found between ${n.head.label??n.head.ref} and ${n.base.label??n.base.ref}
`;let c=await r.workspace.openTextDocument({language:"markdown",content:l});await r.window.showTextDocument(c)}b=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?y(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&v(t,i,o),o})([(0,p.G5)()],b)},2937:(e,t,i)=>{i.d(t,{D0:()=>l,Y6:()=>n,e3:()=>o,xC:()=>a});var r=i(1398),s=i(6006);function o(e){let t=e.map(e=>l(e)?e.resourceUri:void 0).filter(e=>!!e);if(!t.length)return;let[i]=t;if(1===t.length)return r.Uri.joinPath(i,"..");let o=(0,s.xI)(t.map(e=>e.path),"/");return r.Uri.from({scheme:i.scheme,authority:i.authority,path:o})}function n(e){return null!=e&&null!=e.id&&null!=e.rootUri&&null!=e.inputBox&&null!=e.statusBarCommands}function a(e){return null!=e&&null!=e.id&&null!=e.label&&null!=e.resourceStates&&Array.isArray(e.resourceStates)}function l(e){return null!=e&&null!=e.resourceUri}},2987:e=>{e.exports=require("perf_hooks")},2995:(e,t,i)=>{i.d(t,{P:()=>d,Z:()=>GitBranch});var r=i(4941),s=i(4499),o=i(4342),n=i(7005),a=i(3711),l=i(889),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o),o};function d(e){return e instanceof GitBranch}let GitBranch=class GitBranch{constructor(e,t,i,r,s,o,n,l,c=!1,u=!1){this.container=e,this.repoPath=t,this.refName=i,this.current=r,this.date=s,this.sha=o,this.upstream=n,this.worktree=l,this.rebasing=u,({name:this._name,remote:this._remote}=(0,a.oq)(i)),this.detached=c||!!this.current&&(0,a.xM)(this._name),this.detached?(this.id=(0,a.Yk)(t,this._remote,this.sha),this._name=(0,a.n$)(this.sha)):this.id=(0,a.Yk)(t,this._remote,this._name),this.upstream=n?.name?n:void 0}refType="branch";detached;id;_name;get name(){return this._name}_remote;get remote(){return this._remote}toString(){return`${(0,n.zu)(this)}(${this.id})`}get formattedDate(){return"absolute"===this.container.BranchDateFormatting.dateStyle?this.formatDate(this.container.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.detached?this.sha:this.name}get status(){return this.remote?"remote":null==this.upstream?this.detached?"detached":"local":this.upstream.missing?"missingUpstream":this.upstream.state.ahead&&this.upstream.state.behind?"diverged":this.upstream.state.ahead?"ahead":this.upstream.state.behind?"behind":"upToDate"}formatDate(e){return null!=this.date?(0,r.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,r.PI)(this.date):""}async getAssociatedPullRequest(e){let t=await this.getRemote();if(t?.provider==null)return;let i=await this.container.integrations.getByRemote(t);if(null!=i){if(this.upstream?.missing){if(!this.sha)return;return i?.getPullRequestForCommit(t.provider.repoDesc,this.sha)}return i?.getPullRequestForBranch(t.provider.repoDesc,this.getTrackingWithoutRemote()??this.getNameWithoutRemote(),e)}}async getEnrichedAutolinks(){let e=await this.container.git.remotes(this.repoPath).getBestRemoteWithProvider(),t=await this.container.autolinks.getBranchAutolinks(this.name,e);return this.container.autolinks.getEnrichedAutolinks(t,e)}getBasename(){let e=this.getNameWithoutRemote(),t=e.lastIndexOf("/");return -1!==t?e.substring(t+1):e}getNameWithoutRemote(){return this.remote?this.name.substring((0,a.Ht)(this.name)+1):this.name}getTrackingWithoutRemote(){return(0,a.UJ)(this)}async getRemote(){let e=this.getRemoteName();if(null!=e)return this.container.git.remotes(this.repoPath).getRemote(e)}getRemoteName(){return this.remote?(0,a.Zq)(this.name):null!=this.upstream?(0,a.Zq)(this.upstream.name):void 0}getTrackingStatus(e){return(0,l.u)(this.upstream,e)}async getWorktree(){if(null==this.worktree)return;let e=this.worktree.path;return this.container.git.worktrees(this.repoPath)?.getWorktree(t=>t.path===e)}get starred(){let e=this.container.storage.getWorkspace("starred:branches");return void 0!==e&&!0===e[this.id]}async star(){return this.container.git.getRepository(this.repoPath)?.star(this)}async unstar(){return this.container.git.getRepository(this.repoPath)?.unstar(this)}};h([(0,s.B)(e=>e??"MMMM Do, YYYY h:mma")],GitBranch.prototype,"formatDate",1),h([(0,o.Yz)()],GitBranch.prototype,"getAssociatedPullRequest",1),h([(0,s.B)()],GitBranch.prototype,"getEnrichedAutolinks",1),h([(0,s.B)()],GitBranch.prototype,"getBasename",1),h([(0,s.B)()],GitBranch.prototype,"getNameWithoutRemote",1),h([(0,s.B)()],GitBranch.prototype,"getTrackingWithoutRemote",1),h([(0,s.B)()],GitBranch.prototype,"getRemote",1),h([(0,s.B)()],GitBranch.prototype,"getRemoteName",1),h([(0,o.Yz)()],GitBranch.prototype,"getWorktree",1)},3088:(e,t,i)=>{i.d(t,{Bd:()=>k,nk:()=>C,t5:()=>S});var r=i(1398),s=i(8973),o=i(1518),n=i(9703),a=i(166),l=i(377),c=i(6612),u=i(4499),h=i(4342),d=i(6006),p=i(6363),g=i(4111),m=i(6066),f=i(8554),w=Object.defineProperty,v=Object.getOwnPropertyDescriptor,y=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?v(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&w(t,i,o),o};let b=class _GitUri extends r.Uri{repoPath;sha;constructor(e,t){let i;if(null==e){super({scheme:"unknown"});return}if(e.scheme===o.xB.GitLens){let i=e.path,r=(0,g.V3)(e.authority);null==r.uncPath||i.startsWith(r.uncPath)||(i=`${r.uncPath}${e.path}`),super({scheme:e.scheme,authority:e.authority,path:i,query:e.query,fragment:e.fragment}),this.repoPath=r.repoPath;let s=r.ref;null!=t&&"string"!=typeof t&&(s=t.sha),(!(0,f._k)(s)||(0,f.KH)(s))&&(this.sha=s);return}if((0,c.QK)(e)){super(e);let[,i,r]=e.path.split("/",3);this.repoPath=e.with({path:`/${i}/${r}`}).toString();let s=(0,g.JG)(e.authority),o=s.metadata?.ref?.id;null!=t&&"string"!=typeof t&&(o=t.sha),o&&(!(0,f._k)(o)||(0,f.KH)(o))&&(this.sha=o);return}if(void 0===t){super(e);return}if("string"==typeof t){super(e),this.repoPath=t;return}let r=e.authority,s=(0,d.Fd)(n.m.instance.git.getAbsoluteUri(t.fileName??e.fsPath,t.repoPath).fsPath);if(47===s.charCodeAt(0)&&47===s.charCodeAt(1)){let e=s.indexOf("/",2);-1===e?(r=s.substring(2),s="/"):(r=s.substring(2,e),s=s.substring(e)||"/")}switch(e.scheme){case"https":case"http":case"file":i=s?47!==s.charCodeAt(0)?`/${s}`:s:"/";break;default:i=47!==s.charCodeAt(0)?`/${s}`:s}super({scheme:e.scheme,authority:r,path:i,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,(!(0,f._k)(t.sha)||(0,f.KH)(t.sha))&&(this.sha=t.sha)}get directory(){return(0,l.A3)(this.relativePath)}get fileName(){return(0,d.P8)(this.relativePath)}get isUncommitted(){return(0,f._k)(this.sha)}get isUncommittedStaged(){return(0,f.KH)(this.sha)}get relativePath(){return(0,l.Uf)((0,l.Sp)(this.fsPath),this.repoPath)[0]}get shortSha(){return(0,f.pV)(this.sha)}documentUri(){return r.Uri.from({scheme:this.scheme,authority:this.authority,path:this.path,query:this.query,fragment:this.fragment})}equals(e){return!!(0,p.k)(this,e)&&this.sha===(S(e)?e.sha:void 0)}getFormattedFileName(e){return(0,a.j)(this.fsPath,{...e,fileOnly:!0})}toFileUri(){return n.m.instance.git.getAbsoluteUri(this.fsPath,this.repoPath)}static fromFile(e,t,i,r=!1){let s=n.m.instance.git.getAbsoluteUri("string"==typeof e?e:r&&e.originalPath||e.path,t);return i?new _GitUri(s,{repoPath:t,sha:"string"!=typeof e&&"?"===e.status?`${i}^3`:i}):new _GitUri(s,t)}static fromRepoPath(e,t){return t?new _GitUri(n.m.instance.git.getAbsoluteUri(e,e),{repoPath:e,sha:t}):new _GitUri(n.m.instance.git.getAbsoluteUri(e,e),e)}static fromRevisionUri(e){return new _GitUri(e)}static async fromUri(e){if(S(e))return e;if(!n.m.instance.git.isTrackable(e)||e.scheme===o.xB.GitLens)return new _GitUri(e);if(e.scheme===o.xB.Git){let t=(0,s.o)(e);if(t?.path){let i,s=await n.m.instance.git.getOrOpenRepository(r.Uri.file(t.path));if(null==s)throw Error(`Unable to find repository for uri=${r.Uri.file(t.path).toString(!0)}`);switch(t.ref){case"":case"~":i=m.id;break;case null:i=void 0;break;default:i=t.ref}return new _GitUri(e,{fileName:t.path,repoPath:s.path,sha:i})}}if(e.scheme===o.xB.PRs){let t;try{t=JSON.parse(e.query)}catch{}if(t?.fileName){let i=await n.m.instance.git.getOrOpenRepository(e);if(null==i)throw Error(`Unable to find repository for uri=${r.Uri.file(t.fileName).toString(!0)}`);return new _GitUri(e,{fileName:t.fileName,repoPath:i.path,sha:t.isBase?t.baseCommit:t.headCommit})}}let t=await n.m.instance.git.getOrOpenRepository(e);return new _GitUri(e,t?.path)}};y([(0,u.B)()],b.prototype,"directory",1),y([(0,u.B)()],b.prototype,"fileName",1),y([(0,u.B)()],b.prototype,"isUncommitted",1),y([(0,u.B)()],b.prototype,"isUncommittedStaged",1),y([(0,u.B)()],b.prototype,"relativePath",1),y([(0,u.B)()],b.prototype,"shortSha",1),y([(0,u.B)()],b.prototype,"documentUri",1),y([(0,u.B)()],b.prototype,"toFileUri",1),y([(0,h.Yz)({exit:!0})],b,"fromUri",1);let C=b,k=Object.freeze(new C);function S(e){return e instanceof C}},3096:(e,t,i)=>{i.d(t,{_:()=>r});let r="gitlens.action."},3106:e=>{e.exports=require("zlib")},3112:(e,t,i)=>{i.d(t,{C0:()=>a,CB:()=>l,Hk:()=>c,WI:()=>u});var r=i(1518),s=i(166),o=i(377),n=i(3934);function a(e,t=!1,i){let s=(0,o.A3)(e.path,i);return t&&("R"===e.status||"C"===e.status)&&e.originalPath?`${s} ${(0,n.eV)(r.EO.ArrowLeft,1,1)} ${e.originalPath}`:s}function l(e,t={}){return(0,s.j)(e.path,t)}function c(e,t){return e.originalPath?(0,o.Uf)(e.originalPath,t)[0]:""}function u(e,t){return(0,o.Uf)(e.path,t)[0]}},3159:(e,t,i)=>{i.d(t,{P:()=>RepositoryFolderNode});var r=i(1398),s=i(1518),o=i(1403),n=i(5670),a=i(8557),l=i(3500),c=i(4342),u=i(3489),h=i(6006),d=i(3934),p=i(8698),g=i(9642),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};let RepositoryFolderNode=class RepositoryFolderNode extends p.Y{constructor(e,t,i,r,s,o){super("repo-folder",e,t,i),this.parent=i,this.repo=r,this.options=o,this.updateContext({repository:this.repo}),this._uniqueId=(0,g.pF)(this.type,this.context),this.splatted=s}splatted=!0;_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}dispose(){super.dispose(),this.child=void 0}get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}async getTreeItem(){this.splatted=!1;let e=await this.repo.git.branches().getBranch(),t=!!e?.upstream?.state.ahead,i=!!e?.upstream?.state.behind,o=t||i||this.repo.starred||this.view.container.git.isRepositoryForEditor(this.repo),l=this.repo.formattedName??this.uri.repoPath??"";if(this.options?.showBranchAndLastFetched&&null!=e){let t=`: ${(0,h.P8)(e.name)}`,i=`: ${e.name}`;l.endsWith(t)?l=l.substring(0,l.length-t.length)+i:l.endsWith(i)||(l+=i)}let c=new r.TreeItem(l,o?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);if(c.contextValue=`${g.U0.RepositoryFolder}${this.repo.starred?"+starred":""}`,t&&(c.contextValue+="+ahead"),i&&(c.contextValue+="+behind"),"commits"===this.view.type&&this.view.state.filterCommits.get(this.repo.id)?.length&&(c.contextValue+="+filtered"),null!=e&&this.options?.showBranchAndLastFetched){let t,i=await this.repo.getLastFetched()??0,o=e.getTrackingStatus();if(o&&(c.description=o,i&&(c.description+=(0,d.eV)(s.EO.Dot,1,1))),i&&(c.description=`${c.description??""}Last fetched ${(0,n.V)(i)}`),null!=e.upstream){let i=(0,a.zF)(await this.view.container.git.remotes(e.repoPath).getRemotesWithProviders());t=i?.length?i[0].name:void 0}else{let i=await e.getRemote();t=i?.provider?.name}c.tooltip=new r.MarkdownString(`${this.repo.formattedName??this.uri.repoPath??""}${i?`${(0,d.eV)(s.EO.Dash,2,2)}Last fetched ${(0,n.V)(i,!1)}`:""}${this.repo.formattedName?`
${this.uri.repoPath}`:""}

Current branch $(git-branch) ${e.name}${null!=e.upstream?` is ${e.getTrackingStatus({empty:e.upstream.missing?`missing upstream $(git-branch) ${e.upstream.name}`:`up to date with $(git-branch) ${e.upstream.name}${t?` on ${t}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${e.upstream.name}${t?` on ${t}`:""}`})}`:`hasn't been published to ${t??"a remote"}`}`,!0)}else c.tooltip=this.repo.formattedName?`${this.repo.formattedName}
${this.uri.repoPath}`:this.uri.repoPath??"";return c}async getSplattedChild(){return null==this.child&&await this.getChildren(),this.child}async refresh(e=!1){super.refresh(e),await this.child?.triggerChange(e,!1,this),await this.ensureSubscription()}async star(){await this.repo.star()}async unstar(){await this.repo.unstar()}subscribe(){return(0,u.HC)(this.repo.onDidChange,this.onRepositoryChanged,this)}etag(){return this.repo.etag}onRepositoryChanged(e){if(e.changed(o.Z_.Closed,o.Ti.Any)){this.dispose(),this.parent?.triggerChange(!0);return}if(e.changed(o.Z_.Opened,o.Ti.Any)||e.changed(o.Z_.Starred,o.Ti.Any)){this.parent?.triggerChange(!0);return}this.changed(e)&&(!this.loaded||this.repo.orderByLastFetched?this.parent??this:this).triggerChange(!0)}};w([(0,l.G)(),(0,c.Yz)()],RepositoryFolderNode.prototype,"refresh",1),w([(0,c.Rm)()],RepositoryFolderNode.prototype,"star",1),w([(0,c.Rm)()],RepositoryFolderNode.prototype,"unstar",1),w([(0,c.Yz)()],RepositoryFolderNode.prototype,"subscribe",1),w([(0,c.Yz)({args:{0:e=>e.toString()}})],RepositoryFolderNode.prototype,"onRepositoryChanged",1)},3193:e=>{e.exports=require("string_decoder")},3310:(e,t,i)=>{i.d(t,{X:()=>n});var r=i(1398),s=i(9703),o=i(1078);async function n(e,t){if(!o.H.get("cloudPatches.enabled")){let e={title:"Enable"};if(await r.window.showInformationMessage("Cloud Patches are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return;await o.H.updateEffective("cloudPatches.enabled",!0)}return"create"===e.mode&&(t={...t,preserveFocus:!1,preserveVisibility:!1}),s.m.instance.views.patchDetails.show(t,e)}},3373:(e,t,i)=>{i.d(t,{$:()=>s});var r=i(9703);async function s(e,t){return r.m.instance.views.commitDetails.show(t,e)}},3378:(e,t,i)=>{i.d(t,{A:()=>LaunchpadIndicator,a:()=>p});var r=i(1398),s=i(1518),o=i(4301),n=i(1078),a=i(3489),l=i(7747),c=i(5576),u=i(3934),h=i(9426),d=i(8286);let LaunchpadIndicator=class LaunchpadIndicator{constructor(e,t){this.container=e,this.provider=t,this._disposable=r.Disposable.from(r.window.onDidChangeWindowState(this.onWindowStateChanged,this),t.onDidChange(this.onLaunchpadChanged,this),t.onDidRefresh(this.onLaunchpadRefreshed,this),n.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(this.onConnectedIntegrationsChanged,this),(0,a.Oo)(e.onReady)(this.onReady,this),...this.registerCommands())}_disposable;_categorizedItems;_firstStateAfterStartup=!0;_hasRefreshed=!1;_lastDataUpdate;_lastRefreshPaused;_refreshTimer;_state;_statusBarLaunchpad;dispose(){this.clearRefreshTimer(),this._statusBarLaunchpad?.dispose(),this._disposable.dispose()}get pollingEnabled(){return n.H.get("launchpad.indicator.polling.enabled")&&n.H.get("launchpad.indicator.polling.interval")>0}get pollingInterval(){return 1e3*n.H.get("launchpad.indicator.polling.interval")*60}async onConnectedIntegrationsChanged(e){h.UZ.includes(e.key)&&await this.maybeLoadData(!0)}async onConfigurationChanged(e){if(!n.H.changed(e,"launchpad.indicator"))return;n.H.changed(e,"launchpad.indicator.label")&&this.updateStatusBarCommand();let t=!1;n.H.changed(e,"launchpad.indicator.polling")&&(n.H.changed(e,"launchpad.indicator.polling.enabled")?t=!0:n.H.changed(e,"launchpad.indicator.polling.interval")&&this.startRefreshTimer()),(t||=n.H.changed(e,"launchpad.indicator.useColors")||n.H.changed(e,"launchpad.indicator.icon")||n.H.changed(e,"launchpad.indicator.label")||n.H.changed(e,"launchpad.indicator.groups"))&&await this.maybeLoadData()}async maybeLoadData(e=!1){this.pollingEnabled?await this.provider.hasConnectedIntegration()?"load"!==this._state||null==this._categorizedItems||e?this.updateStatusBarState("loading"):this.updateStatusBarState("load",this._categorizedItems):this.updateStatusBarState("disconnected"):this.updateStatusBarState("idle")}onLaunchpadRefreshed(e){if(this._hasRefreshed=!0,!this.pollingEnabled){this.updateStatusBarState("idle");return}if(null!=e.error){this.updateStatusBarState("failed");return}this.updateStatusBarState("load",e.items)}async onLaunchpadChanged(){if(this._hasRefreshed=!1,!this.pollingEnabled){this.updateStatusBarState("idle");return}let e=await this.provider.getCategorizedItems();if(null!=e.error){this.updateStatusBarState("failed");return}this.updateStatusBarState("load",e.items)}async onReady(){this._statusBarLaunchpad=r.window.createStatusBarItem("gitlens.launchpad",r.StatusBarAlignment.Left,9997),this._statusBarLaunchpad.name="GitLens Launchpad",await this.maybeLoadData(),this.updateStatusBarCommand(),this._statusBarLaunchpad.show()}onWindowStateChanged(e){if("disconnected"===this._state||"idle"===this._state)return;if(!e.focused){this.clearRefreshTimer(),this._lastRefreshPaused=new Date;return}if(null==this._lastRefreshPaused)return;if("loading"===this._state){this.startRefreshTimer();return}let t=Date.now(),i=null!=this._lastDataUpdate?t-this._lastDataUpdate.getTime():void 0,r=t-this._lastRefreshPaused.getTime();this._lastRefreshPaused=void 0;let s=1e3*n.H.get("launchpad.indicator.polling.interval")*60,o=null!=i?s-i:s;o<0&&(o=0);let a=o-r;this.startRefreshTimer(a<0?0:a)}clearRefreshTimer(){null!=this._refreshTimer&&(clearInterval(this._refreshTimer),this._refreshTimer=void 0)}startRefreshTimer(e){let t=this._firstStateAfterStartup;if(t&&(this._firstStateAfterStartup=!1),this.clearRefreshTimer(),!this.pollingEnabled||"disconnected"===this._state){"idle"!==this._state&&"disconnected"!==this._state&&this.updateStatusBarState("idle");return}let i=()=>{this._refreshTimer=setInterval(()=>{this.provider.getCategorizedItems({force:!0})},this.pollingInterval)};null!=e?this._refreshTimer=setTimeout(()=>{i(),t?(0,c.uk)(5e3).then(()=>{this._hasRefreshed||this.provider.getCategorizedItems({force:!0})}):this.provider.getCategorizedItems({force:!0})},e):i()}updateStatusBarState(e,t){if("load"!==e&&e===this._state)return;this._state=e,this._categorizedItems=t;let i=new r.MarkdownString("",!0);switch(i.supportHtml=!0,i.isTrusted=!0,i.appendMarkdown(`GitLens Launchpad ${s.lD}\xa0\xA0\xa0\xA0&mdash;\xa0\xA0\xa0\xA0`),i.appendMarkdown('[$(question)](command:gitlens.launchpad.indicator.action?%22info%22 "What is this?")'),i.appendMarkdown(" "),i.appendMarkdown('[$(gear)](command:workbench.action.openSettings?%22gitlens.launchpad%22 "Settings")'),i.appendMarkdown("  |  "),i.appendMarkdown('[$(circle-slash) Hide](command:gitlens.launchpad.indicator.action?%22hide%22 "Hide")'),("idle"===e||"disconnected"===e||"loading"===e||"load"===e&&!this.hasInteracted())&&(i.appendMarkdown("\n\n---\n\n"),i.appendMarkdown('[Launchpad](command:gitlens.launchpad.indicator.action?%22info%22 "Learn about Launchpad") organizes your pull requests into actionable groups to help you focus and keep your team unblocked.'),i.appendMarkdown("\n\nIt's always accessible using the `GitLens: Open Launchpad` command from the Command Palette.")),e){case"idle":this.clearRefreshTimer(),this._statusBarLaunchpad.text="$(rocket)",this._statusBarLaunchpad.tooltip=i,this._statusBarLaunchpad.color=void 0;break;case"disconnected":this.clearRefreshTimer(),i.appendMarkdown(`

---

[Connect an integration](command:gitlens.showLaunchpad?%7B%22source%22%3A%22launchpad-indicator%22%7D "Connect an integration") to get started.`),this._statusBarLaunchpad.text="$(rocket)$(gitlens-unplug) Launchpad",this._statusBarLaunchpad.tooltip=i,this._statusBarLaunchpad.color=void 0;break;case"loading":this.startRefreshTimer(0),i.appendMarkdown("\n\n---\n\n$(loading~spin) Loading..."),this._statusBarLaunchpad.text="$(rocket)$(loading~spin)",this._statusBarLaunchpad.tooltip=i,this._statusBarLaunchpad.color=void 0;break;case"load":this.updateStatusBarWithItems(i,t);break;case"failed":this.clearRefreshTimer(),i.appendMarkdown("\n\n---\n\n$(alert) Unable to load items"),this._statusBarLaunchpad.text="$(rocket)$(alert)",this._statusBarLaunchpad.tooltip=i,this._statusBarLaunchpad.color=void 0}this._firstStateAfterStartup=!1}updateStatusBarCommand(){let e=n.H.get("launchpad.indicator.label")??"item";this._statusBarLaunchpad.command=(0,o.gu)("gitlens.showLaunchpad","Open Launchpad",{source:"launchpad-indicator",state:{selectTopItem:"item"===e}})}updateStatusBarWithItems(e,t){let i,s,o,a;this.sendTelemetryFirstLoadEvent(),this._lastDataUpdate=new Date;let c=n.H.get("launchpad.indicator.useColors"),p=n.H.get("launchpad.indicator.groups")??[],g=n.H.get("launchpad.indicator.label")??"item",m=n.H.get("launchpad.indicator.icon")??"default",f=(0,h.Vy)(t),w=Array.from(f.values()).reduce((e,t)=>e+t.length,0),v=p.some(e=>f.get(e)?.length);if(0===w)e.appendMarkdown("\n\n---\n\n"),e.appendMarkdown("You are all caught up!");else if(v)for(let t of p){let o=f.get(t);if(!o?.length)continue;e.value.length>0&&e.appendMarkdown(`

---

`);let n=d.lj.get(t);switch(t){case"mergeable":i??=n,a=new r.ThemeColor("gitlens.launchpadIndicatorMergeableColor"),s??={item:o[0],groupLabel:"can be merged"},e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorMergeableHoverColor);">${n}</span>$(blank) [${"item"===g&&null!=s?this.getPriorityItemLabel(s.item,o.length):(0,u.td)("pull request",o.length)} can be merged](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"mergeable",selectTopItem:!0}}))} "Open Ready to Merge in Launchpad")`);break;case"blocked":{let t,c=(0,l.Fi)(o,e=>"failed-checks"===e.actionableCategory||"conflicts"===e.actionableCategory||"unassigned-reviewers"===e.actionableCategory?e.actionableCategory:"blocked"),h=c.size>1,d="",p="(",m=c.get("unassigned-reviewers");if(m?.length&&(d=`${m.length>1?"need":"needs"} reviewers`,p+=`${m.length} ${d}`,t??=m[0]),m=c.get("failed-checks"),m?.length&&(d="failed CI checks",p+=`${h?", ":""}${m.length} ${d}`,t??=m[0]),m=c.get("conflicts"),m?.length&&(d=`${m.length>1?"have":"has"} conflicts`,p+=`${h?", ":""}${m.length} ${d}`,t??=m[0]),p+=")",i??=n,a??=new r.ThemeColor("gitlens.launchpadIndicatorBlockedColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorBlockedColor);">${n}</span>$(blank) [${"item"===g&&null!=t&&null==s?this.getPriorityItemLabel(t,o.length):(0,u.td)("pull request",o.length)} ${h?"are blocked":d}](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"blocked",selectTopItem:!0}}))} "Open Blocked in Launchpad")`),h&&e.appendMarkdown(`\\
$(blank)$(blank) ${p}`),null!=t){let e="is blocked";"unassigned-reviewers"===t.actionableCategory?e="needs reviewers":"failed-checks"===t.actionableCategory?e="failed CI checks":"conflicts"===t.actionableCategory&&(e="has conflicts"),s??={item:t,groupLabel:e}}break}case"follow-up":i??=n,a??=new r.ThemeColor("gitlens.launchpadIndicatorAttentionColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorAttentionHoverColor);">${n}</span>$(blank) [${"item"===g&&null==s&&o.length?this.getPriorityItemLabel(o[0],o.length):(0,u.td)("pull request",o.length)} ${o.length>1?"require":"requires"} follow-up](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"follow-up",selectTopItem:!0}}))} "Open Follow-Up in Launchpad")`),s??={item:o[0],groupLabel:"requires follow-up"};break;case"needs-review":i??=n,a??=new r.ThemeColor("gitlens.launchpadIndicatorAttentionColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorAttentionHoverColor);">${n}</span>$(blank) [${"item"===g&&null==s&&o.length?this.getPriorityItemLabel(o[0],o.length):(0,u.td)("pull request",o.length)} ${o.length>1?"need":"needs"} your review](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"needs-review",selectTopItem:!0}}))} "Open Needs Your Review in Launchpad")`),s??={item:o[0],groupLabel:"needs your review"}}}else e.appendMarkdown("\n\n---\n\n"),e.appendMarkdown(`No pull requests need your attention\\
(${w} other pull requests)`);let y="group"===m&&null!=i?i:"$(rocket)";switch(g){case"item":o=null!=s?` ${this.getPriorityItemLabel(s.item)} ${s.groupLabel}`:"";break;case"counts":for(let e of(o="",p)){if(!d.fK.includes(e))continue;let t=f.get(e)?.length??0,i=d.lj.get(e);o+=o||y!==i?`\xa0\xA0${i} ${t}`:`\xa0${t}`}break;default:o=""}this._statusBarLaunchpad.text=`${y}${o}`,this._statusBarLaunchpad.tooltip=e,this._statusBarLaunchpad.color=c?a:void 0}registerCommands(){return[(0,o.Lb)("gitlens.launchpad.indicator.action",async e=>{switch(this.storeFirstInteractionIfNeeded(),e){case"info":(0,o.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad-indicator",detail:"info"}});break;case"hide":{let e={title:"Hide Anyway"};await r.window.showInformationMessage("GitLens Launchpad helps you focus and keep your team unblocked.\n\nAre you sure you want hide the indicator?",{modal:!0,detail:'\nYou can always access Launchpad using the "GitLens: Open Launchpad" command, and can re-enable the indicator with the "GitLens: Toggle Launchpad Indicator" command.'},e,{title:"Cancel",isCloseAffordance:!0})===e&&n.H.updateEffective("launchpad.indicator.enabled",!1)}}})]}getPriorityItemLabel(e,t){return`${null!=e.repository?`${e.repository.owner.login}/${e.repository.name}`:""}#${e.id}${null!=t&&t>1?` and ${(0,u.td)("pull request",t-1,{infix:" other "})}`:""}`}sendTelemetryFirstLoadEvent(){this.container.telemetry.enabled&&(this.container.storage.get("launchpad:indicator:hasLoaded")||(this.container.storage.store("launchpad:indicator:hasLoaded",!0).catch(),this.container.telemetry.sendEvent("launchpad/indicator/firstLoad")))}storeFirstInteractionIfNeeded(){null==this.container.storage.get("launchpad:indicator:hasInteracted")&&this.container.storage.store("launchpad:indicator:hasInteracted",new Date().toISOString())}hasInteracted(){return null!=this.container.storage.get("launchpad:indicator:hasInteracted")}};function p(e,t){let i=(0,h.Vy)(e),r=Array.from(i.values()).reduce((e,t)=>e+t.length,0),s=t.some(e=>i.get(e)?.length);if(0===r||!s)return{total:r,groups:t,hasGroupedItems:!1};let o={total:r,groups:t,hasGroupedItems:s};for(let e of t){let t=i.get(e);if(t?.length)switch(e){case"mergeable":o.mergeable={total:t.length};break;case"blocked":{let e=(0,l.Fi)(t,e=>"failed-checks"===e.actionableCategory||"conflicts"===e.actionableCategory||"unassigned-reviewers"===e.actionableCategory?e.actionableCategory:"blocked");o.blocked={total:t.length,blocked:e.get("blocked")?.length??0,conflicts:e.get("conflicts")?.length??0,failedChecks:e.get("failed-checks")?.length??0,unassignedReviewers:e.get("unassigned-reviewers")?.length??0};break}case"follow-up":o.followUp={total:t.length};break;case"needs-review":o.needsReview={total:t.length};break;case"snoozed":o.snoozed={items:t,total:t.length};break;case"pinned":o.pinned={items:t,total:t.length}}}return o}},3447:(e,t,i)=>{i.d(t,{iw:()=>s,rd:()=>o});var r=i(2636);function s(e){return(0,r.kA)(e.ref,e.repoPath,{id:e.id,refType:e.refType,name:e.name,remote:e.remote,upstream:e.upstream,sha:e.sha})}function o(e,t){return"stash"===e.refType?(0,r.kA)(e.ref,e.repoPath,{refType:e.refType,name:e.name,number:e.number,message:t?.excludeMessage?void 0:e.message}):(0,r.kA)(e.ref,e.repoPath,{refType:e.refType,name:e.name,message:t?.excludeMessage?void 0:e.message})}},3467:(e,t,i)=>{i.d(t,{GI:()=>a,IZ:()=>n});var r=i(926),s=i(7005),o=i(5576);async function n(e,t,i,o,n){let{key:a,encoded:c}=await l(e,t);if(!n?.cancellation?.isCancellationRequested)try{let s=c?JSON.parse(c):[];if(s.some(e=>e.entityId===i.nodeId))return;s.push((0,r.cG)(i,o)),await e.git.config(t.repoPath).setConfig?.(a,JSON.stringify(s))}catch(e){s.Vy.error(e,"addAssociatedIssueToBranch")}}async function a(e,t,i){let n,{encoded:a}=await l(e,t);if(i?.cancellation?.isCancellationRequested)return{value:void 0,paused:!1};if(null!=a){try{n=(0,r.MA)(a)}catch(e){return s.Vy.error(e,"getAssociatedIssuesForBranch"),{value:void 0,paused:!1}}if(null!=n)return(0,o.wW)((async()=>(await Promise.allSettled((n??[]).map(t=>(0,r.aM)(e,t)))).map(e=>(0,o.Ro)(e)).filter(e=>null!=e))(),i?.cancellation,i?.timeout)}return{value:void 0,paused:!1}}async function l(e,t){let i=`branch.${t.name}.gk-associated-issues`,r=await e.git.config(t.repoPath).getConfig?.(i);return{key:i,encoded:r}}},3489:(e,t,i)=>{function r(e){return s(e,1)}function s(e,t){return(i,r)=>{let s=0,o=e(e=>(++s>=t&&o.dispose(),i.call(r,e)));return o}}i.d(t,{HC:()=>a,I7:()=>n,Oo:()=>r,s:()=>s});let o=(e,t)=>t(e);function n(e,t=o){let i,r,s=!0;return{get pending(){return s},promise:new Promise((o,n)=>{i=()=>{s=!1,i=void 0,n()},r=e(async e=>{try{await t(e,o,n),s=!1}catch(e){s=!1,n(e)}})}).then(e=>(r.dispose(),e),e=>{throw r.dispose(),e}),cancel:()=>i?.()}}function a(e,t,i,r){let s,o=new WeakRef(i),n=e(e=>{let i=o.deref();null!=i?t.call(i,e):s.dispose()});return s=null==r?n:function(...e){let t=e;return{dispose:function(){if(t){for(let e of t)e&&"function"==typeof e.dispose&&e.dispose();t=void 0}}}}(n,...r)}},3500:(e,t,i)=>{i.d(t,{G:()=>o});var r=i(5576),s=i(2425);function o(e){return(t,i,o)=>{let n;if("function"==typeof o.value?n=o.value:"function"==typeof o.get&&(n=o.get),null==n)throw Error("Not supported");let a=`$gate$${i}`;o.value=function(...t){let i=(0,s.q)(a,e,...t);Object.prototype.hasOwnProperty.call(this,i)||Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let o=this[i];if(void 0===o){if(null==(o=n.apply(this,t))||!(0,r.yL)(o))return o;this[i]=o,o.finally(()=>this[i]=void 0)}return o}}}},3529:(e,t,i)=>{i.d(t,{V:()=>c,X:()=>GitRemote});var r=i(4499),s=i(3934),o=i(5738),n=Object.defineProperty,a=Object.getOwnPropertyDescriptor,l=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?a(t,i):t,l=e.length-1;l>=0;l--)(s=e[l])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n(t,i,o),o};function c(e){return e instanceof GitRemote}let GitRemote=class GitRemote{constructor(e,t,i,r,s,o,n,a){this.container=e,this.repoPath=t,this.name=i,this.scheme=r,this._domain=s,this._path=o,this.provider=n,this.urls=a}get default(){let e=this.container.storage.getWorkspace("remote:default");return this.name===e||this.remoteKey===e}get domain(){return this.provider?.domain??this._domain}get id(){return`${this.name}/${this.remoteKey}`}get maybeIntegrationConnected(){return this.container.integrations.isMaybeConnected(this)}get path(){return this.provider?.path??this._path}get remoteKey(){return this._domain?`${this._domain}/${this._path}`:this.path}get url(){let e;for(let t of this.urls){if("push"===t.type)return t.url;null==e&&(e=t.url)}return e}async getIntegration(){return null!=this.provider?this.container.integrations.getByRemote(this):void 0}hasIntegration(){return null!=this.provider&&this.container.integrations.supports(this.provider.id)}matches(e,t){if(null==t){if((0,s.Q_)(e,this.url))return!0;[,e,t]=(0,o.BX)(e)}return(0,s.Q_)(e,this.domain)&&(0,s.Q_)(t,this.path)}async setAsDefault(e=!0){await this.container.git.remotes(this.repoPath).setRemoteAsDefault(this.name,e)}};l([(0,r.B)()],GitRemote.prototype,"domain",1),l([(0,r.B)()],GitRemote.prototype,"id",1),l([(0,r.B)()],GitRemote.prototype,"path",1),l([(0,r.B)()],GitRemote.prototype,"remoteKey",1),l([(0,r.B)()],GitRemote.prototype,"url",1)},3711:(e,t,i)=>{i.d(t,{He:()=>a,Ht:()=>p,UJ:()=>c,Yk:()=>n,Zq:()=>d,kY:()=>u,km:()=>l,n$:()=>o,oq:()=>v,rt:()=>h,xE:()=>w,xM:()=>g,xw:()=>y});var r=i(8554);let s=/^(HEAD|\(.*\))$/;function o(e){return`(${(0,r.pV)(e)}...)`}function n(e,t,i){return`${e}|${t?"remotes/":"heads/"}${i}`}function a(e){if(e.remote){let t=p(e.name);return -1===t?[e.name,void 0]:[e.name.substring(t+1),e.name.substring(0,t)]}if(e.upstream?.name!=null){let t=p(e.upstream.name);return -1===t?[e.name,void 0]:[e.name,e.upstream.name.substring(0,t)]}return[e.name,void 0]}function l(e){return e.substring(p(e)+1)}function c(e){return e.upstream?.name.substring(p(e.upstream.name)+1)}async function u(e,t){let i;function r(t){return!t.remote&&t.upstream?.name!=null&&(t.upstream.name===e||t.upstream.name===i)}e.startsWith("remotes/")?(i=e,e=e.substring(8)):i=`remotes/${e}`;let s=t.values();if(Symbol.asyncIterator in s){for await(let e of s)if(r(e))return e}else for(let e of s)if(r(e))return e}async function h(e){let t=new Set;for await(let i of e.values())i.remote||i.upstream?.name==null||t.add(i.upstream.name);return t}function d(e){return e.substring(0,p(e))}function p(e){return e.startsWith("remotes/")?e.indexOf("/",8):e.indexOf("/")}function g(e){return!(e=e.trim()).length||s.test(e)}let m=/^(refs\/)?heads\//i,f=/^(refs\/)?remotes\//i;function w(e){return/^(refs\/)?remotes\/(.*\/)HEAD$/i.test(e)}function v(e){let t,i=f.test(e);return{name:i?e.replace(f,""):e.replace(m,""),remote:i}}function y(e,t){if(!e)return;let{name:i}=v(e),r=/(?:\[(?:ahead ([0-9]+))?[,\s]*(?:behind ([0-9]+))?]|\[(gone)])/.exec(t);if(null==r)return{name:i,missing:!1,state:{ahead:0,behind:0}};let s=null==r[1]?0:Number(r[1]),o=null==r[2]?0:Number(r[2]);return{name:i,missing:null!=r[3],state:{ahead:isNaN(s)?0:s,behind:isNaN(o)?0:o}}}},3915:(e,t,i)=>{i.d(t,{a:()=>IntegrationService,p:()=>k});var r=i(1398),s=i(5565),o=i(457);let n={launchpad:"launchpad"};var a=i(1078),l=i(6612),c=i(3500),u=i(4342),h=i(3489),d=i(7747),p=i(7005),g=i(5419),m=i(1121),f=i(2145),w=i(6462),v=i(6461),y=Object.defineProperty,b=Object.getOwnPropertyDescriptor,C=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?b(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&y(t,i,o),o};let IntegrationService=class IntegrationService{constructor(e,t,i){this.container=e,this.authenticationService=t,this.configuredIntegrationService=i,this._disposable=r.Disposable.from(a.H.onDidChange(e=>{a.H.changed(e,"remotes")&&this._ignoreSSLErrors.clear()}),r.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this),e.subscription.onDidCheckIn(this.onUserCheckedIn,this),e.subscription.onDidChange(this.onDidChangeSubscription,this))}_onDidChangeConnectionState=new r.EventEmitter;get onDidChangeConnectionState(){return this._onDidChangeConnectionState.event}_onDidSyncCloudIntegrations=new r.EventEmitter;get onDidSyncCloudIntegrations(){return this._onDidSyncCloudIntegrations.event}get onDidChangeConfiguredIntegrations(){return this.configuredIntegrationService.onDidChange}_connectedCache=new Set;_disposable;_integrations=new Map;dispose(){this._integrations.forEach(e=>e.dispose()),this._integrations.clear(),this._disposable?.dispose()}async syncCloudIntegrations(e){let t=(0,g.dQ)(),i=new Set,r=new Map;if(await this.container.subscription.getAuthenticationSession()){let e=await this.container.cloudIntegrations,s=await e?.getConnections();if(null==s)return;s.map(e=>{let s=m.F7[e.provider];if(null!=s&&(i.add(m.F7[e.provider]),e.domain?.length>0))try{let t=new URL(e.domain).host;r.set(s,t)}catch{p.Vy.warn(`Invalid domain for ${s} integration: ${e.domain}. Ignoring.`,t)}})}for await(let t of this.getSupportedCloudIntegrations(r))await t.syncCloudConnection(i.has(t.id)?"connected":"disconnected",e);return this.container.telemetry.enabled&&this.container.telemetry.setGlobalAttributes({"cloudIntegrations.connected.count":i.size,"cloudIntegrations.connected.ids":(0,d.fj)(i.values(),",")}),this._onDidSyncCloudIntegrations.fire(),i}async *getSupportedCloudIntegrations(e){for(let t of(0,m.It)())if((0,v.Ii)(t)&&!e.has(t)){let e=await this.get(t,void 0);null!=e&&(yield e)}else{let i=await this.get(t,e.get(t));null!=i&&(yield i)}}onUserCheckedIn(){this.syncCloudIntegrations(!1)}onDidChangeSubscription(e){e.current?.account==null&&this.syncCloudIntegrations(!1)}async manageCloudIntegrations(e){let t=(0,g.dQ)();if(this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/settingsOpened",{"integration.id":void 0},e),null!=(await this.container.subscription.getSubscription()).account||await this.container.subscription.loginOrSignUp(!0,e)){try{let e=await this.container.accountAuthentication.getExchangeToken();if(!await (0,l.CZ)(this.container.urls.getGkDevUrl("settings/integrations",`token=${e}`)))return}catch(e){if(p.Vy.error(e,t),!await (0,l.CZ)(this.container.urls.getGkDevUrl("settings/integrations")))return}(0,h.s)(r.window.onDidChangeWindowState,2)(async t=>{if(t.focused){let t=await this.syncCloudIntegrations(!0);this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/connected",{"integration.ids":void 0,"integration.connected.ids":t?(0,d.fj)(t.values(),","):void 0},e)}})}}async connectCloudIntegrations(e,t){let i,s=(0,g.dQ)(),o=e?.integrationIds;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/connecting",{"integration.ids":o?.join(",")},t);let a=(await this.container.subscription.getSubscription()).account,c=new Set;if(o?.length){for(let t of(e?.skipIfConnected&&!e?.skipPreSync&&await this.syncCloudIntegrations(!0),o))try{let e=await this.get(t);if(null==e)continue;(e.maybeConnected??await e.isConnected())&&c.add(t)}catch(e){p.Vy.log(`Failed to get integration ${t} by its ID. Consider it as not-connected and ignore. Error message: ${e.message}`,s)}if(e?.skipIfConnected&&c.size===o.length)return!0}let u="source=gitlens";if(t?.source!=null&&null!=n[t.source]&&(u+=`&context=${n[t.source]}`),null!=o){let e=[];for(let t of o){let i=m.xq[t];null==i?p.Vy.error(void 0,s,`Attempting to connect unsupported cloud integration type: ${t}`):e.push(i)}e.length>0&&(u+=`&provider=${e.join(",")}`)}let f=u;try{if(null!=a){let e=await this.container.accountAuthentication.getExchangeToken(m.Je);u+=`&token=${e}`}else{let e=await r.env.asExternalUri(r.Uri.parse(`${r.env.uriScheme}://${this.container.context.extension.id}/${m.Je}`));u+=`&redirect_uri=${encodeURIComponent(e.toString(!0))}`}if(!await (0,l.CZ)(this.container.urls.getGkDevUrl("connect",u)))return!1}catch(e){if(p.Vy.error(e,s),!await (0,l.CZ)(this.container.urls.getGkDevUrl("connect",f)))return!1}let w=(0,h.I7)(this.container.uri.onDidReceiveCloudIntegrationAuthenticationUri,(e,t)=>{t(new URLSearchParams(e.query).get("code")??void 0)});try{i=await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Connecting integrations...",cancellable:!0},(e,t)=>Promise.race([w.promise,new Promise((e,i)=>t.onCancellationRequested(()=>i("Cancelled"))),new Promise((e,t)=>setTimeout(t,3e5,"Cancelled"))]))}catch{return!1}finally{w.cancel()}if(null==a&&(null==i||(await this.container.subscription.loginWithCode({code:i},t),null==(a=(await this.container.subscription.getSubscription()).account))))return!1;let v=await this.syncCloudIntegrations(!0);if(this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/connected",{"integration.ids":o?.join(","),"integration.connected.ids":v?(0,d.fj)(v.values(),","):void 0},t),null!=o){for(let e of o){let t=await this.get(e);if(null!=t&&(t.maybeConnected??await t.isConnected())&&!c.has(e))return!0}return!1}return!0}onAuthenticationSessionsChanged(e){for(let t of this._integrations.values())e.provider.id===t.authProvider.id&&t.refresh()}connected(e,t){this._connectedCache.has(t)||(this._connectedCache.add(t),this.container.telemetry.enabled&&("hosting"===e.type?(0,m.LT)(e.id)?this.container.telemetry.sendEvent("cloudIntegrations/hosting/connected",{"hostingProvider.provider":e.id,"hostingProvider.key":t}):this.container.telemetry.sendEvent("remoteProviders/connected",{"hostingProvider.provider":e.id,"hostingProvider.key":t,"remoteProviders.key":t}):this.container.telemetry.sendEvent("cloudIntegrations/issue/connected",{"issueProvider.provider":e.id,"issueProvider.key":t})),setTimeout(()=>this._onDidChangeConnectionState.fire({key:t,reason:"connected"}),250))}disconnected(e,t){this._connectedCache.delete(t),this.container.telemetry.enabled&&("hosting"===e.type?(0,m.LT)(e.id)?this.container.telemetry.sendEvent("cloudIntegrations/hosting/disconnected",{"hostingProvider.provider":e.id,"hostingProvider.key":t}):this.container.telemetry.sendEvent("remoteProviders/disconnected",{"hostingProvider.provider":e.id,"hostingProvider.key":t,"remoteProviders.key":t}):this.container.telemetry.sendEvent("cloudIntegrations/issue/disconnected",{"issueProvider.provider":e.id,"issueProvider.key":t})),setTimeout(()=>this._onDidChangeConnectionState.fire({key:t,reason:"disconnected"}),250)}isConnected(e){return null==e?0!==this._connectedCache.size:this._connectedCache.has(e)}async getConfigured(e){return this.configuredIntegrationService.getConfigured(e)}async get(e,t){let r=this.getCached(e,t);if(null==r){switch(e){case o.Q7.GitHub:r=new(await i.e(758).then(i.bind(i,376))).GitHubIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;case o.PY.CloudGitHubEnterprise:if(null==t){if(null!=(r=this.findCachedById(e)))return r;let s=await this.getConfigured({id:o.PY.CloudGitHubEnterprise});if(s.length){let{domain:o}=s[0];if(null==o)throw Error(`Domain is required for '${e}' integration`);r=new(await i.e(758).then(i.bind(i,376))).GitHubEnterpriseIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),o,e),t=o;break}return}r=new(await i.e(758).then(i.bind(i,376))).GitHubEnterpriseIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t,e);break;case o.PY.GitHubEnterprise:if(null==t)throw Error(`Domain is required for '${e}' integration`);r=new(await i.e(758).then(i.bind(i,376))).GitHubEnterpriseIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t,e);break;case o.Q7.GitLab:r=new(await i.e(758).then(i.bind(i,9496))).GitLabIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;case o.PY.CloudGitLabSelfHosted:if(null==t){if(null!=(r=this.findCachedById(e)))return r;let s=await this.getConfigured({id:o.PY.CloudGitLabSelfHosted});if(s.length){let{domain:o}=s[0];if(null==o)throw Error(`Domain is required for '${e}' integration`);r=new(await i.e(758).then(i.bind(i,9496))).GitLabSelfHostedIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),o,e),t=o;break}return}r=new(await i.e(758).then(i.bind(i,9496))).GitLabSelfHostedIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t,e);break;case o.PY.GitLabSelfHosted:if(null==t)throw Error(`Domain is required for '${e}' integration`);r=new(await i.e(758).then(i.bind(i,9496))).GitLabSelfHostedIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t,e);break;case o.Q7.Bitbucket:r=new(await i.e(758).then(i.bind(i,6462))).BitbucketIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;case o.PY.BitbucketServer:if(null==t){if(null!=(r=this.findCachedById(e)))return r;let s=await this.getConfigured({id:o.PY.BitbucketServer});if(s.length){let{domain:o}=s[0];if(null==o)throw Error(`Domain is required for '${e}' integration`);r=new(await i.e(758).then(i.bind(i,6720))).BitbucketServerIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),o),t=o;break}return}r=new(await i.e(758).then(i.bind(i,6720))).BitbucketServerIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t);break;case o.Q7.AzureDevOps:r=new(await i.e(758).then(i.bind(i,2145))).AzureDevOpsIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;case o.tp.Jira:r=new(await i.e(758).then(i.bind(i,1943))).JiraIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;default:throw Error(`Integration with '${e}' is not supported`)}this._integrations.set(this.getCacheKey(e,t),r)}return r}_providersApi;async getProvidersApi(){if(null==this._providersApi){let t=this.container,r=this.authenticationService;async function e(){return new(await i.e(758).then(i.bind(i,6933))).ProvidersApi(t,r)}this._providersApi=e()}return this._providersApi}getByRemote(e){return e?.provider==null?Promise.resolve(void 0):this.getByRemoteCore(e,this.get)}getByRemoteCached(e){if(e?.provider!=null)return this.getByRemoteCore(e,this.getCached)}getByRemoteCore(e,t){let i=t.bind(this);switch(e.provider.id){case"azure-devops":if((0,f.isAzureCloudDomain)(e.provider.domain))return i(o.Q7.AzureDevOps);return t===this.get?Promise.resolve(void 0):void 0;case"bitbucket":if((0,w.isBitbucketCloudDomain)(e.provider.domain))return i(o.Q7.Bitbucket);return t===this.get?Promise.resolve(void 0):void 0;case"bitbucket-server":if(!(0,w.isBitbucketCloudDomain)(e.provider.domain))return i(o.PY.BitbucketServer);return t===this.get?Promise.resolve(void 0):void 0;case"github":if(null!=e.provider.domain&&!(0,v.EO)(e.provider.domain))return i(e.provider.custom?o.PY.GitHubEnterprise:o.PY.CloudGitHubEnterprise,e.provider.domain);return i(o.Q7.GitHub);case"gitlab":if(null!=e.provider.domain&&!(0,v.Gz)(e.provider.domain))return i(e.provider.custom?o.PY.GitLabSelfHosted:o.PY.CloudGitLabSelfHosted,e.provider.domain);return i(o.Q7.GitLab);default:return t===this.get?Promise.resolve(void 0):void 0}}async getMyIssues(e,t){let i=new Map,r=e?.filter(e=>e in o.Q7||e in o.PY),s=new Map,n=!1;for(let e of this.container.git.openRepositories)for(let t of(await e.git.remotes().getRemotes())){let e=await t.getIntegration();if(null!=e){for(let i of(e.id===o.Q7.AzureDevOps&&(n=!0),r?.length?r:[...Object.values(o.Q7),...Object.values(o.PY)]))if(e.id===i&&t.provider?.owner!=null&&t.provider?.repoName!=null){let e={key:`${t.provider.owner}/${t.provider.repoName}`,owner:t.provider.owner,name:t.provider.repoName};s.has(i)?s.get(i)?.push(e):s.set(i,[e])}}}for(let r of e?.length?e:[...Object.values(o.Q7),...Object.values(o.tp),...Object.values(o.PY)]){let e=await this.get(r),a=t?.openRepositoriesOnly&&r!==o.Q7.AzureDevOps&&((0,v.KC)(r)||(0,v.NT)(r))&&!s.has(r)||r===o.Q7.AzureDevOps&&!n;null==e||a||i.set(e,t?.openRepositoriesOnly&&!a?s.get(r):void 0)}if(0!==i.size)return this.getMyIssuesCore(i,t?.cancellation)}async getMyIssuesCore(e,t){let i=[];for(let[r,s]of e)null!=r&&i.push(r.searchMyIssues(s,t));let r=await Promise.allSettled(i);return[...(0,d.Bq)((0,d.x1)(r,e=>"fulfilled"===e.status?e.value:void 0))]}async getMyIssuesForRemotes(e){if(Array.isArray(e)||(e=[e]),!e.length)return;if(1===e.length){let[t]=e;if(t?.provider==null)return;let i=await this.getByRemote(t);return i?.searchMyIssues(t.provider.repoDesc)}let t=new Map;for(let i of e){if(i?.provider==null)continue;let e=await i.getIntegration();if(null==e)continue;let r=t.get(e);null==r&&(r=[],t.set(e,r)),r.push(i.provider.repoDesc)}return this.getMyIssuesCore(t)}async getMyCurrentAccounts(e){let t=new Map;return await Promise.allSettled(e.map(async e=>{let i=await this.get(e);if(null==i)return;let r=await i.getCurrentAccount();r&&t.set(e,r)})),t}async getMyPullRequests(e,t,i){let r=new Map;for(let t of e?.length?e:Object.values(o.Q7)){let e;try{e=await this.get(t)}catch{}null!=e&&r.set(e,void 0)}if(0!==r.size)return this.getMyPullRequestsCore(r,t,i)}async getMyPullRequestsCore(e,t,i){let r=Date.now(),s=[];for(let[r,o]of e)null!=r&&s.push(r.searchMyPullRequests(o,t,i));let o=await Promise.allSettled(s),n=[...(0,d.x1)(o,e=>"fulfilled"===e.status&&e.value?.error!=null?e.value.error:void 0)];return n.length?{error:1===n.length?n[0]:AggregateError(n),duration:Date.now()-r}:{value:[...(0,d.Bq)((0,d.x1)(o,e=>"fulfilled"===e.status&&null!=e.value&&e.value?.error==null?e.value.value:void 0))],duration:Date.now()-r}}async getMyPullRequestsForRemotes(e){if(Array.isArray(e)||(e=[e]),!e.length)return;if(1===e.length){let[t]=e;if(t?.provider==null)return;let i=await this.getByRemote(t);return i?.searchMyPullRequests(t.provider.repoDesc)}let t=new Map;for(let i of e){if(i?.provider==null)continue;let e=await i.getIntegration();if(null==e)continue;let r=t.get(e);null==r&&(r=[],t.set(e,r)),r.push(i.provider.repoDesc)}return this.getMyPullRequestsCore(t)}isMaybeConnected(e){return!!(e.provider?.id!=null&&this.supports(e.provider.id))&&this.getByRemoteCached(e)?.maybeConnected}async reset(){for(let e of this._integrations.values())await e.reset();await this.authenticationService.reset(),await this.container.storage.deleteWithPrefix("provider:authentication:skip"),queueMicrotask(()=>void this.syncCloudIntegrations(!0))}supports(e){return null!=k(e)}_ignoreSSLErrors=new Map;ignoreSSLErrors(e){if(s.HZ)return!1;let t=this._ignoreSSLErrors.get(e.id);if(void 0===t){let i=a.H.get("remotes")?.find(t=>t.type.toLowerCase()===e.id&&t.domain===e.domain);t=i?.ignoreSSLErrors??!1,this._ignoreSSLErrors.set(e.id,t)}return t}getCached(e,t){return this._integrations.get(this.getCacheKey(e,t))}findCachedById(e){let t=this.getCacheKey(e,"");for(let[e,i]of this._integrations)if(e.startsWith(t))return i}getCacheKey(e,t){return(0,v.NT)(e)?`${e}:${t}`:e}};function k(e){switch(e){case"azure-devops":return o.Q7.AzureDevOps;case"bitbucket":return o.Q7.Bitbucket;case"github":return o.Q7.GitHub;case"gitlab":return o.Q7.GitLab;case"bitbucket-server":return o.PY.BitbucketServer;default:return}}C([(0,c.G)(),(0,u.Yz)()],IntegrationService.prototype,"syncCloudIntegrations",1),C([(0,u.Rm)({args:{0:e=>e?.length?e.join(","):"<undefined>",1:!1}})],IntegrationService.prototype,"getMyIssues",1),C([(0,u.Yz)({args:{0:e=>Array.isArray(e)?e.map(e=>e.name):e.name}})],IntegrationService.prototype,"getMyIssuesForRemotes",1),C([(0,u.Rm)({args:{0:e=>e?.length?e.join(","):"<undefined>"}})],IntegrationService.prototype,"getMyCurrentAccounts",1),C([(0,u.Rm)({args:{0:e=>e?.length?e.join(","):"<undefined>",1:!1}})],IntegrationService.prototype,"getMyPullRequests",1),C([(0,u.Yz)({args:{0:e=>Array.isArray(e)?e.map(e=>e.name):e.name}})],IntegrationService.prototype,"getMyPullRequestsForRemotes",1),C([(0,u.Rm)()],IntegrationService.prototype,"reset",1)},3934:(e,t,i)=>{let r,s,o;i.d(t,{K3:()=>u,ZH:()=>d,W1:()=>p,lF:()=>f,zd:()=>w,EO:()=>Q,yz:()=>v,Q_:()=>g,$f:()=>y,Ey:()=>h,Mt:()=>C,$l:()=>b,Lu:()=>k,VU:()=>D,Vx:()=>_,vJ:()=>P,RG:()=>A,GW:()=>F,Ow:()=>L,HX:()=>O,i5:()=>x,eV:()=>N,mF:()=>q,td:()=>W,wN:()=>m,Br:()=>M,xv:()=>G,Es:()=>H,kU:()=>V});var n=i(1251),a=i(97),l=i(1518),c=i(4941);function u(e){return Buffer.from(e).toString("base64")}function h(e){return Buffer.from(e,"base64")}function d(e){return`${e[0].toLocaleUpperCase()}${e.slice(1)}`}function p(e,t){null==r&&(r=new Intl.Collator(void 0,{sensitivity:"accent"}));let i=r.compare(e,t);return 0===i?0:i>0?1:-1}function g(e,t){return null==e&&null==t||null!=e&&null!=t&&0===p(e,t)}function m(e,t){return null==s&&(s=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"})),s.compare(e,t)}function f(e,t,i=0,r=e.length,s=0,o=t.length){for(;i<r&&s<o;i++,s++){let r=e.charCodeAt(i),o=t.charCodeAt(s);if(r<o)return -1;if(r>o)return 1}let n=r-i,a=o-s;return n<a?-1:+(n>a)}function w(e,t,i=0,r=e.length,s=0,o=t.length){for(;i<r&&s<o;i++,s++){let n=e.charCodeAt(i),a=t.charCodeAt(s);if(n===a)continue;let l=n-a;if(!(32===l&&U(a))){if(!(-32===l&&U(n))){if(B(n)&&B(a))return l;return f(e.toLowerCase(),t.toLowerCase(),i,r,s,o)}}}let n=r-i,a=o-s;return n<a?-1:+(n>a)}function v(e){return e?.replace(/[<>&"]/g,e=>{switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";case'"':return"&quot;";default:return e}})}function y(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}function b(e){let[t,i]=(0,a.k)(e);return 1e3*t+Math.floor(i/1e6)}function C(e){let t=0;for(let i=0;i<e.length;i++)t=(t<<5)-t+e.charCodeAt(i),t&=t;return Math.abs(t%100)+1}function k(e){return e.endsWith("s")?`${e}'`:`${e}'s`}let S={ellipsisWidth:0,limit:0x40000000-1},R={ansiWidth:0,controlWidth:0,ambiguousWidth:1,emojiWidth:2,fullWidthWidth:2,regularWidth:1,wideWidth:2};function P(e,t,i){return null==e||0===e.length?{truncated:!1,ellipsed:!1,width:0,index:0}:(0,n.A)(e,{limit:t,ellipsisWidth:i??0},R)}function A(e){return null==e||0===e.length?0:(0,n.A)(e,S,R).width}let I=["¹","²","³","⁴","⁵","⁶","⁷","⁸","⁹"];function D(e){return I[e-1]??""}let $=/\$\{(?:'.*?[^\\]'|\W*)?(\w*?)(?:'.*?[^\\]'|[\W\d]*)\}/g,T=new Map;function E(e){return 95===e||e>=97&&e<=122||e>=65&&e<=90||e>=48&&e<=57}function _(e){let t=T.get(e);if(null!=t)return t;t=[];let i=e.length,r=0;for(;r<i;){let i=e.indexOf("${",r);if(-1===i)break;let s=e.indexOf("}",i);if(-1===s)break;let o=i+2,n="",a="",l="",c=!1,u="right",h="";if("'"===e[o]){let t=++o;if(-1===(o=e.indexOf("'",o)))break;t!==o&&(a=e.slice(t,o)),o++}else if(!E(e.charCodeAt(o))){let t=o++;for(;o<s&&!E(e.charCodeAt(o));)o++;t!==o&&(a=e.slice(t,o))}for(;o<s;){let t=e.charCodeAt(o);if(E(t))n+=e[o++];else{if(124!==t)break;for(;o<s;){if((t=e.charCodeAt(++o))>=48&&t<=57){l+=e[o];continue}63===t?(c=!0,o++):45===t&&(u="left",o++);break}}}if(o<s){if("'"===e[o]){let t=++o;if(-1===(o=e.indexOf("'",o)))break;t!==o&&(h=e.slice(t,o)),o++}else if(!E(e.charCodeAt(o))){let t=o++;for(;o<s&&!E(e.charCodeAt(o));)o++;t!==o&&(h=e.slice(t,o))}}r=s+1,t.push({key:n,start:i,end:r,options:{prefix:a||void 0,suffix:h||void 0,truncateTo:l?parseInt(l,10):void 0,collapseWhitespace:c,padDirection:u}})}return T.set(e,t),t}function*O(e,t="\n"){let i=0;for(;i<e.length;){let r=e.indexOf(t,i);-1===r&&(r=e.length),yield e.substring(i,r),i=r+1}}function*x(e,t,i){let r;if("string"==typeof e){let r,s,o=0;for(;o<e.length;){let n=e.length;-1!==(r=e.indexOf(t,o))&&(n=r),null!=i&&-1!==(s=e.indexOf(i,o))&&s<n&&(n=s),yield e.substring(o,n),o=n+1}return}let s=0;for(let o of e){let n,a;s++,r&&(o=r+o,r=void 0);let l=0;for(;l<o.length;){let c=o.length;if(-1!==(n=o.indexOf(t,l))&&(c=n),null!=i&&-1!==(a=o.indexOf(i,l))&&a<c&&(c=a),c===o.length&&s!==e.length){r=o.substring(l);break}yield o.substring(l,c),l=c+1}}}function F(e,t){if(null==e||0===e.length)return e;if(null==t)return e.replace($,"");let i=_(e);if(0===i.length)return e;let r=0,s="";for(let o of i)s+=e.slice(r,o.start)+(t[o.key]??""),r=o.end;return r<e.length&&(s+=e.slice(r)),s}async function L(e,t){let i;if(null==e||0===e.length)return e;if(null==t)return e.replace($,"");let r=_(e);if(0===r.length)return e;let s=0,o="";for(let n of r)null!=(i=t[n.key])&&"object"==typeof i&&"function"==typeof i.then&&(i=await i),o+=e.slice(s,n.start)+(i??""),s=n.end;return s<e.length&&(o+=e.slice(s)),o}function B(e){return e>=l.s7.a&&e<=l.s7.z}function U(e){return e>=l.s7.A&&e<=l.s7.Z}function N(e,t=0,i=0,r=" "){return 0===t&&0===i?e:`${0===t?"":r.repeat(t)}${e}${0===i?"":r.repeat(i)}`}function q(e,t,i){return e.length===t?e:e.length>t?e.substring(0,t):e.padEnd(t,i)}function W(e,t,i){let r;if(null==i)return o??=(0,c.zd)(),`${o(t)} ${e}${1===t?"":"s"}`;let s=1===t?e:i.plural??`${e}s`;return i.only?s:(0===t?r=i.zero??t:!1===i.format?r=t:null!=i.format?r=i.format(t):(o??=(0,c.zd)(),r=o(t)),`${r}${i.infix??" "}${s}`)}function M(e,t){let i=e.indexOf(t);if(-1===i)return[e];let r=e.substring(0,i),s=e.substring(i+t.length);return null!=s?[r,s]:[r]}function G(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??A(e))<=t)return e;if(r===e.length)return`${e.substring(0,t-1)}${i}`;let s=Math.floor(t/(r/e.length)),o=A(e.substring(0,s));for(;o<t;)o+=A(e[s++]);return o>=t&&s--,`${e.substring(0,s)}${i}`}function H(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??A(e))<=t)return e;if(r===e.length)return`${i}${e.substring(r-t)}`;let s=Math.floor(t/(r/e.length)),o=A(e.substring(0,s));for(;o<t;)o+=A(e[s++]);return o>=t&&s--,`${i}${e.substring(e.length-s)}`}function V(e,t,i="…"){if(!e)return e;if(t<=1)return i;let r=A(e);return r<=t?e:`${e.slice(0,Math.floor(t/2)-1)}${i}${e.slice(r-Math.ceil(t/2))}`}let j=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,63,52,53,54,55,56,57,58,59,60,61,0,0,0,64,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,0,0,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]);function Q(e){return null==e||""===e?"":function(e,t){let i=Array(4096);i[0]="0",i[1]="1",i[2]="2";let r=[],s=e.length,o=j[e.charCodeAt(0)],n=32,a=1;function l(i){let r=0,s=1;do r|=Number((o&n)>0)*s,s<<=1,0==(n>>=1)&&(n=t,o=j[e.charCodeAt(a++)]);while(s!==i)return r}let c=l(4);switch(c){case 0:c=l(256);break;case 1:c=l(65536);break;case 2:return""}let u=String.fromCharCode(c);i[3]=u,r.push(u);let h=4,d=4,p=3;for(;a<=s;){switch(c=l(1<<p)){case 0:c=l(256),i[h]=String.fromCharCode(c),c=h++,d--;break;case 1:c=l(65536),i[h]=String.fromCharCode(c),c=h++,d--;break;case 2:return r.join("")}0===d&&(d=1<<p++);let e=i[c];if(void 0===e){if(c!==h)return;e=u+u[0]}r.push(e),i[h++]=u+e[0],d--,u=e,0===d&&(d=1<<p++)}}(e,32)??""}},3949:(e,t,i)=>{i.d(t,{J:()=>s});var r,s=((r=s||{}).Branch="branch",r.Branches="branches",r.Commit="commit",r.Comparison="comparison",r.CreatePullRequest="createPullRequest",r.File="file",r.Repo="repo",r.Revision="revision",r)},3951:(e,t,i)=>{i.d(t,{R:()=>s,f:()=>o});var r=i(457);function s(e){return null!=o(e)}function o(e){let t,i,s=e.match(/([^/]+\/[^/]+)\/(?:-\/merge_requests)\/(\d+)/);return null!=s&&(t=s[1],i=s[2]),null==i&&null!=(s=e.match(/(?:\/|^)(?:-\/merge_requests)\/(\d+)/))&&(i=s[1]),null!=i?{ownerAndRepo:t,prNumber:i,provider:r.Q7.GitLab}:void 0}},3957:(e,t,i)=>{i.d(t,{h:()=>n});var r=i(9642),s=i(6339);let o=[[0,"Less than a week ago"],[7,"Over a week ago"],[25,"Over a month ago"],[77,"Over 3 months ago"]];function*n(e,t,i,{show:a}={show:!0}){let l;if(!t.view.config.showRelativeDateMarkers||!a)return yield*e;let c=i??0,u=Date.now(),h=!0;for(let i of e){if(c<o.length){let[e,n]=o[c];if(void 0===l){let t=new Date(u);l=t.setDate(t.getDate()-e)}let a=new Date(i.commit.committer.date).setUTCHours(0,0,0,0);if(a<=l){for(;c<o.length-1;){[e]=o[c+1];let t=new Date(u);if(a>t.setDate(t.getDate()-e))break;c++,l=void 0,[,n]=o[c]}h||(yield new s.S2(t.view,t,"",n,void 0,void 0,r.U0.DateMarker)),c++,l=void 0}}h=!1,yield i}}},3958:(e,t,i)=>{function r(e,t){if(e===t)return!0;if(null==e||null==t)return!1;let i=typeof e;return(i!==typeof t||"string"!==i&&"number"!==i&&"boolean"!==i)&&JSON.stringify(e)===JSON.stringify(t)}function s(e,t,i){let r=i?.joinArrays??!1,s=i?.skipPaths?.length?t?i.skipPaths.map(e=>`${t}.${e}`):i.skipPaths:void 0,o=Object.create(null);return!function e(t,i,o){if(!s?.includes(i))if(Object(o)!==o){if(null==o)return;t[i]="string"==typeof o||"number"==typeof o||"boolean"==typeof o?o:JSON.stringify(o)}else if(Array.isArray(o)){let s=o.length;if(0===s)return;if(r)t[i]=o.join(",");else for(let r=0;r<s;r++)e(t,`${i}[${r}]`,o[r])}else{let r=Object.entries(o);if(0===r.length)return;for(let[s,o]of r)e(t,i?`${i}.${s}`:s,o)}}(o,t??"",e),o}function o(e,t,i){if(null==e&&(e=Object.create(null)),null!=i&&("boolean"!=typeof i||i))"object"==typeof i?e[t]={...i}:e[t]=i;else{let{[t]:i,...r}=e;e=r}return e}i.d(t,{Bq:()=>s,Y8:()=>o,t7:()=>r})},3965:(e,t,i)=>{function r(e){return Buffer.from(e,"utf8").toString("hex")}function s(e){return Buffer.from(e,"hex").toString("utf8")}i.d(t,{l:()=>r,n:()=>s})},4008:(e,t,i)=>{i.d(t,{F:()=>g,X:()=>p});var r=i(1398),s=i(9703),o=i(1078),n=i(6612),a=i(892),l=i(7747),c=i(5576),u=i(7079),h=i(6613),d=i(7947);async function p(e,t,i,p){let g,m=r.window.createQuickPick();if(m.ignoreFocusOut=(0,n.dW)(),m.title=t,m.placeholder=i,m.matchOnDescription=!0,m.matchOnDetail=!0,(0,c.yL)(e)&&(m.busy=!0,m.show(),e=await e),null==e)if(m.placeholder="No commits found",p?.empty?.getState!=null){let e=await p.empty.getState();m.items=e.items,null!=e.placeholder&&(m.placeholder=e.placeholder),null!=e.title&&(m.title=e.title)}else m.items=[(0,h.Du)(h.WL.Cancel,void 0,{label:"OK"})];else m.items=await f(e);async function f(e){let t=[];return p?.showOtherReferences!=null&&t.push(...p.showOtherReferences),t.push(...(0,a.x1)(await Promise.allSettled((0,l.Tj)(e.commits.values(),async e=>(0,d.Rc)(e,p?.picked===e.ref,{compact:!0,icon:"avatar"}))),e=>"fulfilled"===e.status?e.value:void 0)),e.hasMore&&t.push((0,h.Du)(h.WL.LoadMore)),t}async function w(){m.ignoreFocusOut=!0,m.busy=!0;try{let t;if(e=await (await e)?.more?.(o.H.get("advanced.maxListItems")),null==e)if(p?.empty?.getState!=null){let e=await p.empty.getState();t=e.items,null!=e.placeholder&&(m.placeholder=e.placeholder),null!=e.title&&(m.title=e.title)}else t=[(0,h.Du)(h.WL.Cancel,void 0,{label:"OK"})];else t=await f(e);let i=-1;if(0!==m.activeItems.length){let e=m.activeItems[0];i=m.items.indexOf(e),(0,h.hr)(e)&&i--}m.items=t,i&&(m.activeItems=[m.items[i]])}finally{m.busy=!1}}p?.picked&&(m.activeItems=m.items.filter(e=>!u.Fj.is(e)&&e.picked));let v=[];if(p?.keyboard!=null){let{keyboard:e}=p;(g=s.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==m.activeItems.length){let[i]=m.activeItems;if(null!=i&&!(0,h.hr)(i)&&!u.Fj.is(i)){let r=m.ignoreFocusOut;m.ignoreFocusOut=!0,await e.onDidPressKey(t,i),m.ignoreFocusOut=r}}}}])))).start(),v.push(g)}try{let e=await new Promise(e=>{v.push(m.onDidHide(()=>e(void 0)),m.onDidAccept(()=>{if(0!==m.activeItems.length){let[t]=m.activeItems;if((0,h.hr)(t))if(t.directive===h.WL.LoadMore){w();return}else{e(void 0);return}e(t)}}),m.onDidChangeValue(e=>{null!=g&&(0!==e.length?g.pause(["left","ctrl+left","right","ctrl+right"]):g.resume())})),m.busy=!1,m.show()});if(null==e||(0,h.hr)(e))return;if(e instanceof u.Fj){await e.execute();return}return e.item}finally{m.dispose(),v.forEach(e=>void e.dispose())}}async function g(e,t,i,o){let a,p=r.window.createQuickPick();p.ignoreFocusOut=(0,n.dW)(),p.title=t,p.placeholder=i,p.matchOnDescription=!0,p.matchOnDetail=!0,(0,c.yL)(e)&&(p.busy=!0,p.show(),e=await e),null!=e&&(p.items=[...o?.showOtherReferences??[],...(0,l.Tj)(o?.filter!=null?(0,l.pb)(e.stashes.values(),o.filter):e.stashes.values(),e=>(0,d.rA)(e,o?.picked===e.ref,{compact:!0,icon:!0}))]),(null==e||p.items.length<=(o?.showOtherReferences?.length??0))&&(p.placeholder=null==e?"No stashes found":o?.empty??"No matching stashes found",p.items=[(0,h.Du)(h.WL.Cancel)]),o?.picked&&(p.activeItems=p.items.filter(e=>!u.Fj.is(e)&&e.picked));let g=[];if(o?.keyboard!=null){let{keyboard:e}=o;(a=s.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==p.activeItems.length){let[i]=p.activeItems;if(null!=i&&!(0,h.hr)(i)&&!u.Fj.is(i)){let r=p.ignoreFocusOut;p.ignoreFocusOut=!0,await e.onDidPressKey(t,i),p.ignoreFocusOut=r}}}}])))).start(),g.push(a)}try{let e=await new Promise(e=>{g.push(p.onDidHide(()=>e(void 0)),p.onDidAccept(()=>{if(0!==p.activeItems.length){let[t]=p.activeItems;if((0,h.hr)(t)){e(void 0);return}e(t)}}),p.onDidChangeValue(e=>{null!=a&&(0!==e.length?a.pause(["left","ctrl+left","right","ctrl+right"]):a.resume())})),p.busy=!1,p.show()});if(null==e||(0,h.hr)(e))return;if(e instanceof u.Fj){await e.execute();return}return e.item}finally{p.dispose(),g.forEach(e=>void e.dispose())}}},4015:(e,t,i)=>{i.d(t,{X:()=>s,h:()=>o});var r=i(457);function s(e){return null!=e&&null!=o(e)}function o(e){let t,i,s=e.match(/([^/]+\/[^/]+)\/(?:pull)\/(\d+)/);return null!=s&&(t=s[1],i=s[2]),null==i&&null!=(s=e.match(/(?:\/|^)(?:pull)\/(\d+)/))&&(i=s[1]),null!=i?{ownerAndRepo:t,prNumber:i,provider:r.Q7.GitHub}:void 0}},4030:(e,t,i)=>{i.d(t,{d:()=>p});var r=i(3529),s=i(5725),o=i(4301),n=i(9439),a=i(7747),l=i(4338),c=i(5813),u=Object.defineProperty,h=Object.getOwnPropertyDescriptor,d=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};let p=class extends l.Kt{constructor(e){super("gitlens.connectRemoteProvider"),this.container=e}static createMarkdownCommandLink(e){let t;return t=(0,r.V)(e)?{remote:e.name,repoPath:e.repoPath}:e,(0,n.J)("gitlens.connectRemoteProvider",t)}preExecute(e,t){return(0,c.qv)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i,r;if(e?.repoPath==null){let e=new Map;for(let t of this.container.git.openRepositories){let i=await t.git.remotes().getBestRemoteWithIntegration({includeDisconnected:!0});i?.provider!=null&&e.set(t,i)}if(0===e.size)return!1;if(1===e.size){let i;[i,t]=(0,a.$1)(e),r=i.path}else{let i=await (0,s.oe)(void 0,"Choose which repository to connect to the remote provider",[...e.keys()]);if(null==i)return;r=i.path,t=e.get(i)}}else if(e?.remote==null){if(r=e.repoPath,null==(t=await this.container.git.remotes(r).getBestRemoteWithIntegration({includeDisconnected:!0})))return!1}else if(r=e.repoPath,t=(i=await this.container.git.remotes(r).getRemotesWithProviders()).find(t=>t.name===e.remote),!t?.hasIntegration())return!1;let o=await this.container.integrations.getByRemote(t);if(null==o)return!1;let n=await o.connect("remoteProvider");return n&&!(i??await this.container.git.remotes(r).getRemotesWithProviders()).some(e=>e.default)&&await t.setAsDefault(!0),n}};p=d([(0,o.G5)()],p);let g=class extends l.Kt{constructor(e){super("gitlens.disconnectRemoteProvider"),this.container=e}static createMarkdownCommandLink(e){let t;return t=(0,r.V)(e)?{remote:e.name,repoPath:e.repoPath}:e,(0,n.J)("gitlens.disconnectRemoteProvider",t)}preExecute(e,t){return(0,c.qv)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i;if(e?.repoPath==null){let e=new Map;for(let t of this.container.git.openRepositories){let i=await t.git.remotes().getBestRemoteWithIntegration({includeDisconnected:!1});null!=i&&e.set(t,i)}if(0===e.size)return;if(1===e.size){let r;[r,t]=(0,a.$1)(e),i=r.path}else{let r=await (0,s.oe)(void 0,"Choose which repository to disconnect from the remote provider",[...e.keys()]);if(null==r)return;i=r.path,t=e.get(r)}}else if(e?.remote==null){if(i=e.repoPath,null==(t=await this.container.git.remotes(i).getBestRemoteWithIntegration({includeDisconnected:!1})))return}else if(i=e.repoPath,t=(await this.container.git.remotes(i).getRemotesWithProviders()).find(t=>t.name===e.remote),!t?.hasIntegration())return;let r=await this.container.integrations.getByRemote(t);return r?.disconnect()}};g=d([(0,o.G5)()],g)},4063:(e,t,i)=>{i.d(t,{l:()=>CacheableChildrenViewNode});var r=i(4342),s=i(7640),o=i(9642),n=Object.defineProperty,a=Object.getOwnPropertyDescriptor;let CacheableChildrenViewNode=class CacheableChildrenViewNode extends o.eu{_children;get children(){return this._children}set children(e){this._children!==e&&((0,s.lm)(this._children,e),this._children=e)}dispose(){super.dispose(),this.children=void 0}refresh(e=!1){e&&(this.children=void 0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?a(t,i):t,l=e.length-1;l>=0;l--)(s=e[l])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n(t,i,o)})([(0,r.Yz)()],CacheableChildrenViewNode.prototype,"refresh",1)},4111:(e,t,i)=>{i.d(t,{JG:()=>n,V3:()=>s,Vl:()=>o});var r=i(3965);function s(e){return JSON.parse((0,r.n)(e))}function o(e){return(0,r.l)(JSON.stringify(e))}function n(e){let t,[i,s]=e.split("+");if(s)try{t=JSON.parse((0,r.n)(s))}catch{}return{scheme:i,metadata:t}}},4112:(e,t,i)=>{i.d(t,{$t:()=>C,Ac:()=>w,CO:()=>v,Lt:()=>u,Ss:()=>d,TX:()=>f,U5:()=>a,VW:()=>m,XD:()=>h,d6:()=>QuickCommand,fg:()=>p,h8:()=>b,nH:()=>y,ud:()=>l,wc:()=>g,xb:()=>c});var r=i(7079),s=i(6613),o=i(1078),n=i(9565);function a(e){return"object"==typeof e&&"type"in e&&"custom"===e.type}function l(e){return"object"==typeof e&&"type"in e&&"input"===e.type}function c(e){return"object"==typeof e&&"type"in e&&"pick"===e.type}let u=Symbol("BreakStep");let QuickCommand=class QuickCommand{constructor(e,t,i,r,s){this.container=e,this.key=t,this.label=i,this.title=r,this.description=s?.description,this.detail=s?.detail}description;detail;initialState;_currentStep;_stepsIterator;get canConfirm(){return!0}get canSkipConfirm(){return!0}_picked=!1;get picked(){return this._picked}set picked(e){this._picked=e,e||(this._pickedVia="menu")}_pickedVia="menu";get pickedVia(){return this._pickedVia}set pickedVia(e){this._pickedVia=e}get skipConfirmKey(){return`${this.key}:${this.pickedVia}`}get value(){return this._currentStep}confirm(e){return!this.canConfirm||!this.canSkipConfirm||(null!=e?e:!o.H.get("gitCommands.skipConfirmations").includes(this.skipConfirmKey))}isMatch(e){return this.key===e}isFuzzyMatch(e){return this.label===e}executeSteps(){return this.steps(this.getStepState(!0))}async previous(){return(await this.next(s.WL.Back)).value}async next(e){null==this._stepsIterator&&(this._stepsIterator=this.steps(this.getStepState(!1)));let t=await this._stepsIterator.next(e);return(t.done&&(this.initialState=void 0,this._stepsIterator=void 0),t.value===u)?(this._currentStep=void 0,{...t,value:void 0}):(this._currentStep=t.value,t)}async retry(){return await this.next(s.WL.Noop),this.value}canStepsContinue(e){return e.counter>=(e.startingStep??0)}createConfirmStep(e,t,i,r={}){return m(e,t,{title:this.title},i,r)}getStepState(e){return{counter:0,...this.initialState,startingStep:e?this.initialState?.counter??0:0}}};function h(e){return e instanceof QuickCommand}async function d(e,t,i){if(!g(e,t,i))return!1;let[r]=await e.validate?.(i)??[!0];return!!r&&(t.counter++,!0)}function p(e,t,i){return!!g(e,t,i)&&!!(e.validate?.(i)??!0)&&(t.counter++,!0)}function g(e,t,i){if(null==i)return!1;if((0,s.qT)(i)){switch(i){case s.WL.Back:t.counter--,t.counter<=(t.startingStep??0)&&(t.counter=0);break;case s.WL.Cancel:y(t)}return!1}return!0}function m(e,t,i,o,n){return w({isConfirmationStep:!0,placeholder:`Confirm ${i.title}`,title:e,ignoreFocusOut:!0,items:[...t,(0,r.uK)(),o??(0,s.Du)(s.WL.Cancel)],selectedItems:[t.find(e=>e.picked)??t[0]],...n})}function f(e){let t=e.onDidActivate;return(e={type:"input",...e,ignoreFocusOut:!0}).onDidActivate=i=>{e.input=i,e.freeze=()=>(i.enabled=!1,e.frozen=!0,(0,n.Nx)(()=>{e.frozen=!1,i.enabled=!0,i.show()},{once:!0})),t?.(i)},e}function w(e){let t=e.onDidActivate;return(e={type:"pick",...e}).onDidActivate=i=>{e.quickpick=i,e.freeze=()=>{i.enabled=!1;let t=i.ignoreFocusOut;return i.ignoreFocusOut=!0,e.frozen=!0,(0,n.Nx)(()=>{e.frozen=!1,i.enabled=!0,i.ignoreFocusOut=t,i.show()},{once:!0})},t?.(i)},e}function v(e){return{type:"custom",...e}}function y(e){e.counter=-1}function b(e){return null!=e.command}function C(e,t){return{command:e,args:t}}},4135:(e,t,i)=>{i.d(t,{Ep:()=>o,Kt:()=>r,kj:()=>n,qn:()=>c,tY:()=>s,zZ:()=>u});let r=3,s=1,o=0,n=14;var a,l,c=((a=c||{}).Community="community",a.CommunityWithAccount="community-with-account",a.Pro="pro",a.Advanced="advanced",a.Business="teams",a.Enterprise="enterprise",a),u=((l=u||{})[l.VerificationRequired=-1]="VerificationRequired",l[l.Community=0]="Community",l[l.ProPreview=1]="ProPreview",l[l.ProPreviewExpired=2]="ProPreviewExpired",l[l.ProTrial=3]="ProTrial",l[l.ProTrialExpired=4]="ProTrialExpired",l[l.ProTrialReactivationEligible=5]="ProTrialReactivationEligible",l[l.Paid=6]="Paid",l)},4162:(e,t,i)=>{i.d(t,{e:()=>Stopwatch,u:()=>n});var r=i(97),s=i(7005),o=i(5419);Symbol.dispose??=Symbol("Symbol.dispose"),Symbol.asyncDispose??=Symbol("Symbol.asyncDispose");let Stopwatch=class Stopwatch{logScope;logLevel;logProvider;_time;get startTime(){return this._time}_stopped=!1;constructor(e,t,...i){let n;if(this.logScope=null!=e&&"string"!=typeof e?e:(0,o.jr)(e??"",!1),n="boolean"==typeof t?.log?t.log?{}:void 0:t?.log??{},this.logLevel=t?.logLevel??"info",this.logProvider=t?.provider??s.nH,this._time=(0,r.k)(),null!=n){if(!this.logProvider.enabled(this.logLevel))return;i.length?this.logProvider.log(this.logLevel,this.logScope,`${n.message??""}${n.suffix??""}`,...i):this.logProvider.log(this.logLevel,this.logScope,`${n.message??""}${n.suffix??""}`)}}[Symbol.dispose](){this.stop()}elapsed(){let[e,t]=(0,r.k)(this._time);return 1e3*e+Math.floor(t/1e6)}log(e){this.logCore(e,!1)}restart(e){this.logCore(e,!0),this._time=(0,r.k)(),this._stopped=!1}stop(e){this._stopped||(this.restart(e),this._stopped=!0)}logCore(e,t){if(!this.logProvider.enabled(this.logLevel))return;if(!t){this.logProvider.log(this.logLevel,this.logScope,`${e?.message??""}${e?.suffix??""}`);return}let[i,s]=(0,r.k)(this._time),o=1e3*i+Math.floor(s/1e6),n=e?.message??"";this.logProvider.log(o>250?"warn":this.logLevel,this.logScope,`${n?`${n} `:""}[${o}ms]${e?.suffix??""}`)}};function n(e,t,...i){return(t?.provider??s.nH).enabled(t?.logLevel??"info")?new Stopwatch(e,t,...i):void 0}},4199:(e,t,i)=>{i.d(t,{c:()=>CommitFormatter});var r=i(6525),s=i(8587),o=i(6386),n=i(4330),a=i(5894),l=i(4030),c=i(905),u=i(1518),h=i(3096),d=i(9703),p=i(6796),g=i(4521),m=i(1078),f=i(9439),w=i(7747),v=i(4704),y=i(5576),b=i(3934),C=i(1974),k=i(7335),S=i(6066),R=i(8811),P=i(3447),A=i(8557),I=i(8554),D=i(4992);let CommitFormatter=class CommitFormatter extends D.Z{reset(e,t){super.reset(e,t),null==this._options.outputFormat&&(this._options.outputFormat="plaintext")}get _authorDate(){return this._item.author.formatDate(this._options.dateFormat)}get _authorDateAgo(){return this._item.author.fromNow()}get _authorDateAgoShort(){return this._item.author.fromNow(!0)}get _committerDate(){return this._item.committer.formatDate(this._options.dateFormat)}get _committerDateAgo(){return this._item.committer.fromNow()}get _committerDateAgoShort(){return this._item.committer.fromNow(!0)}get _date(){return this._item.formatDate(this._options.dateFormat)}get _dateAgo(){return this._item.formatDateFromNow()}get _dateAgoShort(){return this._item.formatDateFromNow(!0)}get _pullRequestDate(){let{pullRequest:e}=this._options;return null!=e&&(0,k.r0)(e)?e.formatDate(this._options.dateFormat)??"":""}get _pullRequestDateAgo(){let{pullRequest:e}=this._options;return null!=e&&(0,k.r0)(e)?e.formatDateFromNow()??"":""}get _pullRequestDateOrAgo(){return"absolute"===(null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle"))?this._pullRequestDate:this._pullRequestDateAgo}get ago(){return this._padOrTruncate(this._dateAgo,this._options.tokenOptions.ago)}get agoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgo,this._options.tokenOptions.agoOrDate)}get agoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgoShort,this._options.tokenOptions.agoOrDateShort)}get author(){return this.formatAuthor(this._item.author.name,this._item.author.email,this._options.tokenOptions.author)}get authorFirst(){let[e]=this._item.author.name.split(" ");return this.formatAuthor(e,this._item.author.email,this._options.tokenOptions.authorFirst)}get authorLast(){let[e,t]=this._item.author.name.split(" ");return this.formatAuthor(t||e,this._item.author.email,this._options.tokenOptions.authorLast)}formatAuthor(e,t,i){let r=this._padOrTruncate(e,i);switch(this._options.outputFormat){case"markdown":return`[${r}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,b.yz)(e),t=(0,b.yz)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${r}</a>`;default:return r}}get authorAgo(){return this._padOrTruncate(this._authorDateAgo,this._options.tokenOptions.authorAgo)}get authorAgoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgo,this._options.tokenOptions.authorAgoOrDate)}get authorAgoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgoShort,this._options.tokenOptions.authorAgoOrDateShort)}get authorDate(){return this._padOrTruncate(this._authorDate,this._options.tokenOptions.authorDate)}get authorNotYou(){let{name:e,email:t}=this._item.author;if("You"===e)return this._padOrTruncate("",this._options.tokenOptions.authorNotYou);let i=this._padOrTruncate(e,this._options.tokenOptions.authorNotYou);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,b.yz)(e),t=(0,b.yz)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get avatar(){let{outputFormat:e}=this._options;if("plaintext"===e||!m.H.get("hovers.avatars"))return this._padOrTruncate("",this._options.tokenOptions.avatar);let{name:t}=this._item.author,i=this._options.presence;if((0,y.yL)(i)&&(i={status:"offline",statusText:"Offline"}),null!=i){let r=`${t} ${"You"===t?"are":"is"} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;return"html"===e&&(r=(0,b.yz)(r)),this._getAvatar(e,r,this._options.avatarSize).then(t=>this._padOrTruncate(`${t}${this._getPresence(e,i,r)}`,this._options.tokenOptions.avatar))}return"html"===e&&(t=(0,b.yz)(t)),this._getAvatar(e,t,this._options.avatarSize)}async _getAvatar(e,t,i){i=i??m.H.get("hovers.avatarSize");let r=this._item.getAvatarUri({defaultStyle:m.H.get("defaultGravatarsStyle"),size:i}),s=(await r).toString(!0);return this._padOrTruncate("html"===e?`<img src="${s}" alt="title)" title="${t}" width="${i}" height="${i}"${this._options.htmlFormat?.classes?.avatar?` class="${this._options.htmlFormat.classes.avatar}"`:""} />`:`![${t}](${s}|width=${i},height=${i} "${t}")`,this._options.tokenOptions.avatar)}_getPresence(e,t,i){return"html"===e?`<img src="${(0,r.Sk)(t.status)}" alt="${i}" title="${i}"${this._options.htmlFormat?.classes?.avatarPresence?` class="${this._options.htmlFormat.classes.avatarPresence}"`:""}/>`:`![${i}](${(0,r.Sk)(t.status)} "${i}")`}get changes(){if(!(0,C.WM)(this._item)||null==this._item.stats)return this._padOrTruncate("",this._options.tokenOptions.changes);let e=this._item.formatStats("stats","plaintext"!==this._options.outputFormat?{color:!0}:void 0);return this._padOrTruncate(e,this._options.tokenOptions.changes)}get changesDetail(){if(!(0,C.WM)(this._item)||null==this._item.stats)return this._padOrTruncate("",this._options.tokenOptions.changesDetail);let e=this._item.formatStats("stats","plaintext"!==this._options.outputFormat?{color:!0}:void 0),t=this._item.formatStats("expanded",{addParenthesesToFileStats:!0,color:"plaintext"!==this._options.outputFormat,separator:", "});return t&&(e+=` ${t}`),this._padOrTruncate(e,this._options.tokenOptions.changesDetail)}get changesShort(){if(!(0,C.WM)(this._item)||null==this._item.stats)return this._padOrTruncate("",this._options.tokenOptions.changesShort);let e=this._item.formatStats("short",{separator:""});return this._padOrTruncate(e,this._options.tokenOptions.changesShort)}get commands(){let e;if("plaintext"===this._options.outputFormat||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.commands);if(this._item.isUncommitted){let{previousLineComparisonUris:e}=this._options;return e?.previous!=null?`[\`${this._padOrTruncate((0,I.pV)((0,I.KH)(e.current.sha)?e.current.sha:S.SU),this._options.tokenOptions.commands)}\`](${o.G.createMarkdownCommandLink(this._item.sha,this._item.repoPath)} "Inspect Commit Details") &nbsp;[$(chevron-left)$(compare-changes)](${s.T.createMarkdownCommandLink({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:this._item.repoPath,line:this._options.editor?.line})} "Open Changes with Previous Revision") &nbsp;[$(versions)](${a.E.createMarkdownCommandLink(d.m.instance.git.getRevisionUri(e.previous),"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`:`[\`${this._padOrTruncate((0,I.pV)(this._item.isUncommittedStaged?S.id:S.SU),this._options.tokenOptions.commands)}\`](${o.G.createMarkdownCommandLink(this._item.sha,this._item.repoPath)} "Inspect Commit Details")`}let t=" &nbsp;&nbsp;|&nbsp;&nbsp; ";if(e=`---

[\`$(git-commit) ${this.id}\`](${o.G.createMarkdownCommandLink(this._item.sha,this._item.repoPath)} "Inspect Commit Details") &nbsp;[$(chevron-left)$(compare-changes)](${s.T.createMarkdownCommandLink(this._item,this._options.editor?.line)} "Open Changes with Previous Revision")`,null!=this._item.file&&null!=this._item.unresolvedPreviousSha){let t=d.m.instance.git.getRevisionUri(this._item.unresolvedPreviousSha,this._item.file.originalPath??this._item.file?.path,this._item.repoPath);e+=` &nbsp;[$(versions)](${a.E.createMarkdownCommandLink(t,"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`}e+=` &nbsp;[$(search)](${(0,f.J)("gitlens.revealCommitInView",{repoPath:this._item.repoPath,sha:this._item.sha,revealInView:!0})} "Reveal in Side Bar")`,(0,g.LK)()&&(e+=` &nbsp;[$(gitlens-graph)](${(0,f.J)("gitlens.showInCommitGraph",{ref:(0,P.rd)(this._item,{excludeMessage:!0})})} "Open in Commit Graph")`);let{pullRequest:i,remotes:r}=this._options;if(r?.length){let t=(0,A.zF)(r);e+=` &nbsp;[$(globe)](${n.y.createMarkdownCommandLink(this._item.sha)} "Open Commit on ${t?.length?t[0].name:"Remote"}")`}if(null!=i)(0,k.r0)(i)?e+=`${t}[$(git-pull-request) PR #${i.id}](${$("openPullRequest",{repoPath:this._item.repoPath,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain},pullRequest:{id:i.id,url:i.url}})} "Open Pull Request \\#${i.id}${1===d.m.instance.actionRunners.count("openPullRequest")?` on ${i.provider.name}`:"..."}
${u.EO.Dash.repeat(2)}
${(0,v.FV)(i.title).replace(/"/g,'\\"')}
${i.state}, ${i.formatDateFromNow()}")`:(0,y.yL)(i)&&(e+=`${t}[$(git-pull-request) PR $(loading~spin)](${(0,f.J)("gitlens.refreshHover",void 0)} "Searching for a Pull Request (if any) that introduced this commit...")`);else if(null!=r){let[i]=r;i?.hasIntegration()&&!i.maybeIntegrationConnected&&m.H.get("integrations.enabled")&&(e+=`${t}[$(plug) Connect to ${i?.provider.name}${u.EO.Ellipsis}](${l.d.createMarkdownCommandLink(i)} "Connect to ${i.provider.name} to enable the display of the Pull Request (if any) that introduced this commit")`)}if(d.m.instance.actionRunners.count("hover.commands")>0){let{name:i,email:r}=this._item.author;e+=`${t}[$(organization) Team${u.EO.SpaceThinnest}${u.EO.Ellipsis}](${$("hover.commands",{repoPath:this._item.repoPath,commit:{sha:this._item.sha,author:{name:i,email:r,presence:this._options.presence}},file:null!=this._options.editor?{uri:this._options.editor?.uri.toString(),line:this._options.editor?.line}:void 0})} "Show Team Actions")`}let h=this._item.getGitUri();return e+=`${t}[$(ellipsis)](${c.N.createMarkdownCommandLink(null!=h?{revisionUri:d.m.instance.git.getRevisionUri(h).toString(!0)}:{commit:this._item})} "Show More Actions")`,this._padOrTruncate(e,this._options.tokenOptions.commands)}get committerAgo(){return this._padOrTruncate(this._committerDateAgo,this._options.tokenOptions.committerAgo)}get committerAgoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgo,this._options.tokenOptions.committerAgoOrDate)}get committerAgoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgoShort,this._options.tokenOptions.committerAgoOrDateShort)}get committerDate(){return this._padOrTruncate(this._committerDate,this._options.tokenOptions.committerDate)}get date(){return this._padOrTruncate(this._date,this._options.tokenOptions.date)}get email(){let{email:e}=this._item.author;return this._padOrTruncate(e??"",this._options.tokenOptions.email)}get footnotes(){if(null==this._options.footnotes||0===this._options.footnotes.size)return"";let{footnotes:e,outputFormat:t}=this._options,i=new Map;for(let[t,r]of e){let e=i.get(r);null==e?(e=[(0,b.VU)(t)],i.set(r,e)):e.push((0,b.VU)(t))}return"plaintext"===t?this._padOrTruncate((0,w.fj)((0,w.Tj)(i,([e,t])=>`${t.join(",")} ${e}`),"\n"),this._options.tokenOptions.footnotes):this._padOrTruncate((0,w.fj)(i.keys(),"html"===t?"<br \\>":"markdown"===t?"\\\n":"\n"),this._options.tokenOptions.footnotes)}get id(){let e=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);return"plaintext"!==this._options.outputFormat&&this._options.unpublished?`<span style="color:#35b15e;"${this._options.htmlFormat?.classes?.id?` class="${this._options.htmlFormat.classes.id}"`:""}>${e} (unpublished)</span>`:e}get link(){let e,t,i;switch((0,C.kk)(this._item)?(e="archive",t=this._padOrTruncate(`Stash${this._item.number?` #${this._item.number}`:""}`,this._options.tokenOptions.link)):(e=null==this._item.sha||this._item.isUncommitted?"":"git-commit",t=this._padOrTruncate((0,I.pV)(this._item.sha??"",{strings:{working:"Working Tree"}}),this._options.tokenOptions.id)),this._options.outputFormat){case"markdown":e=e?`$(${e}) `:"",i=`[\`${e}${t}\`](${o.G.createMarkdownCommandLink({ref:(0,P.rd)(this._item)})} "Inspect Commit Details")`;break;case"html":e=e?`<span class="codicon codicon-${e}"></span>`:"",i=`<a href="${o.G.createMarkdownCommandLink({ref:(0,P.rd)(this._item)})}" title="Inspect Commit Details"${this._options.htmlFormat?.classes?.link?` class="${this._options.htmlFormat.classes.link}"`:""}>${e}${t}</a>`;break;default:i=this.id}return this._padOrTruncate(i,this._options.tokenOptions.link)}get message(){let{outputFormat:e}=this._options;if(this._item.isUncommitted){let t=this._item.file?.hasConflicts??!1,i=this._item.isUncommittedStaged||(this._options.previousLineComparisonUris?.current?.isUncommittedStaged??!1),r=`${t?"Merge":i?"Staged":"Uncommitted"} changes`;switch(e){case"html":r=`<span ${this._options.htmlFormat?.classes?.message?`class="${this._options.htmlFormat.classes.message}"`:""}>${r}</span>`;break;case"markdown":r=`
> ${r}`}return this._padOrTruncate(r,this._options.tokenOptions.message)}let t=(this._options.messageTruncateAtNewLine?this._item.summary:this._item.message??this._item.summary).trim().replace(/\r?\n/g,"\n");switch(t=(0,p.E)(t),t=this._padOrTruncate(t,this._options.tokenOptions.message),"plaintext"!==e&&(t=(0,b.yz)(t)),"markdown"===e&&(t=(0,v.FV)(t,{quoted:!0,inlineBackticks:!0})),this._options.messageAutolinks&&(t=d.m.instance.autolinks.linkify(t,e,this._options.remotes,this._options.enrichedAutolinks,null==this._options.pullRequest||(0,y.yL)(this._options.pullRequest)?void 0:new Set([this._options.pullRequest.id]),this._options.footnotes)),null!=this._options.messageIndent&&"plaintext"===e&&(t=t.replace(/^/gm,u.EO.Space.repeat(this._options.messageIndent))),e){case"html":return`<span ${this._options.htmlFormat?.classes?.id?`class="${this._options.htmlFormat.classes.id}"`:""}>${t}</span>`;case"markdown":return`
> ${t}`;default:return t}}get pullRequest(){let e,{pullRequest:t}=this._options;if(null==t||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.pullRequest);if((0,k.r0)(t))if("markdown"===this._options.outputFormat){if(e=`[**$(git-pull-request) PR #${t.id}**](${$("openPullRequest",{repoPath:this._item.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})} "Open Pull Request \\#${t.id}${1===d.m.instance.actionRunners.count("openPullRequest")?` on ${t.provider.name}`:"..."}
${u.EO.Dash.repeat(2)}
${(0,v.FV)(t.title).replace(/"/g,'\\"')}
${t.state}, ${t.formatDateFromNow()}")`,null!=this._options.footnotes){let e=(0,v.FV)(t.title).replace(/"/g,'\\"').trim(),i=this._options.footnotes.size+1;this._options.footnotes.set(i,`${(0,R.xu)(t)} [**${e}**](${t.url} "Open Pull Request \\#${t.id} on ${t.provider.name}")\\
${u.EO.Space.repeat(4)} #${t.id} ${t.state} ${t.formatDateFromNow()}`)}}else if(null!=this._options.footnotes){let i=this._options.footnotes.size+1;this._options.footnotes.set(i,`PR #${t.id}: ${t.title}  ${u.EO.Dot}  ${t.state}, ${t.formatDateFromNow()}`),e=`PR #${t.id}${(0,b.VU)(i)}`}else e=`PR #${t.id}`;else{if(!(0,y.yL)(t))return this._padOrTruncate("",this._options.tokenOptions.pullRequest);e="markdown"===this._options.outputFormat?`[PR $(loading~spin)](${(0,f.J)("gitlens.refreshHover",void 0)} "Searching for a Pull Request (if any) that introduced this commit...")`:this._options?.pullRequestPendingMessage??""}return this._padOrTruncate(e,this._options.tokenOptions.pullRequest)}get pullRequestAgo(){return this._padOrTruncate(this._pullRequestDateAgo,this._options.tokenOptions.pullRequestAgo)}get pullRequestAgoOrDate(){return this._padOrTruncate(this._pullRequestDateOrAgo,this._options.tokenOptions.pullRequestAgoOrDate)}get pullRequestDate(){return this._padOrTruncate(this._pullRequestDate,this._options.tokenOptions.pullRequestDate)}get pullRequestState(){let{pullRequest:e}=this._options;return this._padOrTruncate(null!=e&&(0,k.r0)(e)?e.state??"":"",this._options.tokenOptions.pullRequestState)}get sha(){return this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.sha)}get stashName(){return this._padOrTruncate(this._item.stashName??"",this._options.tokenOptions.stashName)}get stashNumber(){return this._padOrTruncate(this._item.number??"",this._options.tokenOptions.stashNumber)}get stashOnRef(){return this._padOrTruncate(this._item.stashOnRef??"",this._options.tokenOptions.stashOnRef)}get tips(){let e=this._options.getBranchAndTagTips?.(this._item.sha,{icons:"markdown"===this._options.outputFormat,pills:"markdown"===this._options.outputFormat||"html"===this._options.outputFormat&&(!this._options.htmlFormat?.classes?.tips||{cssClass:this._options.htmlFormat.classes.tips})});return this._padOrTruncate(e??"",this._options.tokenOptions.tips)}static fromTemplate(e,t,i){if((null==i||"string"==typeof i)&&(i={dateFormat:i}),CommitFormatter.has(e,"footnotes")&&null==i.footnotes&&(i.footnotes=new Map),CommitFormatter.has(e,"avatar")&&i?.outputFormat)throw Error("Invalid template token 'avatar' used in non-async call");return super.fromTemplateCore(this,e,t,i)}static fromTemplateAsync(e,t,i){return CommitFormatter.has(e,"footnotes")&&((null==i||"string"==typeof i)&&(i={dateFormat:i}),null==i.footnotes&&(i.footnotes=new Map)),super.fromTemplateCoreAsync(this,e,t,i)}static has(e,...t){return super.has(e,...t)}};function $(e,t){return(0,f.J)(`${h._}${e}`,{...t,type:e})}},4252:(e,t,i)=>{i.d(t,{h:()=>a,o1:()=>n,u$:()=>ViewFileNode});var r=i(1398),s=i(5030),o=i(9642);let ViewFileNode=class ViewFileNode extends o.eu{constructor(e,t,i,r,s){super(e,t,i,r),this.parent=r,this.file=s}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${this.file.path}`}};function n(e,t,i){return s.Z.fromTemplate(`\${status${t?`' ${t}'`:""}} $(file) \${filePath}\${  \u2190  originalPath}\${'\\
'changesDetail}`,e,{outputFormat:i??"markdown"})}function a(e,t){let i=new r.MarkdownString(n(e,t,"markdown"),!0);return i.supportHtml=!0,i.isTrusted=!0,i}},4300:(e,t,i)=>{i.d(t,{h:()=>LocalWorkspace});let LocalWorkspace=class LocalWorkspace{constructor(e,t,i,r,s,o){this.container=e,this.id=t,this.name=i,this.repositoryDescriptors=r,this.current=s,this._localPath=o,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="local";_localPath;_repositoriesByName;_disposable;dispose(){this._disposable.dispose()}get shared(){return!1}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}getRepositoryDescriptors(){return Promise.resolve(this.repositoryDescriptors)}getRepositoryDescriptor(e){return Promise.resolve(this.repositoryDescriptors.find(t=>t.name===e))}setLocalPath(e){this._localPath=e}}},4301:(e,t,i)=>{i.d(t,{G5:()=>l,Ip:()=>u,Jl:()=>f,Lb:()=>c,RS:()=>m,S4:()=>w,Y0:()=>y,c6:()=>g,gu:()=>p,ph:()=>d,wS:()=>v,yd:()=>h});var r=i(1398),s=i(3096),o=i(9703),n=i(710);let a=[];function l(){return e=>{a.push(e)}}function c(e,t,i){return r.commands.registerCommand(e,function(...i){let r;if("gitlens.gitCommands"===e){let e=i?.[0];e?.command!=null&&(r={mode:i[0].command},e?.state?.subcommand!=null&&(r.submode=e.state.subcommand))}o.m.instance.telemetry.sendEvent("command",{command:e,"context.mode":r?.mode,"context.submode":r?.submode}),e.startsWith("gitlens.graph.")?o.m.instance.telemetry.sendEvent("graph/command",{command:e,"context.mode":r?.mode,"context.submode":r?.submode}):e.startsWith("gitlens.home.")&&o.m.instance.telemetry.sendEvent("home/command",{command:e,"context.mode":r?.mode,"context.submode":r?.submode}),o.m.instance.usage.track(`command:${e}:executed`).catch(),t.call(this,...i)},i)}function u(e,t,i){return r.commands.registerCommand(e,function(...i){let r=(0,n.RR)(i[0])?i[0].webview:void 0;o.m.instance.telemetry.sendEvent("command",{command:e,webview:r??"<missing>"}),"gitlens.graph"===r||"gitlens.views.graph"===r||e.startsWith("gitlens.graph.")?o.m.instance.telemetry.sendEvent("graph/command",{command:e,webview:r??"<missing>"}):("gitlens.views.home"===r||e.startsWith("gitlens.home."))&&o.m.instance.telemetry.sendEvent("home/command",{command:e,webview:r??"<missing>"}),o.m.instance.usage.track(`command:${e}:executed`).catch(),t.call(this,...i)},i)}function h(e){return a.map(t=>new t(e))}function d(e,t,i){return r.commands.executeCommand(`${s._}${e}`,{...t,type:e},i)}function p(e,t,...i){return{command:e,title:t,arguments:i}}function g(e,t){return{command:e,args:t}}function m(e,...t){return r.commands.executeCommand(e,...t)}function f(e,t,...i){return{command:e,title:t,arguments:i}}function w(e,...t){return"setContext"!==e&&"vscode.executeDocumentSymbolProvider"!==e&&"vscode.changes"!==e&&"vscode.diff"!==e&&"vscode.open"!==e&&o.m.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function v(e,...t){return o.m.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function y(e,t,i){return r.commands.executeCommand(e,t,i)}},4330:(e,t,i)=>{i.d(t,{y:()=>w});var r=i(3088),s=i(3949),o=i(6066),n=i(8554),a=i(9403),l=i(5725),c=i(4301),u=i(9439),h=i(7005),d=i(4338),p=i(2713),g=i(5813),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor;let w=class extends d.Zr{constructor(e){super(["gitlens.openCommitOnRemote","gitlens.copyRemoteCommitUrl"],["gitlens.openCommitInRemote"]),this.container=e}static createMarkdownCommandLink(e){return(0,u.J)("gitlens.openCommitOnRemote","string"==typeof e?{sha:e}:e)}preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line}),(0,g.j7)(e)){if(e.node.commit.isUncommitted)return Promise.resolve(void 0);t={...t,sha:e.node.commit.sha},i=e.node.uri}return(0,g.Bp)(e)&&(t={sha:e.item.ref},i=e.uri),"gitlens.copyRemoteCommitUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(e.editor,i,t)}async execute(e,t,i){let u=null!=(t=(0,p.q)(t,e))?await r.nk.fromUri(t):void 0,d=(await (0,l.X)(u,e,i?.clipboard?"Copy Remote Commit URL":"Open Commit On Remote"))?.path;if(d){null==u&&(u=r.nk.fromRepoPath(d)),i={...i};try{if(null==i.sha){let t=i.line??e?.selection.active.line;if(null==t)return;let r=await this.container.git.getBlameForLine(u,t,e?.document);if(null==r){(0,a.gD)(i?.clipboard?"Unable to copy the commit SHA":"Unable to open the commit on the remote provider");return}i.sha=r.commit.isUncommitted?await r.commit.getPreviousSha()??o.nB:r.commit.sha}if(null==i.sha||i.sha===o.nB||(0,n._k)(i.sha)){(0,a.pW)(i?.clipboard?"Unable to copy the commit SHA":"Unable to open the commit on the remote provider");return}await (0,c.RS)("gitlens.openOnRemote",{resource:{type:s.J.Commit,sha:i.sha},repoPath:d,clipboard:i.clipboard})}catch(e){h.Vy.error(e,"OpenCommitOnRemoteCommand"),(0,a.qQ)("Unable to open commit on remote provider")}}}};w=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o})([(0,c.G5)()],w)},4338:(e,t,i)=>{let r;i.d(t,{DX:()=>EditorCommand,EL:()=>a,Kt:()=>GlCommandBase,Zr:()=>ActiveEditorCommand,dY:()=>ActiveEditorCachedCommand});var s=i(1398),o=i(4301),n=i(5813);let GlCommandBase=class GlCommandBase{contextParsingOptions={expectsEditor:!1};_disposable;constructor(e,t){let i=[..."string"==typeof e?[e]:e,...t??[]].map(e=>(0,o.Lb)(e,(...t)=>this._execute(e,...t),this));this._disposable=s.Disposable.from(...i)}dispose(){this._disposable.dispose()}preExecute(e,...t){return this.execute(...t)}_execute(e,...t){let[i,r]=(0,n.qU)(e,{...this.contextParsingOptions},...t);return this.preExecute(i,...r)}};let ActiveEditorCommand=class ActiveEditorCommand extends GlCommandBase{contextParsingOptions={expectsEditor:!0};preExecute(e,...t){return this.execute(e.editor,e.uri,...t)}_execute(e,...t){return super._execute(e,void 0,...t)}};function a(){return r}let ActiveEditorCachedCommand=class ActiveEditorCachedCommand extends ActiveEditorCommand{_execute(e,...t){return r={command:e,args:t},super._execute(e,...t)}};let EditorCommand=class EditorCommand{_disposable;constructor(e){Array.isArray(e)||(e=[e]);let t=[];for(let i of e)t.push(s.commands.registerTextEditorCommand(i,(e,t,...r)=>this.executeCore(i,e,t,...r),this));this._disposable=s.Disposable.from(...t)}dispose(){this._disposable.dispose()}executeCore(e,t,i,...r){return this.execute(t,i,...r)}}},4342:(e,t,i)=>{i.d(t,{Is:()=>h,Rm:()=>p,Yz:()=>d,z1:()=>u});var r=i(97),s=i(4465),o=i(7005),n=i(5758),a=i(5419),l=i(5576),c=i(3934);let u=Symbol("logInstanceNameFn");function h(e){return t=>{t[u]=e}}function d(e){return p(e,!0)}function p(e,t=!1){let i,u,h,d,g,m=0,f=!1,w=!1,v=!0;null!=e&&({args:i,if:u,enter:h,exit:d,prefix:g,logThreshold:m=0,scoped:f=!0,singleLine:w=!1,timed:v=!0}=e),m>0&&(w=!0,v=!0),v&&(f=!0);let y=o.Vy.isDebugging,b=t?o.Vy.debug:o.Vy.log,C=y?"debug":"info";return(e,t,p)=>{let k,S;if("function"==typeof p.value?(k=p.value,S="value"):"function"==typeof p.get&&(k=p.get,S="get"),null==k||null==S)throw Error("Not supported");let R=!1!==i?(0,s.bQ)(k):[];p[S]=function(...e){let s,p;if(!y&&!o.Vy.enabled(C)||null!=u&&!u.apply(this,e))return k.apply(this,e);let S=a.$e.current,P=a.$e.next(),A=this!=null?(0,o.zu)(this):void 0,I=A?f?`${(0,a.rL)(P,S)} ${A}.${t}`:`${A}.${t}`:t;null!=g&&(I=g({id:P,instance:this,instanceName:A??"",name:t,prefix:I},...e)),f&&(s=(0,a.DL)(P,{scopeId:P,prevScopeId:S,prefix:I}));let D=null!=h?h(...e):"";if(!1===i||0===e.length)p="",w||b.call(o.Vy,`${I}${D}`);else{let t,r,s,n;p="";let a=-1;for(n of e){if(r=R[++a],null!=(t=i?.[a])){if("boolean"==typeof t)continue;if(p.length>0&&(p+=", "),"string"==typeof t){p+=t;continue}s=String(t(n))}else p.length>0&&(p+=", "),s=o.Vy.toLoggable(n);p+=r?`${r}=${s}`:s}w||b.call(o.Vy,p?`${I}${D}(${p})`:`${I}${D}`)}if(w||v||null!=d){let t,i=v?(0,r.k)():void 0,u=e=>{let t=void 0!==i?` [${(0,c.$l)(i)}ms]`:"";w?o.Vy.error(e,p?`${I}${D}(${p})`:`${I}${D}`,s?.exitDetails?`failed${s.exitDetails}${t}`:`failed${t}`):o.Vy.error(e,I,s?.exitDetails?`failed${s.exitDetails}${t}`:`failed${t}`),f&&(0,a.aE)(P)};try{t=k.apply(this,e)}catch(e){throw u(e),e}let h=e=>{let t,r,l,u;if(null!=i?(t=(0,c.$l)(i))>n.H?(r=o.Vy.warn,l=` [*${t}ms] (slow)`):(r=b,l=` [${t}ms]`):(l="",r=b),null!=d)if("function"==typeof d)try{u=d(e)}catch(e){u=`@log.exit error: ${e}`}else!0===d&&(u=`returned ${o.Vy.toLoggable(e)}`);else s?.exitFailed?(u=s.exitFailed,r=(e,...t)=>o.Vy.error(null,e,...t)):u="completed";w?(0===m||t>m)&&r.call(o.Vy,p?`${I}${D}(${p}) ${u}${s?.exitDetails||""}${l}`:`${I}${D} ${u}${s?.exitDetails||""}${l}`):r.call(o.Vy,p?`${I}(${p}) ${u}${s?.exitDetails||""}${l}`:`${I} ${u}${s?.exitDetails||""}${l}`),f&&(0,a.aE)(P)};return null!=t&&(0,l.yL)(t)?t.then(h,u):h(t),t}return k.apply(this,e)}}}},4429:(e,t,i)=>{i.d(t,{F6:()=>UriTrie,ZZ:()=>VisitedPathsTrie,m9:()=>PathTrie});var r=i(5565),s=i(7747),o=i(6006);function n(e){return 47===(e=(0,o.Fd)(e)).charCodeAt(0)&&(e=e.slice(1)),e}let UriTrie=class UriTrie{constructor(e){this.normalize=e,this.trie=new PathTrie}trie;clear(){this.trie.clear()}delete(e,t=!0){let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.delete(i,r,t)}get(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.get(t,i)}getChildren(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.getChildren(t,i)}getClosest(e,t,i){let{path:r,ignoreCase:s}=this.normalize(e);return this.trie.getClosest(r,t,i,s)}getDescendants(e,t){if(null==e)return this.trie.getDescendants();let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.getDescendants(i,t,r)}has(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.has(t,i)}set(e,t){let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.set(i,t,r)}};let PathNode=class PathNode{constructor(e){this.path=e}value;children};let PathTrie=class PathTrie{constructor(e=n){this.normalize=e,this.root=new PathNode("")}root;clear(){this.root.children=void 0}delete(e,t,i=!0){let s,o;for(let i of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(s??this.root).children?.get(t?i.toLowerCase():i);if(null==e)return!1;o=s??this.root,s=e}return!!s?.value&&(i&&a(s.value),s.value=void 0,(null==s.children||0===s.children.size)&&o?.children!=null&&(o.children.delete(t?s.path.toLowerCase():s.path),0===o.children.size&&(o.children=void 0)),!0)}get(e,t){return this.getCore(e,t)}getCore(e,t){let i;for(let s of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return;i=e}return i?.value}getChildren(e,t){let i;if(e=this.normalize(e),t=t??!r.j9,e)for(let r of e.split("/")){let e=(i??this.root).children?.get(t?r.toLowerCase():r);if(null==e)return[];i=e}else i=this.root;return i?.children==null?[]:[...(0,s.x1)(i.children.values(),e=>e.value||void 0)]}getClosest(e,t,i,s){let o,n;for(let t of(e=this.normalize(e),s=s??!r.j9,e.split("/"))){o?.value&&(!i||i?.(o.value))&&(n=o);let e=(o??this.root).children?.get(s?t.toLowerCase():t);if(null==e)break;o=e}return!t&&o?.value&&(!i||i?.(o.value))?o.value:n?.value}*getDescendants(e,t,i){let s;e=e?this.normalize(e):"",i=i??!r.j9;let o="";if(e)for(let t of e.split("/")){let e=(s??this.root).children?.get(i?t.toLowerCase():t);if(null==e)return;s=e,o+=`${e.path}/`}else s=this.root;s?.children!=null&&(yield*function* e(i,r,s){for(let o of i.values()){let i=r?`${r}/${o.path}`:o.path;o.value&&(!t||t?.(o.value))&&(yield o.value),null!=o.children&&(yield*e(o.children,i,s))}}(s.children,"",o))}has(e,t){return null!=this.getCore(e,t)}set(e,t,i){e=this.normalize(e),i=i??!r.j9;let s=this.root;for(let t of e.split("/")){let e=i?t.toLowerCase():t,r=s.children?.get(e);null==r&&(null==s.children&&(s.children=new Map),r=new PathNode(t),s.children.set(e,r)),s=r}let o=null==s.value;return o||s.value===t||a(s.value),s.value=t,o}};function a(e){null!=e&&"object"==typeof e&&"dispose"in e&&"function"==typeof e.dispose&&e.dispose()}let VisitedPathNode=class VisitedPathNode{constructor(e){this.path=e}children};let VisitedPathsTrie=class VisitedPathsTrie{constructor(e=n){this.normalize=e,this.root=new VisitedPathNode("")}root;clear(){this.root.children=void 0}has(e,t){let i;for(let s of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return!1;i=e}return null!=i}set(e,t){e=this.normalize(e),t=t??!r.j9;let i=this.root;for(let r of e.split("/")){let e=t?r.toLowerCase():r,s=i.children?.get(e);null==s&&(null==i.children&&(i.children=new Map),s=new VisitedPathNode(r),i.children.set(e,s)),i=s}}}},4434:e=>{e.exports=require("events")},4465:(e,t,i)=>{i.d(t,{An:()=>h,CX:()=>u,L2:()=>d,Oo:()=>l,bQ:()=>n,gC:()=>c,is:()=>a});let r=/\(([\s\S]*)\)/,s=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,o=/\s?=.*$/;function n(e){if("function"!=typeof e)throw Error("Not supported");if(0===e.length)return[];let t=Function.prototype.toString.call(e),i=(t=(t=t.replace(s,"")||t).slice(0,t.indexOf("{"))).indexOf("("),n=t.indexOf(")");i=i>=0?i+1:0,n=n>0?n:t.indexOf("="),t=t.slice(i,n),t=`(${t})`;let a=r.exec(t);return null!=a?a[1].split(",").map(e=>e.trim().replace(o,"")):[]}function a(e,t,i){return null==t?null!=e:"function"==typeof t?t(e):void 0===i?void 0!==e[t]:e[t]===i}function l(e){let t,i=!1;return function(...r){return i||(i=!0,t=e.apply(this,r),e=void 0),t}}function c(e,t){let i;return i=setInterval(e,t),{dispose:()=>{null!=i&&(clearInterval(i),i=void 0)}}}async function u(e,t,i){for(let r of t)try{await e.apply(i,r)}catch{}}function h(e){let t;return function(...i){let r=async()=>await e(...i);return t=null==t?r():t.then(r,r)}}function d(e,t){return e>=t?e*e+e+t:e+t*t}},4478:(e,t,i)=>{let r,s,o,n,a,l,c,u,h,d,p,g,m,f,w,v;var y=Object.create,b=Object.defineProperty,C=Object.getOwnPropertyDescriptor,k=Object.getOwnPropertyNames,S=Object.getPrototypeOf,R=Object.prototype.hasOwnProperty,P=(e,t)=>{for(var i in t)b(e,i,{get:t[i],enumerable:!0})},A=(e,t,i,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of k(t))R.call(e,s)||s===i||b(e,s,{get:()=>t[s],enumerable:!(r=C(t,s))||r.enumerable});return e},I={};P(I,{AzureDevOps:()=>el,AzureDevopsUtils:()=>ig,Bitbucket:()=>ew,BitbucketServer:()=>eC,BitbucketServerUtils:()=>iy,BitbucketUtils:()=>iw,EntityIdentifierProviderType:()=>iR,EntityIdentifierUtils:()=>iC,EntityType:()=>iS,EntityVersion:()=>ik,GitBuildStatusStage:()=>D,GitBuildStatusState:()=>$,GitDiffLineType:()=>x,GitHub:()=>tp,GitHubIssueCloseReason:()=>ry,GitHubUtils:()=>ru,GitIssueState:()=>eS,GitLab:()=>tQ,GitLabUtils:()=>rd,GitMergeStrategy:()=>T,GitProviderUtils:()=>iW,GitPullRequestMergeableState:()=>O,GitPullRequestReviewState:()=>_,GitPullRequestState:()=>E,GraphQLErrors:()=>eR,Jira:()=>il,JiraServer:()=>ic,JiraUtils:()=>rg,PullRequestAsyncStatus:()=>rv,Trello:()=>ip,TrelloUtils:()=>rf,Utils:()=>rC,default:()=>rb,isFetch:()=>G}),e.exports=A(b({},"__esModule",{value:!0}),I);var D=((r=D||{}).Build="build",r.Production="production",r.Staging="staging",r.Test="test",r),$=((s=$||{}).ActionRequired="ACTION_REQUIRED",s.Cancelled="CANCELLED",s.Error="ERROR",s.Failed="FAILED",s.Pending="PENDING",s.Running="RUNNING",s.Skipped="SKIPPED",s.Success="SUCCESS",s.Warning="WARNING",s.OptionalActionRequired="OPTIONAL_ACTION_REQUIRED",s),T=((o=T||{}).MergeCommit="MERGE_COMMIT",o.Rebase="REBASE",o.RebaseThenMergeCommit="REBASE_THEN_MERGE_COMMIT",o.FastForward="FAST_FORWARD",o.Squash="SQUASH",o),E=((n=E||{}).Open="OPEN",n.Closed="CLOSED",n.Merged="MERGED",n),_=((a=_||{}).Approved="APPROVED",a.ChangesRequested="CHANGES_REQUESTED",a.Commented="COMMENTED",a.ReviewRequested="REVIEW_REQUESTED",a),O=((l=O||{}).Behind="BEHIND",l.Blocked="BLOCKED",l.Conflicts="CONFLICTS",l.FailingChecks="FAILING_CHECKS",l.Mergeable="MERGEABLE",l.Unknown="UNKNOWN",l.UnknownAndBlocked="UNKNOWN_AND_BLOCKED",l.Unstable="UNSTABLE",l),x=((c=x||{}).ADDED="ADDED",c.DELETED="DELETED",c.UNMODIFIED="UNMODIFIED",c),F={APPROVED:0,COMMENTED:1,REVIEW_REQUESTED:2,CHANGES_REQUESTED:3},L=e=>e&&0!==e.length?e.reduce((e,t)=>F[t.state]>F[e]?t.state:e,"APPROVED"):null,B=(e,t)=>e.name||e.username||e.email||t,U=e=>{let t=Object.values(e).map(e=>e.name).sort((e,t)=>e.localeCompare(t));return Object.values(e).forEach(e=>{-1!==e.priority&&(e.priority=t.indexOf(e.name))}),e},N=(d=null!=(u=i(8401))?y(S(u)):{},A(!h&&u&&u.__esModule?d:b(d,"default",{value:u,enumerable:!0}),u)),q=globalThis.fetch||N.default,W=async e=>{let t=e.headers.get("content-type")||"",i=null;if(t.startsWith("application/json")){let t=await e.text();i=t.trim().length>0?JSON.parse(t):null}else if(t.startsWith("text/")||""===t)i=await e.text();else if(t.startsWith("application/vnd.github.raw+json"))i=await e.arrayBuffer();else throw Error(`Unsupported content-type: ${t}`);let r={body:i,headers:Object.fromEntries(e.headers.entries()),status:e.status,statusText:e.statusText};if(!e.ok){let t=Error(e.statusText);throw Object.assign(t,{response:r}),t}return r},M=e=>async({url:t,...i})=>W(await e(t,i)),G=(e,t=!1)=>"fetch"===e.name||t,H=class{constructor(e){let t=(null==e?void 0:e.request)||q;this.config={...e,request:G(t,null==e?void 0:e.forceIsFetch)?M(t):t}}updateConfig(e){this.config={...this.config,...e,request:e.request&&G(e.request,(null==e?void 0:e.forceIsFetch)??this.config.forceIsFetch)?M(e.request):this.config.request}}},V=class extends H{},j=(e,t)=>{let i={};return e&&(i.Authorization=`${t?"Basic":"Bearer"} ${e}`),i},Q=e=>e?e.reduce((e,t)=>(e[t]=!0,e),{}):void 0,z=(e,t,i)=>!e||t.some(t=>e[t])?i:"",Y=async e=>{var t,i,r;let s=[],o=!0,n;for(;o;){let a=await e(n);s=s.concat(a.data),o=!!(null!=(t=null==a?void 0:a.pageInfo)&&t.hasNextPage),n=(null==(i=null==a?void 0:a.pageInfo)?void 0:i.endCursor)||(null==(r=null==a?void 0:a.pageInfo)?void 0:r.nextPage)}return s},K=(e,t={})=>j(t.token||e.token,t.isPAT||e.isPAT),Z=e=>e.url.replace("/_apis/git/repositories/","/_git/").replace(`/${e.repository.project.id}/`,`/${encodeURIComponent(e.repository.project.name)}/`).replace(`/${e.repository.id}/`,`/${encodeURIComponent(e.repository.name)}/`).replace("/pullRequests/","/pullrequest/"),J="https://app.vssps.visualstudio.com/_apis",X="https://dev.azure.com",ee={active:"OPEN",completed:"MERGED",abandoned:"CLOSED"},et={10:"APPROVED",5:"APPROVED",0:"REVIEW_REQUESTED",[-5]:"CHANGES_REQUESTED",[-10]:"CHANGES_REQUESTED"},ei=e=>({id:e.id,name:e.displayName??null,username:(e.uniqueName||e.displayName)??null,email:null,avatarUrl:e.imageUrl??null,url:null}),er=e=>e.startsWith("refs/heads/")?e.replace("refs/heads/",""):e,es=e=>{switch(e){case"conflicts":return"CONFLICTS";case"failure":return"FAILING_CHECKS";case"rejectedByPolicy":return"BLOCKED";case"succeeded":return"MERGEABLE";default:return"UNKNOWN"}},eo=(e,t)=>{var i;let r=[],s=[];return t.reviewers.forEach(e=>{let t={reviewer:ei(e),state:et[e.vote??0]||"REVIEW_REQUESTED"};e.isRequired&&r.push(t),s.push(t)}),{id:t.pullRequestId.toString(),title:t.title,number:t.codeReviewId,state:ee[t.status],isDraft:t.isDraft,commentCount:null,upvoteCount:null,author:ei(t.createdBy),createdDate:new Date(t.creationDate),updatedDate:new Date(t.closedDate||t.creationDate),closedDate:t.closedDate?new Date(t.closedDate):null,mergedDate:t.closedDate&&"completed"===t.status?new Date(t.closedDate):null,repository:{id:t.repository.id,name:t.repository.name,project:t.repository.project.name,owner:{login:e},remoteInfo:null},headCommit:{buildStatuses:null},baseRef:{name:er(t.targetRefName),oid:t.lastMergeTargetCommit.commitId},headRef:{name:er(t.sourceRefName),oid:t.lastMergeSourceCommit.commitId},url:Z(t),assignees:t.reviewers.map(ei),reviews:s,reviewDecision:L(r),additions:null,deletions:null,fileCount:null,commitCount:null,headRepository:t.forkSource?{id:t.forkSource.repository.id,name:t.forkSource.repository.name,project:void 0,owner:{login:e},remoteInfo:null}:{id:t.repository.id,name:t.repository.name,project:t.repository.project.name,owner:{login:e},remoteInfo:null},mergeableState:es(t.mergeStatus),labels:(null==(i=t.labels)?void 0:i.map(e=>({color:null,description:null,id:e.id,name:e.name})))??[],permissions:null}},en=(e,t)=>({id:t.id,name:t.name,namespace:e,project:t.project.name,projectId:t.project.id,webUrl:t.webUrl,httpsUrl:t.remoteUrl,sshUrl:t.sshUrl,defaultBranch:t.defaultBranch?{name:er(t.defaultBranch)}:null,permissions:null}),ea=(e,t,i,r)=>{var s,o,n,a,l,c;let u=i.fields,h=u["System.AssignedTo"],d=u["System.State"],p=u["System.WorkItemType"],g;return d&&p&&(g=null==(s=r[p])?void 0:s[d]),{id:i.id.toString(),number:i.id.toString(),title:u["System.Title"],commentCount:u["System.CommentCount"],author:{avatarUrl:(null==(n=null==(o=u["System.CreatedBy"]._links)?void 0:o.avatar)?void 0:n.href)??null,email:null,id:u["System.CreatedBy"].id,name:u["System.CreatedBy"].uniqueName??null,username:u["System.CreatedBy"].displayName??null,url:null},closedDate:u["Microsoft.VSTS.Common.ClosedDate"]?new Date(u["Microsoft.VSTS.Common.ClosedDate"]):null,createdDate:new Date(u["System.CreatedDate"]),updatedDate:new Date(u["System.ChangedDate"]),url:i._links.html.href,assignees:h?[{avatarUrl:(null==(l=null==(a=h._links)?void 0:a.avatar)?void 0:l.href)??null,email:null,id:h.id,name:h.uniqueName??null,username:h.displayName??null,url:null}]:[],description:u["System.Description"]??null,state:{name:(null==g?void 0:g.title)||d,color:null},type:u["System.WorkItemType"],repository:null,project:{namespace:e,name:t,resourceId:null,key:null,id:null},upvoteCount:0,labels:(null==(c=i.fields["System.Tags"])?void 0:c.split(";").map(e=>({color:null,description:null,id:null,name:e.trim()})))??[]}},el=class extends H{async getCurrentUser(e={},t={}){if(t.isPAT||this.config.isPAT)throw Error("Azure DevOps does not support PATs for this function.");let i=await this.config.request({url:`${J}/profile/profiles/me`,headers:K(this.config,t)});return{data:{id:i.body.id,name:i.body.displayName,username:i.body.displayName,email:i.body.emailAddress,avatarUrl:null,url:null}}}async getCurrentUserForInstance(e,t={}){let i=(await this.config.request({url:`${X}/${encodeURIComponent(e.namespace)}/_apis/ConnectionData`,headers:K(this.config,t)})).body.authorizedUser;if("Anonymous"===i.providerDisplayName)throw Error("Current user not found.");return{data:{id:i.id,name:i.providerDisplayName,username:i.providerDisplayName,email:i.properties.Account.$value,avatarUrl:null}}}async getUserForCommit(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let i=(await this.config.request({url:`${X}/${encodeURIComponent(e.repo.namespace)}/${encodeURIComponent(e.repo.project)}/_apis/git/repositories/${encodeURIComponent(e.repo.name)}/commits/${e.oid}`,headers:K(this.config,t)})).body.author;return{data:{name:i.name,email:i.email,avatarUrl:i.imageUrl}}}async getOrgsForUser(e,t={}){return{data:(await this.config.request({url:`${J}/accounts?memberId=${e.userId}&api-version=6.0`,headers:K(this.config,t)})).body.value.map(e=>({id:e.accountId,name:e.accountName}))}}async getAzureProjects(e,t={}){let i=new URL(`${X}/${encodeURIComponent(e.namespace)}/_apis/projects`);i.searchParams.set("$top","100"),e.cursor&&i.searchParams.set("$skip",e.cursor);let r=await this.config.request({url:i.toString(),headers:K(this.config,t)}),s=r.headers["x-ms-continuationtoken"];return{pageInfo:{hasNextPage:!!s,endCursor:s||null},data:r.body.value.map(t=>({id:t.id,name:t.name,namespace:e.namespace}))}}async getAzureProjectScopeDescriptor(e,t={}){let{namespace:i,projectId:r}=e;return{data:{scope:(await this.config.request({url:`https://vssps.dev.azure.com/${encodeURIComponent(i)}/_apis/graph/descriptors/${r}?api-version=6.0`,headers:K(this.config,t)})).body.value}}}async getAzureGraphAccountsForAzureProject(e,t={}){let{namespace:i,projectScopeDescriptor:r,cursor:s}=e,o=new URL(`https://vssps.dev.azure.com/${encodeURIComponent(i)}/_apis/graph/users`);r&&o.searchParams.set("scopeDescriptor",r),s&&o.searchParams.set("continuationToken",s);let n=await this.config.request({url:o.toString(),headers:K(this.config,t)}),a=n.headers["x-ms-continuationtoken"];return{pageInfo:{endCursor:a||null,hasNextPage:!!a},data:n.body.value.map(e=>{var t,i,r,s;return{avatarUrl:(null==(i=null==(t=e._links)?void 0:t.avatar)?void 0:i.href)??null,descriptor:e.descriptor??null,email:e.mailAddress??null,name:e.displayName??null,storageKeyURL:(null==(s=null==(r=e._links)?void 0:r.storageKey)?void 0:s.href)??null,username:e.displayName??null}})}}async getAccountFromAzureGraphAccount(e,t={}){let{azureGraphAccount:i}=e;if(!i.storageKeyURL)throw Error("Expected 'storageKeyURL' to not be null for 'azureGraphAccount'");let r=await this.config.request({url:i.storageKeyURL,headers:K(this.config,t)});return{data:{avatarUrl:i.avatarUrl,email:i.email,id:r.body.value,name:i.name,username:i.username,url:null}}}async getAccountsFromAzureGraphAccounts(e,t={}){let i=[];for(let r of e.azureGraphAccounts){let e=await this.getAccountFromAzureGraphAccount({azureGraphAccount:r},t);i.push(e.data)}return{data:i}}async getRepo(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let i=await this.config.request({url:`${X}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/git/repositories/${encodeURIComponent(e.name)}`,headers:K(this.config,t)});return{data:en(e.namespace,i.body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForAzureProject(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');return{data:(await this.config.request({url:`${X}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/git/repositories`,headers:K(this.config,t)})).body.value.map(t=>en(e.namespace,t))}}async getRefs(e,t,i={}){if(!t.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let r=new URL(`${X}/${encodeURIComponent(t.repo.namespace)}/${encodeURIComponent(t.repo.project)}/_apis/git/repositories/${encodeURIComponent(t.repo.name)}/refs`);r.searchParams.set("filter",e),r.searchParams.set("$top","100"),t.cursor&&r.searchParams.set("continuationToken",t.cursor);let s=await this.config.request({url:r.toString(),headers:K(this.config,i)}),o=s.headers["x-ms-continuationtoken"];return{pageInfo:{hasNextPage:!!o,endCursor:o||null},data:s.body.value.map(e=>({name:er(e.name),commit:{oid:e.objectId,authoredDate:null,committedDate:null}}))}}async getBranches(e,t={}){return this.getRefs("heads",e,t)}async getTags(e,t={}){return this.getRefs("tags",e,t)}async getPullRequestsForRepoBase(e,t={},i=100){let{page:r,repo:s,assigneeLogins:o,authorLogin:n}=e||{};if(!s.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let a="searchCriteria.status=1";return o&&o.length&&(a+=`&searchCriteria.reviewerId=${o[0]}`),n&&(a+=`&searchCriteria.creatorId=${n}`),await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(s.namespace)}/${encodeURIComponent(s.project||"")}/_apis/git/repositories/${encodeURIComponent(s.name)}/pullRequests?${a}&%24top=${i}&%24skip=${((r||1)-1)*i}`,headers:K(this.config,t)})}async getPullRequestsForRepo(e,t={}){let i=e.page||1,r=await this.getPullRequestsForRepoBase(e,t,100);return{pageInfo:{hasNextPage:100===r.body.value.length,nextPage:i+1},data:r.body.value.map(t=>eo(e.repo.namespace,t))}}async getPullRequestsForRepos(e,t={}){if(!e.repos.every(e=>e.project))throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repos:i}=e||{},r=[];return await Promise.all(i.map(async i=>{try{(await this.getPullRequestsForRepoBase({repo:i,...e},t)).body.value.forEach(e=>{r.push(eo(i.namespace,e))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:r}}async getPullRequestsForProjectBase(e,t={},i=100){let{namespace:r,project:s,page:o,assigneeLogins:n,authorLogin:a,repo:l}=e;if(null!=l&&l.project&&l.project!==s)throw Error("Could not fetch pull requests, project mismatch");let c=new URL(`${t.baseUrl||X}/${encodeURIComponent(r)}/${encodeURIComponent(s)}/_apis/git/pullRequests`);return c.searchParams.set("searchCriteria.status","1"),c.searchParams.set("$top",i.toString()),c.searchParams.set("$skip",(((o||1)-1)*i).toString()),null!=l&&l.id&&(null==l?void 0:l.project)===s&&c.searchParams.set("searchCriteria.repositoryId",l.id),n&&n.length&&c.searchParams.set("searchCriteria.reviewerId",n[0]),a&&c.searchParams.set("searchCriteria.creatorId",a),await this.config.request({url:c.toString(),headers:K(this.config,t)})}async getPullRequestsForProject(e,t={}){let i=e.page||1,r=await this.getPullRequestsForProjectBase(e,t,100);return{pageInfo:{hasNextPage:(null==r?void 0:r.body.value.length)===100,nextPage:i+1},data:(null==r?void 0:r.body.value.map(t=>eo(e.namespace,t)))||[]}}async getPullRequestsForProjects(e,t={}){let{projects:i}=e||{},r=[];return await Promise.all(i.map(async i=>{try{if(!e.repo||e.repo.project&&e.repo.project===i.project){let s=await this.getPullRequestsForProjectBase({...i,...e},t);null==s||s.body.value.forEach(e=>{r.push(eo(i.namespace,e))})}}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:r}}async getAzurePullRequestLastMergeStatus(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repo:{namespace:i,project:r,name:s},pullRequestId:o}=e,n=await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/git/repositories/${s}/pullrequests/${o}?includeCommits=true?api-version=6.0`,headers:{...K(this.config,t)}});if(!n.body.mergeStatus)throw Error("Could not fetch pull request");return{data:n.body.mergeStatus}}async updatePullRequest(e,t,i){return await this.config.request({method:"PATCH",url:`${i.baseUrl||X}/${encodeURIComponent(e.repository.owner.login)}/${encodeURIComponent(e.repository.project)}/_apis/git/repositories/${e.repository.name}/pullrequests/${e.id}?api-version=6.0`,body:t,headers:{...K(this.config,i),"Content-Type":"application/json"}})}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(!(await this.updatePullRequest(i,JSON.stringify({status:"abandoned"}),t)).body.status)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i;let{pullRequest:r,mergeStrategy:s}=e,o;switch(s){case"MERGE_COMMIT":o="noFastForward";break;case"REBASE":o="rebase";break;case"REBASE_THEN_MERGE_COMMIT":o="rebaseMerge";break;case"SQUASH":o="squash"}let n={completionOptions:{mergeStrategy:o},lastMergeSourceCommit:{commitId:null==(i=r.headRef)?void 0:i.oid},status:"completed"};if(!(await this.updatePullRequest(r,JSON.stringify(n),t)).body.status)throw Error("Could not merge pull request")}async addPullRequestLabel(e,t={}){let{pullRequest:i,label:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let s={name:r.name};if(!(await this.config.request({method:"POST",url:`${t.baseUrl||X}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/labels?api-version=6.0`,body:JSON.stringify(s),headers:{...K(this.config,t),"Content-Type":"application/json"}})).body.id)throw Error("Could not add pull request label")}async removePullRequestLabel(e,t={}){let{pullRequest:i,label:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');await this.config.request({method:"DELETE",url:`${t.baseUrl||X}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/labels/${encodeURIComponent(r.name)}?api-version=6.0`,headers:{...K(this.config,t)}})}async setPullRequestLabels(e,t={}){let{pullRequest:i,labels:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let s=i.labels;if(!s)throw Error('Azure DevOps requires "labels" for this function.');for(let e of r)s.find(t=>t.id===e.id)||await this.addPullRequestLabel({pullRequest:i,label:e},t);for(let e of s)r.find(t=>e.id===t.id)||await this.removePullRequestLabel({pullRequest:i,label:e},t)}async setPullRequestAsDraft(e,t={}){let{pullRequest:i,isDraft:r}=e;if(!(await this.updatePullRequest(i,JSON.stringify({isDraft:r}),t)).body.status)throw Error("Could not set the pull request as draft")}async addPullRequestReviewer(e,t={}){let{pullRequest:i,reviewer:r,isRequired:s}=e,o={id:r.id,isRequired:s};if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||X}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/reviewers/${r.id}?api-version=6.0`,body:JSON.stringify(o),headers:{...K(this.config,t),"Content-Type":"application/json"}})).body.id)throw Error("Could not add pull request reviewer")}async removePullRequestReviewer(e,t={}){let{pullRequest:i,reviewer:r}=e;await this.config.request({method:"DELETE",url:`${t.baseUrl||X}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/reviewers/${r.id}?api-version=6.0`,headers:{...K(this.config,t),Accept:"application/json"}})}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e;for(let e of r)i.assignees.find(t=>t.id===e.id)||await this.addPullRequestReviewer({pullRequest:i,reviewer:e,isRequired:!0},t);for(let e of i.assignees)r.find(t=>e.id===t.id)||await this.removePullRequestReviewer({pullRequest:i,reviewer:e},t)}async getIssuesForAzureProject(e,t={}){let{page:i,assigneeLogins:r,authorLogin:s,mentionLogin:o,labelNames:n,statusByWorkItemIdByStatusId:a}=e||{},l=i||1,c=["[Microsoft.VSTS.Common.ClosedDate] = ''","[System.TeamProject] = @project","[Microsoft.VSTS.Common.ResolvedDate] = ''"];s&&c.push(`[System.CreatedBy] = '${s.replace("'","''")}'`),r&&r[0]&&c.push(`[System.AssignedTo] = '${r[0].replace("'","''")}'`),o&&c.push("[System.Id] IN (@recentMentions)"),n&&n.forEach(e=>c.push(`[System.Tags] Contains '${e}'`));let u=`Select [Microsoft.VSTS.Common.ClosedDate], [Microsoft.VSTS.Common.ResolvedDate] From WorkItems Where ${c.join(" AND ")} order by [System.CreatedDate] desc`,h=await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/wit/wiql?api-version=6.0`,body:JSON.stringify({query:u}),method:"POST",headers:{...K(this.config,t),"Content-Type":"application/json"}}),d=h.body.workItems.slice((l-1)*200,200*l).map(e=>e.id);if(0==d.length)return{pageInfo:{hasNextPage:!1,nextPage:null},data:[]};let p=await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/wit/workitemsbatch?api-version=6.0`,body:JSON.stringify({ids:d,$expand:"Links"}),method:"POST",headers:{...K(this.config,t),"Content-Type":"application/json"}});return{pageInfo:{hasNextPage:h.body.workItems.length>200*l,nextPage:l+1},data:p.body.value.map(t=>ea(e.namespace,e.project,t,a||{}))}}async getPermissionsForRepos(e,t={}){let{namespace:i,repos:r}=e,s={4:["canPush","canCreateWebhook"],1024:["isAdmin"],2048:["isAdmin"],4096:["isAdmin"],8192:["isAdmin"]},o={alwaysAllowAdministrators:!1,evaluations:r.flatMap(e=>{let t=`repoV2/${e.projectId}/${e.id}`;return Object.keys(s).map(e=>({securityNamespaceId:"2e9eb7ed-3c0a-47d4-87c1-0ffdd275fd87",token:t,permissions:e}))})};return{data:(await this.config.request({method:"POST",url:`${t.baseUrl||X}/${encodeURIComponent(i)}/_apis/security/permissionevaluationbatch?api-version=7.1`,body:JSON.stringify(o),headers:{...K(this.config,t),"Content-Type":"application/json"}})).body.evaluations.reduce((e,t)=>{let[,i,r]=t.token.split("/"),o=`${i}/${r}`;for(let i of s[t.permissions])void 0===e[o]&&(e[o]={canCreateWebhook:!0,canPush:!0,isAdmin:!0}),!1===t.value&&(e[o][i]=!1);return e},{})}}async decorateReposWithPermissions(e,t={}){let{namespace:i,repos:r}=e,s=await this.getPermissionsForRepos({namespace:i,repos:r},t);return{data:r.map(e=>({...e,permissions:s.data[`${e.projectId}/${e.id}`]}))}}async updateIssue(e,t,i={}){return await this.config.request({method:"PATCH",url:`${i.baseUrl||X}/${encodeURIComponent(e.project.namespace)}/${encodeURIComponent(e.project.name)}/_apis/wit/workitems/${e.id}?api-version=6.0`,body:JSON.stringify(t),headers:{...K(this.config,i),"Content-Type":"application/json-patch+json"}})}async setIssueStatus(e,t={}){var i;let{issue:r,status:s}=e,o=[{op:"add",path:"/fields/System.State",value:s.name}];if(!(null!=(i=(await this.updateIssue(r,o,t)).body.fields)&&i["System.State"]))throw Error("Could not set issue status")}async setIssueAssignee(e,t={}){var i;let{issue:r,assignee:s}=e,o=[{op:"add",path:"/fields/System.AssignedTo",value:(null==s?void 0:s.name)??""}];if(!(null!=(i=(await this.updateIssue(r,o,t)).body.fields)&&i["System.State"]))throw Error("Could not set issue assignee")}async setIssueLabels(e,t={}){var i;let{issue:r,labels:s}=e,o=[{op:"replace",path:"/fields/System.Tags",value:s.map(e=>e.name).join(";")}];if(!(null!=(i=(await this.updateIssue(r,o,t)).body.fields)&&i["System.Tags"]))throw Error("Could not set issue tags")}async getIssueTypesForAzureProject(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{namespace:i,project:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/wit/workitemtypes?api-version=6.0`,headers:{...K(this.config,t)}})).body.value}}async getLabelsForProject(e,t={}){let{namespace:i,project:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/wit/tags?api-version=6.0`,headers:{...K(this.config,t)}})).body.value.map(e=>({color:null,description:null,id:e.id,name:e.name,url:e.url}))}}},ec=(e,t={})=>j(t.token||e.token,t.isPAT||e.isPAT),eu="https://api.bitbucket.org/2.0",eh={OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"},ed=e=>({id:e.uuid,name:e.display_name||e.nickname,username:e.nickname||e.display_name,email:null,avatarUrl:e.links.avatar.href,url:e.links.html.href}),ep=e=>{let t=e.links.clone,i=null==t?void 0:t.find(e=>"ssh"===e.name),r=null==t?void 0:t.find(e=>"https"===e.name);return i&&r?{cloneUrlHTTPS:r.href,cloneUrlSSH:i.href}:null},eg=e=>{var t,i;return{id:e.uuid,namespace:e.workspace.slug,name:e.slug,webUrl:e.links.html.href,httpsUrl:(null==(t=e.links.clone.find(e=>"https"===e.name))?void 0:t.href)??null,sshUrl:(null==(i=e.links.clone.find(e=>"ssh"===e.name))?void 0:i.href)??null,defaultBranch:{name:e.mainbranch.name},permissions:null}},em=e=>{var t;let i=e.id,r=(null==(t=e.participants)?void 0:t.map(e=>{let t="REVIEW_REQUESTED";return e.approved?t="APPROVED":"changes_requested"===e.state?t="CHANGES_REQUESTED":null!==e.participated_on&&(t="COMMENTED"),{reviewer:ed(e.user),state:t}}))??[];return{id:i.toString(),title:e.title,number:i,state:eh[e.state],isDraft:!1,commentCount:e.comment_count,upvoteCount:null,author:ed(e.author),createdDate:new Date(e.created_on),updatedDate:new Date(e.updated_on),closedDate:null,mergedDate:null,repository:{id:e.destination.repository.uuid,name:e.destination.repository.name,owner:{login:e.destination.repository.full_name.split("/")[0]},remoteInfo:ep(e.destination.repository)},headCommit:{buildStatuses:null},baseRef:{name:e.destination.branch.name,oid:e.destination.commit.hash},headRef:{name:e.source.branch.name,oid:e.source.commit.hash},url:e.links.html.href,assignees:null,reviews:r,reviewDecision:L(r),additions:null,deletions:null,fileCount:null,commitCount:null,headRepository:{id:e.source.repository.uuid,name:e.source.repository.name,owner:{login:e.source.repository.full_name.split("/")[0]},remoteInfo:ep(e.source.repository)},mergeableState:"UNKNOWN",permissions:null}},ef=e=>{switch(e){case"owner":case"admin":return{canCreateWebhook:!0,canPush:!0,isAdmin:!0};case"write":return{canCreateWebhook:!1,canPush:!0,isAdmin:!1};case"read":case"none":return{canCreateWebhook:!1,canPush:!1,isAdmin:!1}}},ew=class extends H{async refreshToken(e){return{data:(await this.config.request({url:"https://bitbucket.org/site/oauth2/access_token",method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:`Basic ${e.base64ClientIDColonClientSecret}`},body:`grant_type=refresh_token&refresh_token=${e.refreshToken}`})).body}}async getCurrentUser(e={},t={}){return{data:ed((await this.config.request({url:`${eu}/user`,headers:ec(this.config,t)})).body)}}async getUserForCommit(e,t={}){var i;let r=(await this.config.request({url:`${eu}/repositories/${e.repo.namespace}/${e.repo.name}/commit/${e.oid}`,headers:ec(this.config,t)})).body.author,s=r.raw.match(/([^<]+)<(.+)>/);return{data:{name:s?s[1].trim():null,email:s?s[2]:null,avatarUrl:(null==(i=r.user)?void 0:i.links.avatar.href)||null}}}async getRepo(e,t={}){return{data:eg((await this.config.request({url:`${eu}/repositories/${e.namespace}/${e.name}`,headers:ec(this.config,t)})).body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForCurrentUser(e,t={}){let i=new URL(`${eu}/repositories`);i.searchParams.set("role","member"),i.searchParams.set("pagelen","100"),e.cursor&&i.searchParams.set("after",e.cursor);let r=await this.config.request({url:i.toString(),headers:ec(this.config,t)}),s=!!r.body.next,o=null;return r.body.next&&(o=new URL(r.body.next).searchParams.get("after")),{pageInfo:{hasNextPage:s,endCursor:o},data:r.body.values.map(eg)}}async getBranches(e,t={}){var i;let r=new URL(`${eu}/repositories/${e.repo.namespace}/${e.repo.name}/refs/branches`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","100");let s=await this.config.request({url:r.toString(),headers:ec(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(e=>{let t=new Date(e.target.date);return{name:e.name,commit:{oid:e.target.hash,authoredDate:t,committedDate:t}}})}}async getTags(e,t={}){let i=new URL(`${eu}/repositories/${e.repo.namespace}/${e.repo.name}/refs/tags`);i.searchParams.set("pagelen","100"),e.cursor&&i.searchParams.set("page",e.cursor);let r=await this.config.request({url:i.toString(),headers:ec(this.config,t)}),s=!!r.body.next,o=null;return r.body.next&&(o=new URL(r.body.next).searchParams.get("page")),{pageInfo:{hasNextPage:s,endCursor:o},data:r.body.values.map(e=>{let t=new Date(e.target.date);return{name:e.name,commit:{oid:e.target.hash,authoredDate:t,committedDate:t}}})}}async getWorkspacesForUser(e,t={}){var i;let r=new URL(`${eu}/user/permissions/workspaces`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50");let s=await this.config.request({url:r.toString(),headers:ec(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(e=>({id:e.workspace.uuid,slug:e.workspace.slug,name:e.workspace.name}))}}async getPullRequestsForUserAndWorkspace(e,t={}){var i;let r=new URL(`${eu}/workspaces/${e.workspaceSlug}/pullrequests/${e.userId}`);if(r.searchParams.set("fields","+values.participants,+values.destination.repository.links.clone.*,+values.source.repository.links.clone.*"),r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50"),e.repos&&e.repos.length>0){let t=`state = "open" AND (${e.repos.map(e=>`source.repository.full_name = "${e.namespace}/${e.name}"`).join(" OR ")})`;r.searchParams.set("q",t)}let s=await this.config.request({url:r.toString(),headers:ec(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(em)}}async getPullRequestsForRepoBase(e,t={}){var i;let r=new URL(`${eu}/repositories/${encodeURI(e.repo.namespace)}/${encodeURI(e.repo.name)}/pullrequests?state=OPEN`),s=[];e.reviewerId&&s.push(`reviewers.uuid="${e.reviewerId}"`),e.authorLogin&&s.push(`author.uuid="${e.authorLogin}"`);let o='state="OPEN"';return s.length&&(o+=` AND (${s.join(e.useOrFilter?" OR ":" AND ")})`),r.searchParams.set("fields","+values.participants,+values.destination.repository.links.clone.*,+values.source.repository.links.clone.*"),r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50"),r.searchParams.set("q",o),await this.config.request({url:r.toString(),headers:ec(this.config,t)})}async getPullRequestsForRepo(e,t={}){let i=[],r=await this.getPullRequestsForRepoBase(e,t);r.body.values.forEach(e=>{i.push(em(e))});let s=!!r.body.next;return{pageInfo:{hasNextPage:s,nextPage:s?r.body.page+1:null},data:i}}async getPullRequestsForRepos(e,t={}){let i=[];return await Promise.all(e.repos.map(async r=>{try{(await this.getPullRequestsForRepoBase({repo:r,...e},t)).body.values.forEach(e=>{i.push(em(e))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:i}}async getAccountsForWorkspace(e,t={}){var i;let r=new URL(`${eu}/workspaces/${encodeURI(e.workspace)}/members`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","100");let s=await this.config.request({url:r.toString(),headers:ec(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(e=>ed(e.user))}}async getReposPermissionsForCurrentUser(e,t={}){var i;let r=new URL(`${eu}/user/permissions/repositories`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","100");let s=await this.config.request({url:r.toString(),headers:ec(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.reduce((e,t)=>({...e,[t.repository.uuid]:ef(t.permission)}),{})}}async decorateReposWithPermissions(e,t={}){let i={},r=1;do{let e=await this.getReposPermissionsForCurrentUser({page:r},t);i={...e.data,...i},r=e.pageInfo.hasNextPage?e.pageInfo.nextPage:null}while(null!==r)return{data:e.repos.map(e=>({...e,permissions:i[e.id]??{canCreateWebhook:!1,canPush:!1,isAdmin:!1}}))}}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(!(await this.config.request({method:"POST",url:`${eu}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}/decline`,headers:ec(this.config,t)})).body.title)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){let{pullRequest:i,mergeStrategy:r}=e,s;switch(r){case"MERGE_COMMIT":s="merge_commit";break;case"FAST_FORWARD":s="fast_forward";break;case"SQUASH":s="squash"}let o={merge_strategy:s,type:"pullrequest"};if(!(await this.config.request({method:"POST",url:`${eu}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}/merge`,body:JSON.stringify(o),headers:{...ec(this.config,t),"Content-Type":"application/json"}})).body.title)throw Error("Could not merge pull request")}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e,s={reviewers:r.map(e=>{if(e.username)throw Error('Bitbucket reviewer requires "username" for this function.');return{username:e.username}})};if(!(await this.config.request({method:"PUT",url:`${eu}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}`,body:JSON.stringify(s),headers:{...ec(this.config,t),"Content-Type":"application/json"}})).body.title)throw Error("Could not set pull request reviewers")}},ev=e=>({name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrl??null,id:e.id.toString(),username:e.name,url:e.links.self[0].href}),ey=e=>{var t,i,r,s,o,n;let a={UNAPPROVED:"REVIEW_REQUESTED",NEEDS_WORK:"CHANGES_REQUESTED",APPROVED:"APPROVED"},l=e.reviewers.map(e=>({reviewer:ev(e.user),state:a[e.status]})),c=(null==(t=e.toRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:t.href)??null,u=(null==(i=e.toRef.repository.links.clone.find(e=>"https"===e.name))?void 0:i.href)??null;u||(u=(null==(r=e.toRef.repository.links.clone.find(e=>"http"===e.name))?void 0:r.href)??null);let h=(null==(s=e.fromRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:s.href)??null,d=(null==(o=e.fromRef.repository.links.clone.find(e=>"https"===e.name))?void 0:o.href)??null;return d||(d=(null==(n=e.fromRef.repository.links.clone.find(e=>"http"===e.name))?void 0:n.href)??null),{id:e.id.toString(),number:e.id,title:e.title,url:e.links.self[0].href,state:({OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"})[e.state],isDraft:!1,createdDate:new Date(e.createdDate),updatedDate:new Date(e.updatedDate),closedDate:e.closedDate?new Date(e.closedDate):null,mergedDate:"MERGED"==e.state&&e.closedDate?new Date(e.closedDate):null,baseRef:{name:e.toRef.displayId,oid:e.toRef.latestCommit},headRef:{name:e.fromRef.displayId,oid:e.fromRef.latestCommit},commentCount:e.properties.commentCount,upvoteCount:null,commitCount:null,fileCount:null,additions:null,deletions:null,author:ev(e.author.user),assignees:null,reviews:l,reviewDecision:L(l),repository:{id:e.toRef.repository.id.toString(),name:e.toRef.repository.name,owner:{login:e.toRef.repository.project.key},remoteInfo:u&&c?{cloneUrlHTTPS:u,cloneUrlSSH:c}:null},headRepository:{id:e.fromRef.repository.id.toString(),name:e.fromRef.repository.name,owner:{login:e.fromRef.repository.project.key},remoteInfo:d&&h?{cloneUrlHTTPS:d,cloneUrlSSH:h}:null},headCommit:null,mergeableState:"UNKNOWN",permissions:null,version:e.version}},eb=e=>{var t,i,r;return{id:e.id.toString(),namespace:e.project.key,name:e.slug,webUrl:(null==(t=e.links.self[0])?void 0:t.href)??null,httpsUrl:(null==(i=e.links.clone.find(e=>"https"===e.name||"http"===e.name))?void 0:i.href)??null,sshUrl:(null==(r=e.links.clone.find(e=>"ssh"===e.name))?void 0:r.href)??null,defaultBranch:null,permissions:null}},eC=class extends V{getBaseUrl(e){let t=e.baseUrl||this.config.baseUrl;if(!t)throw Error('Bitbucket Server requires "baseUrl"');return t}getRequestHeaders(e){return j(e.token||this.config.token)}async getCurrentUser(e={},t={}){let{headers:{"x-auserid":i,"x-ausername":r}}=await this.config.request({url:`${this.getBaseUrl(t)}/users?limit=2`,headers:this.getRequestHeaders(t)}),s=i?parseInt(i,10):null,o=decodeURIComponent(r),n=(await this.config.request({url:`${this.getBaseUrl(t)}/users?filter=${r}&avatarSize=64`,headers:this.getRequestHeaders(t)})).body.values.find(({emailAddress:e,id:t,name:i,slug:r})=>s?s===t:o===i||o===e||o===r);if(!n)throw Error("Could not find current Bitbucket Server user");return{data:ev(n)}}async getRepo(e,t={}){return{data:eb((await this.config.request({url:`${this.getBaseUrl(t)}/projects/${e.namespace}/repos/${e.name}`,headers:this.getRequestHeaders(t)})).body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForCurrentUser(e,t={}){let i=e.page??0,r=await this.config.request({url:`${this.getBaseUrl(t)}/repos?start=${i}`,headers:this.getRequestHeaders(t)});return{pageInfo:{hasNextPage:!r.body.isLastPage,nextPage:r.body.nextPageStart},data:r.body.values.map(eb)}}async getPullRequestsForRepoBase(e,t={}){var i;let r=new URL(`${this.getBaseUrl(t)}/projects/${encodeURI(e.repo.namespace)}/repos/${encodeURI(e.repo.name)}/pull-requests?state=OPEN`);return r.searchParams.set("start",(null==(i=e.page)?void 0:i.toString())||"0"),r.searchParams.set("limit","50"),await this.config.request({url:r.toString(),headers:this.getRequestHeaders(t)})}async getPullRequestsForRepo(e,t={}){let i=[],r=await this.getPullRequestsForRepoBase(e,t);r.body.values.forEach(t=>{if(e.authorLogin&&t.author.user.name!==e.authorLogin)return null;i.push(ey(t))});let s=0!==r.body.values.length;return{pageInfo:{hasNextPage:s,nextPage:s?r.body.start+r.body.values.length:null},data:i}}async getPullRequestsForRepos(e,t={}){let i=[];return await Promise.all(e.repos.map(async r=>{try{(await this.getPullRequestsForRepoBase({repo:r,...e},t)).body.values.forEach(t=>{if(e.authorLogin&&t.author.user.name!==e.authorLogin)return null;i.push(ey(t))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:i}}async getPullRequestsForCurrentUser(e,t={}){var i;let r=new URL(`${this.getBaseUrl(t)}/dashboard/pull-requests`);r.searchParams.set("state","OPEN"),r.searchParams.set("start",(null==(i=e.page)?void 0:i.toString())||"0"),r.searchParams.set("limit","50");let s=await this.config.request({url:r.toString(),headers:this.getRequestHeaders(t)}),o=0!==s.body.values.length;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.start+s.body.values.length:null},data:s.body.values.map(ey)}}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');if(!(await this.config.request({method:"POST",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}/decline`,body:JSON.stringify({version:i.version}),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){let{pullRequest:i,mergeStrategyId:r}=e;if(e.mergeStrategy)throw Error('Bitbucket Server uses "mergeStrategyId" instead of "mergeStrategy".');if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');if(!(await this.config.request({method:"POST",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}/merge`,body:JSON.stringify({strategyId:r,version:i.version}),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not merge pull request")}async getMergeStrategies(e={}){let t=await this.config.request({url:`${this.getBaseUrl(e)}/admin/pull-requests/git`,headers:{...this.getRequestHeaders(e),"Content-Type":"application/json"}});return{data:{defaultStrategy:t.body.mergeConfig.defaultStrategy,strategies:t.body.mergeConfig.strategies}}}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e;if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');let s={reviewers:r.map(e=>{if(e.username)throw Error('Bitbucket Server reviewer requires "username" for this function.');return{user:{name:e.username}}}),version:i.version};if(!(await this.config.request({method:"PUT",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}`,body:JSON.stringify(s),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not set pull request reviewers")}},ek=i(9259),eS=((p=eS||{}).Open="OPEN",p.Closed="CLOSED",p),eR=class extends Error{constructor(e,t){let i=null==t?void 0:t.map(e=>`'${e.message}'`).join(", ");super(i?`${e}: ${i}`:e),this.graphQLErrors=t??[]}},eP={AS_CODE_OWNER:[3,0,0],CHECK_RUN:[3,0,0],PR_ISSUE_FULL_DATABASE_ID:[3,12,0],LATEST_REVIEWS:[3,0,0],VIEWER_CAN_MERGE_AS_ADMIN:[3,5,0]},eA=e=>!!e,eI=(e,t)=>{let i=eP[t];for(let t=0;t<3&&!(e[t]>i[t]);t++)if(e[t]<i[t])return!1;return!0},eD="https://api.github.com",e$=`${eD}/graphql`,eT=`
description
dueOn
id
number
state
title
url
`,eE=`
... on CheckRun {
  completedAt
  conclusion
  name
  status
  permalink
  startedAt
}
`,e_=/\/api\/v\d+$/,eO=`
color
description
id
name
`,ex=e=>{if(e.endsWith("/api/graphql"))throw Error("The graphql endpoint is being used as the baseUrl. This package uses both GraphQL and REST APIs, and the REST version cannot be assumed. Use the REST endpoint as the baseUrl instead.")},eF=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(ex(i=i.replace(/\/$/,"")),e_.test(i)&&(i=i.replace(e_,"")),`${i}/api/graphql`):e$},eL=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(ex(i=i.replace(/\/$/,"")),e_.test(i)&&(i=i.replace(e_,"")),`${i}/api/v3`):eD},eB=(e,t,i)=>{let r=j(i.token||e.token);return r["X-Github-Next-Global-ID"]="1",r["Content-Type"]="application/json",r.Accept="application/vnd.github.merge-info-preview+json",e.request({url:eF(e,i),method:"POST",headers:r,body:JSON.stringify(t)})},eU={user:!0,"user:email":!0,"read:user":!0},eN=e=>e.some(e=>eU[e]),eq=(e=!1,t=!1,i)=>`
__typename
${z(i,["graphQLId"],"id")}
${z(i,["id"],"databaseId")}
${z(i,["name"],"name")}
${z(i,["name","username"],"login")}
${t?z(i,["email"],"email"):""}
${z(i,["avatarUrl"],`avatarUrl${e?"(size: $avatarSize)":""}`)}
${z(i,["url"],"url")}
`,eW=(e=!1)=>`
latestReviews(first: 100) {
  nodes {
    author {
      ... on User {
        ${eq(!1,e)}
      }
      ... on EnterpriseUserAccount {
        ${eG(!1)}
      }
    }
    state
  }
}
`,eM=(e=!1)=>`
__typename
id
databaseId
login
avatarUrl${e?"(size: $avatarSize)":""}
url
`,eG=(e=!1)=>`
__typename
id
login
avatarUrl${e?"(size: $avatarSize)":""}
url
`,eH=(e,t=!1,i)=>`
id
${!i||eI(i,"PR_ISSUE_FULL_DATABASE_ID")?"fullDatabaseId":"databaseId"}
number
title
state
author {
  ... on User {
    ${eq(!1,t)}
  }
  ... on Bot {
    ${eM(!1)}
  }
  ... on EnterpriseUserAccount {
    ${eG(!1)}
  }
}
commits(last: 1) {
  totalCount
  nodes {
    commit {
      ... on Commit {
        oid
        statusCheckRollup {
          contexts(first: 100) {
            totalCount
nodes {
  ${!i||eI(i,"CHECK_RUN")?eE:""}
  ... on StatusContext {
    context
    createdAt
    description
    state
    targetUrl
  }
}
          }
        }
      }
    }
  }
}
baseRef {
  name
  target {
    oid
  }
}
headRef {
  name
  target {
    oid
  }
}
repository {
  id
  databaseId
  name
  owner {
    login
  }
  url
  sshUrl
  viewerPermission
}
headRepository {
  id
  databaseId
  name
  owner {
    login
  }
  url
  sshUrl
}
${e?"isDraft":""}
url
createdAt
comments {
  totalCount
}
reactions(content: THUMBS_UP) {
  totalCount
}
updatedAt
closedAt
mergedAt
assignees(first: 100) {
  nodes {
    ${eq(!1,t)}
  }
}
reviewRequests(first: 100) {
  nodes {
    ${!i||eI(i,"AS_CODE_OWNER")?"asCodeOwner":""}
    requestedReviewer {
      ... on User {
        ${eq(!1,t)}
      }
    }
  }
}
${!i||eI(i,"LATEST_REVIEWS")?eW(t):""}
additions
deletions
changedFiles
mergeable
mergeStateStatus
milestone {
  ${eT}
}
labels(first: 100) {
  nodes {
    ${eO}
  }
}
${!i||eI(i,"VIEWER_CAN_MERGE_AS_ADMIN")?"viewerCanMergeAsAdmin":""}
`,eV=(e=!1,t)=>`
id
${!t||eI(t,"PR_ISSUE_FULL_DATABASE_ID")?"fullDatabaseId":"databaseId"}
title
author {
  ... on User {
    ${eq(!1,e)}
  }
  ... on Bot {
    ${eM(!1)}
  }
  ... on EnterpriseUserAccount {
    ${eG(!1)}
  }
}
closedAt
createdAt
number
updatedAt
url
reactions(content: THUMBS_UP) {
  totalCount
}
repository {
  databaseId
  id
  name
  owner {
    login
  }
}
comments {
  totalCount
}
assignees(first: 100) {
  nodes {
    ${eq(!1,e)}
  }
}
state
milestone {
  ${eT}
}
labels(first: 100) {
  nodes {
    ${eO}
  }
}
`,ej={"-linked":"-linked",archived:"archived",assignee:"assignee",author:"author",base:"base",closed:"closed",commenter:"commenter",comments:"comments",created:"created",draft:"draft",head:"head",label:"label",language:"language",linked:"linked",in:"in",interactions:"interactions",involves:"involves",is:"is",mentions:"mentions",merged:"merged",milestone:"milestone",no:"no",org:"org",project:"project",reactions:"reactions",repo:"repo",review:"review","reviewed-by":"reviewed-by","review-requested":"review-requested",state:"state",status:"status",team:"team","team-review-requested":"team-review-requested",type:"type",updated:"updated",user:"user","user-review-requested":"user-review-requested"},eQ=RegExp('(([^\\s]+:)?\\"(?:[^\\"\\\\]|\\\\.)*\\"?)|([^\\"\\s]+)',"g"),ez=e=>{let t=[];return(e.match(eQ)??[]).forEach(e=>{e.includes(":")&&"is:closed"!=e&&ej[e.split(":")[0]]&&t.push(e)}),t},eY=(e,t,i,r)=>{let s="issue"===e;return{query:`
query SearchIssuesOrPullRequests($query: String! $after: String) {
  search(type:ISSUE query:$query first: ${r.maxPageSize} after:$after) {
    pageInfo {
      hasNextPage
      endCursor
    }
    nodes {
      ... on ${s?"Issue":"PullRequest"} {
        ${s?eV(r.supportsEmail,r.enterpriseVersion??null):eH(r.supportsDrafts??!1,r.supportsEmail,r.enterpriseVersion??null)}
      }
    }
  }
}`,variables:{query:`is:${e} is:open ${r.includeFromArchivedRepos?"":"archived:false"} ${t}`,after:i}}},eK=(e=[])=>e.some(e=>(null==e?void 0:e.message)==="Field 'isDraft' doesn't exist on type 'PullRequest'"),eZ=/@@ -(\d+)(?:,\d+ | )\+(\d+)(?:,\d+ | )@@(?:\\n)?/,eJ=`
\\ No newline at end of file
+`,eX=(e,t,i,r)=>{let s=eZ.exec(e);if(!s||!s[0]||!s[1])return[];let o=parseInt(s[1],10),n=parseInt(s[2],10),a=e.replace(eJ,`
+`).split(`
`).slice(1),l=o-1,c=n-1,u=a.map(e=>{let t,i;switch(e[0]){case"-":t="DELETED",l+=1,i=`${e.slice(1)}
`;break;case"+":t="ADDED",c+=1,i=`${e.slice(1)}
`;break;default:t="UNMODIFIED",c+=1,l+=1,i=`${e}
`}return{line:i,oldLineNumber:"ADDED"!==t?l:null,newLineNumber:"DELETED"!==t?c:null,type:t}});if(null!==i&&null!==t&&null!==r&&i<t){let e=0,s=u.length,o="LEFT"===r?"oldLineNumber":"newLineNumber";for(let r=0;r<u.length;r++){let n=u[r][o];n===i?e=r:n===t&&(s=r)}u=u.slice(e,s+1)}return u},e0=`
id
databaseId
owner {
  login
}
name
url
sshUrl
defaultBranchRef {
  name
}
viewerPermission
`,e1={__typename:"User",id:"U_kgDNJ5k",databaseId:10137,name:"Deleted user",login:"ghost",email:"",avatarUrl:"https://avatars.githubusercontent.com/u/10137?v=4",url:"https://github.com/ghost"},e2={APPROVED:"APPROVED",CHANGES_REQUESTED:"CHANGES_REQUESTED",COMMENTED:"COMMENTED",REVIEW_REQUESTED:"REVIEW_REQUESTED"},e5={MERGEABLE:"MERGEABLE",CONFLICTING:"CONFLICTS",UNKNOWN:"UNKNOWN"},e4={BEHIND:"BEHIND",BLOCKED:"BLOCKED",UNKNOWN:"UNKNOWN_AND_BLOCKED",UNSTABLE:"UNSTABLE",CLEAN:null,DIRTY:null,DRAFT:null,HAS_HOOKS:null},e7={OPEN:"OPEN",CLOSED:"CLOSED"},e3=["ADMIN","MAINTAIN","TRIAGE","WRITE"],e6=e=>({color:`#${e.color}`,description:e.description,graphQLId:e.id,id:null,name:e.name}),e9=e=>({canCreateWebhook:"ADMIN"===e,canPush:"ADMIN"===e||"MAINTAIN"===e||"WRITE"===e,isAdmin:"ADMIN"===e}),e8=e=>({id:e.databaseId.toString(),graphQLId:e.id,namespace:e.owner.login,name:e.name,webUrl:e.url,httpsUrl:e.url.endsWith(".git")?e.url:`${e.url}.git`,sshUrl:e.sshUrl,defaultBranch:e.defaultBranchRef,permissions:e9(e.viewerPermission)}),te=e=>({canCreateWebhook:e.admin,canPush:e.admin||e.maintain||e.push,isAdmin:e.admin}),tt=e=>({id:e.id.toString(),graphQLId:e.node_id,namespace:e.owner.login,name:e.name,webUrl:e.html_url,httpsUrl:e.clone_url,sshUrl:e.ssh_url,defaultBranch:{name:e.default_branch},permissions:te(e.permissions)}),ti=e=>({path:e.path,isDirectory:"tree"===e.type}),tr={OPEN:"OPEN",CLOSED:"CLOSED",MERGED:"MERGED"},ts={id:!0,graphQLId:!0,name:!0,username:!0,email:!0,avatarUrl:!0,url:!0},to=(e,t=ts)=>{let i={};return t.id&&(i.id="databaseId"in e?e.databaseId.toString():e.id),t.graphQLId&&(i.graphQLId=e.id),t.name&&(i.name=e.name??e.login),t.username&&(i.username=e.login),t.email&&(i.email=e.email??null),t.avatarUrl&&(i.avatarUrl=e.avatarUrl),t.url&&(i.url=e.url),i},tn=(e,t)=>"COMPLETED"!==e?({IN_PROGRESS:"RUNNING",PENDING:"PENDING",QUEUED:"PENDING",REQUESTED:"PENDING",WAITING:"PENDING"})[e]:({ACTION_REQUIRED:"ACTION_REQUIRED",CANCELLED:"CANCELLED",FAILURE:"FAILED",NEUTRAL:null,SKIPPED:"SKIPPED",STALE:"FAILED",STARTUP_FAILURE:"FAILED",SUCCESS:"SUCCESS",TIMED_OUT:"ERROR"})[t],ta=e=>({ERROR:"ERROR",EXPECTED:"PENDING",FAILURE:"FAILED",PENDING:"PENDING",SUCCESS:"SUCCESS"})[e],tl=e=>{var t,i,r,s,o,n,a,l,c,u,h,d;let p=null;p=e.author?e.author:e1;let g=((null==(t=e.reviewRequests)?void 0:t.nodes)||[]).filter(eA).filter(e=>!e.asCodeOwner),m=null==(i=e.headRepository)?void 0:i.url;m&&!m.endsWith(".git")&&(m=`${m}.git`);let f=null==(r=e.repository)?void 0:r.url;f&&!f.endsWith(".git")&&(f=`${f}.git`);let w=g.filter(e=>e.requestedReviewer&&"__typename"in e.requestedReviewer).map(e=>({reviewer:to(e.requestedReviewer),state:"REVIEW_REQUESTED"})).concat(((null==(s=e.latestReviews)?void 0:s.nodes)||[]).filter(eA).map(e=>{let t=e1;return e.author&&e.author.__typename&&(t=e.author),{reviewer:to(t),state:e2[e.state]}}));return{id:void 0!==e.fullDatabaseId?e.fullDatabaseId:e.databaseId.toString(),graphQLId:e.id,title:e.title,number:e.number,state:tr[e.state],commentCount:e.comments.totalCount,upvoteCount:e.reactions.totalCount,author:p&&p.__typename?to(p):null,createdDate:new Date(e.createdAt),isDraft:e.isDraft,repository:{id:e.repository.databaseId,graphQLId:e.repository.id,name:e.repository.name,owner:{login:e.repository.owner.login},remoteInfo:{cloneUrlHTTPS:f,cloneUrlSSH:e.repository.sshUrl}},headRepository:e.headRepository?{id:e.headRepository.databaseId,graphQLId:e.headRepository.id,name:e.headRepository.name,owner:{login:e.headRepository.owner.login},remoteInfo:{cloneUrlHTTPS:m,cloneUrlSSH:e.headRepository.sshUrl}}:null,headCommit:{buildStatuses:(null==(l=null==(a=null==(n=null==(o=e.commits.nodes)?void 0:o.filter(eA)[0])?void 0:n.commit.statusCheckRollup)?void 0:a.contexts.nodes)?void 0:l.filter(eA).map(e=>"context"in e?{completedAt:null,description:e.description,name:e.context,state:ta(e.state),startedAt:new Date(e.createdAt),stage:null,url:e.targetUrl}:{completedAt:e.completedAt?new Date(e.completedAt):null,description:null,name:e.name,state:tn(e.status,e.conclusion),startedAt:e.startedAt?new Date(e.startedAt):null,stage:null,url:e.permalink}))??[]},headRef:e.headRef?{name:e.headRef.name,oid:(null==(c=e.headRef.target)?void 0:c.oid)??null}:null,baseRef:e.baseRef?{name:e.baseRef.name,oid:(null==(u=e.baseRef.target)?void 0:u.oid)??null}:null,url:e.url,updatedDate:new Date(e.updatedAt),closedDate:e.closedAt?new Date(e.closedAt):null,mergedDate:e.mergedAt?new Date(e.mergedAt):null,assignees:e.assignees.nodes?e.assignees.nodes.filter(eA).map(e=>to(e)):null,reviews:w,reviewDecision:L(w),additions:e.additions,deletions:e.deletions,fileCount:e.changedFiles,commitCount:e.commits.totalCount,mergeableState:e4[e.mergeStateStatus]??e5[e.mergeable],milestone:e.milestone?td(e.milestone):null,labels:(null==(d=null==(h=e.labels)?void 0:h.nodes)?void 0:d.filter(eA).map(e6))??[],permissions:{canMerge:e3.includes(e.repository.viewerPermission),canMergeAndBypassProtections:e.viewerCanMergeAsAdmin??!1}}},tc=e=>{var t,i;let{comments:r,isOutdated:s,isResolved:o,originalLine:n,originalStartLine:a,startDiffSide:l}=e,c=null==(t=r.nodes)?void 0:t[0];if(!c)return null;let{author:u,body:h,databaseId:d,id:p,path:g,publishedAt:m,url:f}=c;return{author:u?{avatarUrl:u.avatarUrl,email:null,name:u.login}:null,body:h,createdAt:m?new Date(m):null,diffLines:eX(c.diffHunk,n,a,l),id:d,isOutdated:s,isResolved:o,graphQLId:p,filename:g,replies:(null==(i=r.nodes)?void 0:i.filter(eA).slice(1).map(tu))??[],url:f}},tu=e=>({author:e.author?{avatarUrl:e.author.avatarUrl,email:null,name:e.author.login}:null,body:e.body,createdAt:e.publishedAt?new Date(e.publishedAt):null,graphQLId:e.id,id:e.databaseId,url:e.url}),th=e=>{var t,i,r;let s=null;return s=e.author?e.author:e1,{id:void 0!==e.fullDatabaseId?e.fullDatabaseId:e.databaseId.toString(),graphQLId:e.id,number:e.number,title:e.title,author:s&&s.__typename?to(s):null,commentCount:e.comments.totalCount,closedDate:e.closedAt?new Date(e.closedAt):null,createdDate:new Date(e.createdAt),description:null,state:{name:e7[e.state],color:null},type:null,repository:{id:e.repository.databaseId,graphQLId:e.repository.id,name:e.repository.name,owner:{login:e.repository.owner.login}},url:e.url,updatedDate:new Date(e.updatedAt),assignees:(null==(t=e.assignees.nodes)?void 0:t.filter(eA).map(e=>to(e)))??[],upvoteCount:e.reactions.totalCount,milestone:e.milestone?td(e.milestone):null,labels:(null==(r=null==(i=e.labels)?void 0:i.nodes)?void 0:r.filter(eA).map(e6))??[]}},td=e=>({id:e.number.toString(),graphQLId:e.id.toString(),number:e.number,title:e.title,description:e.description,isOpen:"OPEN"==e.state,url:e.url,startDate:null,dueDate:e.dueOn?new Date(e.dueOn):null}),tp=class extends V{constructor(){super(...arguments),this._scopesCache={},this._enterpriseVersionsCache={}}async getScopes(e){let t=e.token||this.config.token;if(!t)return[];let i=this._scopesCache[t];if(!i){let r=(await eB(this.config,{query:"query { rateLimit(dryRun: true) { __typename } }"},e)).headers["x-oauth-scopes"];i=r?r.split(", "):[],this._scopesCache[t]=i}return i}async getEnterpriseVersion(e){let t=e.baseUrl||this.config.baseUrl;if(!t)return null;let i=this._enterpriseVersionsCache[t];if(!i){let r=await this.config.request({url:`${eL(this.config,e)}/meta`,headers:j(e.token||this.config.token)});if(!r.body.installed_version)return null;i=r.body.installed_version.split(".").slice(0,3).map(e=>parseInt(e,10)),this._enterpriseVersionsCache[t]=i}return i}getEnterpriseAvatarUrlIfNeeded(e,t,i){let r=i.baseUrl||this.config.baseUrl;return!r||r.startsWith(eD)?e:t?`https://avatars.githubusercontent.com/u/e?email=${encodeURIComponent(t)}`:""}async getCurrentUser(e={},t={}){var i;if(e.fields&&!e.fields.length)throw Error('"fields" must contain at least one field or be omitted');let r=Q(e.fields),s=await this.getScopes(t),o=await eB(this.config,{query:`
query getCurrentUser {
  viewer {
    ${eq(!1,eN(s),r)}
  }
}
`},t),n=null==(i=o.body.data)?void 0:i.viewer;if(!n)throw new eR("Current user not found.",o.body.errors);return{data:to(n,r)}}async getAccountsForRepo(e,t={}){var i,r,s,o,n;let a=await this.getScopes(t),{repo:{namespace:l,name:c},cursor:u}=e,h=await eB(this.config,{query:`
query getAccountsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    assignableUsers(first: $first, after: $cursor) {
      nodes {
        ${eq(!1,eN(a))}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:l,name:c,cursor:u,first:100}},t);if(!h.body.data)throw new eR("Could not fetch accounts for repo",h.body.errors);return{pageInfo:(null==(r=null==(i=h.body.data.repository)?void 0:i.assignableUsers)?void 0:r.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(n=null==(o=null==(s=h.body.data.repository)?void 0:s.assignableUsers)?void 0:o.nodes)?void 0:n.map(e=>to(e)))??[]}}async getUserForCommit(e,t={}){var i,r;let s=await eB(this.config,{query:`
query getUserForCommit(
  $owner: String!
  $name: String!
  $oid: GitObjectID!
  $avatarSize: Int
) {
  repository(owner: $owner, name: $name) {
    object(oid: $oid) {
      ... on Commit {
        author {
          name
          email
          avatarUrl(size: $avatarSize)
        }
      }
    }
  }
}
`,variables:{owner:e.repo.namespace,name:e.repo.name,oid:e.oid,avatarSize:e.avatarSize}},t),o=null==(i=s.body.data)?void 0:i.repository;if(!o)throw new eR("Repository not found.",s.body.errors);let n=null==(r=o.object)?void 0:r.author;if(!n)throw new eR("Commit not found.",s.body.errors);return{data:{name:n.name,email:n.email,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(n.avatarUrl,n.email,t)}}}async createCommit(e,t={}){let{commitMessage:i,deletedFiles:r,newOrModifiedFiles:s,repo:o,target:n}=e,a=await eB(this.config,{query:`
mutation createCommitOnBranch(
  $branchName: String!,
  $expectedHeadOid: GitObjectID!,
  $fileChanges: FileChanges!,
  $message: CommitMessage!,
  $repositoryNameWithOwner: String!,
) {
  createCommitOnBranch(input: {
    branch: {
      branchName: $branchName,
      repositoryNameWithOwner: $repositoryNameWithOwner,
    },
    expectedHeadOid: $expectedHeadOid,
    fileChanges: $fileChanges,
    message: $message
  }) {
    commit {
      authoredDate
      committedDate
      oid
    }
    ref {
      name
    }
  }
}
`,variables:{branchName:n.name,expectedHeadOid:n.oid,fileChanges:{additions:Object.entries(s).map(([e,t])=>({contents:ek.Base64.encode(t),path:e})),deletions:r.map(e=>({path:e}))},message:{body:i.description,headline:i.summary},repositoryNameWithOwner:`${o.namespace}/${o.name}`}},t);if(!a.body.data)throw new eR("Could not create commit",a.body.errors);return{data:{name:a.body.data.createCommitOnBranch.ref.name,commit:{authoredDate:new Date(a.body.data.createCommitOnBranch.commit.authoredDate),committedDate:new Date(a.body.data.createCommitOnBranch.commit.committedDate),oid:a.body.data.createCommitOnBranch.commit.oid}}}}async getAccountForEmail(e,t={}){var i,r,s;let o=await this.getScopes(t),n=await eB(this.config,{query:`
query getAccountForEmail($query: String! $avatarSize: Int) {
  search(query: $query, type: USER, first: 1) {
    nodes {
      ... on User {
        ${eq(!0,eN(o))}
      }
    }
  }
}
`,variables:{query:`in:email ${e.email}`,avatarSize:e.avatarSize}},t),a=null==(s=null==(r=null==(i=n.body.data)?void 0:i.search)?void 0:r.nodes)?void 0:s[0];if(!a)throw new eR("Could not find user via email",n.body.errors);return{data:to({...a,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(a.avatarUrl,a.email,t)})}}async getAccountForUsername(e,t={}){var i;let r=await this.getScopes(t),s=await eB(this.config,{query:`
query getUserForUsername($login: String! $avatarSize: Int) {
  user(login: $login) {
    ${eq(!0,eN(r))}
  }
}
`,variables:{login:e.username,avatarSize:e.avatarSize}},t),o=null==(i=s.body.data)?void 0:i.user;if(!o)throw new eR("Could not find user via username",s.body.errors);return{data:to({...o,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(o.avatarUrl,o.email,t)})}}async getOrgsForCurrentUser(e={},t={}){let i=await eB(this.config,{query:`
query getOrgsForCurrentUser($cursor: String, $first: Int!) {
  viewer {
    organizations(first: $first after: $cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        databaseId
        name
        login
        email
        avatarUrl
      }
    }
  }
}
`,variables:{cursor:e.cursor,first:100}},t);if(!i.body.data)throw new eR("Could not fetch orgs for current user",i.body.errors);let r=i.body.data.viewer.organizations.nodes||[];return{pageInfo:i.body.data.viewer.organizations.pageInfo,data:r.map(e=>({id:e.databaseId.toString(),graphQLId:e.id,username:e.login,name:e.name||null,email:e.email||null,avatarUrl:e.avatarUrl}))}}async getOrgMembers(e,t={}){var i,r,s,o,n,a,l,c,u;let h=await eB(this.config,{query:`
query getOrgMember($cursor: String, $first: Int!, $login: String!) {
  viewer {
    organization(login: $login) {
      membersWithRole(first: $first after: $cursor) {
        pageInfo {
          endCursor
          hasNextPage
        }
        nodes {
          ${eq(!1,!0)}
        }
      }
    }
  }
}
`,variables:{cursor:e.cursor,first:100,login:e.org}},t);if(!(null!=(r=null==(i=h.body.data)?void 0:i.viewer.organization)&&r.membersWithRole)&&null!=(s=h.body.errors)&&s.length)throw new eR("Could not read the members of the organization",h.body.errors);let d=(null==(n=null==(o=h.body.data)?void 0:o.viewer.organization)?void 0:n.membersWithRole.nodes)||[];return{pageInfo:{hasNextPage:(null==(l=null==(a=h.body.data)?void 0:a.viewer.organization)?void 0:l.membersWithRole.pageInfo.hasNextPage)??!1,endCursor:(null==(u=null==(c=h.body.data)?void 0:c.viewer.organization)?void 0:u.membersWithRole.pageInfo.endCursor)??null},data:d.map(e=>to({...e,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(e.avatarUrl,e.email,t)}))}}async getRepo(e,t={}){var i;let r=await eB(this.config,{query:`
query getRepo($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    ${e0}
  }
}
`,variables:{owner:e.namespace,name:e.name}},t);if(!(null!=(i=r.body.data)&&i.repository))throw new eR(`Repository ${e.namespace}/${e.name} not found`,r.body.errors);return{data:e8(r.body.data.repository)}}async getRepos(e,t={}){let i=e.map(({namespace:e,name:t},i)=>`
      getRepo_${i}: repository(owner: "${e}", name: "${t}") {
        ${e0}
      }
    `).join(`
`),r=await eB(this.config,{query:`
query batchGetRepos {
  ${i}
}
`},t);if(!r.body.data)throw new eR("Could not fetch repos",r.body.errors);let s=[],o=[];return e.forEach((e,t)=>{let i=r.body.data[`getRepo_${t}`];i?s.push(e8(i)):o.push({input:e})}),{data:s,errors:o}}async fetchMultipleRESTPages(e,t,i,r){let s=[];for(let r=0;r<t;r++)s.push(i(e+r));let o=await Promise.all(s),n=[];for(let e of o){if(!e.body)throw Error(e.statusText||"Unknown error");n=n.concat(e.body.map(e=>r(e)))}let a=o.every(e=>100===e.body.length);return{data:n,pageInfo:{hasNextPage:a,nextPage:a?e+t:null}}}async getReposForCurrentUser(e,t={}){if(e.simultaneousPagesToFetch&&e.simultaneousPagesToFetch>40)throw Error("The argument 'simultaneousPagesToFetch' cannot exceed 40 for 'getReposForCurrentUser'");let i=new URLSearchParams;return i.append("per_page","100"),e.affiliations&&i.append("affiliation",e.affiliations.join(",")),await this.fetchMultipleRESTPages(e.page??1,e.simultaneousPagesToFetch??4,e=>this.config.request({url:`${eL(this.config,t)}/user/repos?${i.toString()}&page=${e}`,headers:{...j(t.token||this.config.token),Accept:"application/vnd.github.raw+json","X-Github-Next-Global-ID":1}}),tt)}async getReposForOrg(e,t={}){if(e.simultaneousPagesToFetch&&e.simultaneousPagesToFetch>40)throw Error("The argument 'simultaneousPagesToFetch' cannot exceed 40 for 'getReposForOrg'");return await this.fetchMultipleRESTPages(e.page??1,e.simultaneousPagesToFetch??4,i=>this.config.request({url:`${eL(this.config,t)}/orgs/${e.orgName}/repos?per_page=100&page=${i}`,headers:{...j(t.token||this.config.token),Accept:"application/vnd.github.raw+json","X-Github-Next-Global-ID":1}}),tt)}async getReposForUsernames(e,t={}){if(!e.usernames.length)return{pageInfo:{endCursor:null,hasNextPage:!1},data:[]};let i=await eB(this.config,{query:`
query getReposForUsernames($query: String!, $cursor: String, $first: Int!) {
  search(query: $query, type: REPOSITORY, first: $first, after: $cursor) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ... on Repository {
        ${e0}
      }
    }
  }
}
`,variables:{query:`fork:true ${e.usernames.map(e=>`user:${e}`).join(" ")}`,cursor:e.cursor,first:100}},t);if(!i.body.data)throw new eR("Could not fetch repos for usernames",i.body.errors);let r=i.body.data.search.nodes||[];return{pageInfo:i.body.data.search.pageInfo,data:r.map(e8)}}async getReposForOwners(e,t={}){return this.getReposForUsernames({usernames:e.owners.filter(e=>e.username).map(e=>e.username),cursor:e.cursor},t)}async getRefs(e,t,i={}){var r;let s=await eB(this.config,{query:`
query getRefs($owner: String!, $name: String!, $refPrefix: String!, $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    refs(refPrefix: $refPrefix first: $first after: $cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        name
        target {
          ... on Commit {
            oid
            authoredDate
            committedDate
          }
        }
      }
    }
  }
}
`,variables:{owner:t.repo.namespace,name:t.repo.name,refPrefix:e,cursor:t.cursor,first:100}},i),o=null==(r=s.body.data)?void 0:r.repository;if(!o)throw new eR("Ref repository not found.",s.body.errors);let n=o.refs;return n?{pageInfo:n.pageInfo,data:(n.nodes||[]).map(e=>{var t;let i=null!=(t=e.target)&&t.oid?e.target:null;return{name:e.name,commit:i?{oid:i.oid,authoredDate:new Date(i.authoredDate),committedDate:new Date(i.committedDate)}:null}})}:{pageInfo:{endCursor:null,hasNextPage:!1},data:[]}}async getBranches(e,t={}){return this.getRefs("refs/heads/",e,t)}async getTags(e,t={}){return this.getRefs("refs/tags/",e,t)}async getBlame(e,t={}){var i;let r=await eB(this.config,{query:`
query getBlame($owner: String!, $name: String!, $ref: String!, $path: String!) {
  repository(owner: $owner, name: $name) {
    object(expression: $ref) {
      ... on Commit {
        blame(path: $path) {
          ranges {
            startingLine
            endingLine
            commit {
              oid
              parents(first:100) {
                nodes {
                  oid
                }
              }
              authoredDate
              committedDate
              message
              author {
                name
                email
                avatarUrl
              }
              committer {
                name
                email
                avatarUrl
              }
              additions
              deletions
              changedFilesIfAvailable
            }
          }
        }
      }
    }
  }
}
`,variables:{owner:e.repo.namespace,name:e.repo.name,ref:e.ref,path:e.path}},t),s=null==(i=r.body.data)?void 0:i.repository;if(!s)throw new eR("Blame repository not found.",r.body.errors);let o=s.object;if(!o||!("blame"in o))throw new eR("Ref not found.",r.body.errors);if(0===o.blame.ranges.length)throw new eR("File not found.",r.body.errors);return{data:{ranges:o.blame.ranges.map(e=>{var t;return{startingLine:e.startingLine,endingLine:e.endingLine,commit:{oid:e.commit.oid,parentOids:(null==(t=e.commit.parents.nodes)?void 0:t.map(e=>e.oid))||[],authoredDate:new Date(e.commit.authoredDate),author:e.commit.author?{name:e.commit.author.name,email:e.commit.author.email,avatarUrl:e.commit.author.avatarUrl}:null,committedDate:new Date(e.commit.committedDate),committer:e.commit.committer?{name:e.commit.committer.name,email:e.commit.committer.email,avatarUrl:e.commit.committer.avatarUrl}:null,message:e.commit.message,fileCount:e.commit.changedFilesIfAvailable,additions:e.commit.additions,deletions:e.commit.deletions}}})}}}async getFileContents(e,t={}){let i=await this.config.request({url:`${eL(this.config,t)}/repos/${e.repo.namespace}/${e.repo.name}/contents/${encodeURIComponent(e.path)}?ref=${e.ref}`,headers:{...j(t.token||this.config.token),Accept:"application/vnd.github.raw+json"}});if(i.headers["content-type"].startsWith("application/json"))throw Error(`GitHub: got directory when fetching "${e.path}", getFileContents does not support fetching directories`);if(!i.headers["content-type"].startsWith("application/vnd.github.raw+json"))throw Error(`GitHub: unsupported content type "${i.headers["content-type"]}" when fetching "${e.path}"`);return{data:new Blob([i.body])}}async searchPullRequests(e,t={}){var i;let r=await this.getEnterpriseVersion(t),s=eN(await this.getScopes(t)),o=t=>eY("pr",t&&"boolean"==typeof e.isDraft?`${e.query} draft:${e.isDraft}`:e.query,e.cursor,{maxPageSize:e.maxPageSize??15,supportsEmail:s,supportsDrafts:t,enterpriseVersion:r,includeFromArchivedRepos:e.includeFromArchivedRepos}),n=await eB(this.config,o(!0),t);n.body.errors&&eK(n.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(n=await eB(this.config,o(!1),t));let{data:a}=n.body;if(!a)throw new eR("Could not search pull requests",n.body.errors);return{pageInfo:{hasNextPage:a.search.pageInfo.hasNextPage,endCursor:a.search.pageInfo.endCursor},data:(null==(i=a.search.nodes)?void 0:i.filter(eA).map(tl))||[]}}async searchIssues(e,t={}){var i;let r=await this.getEnterpriseVersion(t),s=eN(await this.getScopes(t)),o=await eB(this.config,eY("issue",e.query,e.cursor,{supportsEmail:s,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize??100,enterpriseVersion:r}),t),{data:n}=o.body;if(!n)throw new eR("Could not search issues",o.body.errors);return{pageInfo:{hasNextPage:n.search.pageInfo.hasNextPage,endCursor:n.search.pageInfo.endCursor},data:(null==(i=n.search.nodes)?void 0:i.filter(eA).map(th))||[]}}async getPullRequestsAssociatedWithUser(e,t={}){var i;let r=[`involves:${e.username}`];return null!=(i=e.repos)&&i.length&&e.repos.forEach(e=>{r.push(`repo:${e.namespace}/${e.name}`)}),e.labelNames&&e.labelNames.forEach(e=>{r.push(`label:"${e}"`)}),this.searchPullRequests({query:r.join(" "),cursor:e.cursor,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize},t)}async getPullRequestsForRepos(e,t={}){let{assigneeLogins:i,updatedBefore:r,authorLogin:s,repos:o,reviewRequestedLogin:n,startQuery:a,mentionLogin:l,labelNames:c,maxPageSize:u}=e,h=ez(a||"");return o.forEach(e=>{h.push(`repo:${e.namespace}/${e.name}`)}),i&&i.forEach(e=>{h.push(`assignee:${e}`)}),r&&h.push(`updated:<${r}`),s&&h.push(`author:${s}`),n&&h.push(`review-requested:${n}`),l&&h.push(`mentions:${l}`),c&&c.forEach(e=>{h.push(`label:"${e}"`)}),this.searchPullRequests({query:`sort:updated ${h.join(" ")}`,isDraft:e.isDraft,cursor:e.cursor,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:u},t)}async getPullRequestForRepo(e,t={}){var i;let r=await this.getEnterpriseVersion(t),s=eN(await this.getScopes(t)),o=t=>({query:`query getPullRequest(
  $owner: String!
  $name: String!
  $number: Int!
) {
  repository(
    owner: $owner,
    name: $name
  ) {
    pullRequest(number: $number) {
      ${eH(t,s,r)}
    }
  }
}`,variables:{owner:e.repo.namespace,name:e.repo.name,number:e.number}}),n=await eB(this.config,o(!0),t);n.body.errors&&eK(n.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(n=await eB(this.config,o(!1),t));let{data:a}=n.body;if(!a)throw new eR("Could not fetch pull request by number",n.body.errors);let l=null==(i=n.body.data)?void 0:i.repository.pullRequest;return{data:l?tl(l):null}}async getPullRequestByGraphQLId(e,t={}){var i;let r=await this.getEnterpriseVersion(t),s=eN(await this.getScopes(t)),o=t=>({query:`query getPullRequest(
  $graphQLId: ID!
) {
  node(id: $graphQLId) {
    ... on PullRequest {
      ${eH(t,s,r)}
    }
  }
}`,variables:{graphQLId:e.graphQLId}}),n=await eB(this.config,o(!0),t);n.body.errors&&eK(n.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(n=await eB(this.config,o(!1),t));let{data:a}=n.body;if(!a)throw new eR("Could not fetch pull request by id",n.body.errors);let l=null==(i=n.body.data)?void 0:i.node;return{data:l?tl(l):null}}async closePullRequest(e,t={}){var i,r,s;let{pullRequest:{graphQLId:o}}=e;if(!o)throw Error('GitHub requires "graphQLId" for this function.');let n=`mutation ClosePullRequest($pullRequestGraphQLId: ID!) {
  closePullRequest(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`,a=await eB(this.config,{query:`${n}`,variables:{pullRequestGraphQLId:o}},t);if(!(null!=(s=null==(r=null==(i=a.body.data)?void 0:i.closePullRequest)?void 0:r.pullRequest)&&s.id))throw new eR("Could not close pull request",a.body.errors)}async mergePullRequest(e,t={}){var i,r,s,o;let n,{pullRequest:a,mergeStrategy:l}=e;if(!a.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');if(!(null!=(i=a.headRef)&&i.oid))throw Error('GitHub requires "headRef.oid" for this function.');switch(l){case"MERGE_COMMIT":n="MERGE";break;case"REBASE":n="REBASE";break;case"SQUASH":n="SQUASH"}let c=`mutation MergePullRequest(
  $pullRequestGraphQLId: ID!,
  $expectedSourceSha: GitObjectID!,
  $mergeStrategy: PullRequestMergeMethod,
) {
  mergePullRequest(input: {
    pullRequestId: $pullRequestGraphQLId,
    expectedHeadOid: $expectedSourceSha,
    mergeMethod: $mergeStrategy,
  }) {
    pullRequest {
      id
    }
  }
}`,u=await eB(this.config,{query:`${c}`,variables:{pullRequestGraphQLId:a.graphQLId,expectedSourceSha:a.headRef.oid,mergeStrategy:n}},t);if(!(null!=(o=null==(s=null==(r=u.body.data)?void 0:r.mergePullRequest)?void 0:s.pullRequest)&&o.id))throw new eR("Could not merge pull request",u.body.errors)}async setPullRequestMilestone(e,t={}){var i,r,s;let{pullRequest:o,milestone:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestMilestone($pullRequestGraphQLId: ID!, $milestoneGraphQLId: ID) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, milestoneId: $milestoneGraphQLId }) {
    pullRequest {
      id
    }
  }
}`,l=await eB(this.config,{query:`${a}`,variables:{pullRequestGraphQLId:o.graphQLId,milestoneGraphQLId:(null==n?void 0:n.graphQLId)??null}},t);if(!(null!=(s=null==(r=null==(i=l.body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw new eR("Could not set milestone of pull request",l.body.errors)}async markPullRequestReadyForReview(e,t){var i,r,s;let o=`mutation MarkReadyToReview($pullRequestGraphQLId: ID!) {
  markPullRequestReadyForReview(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`,n=await eB(this.config,{query:o,variables:{pullRequestGraphQLId:e}},t);if(!(null!=(s=null==(r=null==(i=n.body.data)?void 0:i.markPullRequestReadyForReview)?void 0:r.pullRequest)&&s.id))throw new eR("Could not mark pull request ready to review",n.body.errors)}async convertPullRequestToDraft(e,t){var i,r,s;let o=`mutation ConvertToDraft($pullRequestGraphQLId: ID!) {
  convertPullRequestToDraft(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`,n=await eB(this.config,{query:o,variables:{pullRequestGraphQLId:e}},t);if(!(null!=(s=null==(r=null==(i=n.body.data)?void 0:i.convertPullRequestToDraft)?void 0:r.pullRequest)&&s.id))throw new eR("Could not convert pull request to draft",n.body.errors)}async setPullRequestAsDraft(e,t={}){let{pullRequest:{graphQLId:i},isDraft:r}=e;if(!i)throw Error('GitHub requires "graphQLId" for this function.');if(r){await this.convertPullRequestToDraft(i,t);return}await this.markPullRequestReadyForReview(i,t)}async setPullRequestReviewers(e,t={}){var i,r,s;let{pullRequest:{reviews:o,graphQLId:n},reviewers:a}=e;if(!o)throw Error('GitHub requires "reviews" for this function');if(!n)throw Error('GitHub requires "graphQLId" for this function.');let l=o.filter(e=>"REVIEW_REQUESTED"!==e.state).map(e=>{if(!e.reviewer.graphQLId)throw Error('GitHub requires reviewer "graphQLId" for this function.');return e.reviewer.graphQLId}),c=a.map(e=>{if(!e.graphQLId)throw Error('GitHub requires reviewer "graphQLId" for this function.');return e.graphQLId}).filter(e=>-1===l.indexOf(e)),u=`mutation SetPullRequestReviewers($pullRequestGraphQLId: ID!, $reviewerGraphQLIds: [ID!]!) {
  requestReviews(input: { pullRequestId: $pullRequestGraphQLId, userIds: $reviewerGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`,h=await eB(this.config,{query:u,variables:{pullRequestGraphQLId:n,reviewerGraphQLIds:c}},t);if(!(null!=(s=null==(r=null==(i=h.body.data)?void 0:i.requestReviews)?void 0:r.pullRequest)&&s.id))throw new eR("Could not set pull request reviewers",h.body.errors)}async reRequestPullRequestReviews(e,t={}){var i,r,s;let{pullRequest:{reviews:o,graphQLId:n},reviewers:a}=e;if(!n)throw Error('GitHub requires "graphQLId" for this function.');if(!o)throw Error('GitHub requires "reviews" for this function.');let l=[];for(let e of a){if(!e.graphQLId)throw Error('GitHub requires reviwer "graphQLId" for this function.');if(!o.find(t=>t.reviewer.graphQLId===e.graphQLId))throw Error("Can only re-request review from existing reviewer.");l.push(e.graphQLId)}let c=`mutation SetPullRequestReviewers($pullRequestGraphQLId: ID!, $reviewerGraphQLIds: [ID!]!) {
  requestReviews(input: { pullRequestId: $pullRequestGraphQLId, userIds: $reviewerGraphQLIds, union: true }) {
    pullRequest {
      id
    }
  }
}`,u=await eB(this.config,{query:c,variables:{pullRequestGraphQLId:n,reviewerGraphQLIds:l}},t);if(!(null!=(s=null==(r=null==(i=u.body.data)?void 0:i.requestReviews)?void 0:r.pullRequest)&&s.id))throw new eR("Could not re-request pull request reviews",u.body.errors)}async setPullRequestAssignees(e,t={}){var i,r,s;let{pullRequest:o,assignees:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=n.map(e=>{if(!e.graphQLId)throw Error('GitHub requires assignee "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetPullRequestAssignees($pullRequestGraphQLId: ID!, $assigneeGraphQLIds: [ID!]!) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, assigneeIds: $assigneeGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`,c=await eB(this.config,{query:l,variables:{pullRequestGraphQLId:o.graphQLId,assigneeGraphQLIds:a}},t);if(!(null!=(s=null==(r=null==(i=c.body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw new eR("Could not set pull request assignees",c.body.errors)}async getReviewsForPullRequest(e,t={}){var i,r,s,o;let{repo:{namespace:n,name:a},pullRequestId:l}=e,c=`query getPullRequests(
  $namespace: String!
  $name: String!
  $pullRequestId: Int!
) {
  repository(
    owner: $namespace,
    name: $name
  ) {
    pullRequest(number: $pullRequestId) {
      reviewThreads(first: 100) {
        nodes {
          isOutdated
          isResolved
          originalLine
          originalStartLine
          startDiffSide
          comments(first: 100) {
            nodes {
              author {
                avatarUrl
                login
              }
              body
              databaseId
              diffHunk
              id
              path
              publishedAt
              pullRequestReview {
                id
              }
              url
            }
          }
        }
      }
      reviews(first: 100) {
        nodes {
          author {
            avatarUrl
            login
          }
          body
          databaseId
          id
          publishedAt
          url
        }
      }
    }
  }
}`,u=await eB(this.config,{query:c,variables:{namespace:n,name:a,pullRequestId:l}},t),h=(null==(r=null==(i=u.body.data)?void 0:i.repository.pullRequest.reviewThreads.nodes)?void 0:r.filter(eA).reduce((e,t)=>{var i,r;if(!(null!=(r=null==(i=t.comments.nodes)?void 0:i[0])&&r.pullRequestReview))return e;let s=t.comments.nodes[0].pullRequestReview,o=tc(t);return o&&(e[s.id]||(e[s.id]=[]),e[s.id].push(o)),e},{}))??{};return{data:(null==(o=null==(s=u.body.data)?void 0:s.repository.pullRequest.reviews.nodes)?void 0:o.filter(eA).filter(e=>h[e.id]).map(e=>({author:e.author?{avatarUrl:e.author.avatarUrl,email:null,name:e.author.login}:null,body:e.body,createdAt:e.publishedAt?new Date(e.publishedAt):null,id:e.databaseId,graphQLId:e.id,reviewComments:h[e.id],url:e.url})))??[]}}async getIssuesAssociatedWithUser(e,t={}){var i;let[r,s]=(null==(i=e.cursor)?void 0:i.split(";"))||[void 0,void 0],o=[];e.labelNames&&e.labelNames.forEach(e=>{o.push(`label:"${e}"`)});let[n,a]=await Promise.all(["null"===r?null:this.searchIssues({query:`author:${e.username} ${o.join(" ")}`,cursor:r,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize},t),"null"===s?null:this.searchIssues({query:`assignee:${e.username} ${o.join(" ")}`,cursor:s,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize},t)]),l={},c=[],u=e=>{l[e.id]||(l[e.id]=!0,c.push(e))};return null==n||n.data.forEach(u),null==a||a.data.forEach(u),{pageInfo:{hasNextPage:(null==n?void 0:n.pageInfo.hasNextPage)||(null==a?void 0:a.pageInfo.hasNextPage)||!1,endCursor:`${(null==n?void 0:n.pageInfo.hasNextPage)&&(null==n?void 0:n.pageInfo.endCursor)||"null"};${(null==a?void 0:a.pageInfo.hasNextPage)&&(null==a?void 0:a.pageInfo.endCursor)||"null"}`},data:c}}async setPullRequestLabels(e,t={}){var i,r,s;let{pullRequest:o,labels:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestLabels($pullRequestGraphQLId: ID!, $labelGraphQLIds: [ID!]) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, labelIds: $labelGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`,l=await eB(this.config,{query:a,variables:{pullRequestGraphQLId:o.graphQLId,labelGraphQLIds:n.map(e=>{if(!e.graphQLId)throw Error('GitHub requires label "graphQLId" for this function.');return e.graphQLId})}},t);if(!(null!=(s=null==(r=null==(i=l.body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw new eR("Could not set pull request labels",l.body.errors)}async getIssuesForRepos(e,t={}){let i=ez(e.startQuery||""),{cursor:r,assigneeLogins:s,updatedBefore:o,authorLogin:n,mentionLogin:a,labelNames:l}=e;return e.repos.forEach(e=>{i.push(`repo:${e.namespace}/${e.name}`)}),s&&s.forEach(e=>{i.push(`assignee:${e}`)}),o&&i.push(`updated:<${o}`),n&&i.push(`author:${n}`),a&&i.push(`mentions:${a}`),l&&l.forEach(e=>{i.push(`label:"${e}"`)}),this.searchIssues({query:`sort:updated ${i.join(" ")}`,cursor:r,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize},t)}async closeIssueWithReason(e,t={}){var i,r,s;let{issue:o,reason:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation CloseIssueWithReason($issueGraphQLId: ID!, $reason: IssueClosedStateReason!) {
  closeIssue(input: { issueId: $issueGraphQLId, stateReason: $reason }) {
    issue {
      id
    }
  }
}`,l=await eB(this.config,{query:a,variables:{issueGraphQLId:o.graphQLId,reason:n}},t);if(!(null!=(s=null==(r=null==(i=l.body.data)?void 0:i.closeIssue)?void 0:r.issue)&&s.id))throw new eR("Could not close issue with reason",l.body.errors)}async closeIssue(e,t={}){var i,r,s;let{issue:o}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let n=`mutation SetIssueState($issueGraphQLId: ID!) {
  updateIssue(input: { id: $issueGraphQLId, state: CLOSED }) {
    issue {
      id
    }
  }
}`,a=await eB(this.config,{query:n,variables:{issueGraphQLId:o.graphQLId}},t);if(!(null!=(s=null==(r=null==(i=a.body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw new eR("Could not close issue",a.body.errors)}async reOpenIssue(e,t={}){var i,r,s;let{issue:o}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let n=`mutation ReOpenIssue($issueGraphQLId: ID!) {
  reopenIssue(input: { issueId: $issueGraphQLId }) {
    issue {
      id
    }
  }
}`,a=await eB(this.config,{query:n,variables:{issueGraphQLId:o.graphQLId}},t);if(!(null!=(s=null==(r=null==(i=a.body.data)?void 0:i.reopenIssue)?void 0:r.issue)&&s.id))throw new eR("Could not reopen issue",a.body.errors)}async setIssueLabels(e,t={}){var i,r,s;let{issue:o,labels:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=n.map(e=>e.graphQLId),l=`mutation SetIssueLabels($issueGraphQLId: ID!, $labelGraphQLIds: [ID!]) {
  updateIssue(input: { id: $issueGraphQLId, labelIds: $labelGraphQLIds }) {
    issue {
      id
    }
  }
}`,c=await eB(this.config,{query:l,variables:{issueGraphQLId:o.graphQLId,labelGraphQLIds:a}},t);if(!(null!=(s=null==(r=null==(i=c.body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw new eR("Could not set issue labels",c.body.errors)}async setIssueMilestone(e,t={}){var i,r,s;let{issue:o,milestone:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');if(n&&!n.graphQLId)throw Error('GitHub requires milestone "graphQLId" for this function.');let a=`mutation SetIssueMilestone($issueGraphQLId: ID!, $milestoneGraphQLId: ID) {
  updateIssue(input: { id: $issueGraphQLId, milestoneId: $milestoneGraphQLId }) {
    issue {
      id
    }
  }
}`,l=await eB(this.config,{query:`${a}`,variables:{issueGraphQLId:o.graphQLId,milestoneGraphQLId:(null==n?void 0:n.graphQLId)??null}},t);if(!(null!=(s=null==(r=null==(i=l.body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw new eR("Could not set milestone of issue",l.body.errors)}async setIssueAssignees(e,t={}){var i,r,s;let{issue:o,assignees:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=n.map(e=>{if(!e.graphQLId)throw Error('GitHub requires assignee "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetIssueAssignees($issueGraphQLId: ID!, $assigneeGraphQLIds: [ID!]!) {
  updateIssue(input: { id: $issueGraphQLId, assigneeIds: $assigneeGraphQLIds }) {
    issue {
      id
    }
  }
}`,c=await eB(this.config,{query:l,variables:{issueGraphQLId:o.graphQLId,assigneeGraphQLIds:a}},t);if(!(null!=(s=null==(r=null==(i=c.body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw new eR("Could not set issue assignees",c.body.errors)}async getMilestonesForRepo(e,t={}){var i,r,s;let{repo:{namespace:o,name:n},cursor:a}=e,l=await eB(this.config,{query:`
query getLabelsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    milestones(first: $first, after: $cursor) {
      nodes {
        ${eT}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:o,name:n,cursor:a,first:100}},t);if(!l.body.data)throw new eR("Could not fetch milestones",l.body.errors);return{pageInfo:(null==(i=l.body.data.repository.milestones)?void 0:i.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(s=null==(r=l.body.data.repository.milestones)?void 0:r.nodes)?void 0:s.map(td))??[]}}async getLabelsForRepo(e,t={}){var i,r,s;let{repo:{namespace:o,name:n},cursor:a}=e,l=await eB(this.config,{query:`
query getLabelsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    labels(first: $first, after: $cursor) {
      nodes {
        ${eO}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:o,name:n,cursor:a,first:100}},t);if(!l.body.data)throw new eR("Could not fetch labels",l.body.errors);return{pageInfo:(null==(i=l.body.data.repository.labels)?void 0:i.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(s=null==(r=l.body.data.repository.labels)?void 0:r.nodes)?void 0:s.map(e6))??[]}}async getTreeForRepo(e,t={}){let i=await this.config.request({url:`${eL(this.config,t)}/repos/${e.repo.namespace}/${e.repo.name}/git/trees/${e.branch}?recursive=1`,headers:{...j(t.token||this.config.token)}});if(!i.body)throw Error("Could not fetch trees");return{data:i.body.tree.map(ti)}}},tg=/\/api\/v\d+$/,tm=e=>{if(e.endsWith("/api/graphql"))throw Error("The graphql endpoint is being used as the baseUrl. This package uses both GraphQL and REST APIs, and the REST version cannot be assumed. Use the REST endpoint as the baseUrl instead.")},tf=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(tm(i=i.replace(/\/$/,"")),tg.test(i)||(i+="/api/v4"),i):"https://gitlab.com/api/v4"},tw=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(tm(i=i.replace(/\/$/,"")),tg.test(i)&&(i=i.replace(tg,"")),`${i}/api/graphql`):"https://gitlab.com/api/graphql"},tv=(e,t,i)=>{let r=j(i.token||e.token);return e.request({url:tw(e,i),method:"POST",headers:{...r,"Content-Type":"application/json"},body:JSON.stringify(t)})},ty=e=>null==e?void 0:e.map(e=>`"${e.message}"`).join(", "),tb=e=>e.split("/").slice(0,-1).join("/"),tC=e=>e.split("/").at(-1)??"",tk=e=>({id:e.id.replace(tA,""),graphQLId:e.id,namespace:tb(e.fullPath),name:tC(e.fullPath),webUrl:e.webUrl}),tS=e=>({id:e.id.replace(tA,""),graphQLId:e.id,httpsUrl:e.httpUrlToRepo,namespace:tb(e.fullPath),name:tC(e.fullPath),sshUrl:e.sshUrlToRepo,webUrl:e.webUrl}),tR={assigned:"assignedMergeRequests",authored:"authoredMergeRequests",reviewRequested:"reviewRequestedMergeRequests"},tP={CAN_BE_MERGED:"MERGEABLE",CANNOT_BE_MERGED:"CONFLICTS",CANNOT_BE_MERGED_RECHECK:"UNKNOWN",UNCHECKED:"UNKNOWN",CHECKING:"UNKNOWN"},tA="gid://gitlab/Project/",tI=`
description
dueDate
id
iid
startDate
state
title
webPath
`,tD=`
id
fullPath
webUrl
httpUrlToRepo
sshUrlToRepo
repository {
  rootRef
}
userPermissions {
  adminOperations
  downloadCode
  pushCode
}
`,t$=`
id
name
username
publicEmail
avatarUrl
webUrl
`,tT=`
color
description
id
title
`,tE=`
author {
  ${t$}
}
assignees {
  nodes {
    ${t$}
  }
}
closedAt
createdAt
description
dueDate
id
iid
labels {
  nodes {
    ${tT}
  }
}
state
title
type
updatedAt
upvotes
userNotesCount
webUrl
milestone {
  ${tI}
}
`,t_=`
stages {
  nodes {
    jobs {
      nodes {
        allowFailure
        createdAt
        finishedAt
        id
        name
        status
      }
    }
    name
  }
}
`,tO=(e,t,i)=>`
id
state
author {
  ${t$}
}
diffRefs {
  baseSha
  headSha
}
diffStatsSummary {
  additions
  deletions
  fileCount
}
commitCount
draft
userNotesCount
upvotes
title
webUrl
createdAt
updatedAt
mergedAt
iid
targetBranch
sourceBranch
assignees {
  nodes {
    ${t$}
  }
}
reviewers {
  nodes {
    ${t$}
    mergeRequestInteraction {
      approved
      reviewState
    }
  }
}
mergeStatusEnum
labels {
  nodes {
    ${tT}
  }
}
${e?"project { id httpUrlToRepo fullPath sshUrlToRepo webUrl archived } sourceProject { id httpUrlToRepo fullPath sshUrlToRepo webUrl }":""}
${t?`milestone { ${tI} }`:""}
${i?`headPipeline { ${t_} }`:""}
`,tx=e=>`${e.namespace}/${e.name}`,tF=e=>`${e.namespace}/${e.name}`,tL=e=>({canCreateWebhook:e.adminOperations,canPush:e.pushCode,isAdmin:e.adminOperations}),tB=e=>{var t;return{id:e.id.replace(tA,""),graphQLId:e.id,namespace:tb(e.fullPath),name:tC(e.fullPath),webUrl:e.webUrl,httpsUrl:e.httpUrlToRepo,sshUrl:e.sshUrlToRepo,defaultBranch:null!=(t=e.repository)&&t.rootRef?{name:e.repository.rootRef}:null,permissions:tL(e.userPermissions)}},tU=e=>({path:e.path,isDirectory:"tree"===e.type}),tN={opened:"OPEN",merged:"MERGED",closed:"CLOSED"},tq=(e,t,i)=>{let r=e.avatarUrl;return!t&&null!=r&&r.startsWith("/")?r=`https://gitlab.com${r}`:t&&null!=r&&r.startsWith("/")&&i&&(r=`${i.replace(/\/+?$/,"")}${r}`),{id:e.id.replace("gid://gitlab/User/",""),graphQLId:e.id,name:e.name,username:e.username,email:e.publicEmail??null,avatarUrl:r,url:e.webUrl}},tW=e=>({color:e.color,description:e.description,id:e.id.replace("gid://gitlab/ProjectLabel/",""),graphQLId:e.id,name:e.title}),tM=(e,t)=>e?"FAILED"===e&&t?"WARNING":({CANCELED:"CANCELLED",CREATED:"PENDING",FAILED:"FAILED",MANUAL:"OPTIONAL_ACTION_REQUIRED",PENDING:"PENDING",PREPARING:"RUNNING",RUNNING:"RUNNING",SCHEDULED:"PENDING",SKIPPED:"SKIPPED",SUCCESS:"SUCCESS",WAITING_FOR_CALLBACK:"PENDING",WAITING_FOR_RESOURCE:"PENDING"})[e]:null,tG=(e,t,i)=>{var r;return{reviewer:tq(e,t,i),state:null!=(r=e.mergeRequestInteraction)&&r.reviewState?({APPROVED:"APPROVED",REQUESTED_CHANGES:"CHANGES_REQUESTED",REVIEWED:"COMMENTED",UNAPPROVED:"REVIEW_REQUESTED",UNREVIEWED:"REVIEW_REQUESTED"})[e.mergeRequestInteraction.reviewState]:"REVIEW_REQUESTED"}},tH=(e,t,i,r,s)=>{var o,n,a,l,c,u,h,d,p,g,m,f;let w=null!=(o=e.reviewers)&&o.nodes?e.reviewers.nodes.map(e=>tG(e,r,s)):null;return{id:e.id.replace("gid://gitlab/MergeRequest/",""),graphQLId:e.id,title:e.title,number:parseInt(e.iid,10),state:tN[e.state],commentCount:e.userNotesCount||0,upvoteCount:e.upvotes,author:e.author?tq(e.author,r,s):null,createdDate:new Date(e.createdAt),isDraft:e.draft,repository:{id:t.id,graphQLId:t.graphQLId,name:t.name,owner:{login:t.namespace},remoteInfo:t.httpsUrl&&t.sshUrl?{cloneUrlHTTPS:t.httpsUrl,cloneUrlSSH:t.sshUrl}:null},headRepository:i?{id:i.id,graphQLId:i.graphQLId,name:i.name,owner:{login:i.namespace},remoteInfo:{cloneUrlHTTPS:i.httpsUrl,cloneUrlSSH:i.sshUrl}}:null,headCommit:{buildStatuses:(null==(l=null==(a=null==(n=e.headPipeline)?void 0:n.stages)?void 0:a.nodes)?void 0:l.flatMap(e=>{var i,r;return(null==(r=null==(i=e.jobs)?void 0:i.nodes)?void 0:r.map(i=>({completedAt:i.finishedAt?new Date(i.finishedAt):null,description:null,name:i.name??null,state:tM(i.status,i.allowFailure),stage:e.name??null,startedAt:new Date(i.createdAt),url:`${t.webUrl}/-/jobs/${i.id.replace("gid://gitlab/Ci::Build/","")}`})))??[]}))??[]},baseRef:{name:e.targetBranch,oid:(null==(c=e.diffRefs)?void 0:c.baseSha)??null},headRef:{name:e.sourceBranch,oid:(null==(u=e.diffRefs)?void 0:u.headSha)??null},url:e.webUrl,updatedDate:new Date(e.updatedAt),closedDate:e.mergedAt?new Date(e.mergedAt):null,mergedDate:e.mergedAt?new Date(e.mergedAt):null,assignees:null!=(h=e.assignees)&&h.nodes?e.assignees.nodes.map(e=>tq(e,r,s)):null,reviews:w,reviewDecision:L(w),additions:(null==(d=e.diffStatsSummary)?void 0:d.additions)||0,deletions:(null==(p=e.diffStatsSummary)?void 0:p.deletions)||0,fileCount:(null==(g=e.diffStatsSummary)?void 0:g.fileCount)||0,commitCount:e.commitCount||0,mergeableState:tP[e.mergeStatusEnum],milestone:e.milestone?tj(e.milestone,t.webUrl):null,labels:(null==(f=null==(m=e.labels)?void 0:m.nodes)?void 0:f.map(tW))??[],permissions:null}},tV=(e,t,i,r)=>{var s,o;return{author:tq(e.author,i,r),assignees:e.assignees.nodes.map(e=>tq(e,i,r)),commentCount:e.userNotesCount,closedDate:e.closedAt?new Date(e.closedAt):null,createdDate:new Date(e.createdAt),description:e.description,graphQLId:e.id,id:e.id.replace("gid://gitlab/Issue/",""),labels:(null==(o=null==(s=e.labels)?void 0:s.nodes)?void 0:o.map(tW))??[],number:e.iid,repository:{id:t.id.replace(tA,""),graphQLId:t.id,name:t.name,owner:{login:t.namespace}},updatedDate:new Date(e.updatedAt),upvoteCount:e.upvotes,state:{name:e.state,color:null},type:e.type,title:e.title,url:e.webUrl,milestone:e.milestone?tj(e.milestone,t.webUrl):null}},tj=(e,t)=>({id:e.id.replace("gid://gitlab/Milestone/",""),graphQLId:e.id,number:parseInt(e.iid,10),title:e.title,description:e.description,isOpen:"active"===e.state,url:`${t}/-/${e.webPath.replace(/.+?\/-\//,"")}`,startDate:e.startDate?new Date(e.startDate):null,dueDate:e.dueDate?new Date(e.dueDate):null}),tQ=class extends V{getIsSelfHosted(e){return!!e.baseUrl||!!this.config.baseUrl}async getCurrentUser(e={},t={}){var i;let r=null==(i=(await tv(this.config,{query:`
query getCurrentUser {
  currentUser {
    ${t$}
  }
}
`},t)).body.data)?void 0:i.currentUser;if(!r)throw Error("Current user not found.");return{data:tq(r,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)}}async getUserForCommit(e,t={}){var i,r,s,o;let n=tx(e.repo),a=null==(o=null==(s=null==(r=null==(i=(await tv(this.config,{query:`
query getUserForCommit($fullPath: ID!, $oid: String!) {
  project(fullPath: $fullPath) {
    repository {
      tree(ref: $oid) {
        lastCommit {
          authorName
          authorEmail
          authorGravatar
        }
      }
    }
  }
}
`,variables:{fullPath:n,oid:e.oid}},t)).body.data)?void 0:i.project)?void 0:r.repository)?void 0:s.tree)?void 0:o.lastCommit;if(!a)throw Error("Commit not found.");return{data:{name:a.authorName,email:a.authorEmail,avatarUrl:a.authorGravatar}}}async getAccountForEmail(e,t={}){var i,r,s;let o=null==(s=null==(r=null==(i=(await tv(this.config,{query:`
query getAccountForEmail($email: String!) {
  users(search: $email) {
    nodes {
      ${t$}
    }
  }
}
`,variables:{email:e.email}},t)).body.data)?void 0:i.users)?void 0:r.nodes)?void 0:s[0];if(!o)throw Error("User not found.");return{data:tq(o,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)}}async getAccountForUsername(e,t={}){var i;let r=null==(i=(await tv(this.config,{query:`
query getAccountForUsername($username: String!) {
  user(username: $username) {
    ${t$}
  }
}
`,variables:{username:e.username}},t)).body.data)?void 0:i.user;if(!r)throw Error("User not found.");return{data:tq(r,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)}}async getAccountsForRepo(e,t={}){var i,r,s,o,n,a,l;let{repo:{namespace:c,name:u},cursor:h}=e,d=await tv(this.config,{query:`
query getAccountsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    projectMembers(after: $after) {
      nodes {
        user {
          ${t$}
        }
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${c}/${u}`,after:h}},t),p=null==(o=null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.projectMembers)?void 0:s.nodes)?void 0:o.map(e=>e.user).filter(e=>null!==e);return{pageInfo:(null==(l=null==(a=null==(n=d.body.data)?void 0:n.project)?void 0:a.projectMembers)?void 0:l.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==p?void 0:p.map(e=>tq(e,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)))??[]}}async getRepo(e,t={}){var i;let r=tx(e),s=await tv(this.config,{query:`
query getRepo($fullPath: ID!) {
  project(fullPath: $fullPath) {
    ${tD}
  }
}
`,variables:{fullPath:r}},t);if(!(null!=(i=s.body.data)&&i.project))throw Error(`Repository ${r} not found`);return{data:tB(s.body.data.project)}}async getReposBase(e,t={}){let i=e.map(tx).map((e,t)=>`
      getRepo_${t}: project(fullPath: "${e}") {
        ${tD}
      }
    `).join(`
`),r=await tv(this.config,{query:`
query batchGetRepos {
  ${i}
}
`},t);if(!r.body.data)throw Error(ty(r.body.errors)||r.statusText||"Unknown error");let s=[],o=[];return e.forEach((e,t)=>{let i=r.body.data[`getRepo_${t}`];i?s.push(tB(i)):o.push({input:e})}),{data:s,errors:o}}async getRepos(e,t={}){let i=[];for(let t=0;t<e.length;t+=15)i.push(e.slice(t,t+15));return(await Promise.all(i.map(e=>this.getReposBase(e,t)))).reduce((e,t)=>({data:[...e.data,...t.data],errors:[...e.errors,...t.errors]}),{data:[],errors:[]})}async getReposForCurrentUser(e,t={}){var i,r,s,o,n;let a=await tv(this.config,{query:`
query getReposForCurrentUser($after: String) {
  projects(membership: true first: 100 after: $after) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ${tD}
    }
  }
}
`,variables:{after:e.cursor}},t);if(!(null!=(i=a.body.data)&&i.projects))throw Error(ty(a.body.errors)||a.statusText||"Unknown error");let l=(null==(s=null==(r=a.body.data)?void 0:r.projects)?void 0:s.nodes)||[];return{pageInfo:null==(n=null==(o=a.body.data)?void 0:o.projects)?void 0:n.pageInfo,data:l.map(tB)}}async getRefs(e,t,i={}){var r;let s=tx(t.repo),o=new URL(`${tf(this.config,i)}/projects/${encodeURIComponent(s)}/repository/${e}`);o.searchParams.set("page",(null==(r=t.page)?void 0:r.toString())||"1"),o.searchParams.set("per_page","100");let n=await this.config.request({url:o.toString(),headers:j(i.token||this.config.token)}),a=n.headers["x-next-page"];return{pageInfo:{hasNextPage:!!a,nextPage:a?parseInt(a,10):null},data:n.body.map(e=>({name:e.name,commit:{oid:e.commit.id,authoredDate:new Date(e.commit.authored_date),committedDate:new Date(e.commit.committed_date)}}))}}async getBranches(e,t={}){return this.getRefs("branches",e,t)}async getTags(e,t={}){return this.getRefs("tags",e,t)}async getBlame(e,t={}){let i=tx(e.repo),r=new URL(`${tf(this.config,t)}/projects/${encodeURIComponent(i)}/repository/files/${encodeURIComponent(e.path)}/blame`);r.searchParams.set("ref",e.ref);let s=await this.config.request({url:r.toString(),headers:j(t.token||this.config.token)}),o=0;return{data:{ranges:s.body.map(e=>({startingLine:o+1,endingLine:o+=e.lines.length,commit:{oid:e.commit.id,parentOids:e.commit.parent_ids,authoredDate:new Date(e.commit.authored_date),author:{name:e.commit.author_name,email:e.commit.author_email,avatarUrl:null},committedDate:new Date(e.commit.committed_date),committer:{name:e.commit.committer_name,email:e.commit.committer_email,avatarUrl:null},message:e.commit.message,fileCount:null,additions:null,deletions:null}}))}}}async getPullRequestsForUser(e,t={}){var i,r,s,o;let n="";null!=(i=e.repo)&&i.id?n=`projectId:"${e.repo.id}"`:null!=(r=e.repo)&&r.namespace&&null!=(s=e.repo)&&s.name&&(n=`projectPath:"${e.repo.namespace}/${e.repo.name}"`);let a=tR[e.association],l=await tv(this.config,{query:`
query getPullRequestsForUser($username: String! $cursor: String $labelNames: [String!]) {
  user(username: $username) {
    ${a}(state:opened first:100 after:$cursor labels: $labelNames${n?` ${n}`:""}) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        ${tO(!0,!0,!0)}
      }
    }
  }
}
`,variables:{username:e.username,cursor:e.cursor,labelNames:e.labelNames}},t);if(!l.body.data)throw Error(ty(l.body.errors)||l.statusText||"Unknown error");if(!l.body.data.user)throw Error("User not found");let c=l.body.data.user[a];if(!c)throw Error("Unexpected response");return{pageInfo:c.pageInfo,data:(null==(o=c.nodes)?void 0:o.filter(t=>e.includeFromArchivedRepos||!t.project.archived).map(e=>tH(e,tS(e.project),tS(e.sourceProject),this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)))||[]}}async getPullRequestsAssociatedWithUser(e,t={}){var i,r;let[s,o,n]=(null==(i=e.cursor)?void 0:i.split(";"))||[void 0,void 0,void 0],a=(null==s?void 0:s.split("-"))||[],l=(null==o?void 0:o.split("-"))||[],c=(null==n?void 0:n.split("-"))||[],u=[],h=[],d=[],p=0;do{let i=e.repos&&e.repos[p];"null"===a[p]?u.push(null):u.push(this.getPullRequestsForUser({username:e.username,association:"authored",cursor:a[p],includeFromArchivedRepos:e.includeFromArchivedRepos,labelNames:e.labelNames,...i&&{repo:i}},t)),"null"===l[p]?h.push(null):h.push(this.getPullRequestsForUser({username:e.username,association:"assigned",cursor:l[p],includeFromArchivedRepos:e.includeFromArchivedRepos,labelNames:e.labelNames,...i&&{repo:i}},t)),"null"===c[p]?d.push(null):d.push(this.getPullRequestsForUser({username:e.username,association:"reviewRequested",cursor:c[p],includeFromArchivedRepos:e.includeFromArchivedRepos,labelNames:e.labelNames,...i&&{repo:i}},t)),p++}while(p<((null==(r=e.repos)?void 0:r.length)||0))let g=[u,h,d].flat(),m=await Promise.all(g),f={},w=[],v=e=>{f[e.id]||(f[e.id]=!0,w.push(e))},y=!1,b=m.map((t,i)=>{var r;let s="";return t&&t.data.forEach(v),null!=t&&t.pageInfo.hasNextPage?(y=!0,s+=`${t.pageInfo.endCursor||"null"}`):s+="null",null!=(r=e.repos)&&r.length&&(i+1)%e.repos.length!=0?s+="-":i+1<m.length&&(s+=";"),s}).join("");return{pageInfo:{hasNextPage:y,endCursor:b},data:w}}getVariablesForPullRequests(e){let{updatedBefore:t,isDraft:i,authorLogin:r,assigneeLogins:s,labelNames:o,reviewRequestedLogin:n}=e||{},a={},l=[],c=[],u=(e,t,i)=>{l.push(`$${e}: ${i}`),c.push(`${e}: $${e}`),a[e]=t};return t&&u("updatedBefore",t,"Time"),r&&u("authorUsername",r,"String"),s&&u("assigneeUsername",s[0],"String"),o&&u("labelName",o,"[String]"),null!=i&&u("draft",i,"Boolean"),n&&u("reviewerUsername",n,"String"),{variables:a,variableTypes:l,mergeRequestArguments:c}}async getPullRequestsForRepoBase(e,t={},i){var r,s,o;let{cursor:n,repo:a}=e||{},l=tx(a),{variables:c,variableTypes:u,mergeRequestArguments:h}=this.getVariablesForPullRequests(e),d={fullPath:l,...c},p=await tv(this.config,{query:`
query getPullRequestsForRepo(
  $fullPath: ID!
  $after: String
  ${u.length?u.join(" "):""}
) {
  project(
    fullPath: $fullPath
  ) {
    id
    fullPath
    webUrl
    archived
    mergeRequests(
      first: 100
      state: opened
      sort: UPDATED_DESC
      after: $after
      ${h.length?h.join(" "):""}
    ) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        ${tO(!1,!0,!0)}
      }
    }
  }
}
`,variables:{...d,after:n}},t),g=[],m=null==(r=p.body.data)?void 0:r.project;if(!i&&null!=m&&m.archived)return{pageInfo:null,data:[]};let f=tk(m||{id:"",fullPath:"",webUrl:""});return((null==(s=null==m?void 0:m.mergeRequests)?void 0:s.nodes)||[]).forEach(e=>{g.push(tH(e,f,null,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl))}),{pageInfo:null==(o=null==m?void 0:m.mergeRequests)?void 0:o.pageInfo,data:g}}async getPullRequestsForRepo(e,t={}){return this.getPullRequestsForRepoBase(e,t,!1)}async getPullRequestsForRepos(e,t={}){let{repos:i,assigneeLogins:r,updatedBefore:s,authorLogin:o,labelNames:n,isDraft:a,reviewRequestedLogin:l}=e;return{data:(await Promise.all(i.map(i=>this.getPullRequestsForRepoBase({repo:i,assigneeLogins:r,updatedBefore:s,authorLogin:o,labelNames:n,isDraft:a,reviewRequestedLogin:l},t,e.includeFromArchivedRepos??!1)))).flatMap(e=>e.data)}}async closePullRequest(e,t={}){var i,r,s;let{pullRequest:o}=e,n=`mutation ClosePullRequest($fullPath: ID!, $pullRequestId: String!) {
  mergeRequestUpdate(input: { projectPath: $fullPath, iid: $pullRequestId, state: CLOSED }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,a=null==(i=(await tv(this.config,{query:n,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString()}},t)).body.data)?void 0:i.mergeRequestUpdate;if(!(null!=(r=null==a?void 0:a.mergeRequest)&&r.id)||(null==(s=null==a?void 0:a.errors)?void 0:s.length)!==0)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i,r,s,o;let{pullRequest:n,mergeStrategy:a}=e;if(!(null!=(i=n.headRef)&&i.oid))throw Error('GitLab requires "headRef.oid" for this function.');let l=`mutation MergePullRequest(
  $fullPath: ID!,
  $pullRequestId: String!,
  $expectedSourceSha: String!,
  $squash: Boolean!,
) {
  mergeRequestAccept(input: {
    projectPath: $fullPath,
    iid: $pullRequestId,
    sha: $expectedSourceSha,
    squash: $squash,
}) {
    errors,
    mergeRequest {
      id
    }
  }
}`,c=null==(r=(await tv(this.config,{query:l,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString(),expectedSourceSha:n.headRef.oid,squash:"SQUASH"===a}},t)).body.data)?void 0:r.mergeRequestAccept;if(!(null!=(s=null==c?void 0:c.mergeRequest)&&s.id)||(null==(o=null==c?void 0:c.errors)?void 0:o.length)!==0)throw Error("Could not merge pull request")}async setPullRequestMilestone(e,t={}){var i,r,s;let{pullRequest:o,milestone:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestMilestone($fullPath: ID!, $pullRequestId: String!, $milestoneGraphQLId: MilestoneID) {
  mergeRequestSetMilestone(input: { projectPath: $fullPath, iid: $pullRequestId, milestoneId: $milestoneGraphQLId }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,l=await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),milestoneGraphQLId:null==n?void 0:n.graphQLId}},t),c=null==(i=l.body.data)?void 0:i.mergeRequestSetMilestone;if(!(null!=(r=null==c?void 0:c.mergeRequest)&&r.id)||l.body.errors||(null==(s=null==c?void 0:c.errors)?void 0:s.length)!==0)throw Error("Could not set milestone of pull request")}async setPullRequestAsDraft(e,t={}){var i,r,s;let{pullRequest:o,isDraft:n}=e,a=`mutation MergeRequestSetDraft($fullPath: ID!, $pullRequestId: String!, $isDraft: Boolean!) {
  mergeRequestSetDraft(input: { projectPath: $fullPath, iid: $pullRequestId, draft: $isDraft }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,l=null==(i=(await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),isDraft:n}},t)).body.data)?void 0:i.mergeRequestSetDraft;if(!(null!=(r=null==l?void 0:l.mergeRequest)&&r.id)||(null==(s=null==l?void 0:l.errors)?void 0:s.length)!==0)throw Error("Could not set pull request as draft")}async setPullRequestReviewers(e,t={}){var i,r,s;let{pullRequest:o,reviewers:n}=e,a=n.map(e=>{if(!e.username)throw Error('GitLab requires reviewer "username" for this function.');return e.username}),l=`mutation MergeRequestSetReviewers($fullPath: ID!, $pullRequestId: String!, $reviewerUsernames: [String!]!) {
  mergeRequestSetReviewers(input: { projectPath: $fullPath, iid: $pullRequestId, reviewerUsernames: $reviewerUsernames }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,c=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),reviewerUsernames:a}},t)).body.data)?void 0:i.mergeRequestSetReviewers;if(!(null!=(r=null==c?void 0:c.mergeRequest)&&r.id)||(null==(s=null==c?void 0:c.errors)?void 0:s.length)!==0)throw Error("Could not set pull request reviewers")}async reRequestPullRequestReview(e,t={}){var i,r,s;let{pullRequest:o,reviewer:n}=e;if(!n.graphQLId)throw Error('GitLab requires reviwer "graphQLId" for this function.');let a=`mutation MergeRequestReviewerRereview($fullPath: ID!, $pullRequestId: String!, $reviewerUserId: UserID!) {
  mergeRequestReviewerRereview(input: { projectPath: $fullPath, iid: $pullRequestId, userId: $reviewerUserId }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,l=null==(i=(await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),reviewerUserId:n.graphQLId}},t)).body.data)?void 0:i.mergeRequestReviewerRereview;if(!(null!=(r=null==l?void 0:l.mergeRequest)&&r.id)||(null==(s=null==l?void 0:l.errors)?void 0:s.length)!==0)throw Error("Could not set pull request reviewers")}async reRequestPullRequestReviews(e,t={}){let{pullRequest:i,reviewers:r}=e,s=i.reviews;if(!s)throw Error('GitLab requires "reviews" for this function.');let o=r.filter(e=>s.find(t=>t.reviewer.graphQLId===e.graphQLId));await Promise.all(o.map(e=>this.reRequestPullRequestReview({pullRequest:i,reviewer:e},t)))}async setPullRequestAssignees(e,t={}){var i,r,s;let{pullRequest:o,assignees:n}=e,a=n.map(e=>{if(!e.username)throw Error('GitLab requires assignee "username" for this function.');return e.username}),l=`mutation MergeRequestSetAssignees($fullPath: ID!, $pullRequestId: String!, $assigneeUsernames: [String!]!) {
  mergeRequestSetAssignees(input: { projectPath: $fullPath, iid: $pullRequestId, assigneeUsernames: $assigneeUsernames }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,c=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),assigneeUsernames:a}},t)).body.data)?void 0:i.mergeRequestSetAssignees;if(!(null!=(r=null==c?void 0:c.mergeRequest)&&r.id)||(null==(s=null==c?void 0:c.errors)?void 0:s.length)!==0)throw Error("Could not set pull request assignees")}async setPullRequestLabels(e,t={}){var i,r,s;let{pullRequest:o,labels:n}=e,a=n.map(e=>{if(!e.graphQLId)throw Error('GitLab requires "graphQLId" for labels in this function.');return e.graphQLId}),l=`mutation SetPullRequestLabels($fullPath: ID!, $pullRequestId: String!, $labelGraphQLIds: [LabelID!]!) {
  mergeRequestSetLabels(input: { projectPath: $fullPath, iid: $pullRequestId, labelIds: $labelGraphQLIds }) {
    mergeRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),labelGraphQLIds:a}},t)).body.data)?void 0:i.mergeRequestSetLabels)?void 0:r.mergeRequest)&&s.id))throw Error("Could not set pull request labels")}async getIssue(e,t={}){var i,r,s;let o=tF(e),n=await tv(this.config,{query:`
query GetSingleIssue($projectId: ID!, $issueNumber: String!) {
  project(fullPath: $projectId) {
    id
    fullPath
    webUrl
    issue(iid: $issueNumber) {
      ${tE}
    }
  }
}
`,variables:{issueNumber:e.number,projectId:o}},t);if(!(null!=(i=n.body.data)&&i.project))throw Error(`Repository ${o} not found`);if(!(null!=(s=null==(r=n.body.data)?void 0:r.project)&&s.issue))throw Error(`Issue ${e.number} not found`);return{data:tV(n.body.data.project.issue,tk(n.body.data.project),this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)}}getVariablesForIssues(e){let{updatedBefore:t,authorLogin:i,assigneeLogins:r,labelNames:s}=e||{},o={},n=[],a=[],l=(e,t,i)=>{n.push(`$${e}: ${i}`),a.push(`${e}: $${e}`),o[e]=t};return t&&l("updatedBefore",t,"Time"),i&&l("authorUsername",i,"String"),r&&l("assigneeUsername",r[0],"String"),s&&l("labelName",s,"[String]"),{variables:o,variableTypes:n,issueArguments:a}}async getIssuesForRepo(e,t={}){var i,r,s;let{cursor:o,repo:n}=e||{},a=tx(n),{variables:l,variableTypes:c,issueArguments:u}=this.getVariablesForIssues(e),h={fullPath:a,...l},d=`
      query GetIssuesFromProject(
        $fullPath: ID!
        $after: String
        ${c.length?c.join(" "):""}
      ) {
        project(
          fullPath: $fullPath
        ) {
          id
          fullPath
          webUrl
          issues(
            first: 100
            state: opened
            sort: UPDATED_DESC
            after: $after
            ${u.length?u.join(" "):""}
          ) {
            nodes {
              ${tE}
            }
            pageInfo {
              endCursor
              hasNextPage
            }
          }
        }
      }`,p=await tv(this.config,{query:d,variables:{...h,after:o}},t),g=[],m=null==(i=p.body.data)?void 0:i.project,f=tk(m||{id:"",fullPath:"",webUrl:""});return((null==(r=null==m?void 0:m.issues)?void 0:r.nodes)||[]).forEach(e=>{g.push(tV(e,f,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl))}),{pageInfo:(null==(s=null==m?void 0:m.issues)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:g.sort((e,t)=>(e.updatedDate||e.createdDate).getTime()-(t.updatedDate||t.createdDate).getTime())}}async getIssuesForRepos(e,t={}){var i,r,s,o,n;let{cursor:a}=e||{},l=e.repoIds.map(e=>e.toString().startsWith(tA)?e:`${tA}${e}`),{variables:c,variableTypes:u,mergeRequestArguments:h}=this.getVariablesForPullRequests(e),d={projectIds:l,...c},p=`
      query GetIssuesFromProject(
        $projectIds: [ID!]
        $after: String
        ${u.length?u.join(" "):""}
        ) {
        projects(
          ids: $projectIds
          after: $after
        ) {
          pageInfo {
            endCursor
            hasNextPage
          }
          nodes {
            id
            fullPath
            webUrl
            archived
            issues(
              first: 100
              state: opened
              sort: UPDATED_DESC
              ${h.length?h.join(" "):""}
            ) {
              nodes {
                ${tE}
              }
            }
          }
        }
      }`,g=await tv(this.config,{query:p,variables:{...d,after:a}},t),m=[];return((null==(r=null==(i=g.body.data)?void 0:i.projects)?void 0:r.nodes)||[]).forEach(i=>{var r;if(!e.includeFromArchivedRepos&&i.archived)return;let s=tk(i);((null==(r=i.issues)?void 0:r.nodes)||[]).forEach(e=>m.push(tV(e,s,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)))}),{pageInfo:(null==(n=null==(o=null==(s=g.body)?void 0:s.data)?void 0:o.projects)?void 0:n.pageInfo)??{endCursor:null,hasNextPage:!1},data:m.sort((e,t)=>(e.updatedDate||e.createdDate).getTime()-(t.updatedDate||t.createdDate).getTime())}}async setIssueState(e,t={}){var i,r,s;let{issue:o,state:n}=e;if(!o.repository)throw Error('GitLab requires "repository" for this function.');let a=`mutation SetIssueState($fullPath: ID!, $issueId: String!, $status: IssueStateEvent!) {
	updateIssue(input: { projectPath: $fullPath, iid: $issueId, stateEvent: $status }) {
    issue {
      id
    }
	}
}`;if(!(null!=(s=null==(r=null==(i=(await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,issueId:o.number,status:"OPEN"===n?"REOPEN":"CLOSE"}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue status")}async closeIssue(e,t={}){await this.setIssueState({...e,state:"CLOSED"},t)}async reOpenIssue(e,t={}){await this.setIssueState({...e,state:"OPEN"},t)}async setIssueLabels(e,t={}){var i,r,s;let{issue:o,labels:n}=e;if(!o.repository)throw Error('GitLab requires a "repository" for this function.');let a=n.map(e=>{if(!e.graphQLId)throw Error('GitLab requires label "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetIssueLabels($fullPath: ID!, $issueId: String!, $labelGraphQLIds: [ID!]) {
  updateIssue(input: { projectPath: $fullPath, iid: $issueId, labelIds: $labelGraphQLIds }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,issueId:o.number,labelGraphQLIds:a}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue labels")}async setIssueMilestone(e,t={}){var i,r,s;let{issue:o,milestone:n}=e;if(!o.repository)throw Error('GitLab requires "repository" for this function.');let a=`mutation SetIssueMilestone($fullPath: ID!, $issueId: String!, $milestoneId: ID) {
  updateIssue(input: { projectPath: $fullPath, iid: $issueId, milestoneId: $milestoneId }) {
    errors
    issue {
      id
      milestone {
        id
      }
    }
  }
}`,l=await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,issueId:o.number,milestoneId:(null==n?void 0:n.id)??null}},t),c=null==(i=l.body.data)?void 0:i.updateIssue;if(!(null!=(r=null==c?void 0:c.issue)&&r.id)||l.body.errors||(null==(s=null==c?void 0:c.errors)?void 0:s.length)!==0)throw Error("Could not set milestone of issue")}async setIssueAssignees(e,t={}){var i,r,s;let{issue:o,assignees:n}=e;if(!o.repository)throw Error('GitLab requires "repository" for this function.');let a=n.map(e=>e.username),l=`mutation SetIssueAssignees($fullPath: ID!, $issueId: String!, $assigneeUsernames: [String!]!) {
  issueSetAssignees(input: { projectPath: $fullPath, iid: $issueId, assigneeUsernames: $assigneeUsernames }) {
    errors,
    issue {
      id
    }
  }
}`,c=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,issueId:o.number,assigneeUsernames:a}},t)).body.data)?void 0:i.issueSetAssignees;if(!(null!=(r=null==c?void 0:c.issue)&&r.id)||(null==(s=null==c?void 0:c.errors)?void 0:s.length)!==0)throw Error("Could not set issue assignees")}async getMilestonesForRepo(e,t={}){var i,r,s,o,n,a,l;let{repo:{namespace:c,name:u},cursor:h}=e,d=await tv(this.config,{query:`
query getLabelsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    webUrl
    milestones(after: $after) {
      nodes {
        ${tI}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${c}/${u}`,after:h}},t);return{pageInfo:(null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.milestones)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(l=null==(a=null==(n=null==(o=d.body.data)?void 0:o.project)?void 0:n.milestones)?void 0:a.nodes)?void 0:l.map(e=>{var t,i;return tj(e,(null==(i=null==(t=d.body.data)?void 0:t.project)?void 0:i.webUrl)||"")}))??[]}}async getLabelsForRepo(e,t={}){var i,r,s,o,n,a,l;let{repo:{namespace:c,name:u},cursor:h}=e,d=await tv(this.config,{query:`
query getLabelsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    labels(after: $after) {
      nodes {
        ${tT}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${c}/${u}`,after:h}},t);return{pageInfo:(null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.labels)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(l=null==(a=null==(n=null==(o=d.body.data)?void 0:o.project)?void 0:n.labels)?void 0:a.nodes)?void 0:l.map(tW))??[]}}async getTreeForRepo(e,t={}){let i=tx(e.repo),r=new URL(e.cursor??`${tf(this.config,t)}/projects/${encodeURIComponent(i)}/repository/tree`);r.searchParams.set("per_page","10000"),r.searchParams.set("recursive","true"),r.searchParams.set("pagination","keyset"),r.searchParams.set("ref",e.branch);let s=await this.config.request({url:r.toString(),headers:j(t.token||this.config.token)}),o=s.headers.link;return{data:s.body.map(tU),pageInfo:{endCursor:o?o.substring(1,o.indexOf(">")):null,hasNextPage:!!o}}}},tz=["assignee","comment","summary","created","creator","updated","votes","issuetype","status","labels","components","project","fixVersions","description"],tY="/rest/api/2/search/jql",tK="/rest/api/2/search",tZ=(e,t,i,r)=>{var s,o,n,a;let l=e.fields.assignee,c=!r,u=(e.fields[(null==t?void 0:t.Sprint)??""]??[]).filter(e=>"object"==typeof e);return{id:e.id,commentCount:e.fields.comment.comments.length,number:e.key,title:e.fields.summary,url:i?`${i}/browse/${e.key}`:null,closedDate:null,createdDate:new Date(e.fields.created),author:t1(e.fields.creator,i,c),updatedDate:new Date(e.fields.updated),assignees:l?[t1(l,i,c)]:[],description:e.fields.description,repository:null,project:{name:e.fields.project.name,resourceId:r??null,key:e.fields.project.key,namespace:null,id:e.fields.project.id},state:t2(e.fields.status),statusTransitions:(null==(s=e.transitions)?void 0:s.map(tJ))??[],components:(null==(o=e.fields.components)?void 0:o.map(tX))??[],type:e.fields.issuetype.name,upvoteCount:(null==(n=e.fields.votes)?void 0:n.votes)||0,labels:(null==(a=e.fields.labels)?void 0:a.map(e=>({color:null,description:null,id:null,name:e})))??[],sprints:u.map(t5),fixVersions:e.fields.fixVersions.map(t4)}},tJ=e=>{let t;switch(e.to.statusCategory.name){case"To Do":t="TO_DO";break;case"In Progress":t="IN_PROGRESS";break;default:t="DONE"}return{name:e.name,id:e.id,to:{id:e.to.id,name:e.to.name,color:e.to.statusCategory.colorName,category:t}}},tX=e=>({description:e.description??null,id:e.id,name:e.name}),t0=(e,t,i)=>i&&e.name?`${t}/secure/ViewProfile.jspa?name=${encodeURIComponent(e.name)}`:`${t}/jira/people/${e.accountId}`,t1=(e,t,i)=>({id:(i?e.key:e.accountId)??"",name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrls["48x48"],username:e.displayName,url:t0(e,t,i)}),t2=e=>{let t;switch(e.statusCategory.name){case"To Do":t="TO_DO";break;case"In Progress":t="IN_PROGRESS";break;default:t="DONE"}return{id:e.id,name:e.name,color:e.statusCategory.colorName,category:t}},t5=e=>({id:e.id.toString(),name:e.name,isActive:"active"===e.state,startDate:e.startDate?new Date(e.startDate):null,endDate:e.endDate?new Date(e.endDate):null,completedDate:e.completeDate?new Date(e.completeDate):null}),t4=e=>({id:e.id,description:e.description,name:e.name,archived:e.archived,released:e.released,releaseDate:e.releaseDate?new Date(e.releaseDate):null}),t7=(e,t,i)=>i?`${t.baseUrl||"https://api.atlassian.com/ex/jira"}/${i}`:`${(null==t?void 0:t.baseUrl)||e.baseUrl}`,t3=async(e,t,i={})=>{let{resourceId:r}=t;return(await e.request({url:`${t7(e,i,r)}/rest/api/2/field`,headers:j(i.token||e.token)})).body},t6=async(e,t,i,r={})=>{let{number:s,resourceId:o,fields:n}=t||{};return{data:tZ((await e.request({url:`${t7(e,r,o)}/rest/api/2/issue/${s}?fields=${tz.join(",")}&expand=transitions`,headers:j(r.token||e.token)})).body,n,i,o)}},t9=async(e,t,i,r={})=>{let{cursor:s,resourceId:o,labelNames:n,fields:a}=t||{},l=["statusCategory != Done",`(creator = currentUser() OR assignee = currentUser()
OR comment ~ currentUser() OR summary ~ currentUser() OR description ~ currentUser())`];n&&n.forEach(e=>l.push(`labels = "${e}"`));let c=`${l.join(" AND ")} ORDER BY updated DESC`,u=!o,h=new URL(`${t7(e,r,o)}${u?tK:tY}`);h.searchParams.set("jql",c),h.searchParams.set("maxResults","100"),h.searchParams.set("fields",tz.join(",")),h.searchParams.set("expand","transitions"),s&&(u?h.searchParams.set("startAt",s):h.searchParams.set("nextPageToken",s));let d=await e.request({url:h.toString(),headers:j(r.token||e.token)}),p=d.body.issues.map(e=>tZ(e,a,i,o)),g=!1,m="";return u?(g=100==p.length,m=(parseInt(s??"0",10)+p.length).toString()):(g=!!d.body.nextPageToken,m=d.body.nextPageToken??null),{data:p,pageInfo:{hasNextPage:g,endCursor:m}}},t8=async(e,t,i,r={})=>{let{cursor:s,resourceId:o,jql:n,fields:a}=t||{},l=[...tz],c=null==a?void 0:a.Sprint;c&&l.push(c);let u=!o,h=new URL(`${t7(e,r,o)}${u?tK:tY}`);h.searchParams.set("jql",n.join(" AND ")),h.searchParams.set("maxResults","100"),h.searchParams.set("fields",l.join(",")),h.searchParams.set("expand","transitions"),s&&(u?h.searchParams.set("startAt",s):h.searchParams.set("nextPageToken",s));let d=await e.request({url:h.toString(),headers:j(r.token||e.token)}),p=d.body.issues.map(e=>tZ(e,a,i,o)),g=!1,m="";return u?(g=100==p.length,m=(parseInt(s??"0",10)+p.length).toString()):(g=!!d.body.nextPageToken,m=d.body.nextPageToken??null),{data:p,pageInfo:{hasNextPage:g,endCursor:m}}},ie=async(e,t,i,r={})=>{let{assigneeLogins:s,authorLogin:o,mentionLogin:n,labelNames:a,cursor:l,projectKey:c,resourceId:u,fields:h}=t||{},d=[`project = "${c}"`,"statusCategory != Done"];return o&&d.push(`creator in ("${o}")`),s&&0!==s.length&&d.push(`assignee in ("${s.join('", "')}")`),n&&d.push(`comment ~ "${n}"`),a&&a.forEach(e=>d.push(`labels = "${e}"`)),t8(e,{resourceId:u,jql:d,cursor:l,fields:h},i,r)},it=async(e,t,i,r={})=>{let{assigneeLogins:s,authorLogin:o,mentionLogin:n,labelNames:a,cursor:l,projectKeys:c,resourceId:u,fields:h}=t||{},d=["("+c.map(e=>`project = "${e}"`).join(" OR ")+")","statusCategory != Done"];return o&&d.push(`creator in ("${o}")`),s&&0!==s.length&&d.push(`assignee in ("${s.join('", "')}")`),n&&d.push(`comment ~ "${n}"`),a&&a.forEach(e=>d.push(`labels = "${e}"`)),t8(e,{resourceId:u,jql:d,fields:h,cursor:l},i,r)},ii=async(e,t,i={})=>{let{issue:r,labels:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');let o={fields:{labels:s.map(e=>e.name)}};await e.request({method:"PUT",url:`${t7(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}`,body:JSON.stringify(o),headers:{...j(i.token||e.token),"Content-Type":"application/json"}})},ir=async(e,t,i={})=>{let{issue:r,components:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');let o={fields:{components:s.map(e=>({id:e.id}))}};await e.request({method:"PUT",url:`${t7(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}`,body:JSON.stringify(o),headers:{...j(i.token||e.token),"Content-Type":"application/json"}})},is=async(e,t,i={})=>{let{issue:r,status:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');if(!s.id)throw Error('Jira requires a status "id" for this function.');let o={transition:{id:s.id}};await e.request({method:"POST",url:`${t7(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}/transitions`,body:JSON.stringify(o),headers:{...j(i.token||e.token),"Content-Type":"application/json"}})},io=async(e,t,i={})=>{let{resourceId:r,projectIdOrKey:s}=t,o=new URL(`${t7(e,i,r)}/rest/api/2/project/${s}/components`);return{data:(await e.request({url:o.toString(),headers:j(i.token||e.token)})).body}},ia="https://api.atlassian.com/ex/jira",il=class extends H{constructor(){super(...arguments),this._resourceUrlCache={},this._issueFieldsCache={}}async getIssueFieldsForResource(e,t={}){if(!this._issueFieldsCache[e.resourceId]){let i=await t3(this.config,e,t);this._issueFieldsCache[e.resourceId]=i.reduce((e,t)=>({...e,[t.name]:t.id}),{})}return this._issueFieldsCache[e.resourceId]??null}async getResourceUrl(e,t={}){var i;let r=t.token||this.config.token;if(!r)return null;let s=this._resourceUrlCache[r];return s?s[e.resourceId]??null:(await this.getJiraResourcesForCurrentUser(t),(null==(i=this._resourceUrlCache[r])?void 0:i[e.resourceId])??null)}async getCurrentUserForResource(e,t={}){let i=await this.getResourceUrl({resourceId:e.resourceId},t),r=await this.config.request({url:`${t.baseUrl||ia}/${e.resourceId}/rest/api/2/myself`,headers:j(t.token||this.config.token)});return{data:{name:r.body.displayName,email:r.body.emailAddress,avatarUrl:r.body.avatarUrls["48x48"],id:r.body.accountId,username:r.body.displayName,url:i?`${i}/jira/people/${r.body.accountId}`:null}}}async getJiraResourcesForCurrentUser(e={}){let t=await this.config.request({url:`${e.baseUrl||"https://api.atlassian.com/"}/oauth/token/accessible-resources`,headers:j(e.token||this.config.token)}),i=e.token||this.config.token,r=i?this._resourceUrlCache[i]||{}:void 0,s=t.body.map(e=>(r&&(r[e.id]=e.url),{avatarUrl:e.avatarUrl,id:e.id,name:e.name,url:e.url}));return i&&(this._resourceUrlCache[i]=r),{data:s}}async getJiraProjectsForResource(e,t={}){let i=new URL(`${t.baseUrl||ia}/${e.resourceId}/rest/api/2/project/search`);i.searchParams.set("maxResults","100"),e.cursor&&i.searchParams.set("startAt",e.cursor);let r=await this.config.request({url:i.toString(),headers:j(t.token||this.config.token)});return{pageInfo:{hasNextPage:0!==r.body.values.length,endCursor:(r.body.startAt+r.body.values.length).toString()},data:r.body.values.map(t=>({id:t.id,key:t.key,name:t.name,resourceId:e.resourceId}))}}async getJiraProjectsForResources(e,t={}){let i=[];return await Promise.all(e.resourceIds.map(async e=>{try{return await Y(i=>this.getJiraProjectsForResource({resourceId:e,cursor:i},t))}catch{return[]}})).then((...e)=>{e.forEach(e=>{i=i.concat(...e)})}),{data:i}}async getAccountsForJiraProject(e,t={}){let{resourceId:i,projectKey:r,cursor:s}=e,o=await this.getResourceUrl({resourceId:i},t),n=new URL(`${t.baseUrl||ia}/${i}/rest/api/2/user/assignable/search`);n.searchParams.set("maxResults","100"),s&&n.searchParams.set("startAt",s),n.searchParams.set("project",r);let a=await this.config.request({url:n.toString(),headers:j(t.token||this.config.token)});return{pageInfo:{hasNextPage:0!==a.body.length,endCursor:((s?parseInt(s):0)+a.body.length).toString()},data:a.body.filter(e=>"app"!==e.accountType&&e.active).map(e=>t1(e,o,!1))}}async getComponentsForJiraProject(e,t={}){return await io(this.config,e,t)}async getIssue(e,t={}){let i=await this.getIssueFieldsForResource({resourceId:e.resourceId},t),r=await this.getResourceUrl({resourceId:e.resourceId},t);return await t6(this.config,{...e,fields:i},r,t)}async getIssuesForProject(e,t={}){let i=await this.getIssueFieldsForResource({resourceId:e.resourceId},t),r=await this.getResourceUrl({resourceId:e.resourceId},t);return await ie(this.config,{...e,fields:i},r,t)}async getIssuesForProjects(e,t={}){let i=await this.getIssueFieldsForResource({resourceId:e.resourceId},t),r=await this.getResourceUrl({resourceId:e.resourceId},t);return await it(this.config,{...e,fields:i},r,t)}async getIssuesForResourceForCurrentUser(e,t={}){let i=await this.getIssueFieldsForResource({resourceId:e.resourceId},t),r=await this.getResourceUrl({resourceId:e.resourceId},t);return await t9(this.config,{...e,fields:i},r,t)}async setIssueStatus(e,t={}){await is(this.config,e,t)}async setIssueAssignee(e,t={}){let{issue:i,assignee:r}=e;if(!i.project)throw Error('Jira Cloud requires a "project" for this function.');if(!i.project.resourceId)throw Error('Jira Cloud requires a project "resourceId" for this function.');let s={accountId:null==r?void 0:r.id};await this.config.request({method:"PUT",url:`${t.baseUrl||ia}/${i.project.resourceId}/rest/api/2/issue/${i.id}/assignee`,body:JSON.stringify(s),headers:{...j(t.token||this.config.token),"Content-Type":"application/json"}})}async setIssueComponents(e,t={}){await ir(this.config,e,t)}async setIssueLabels(e,t={}){await ii(this.config,e,t)}async getLabelsForResource(e,t={}){let{resourceId:i,cursor:r}=e,s=new URL(`${t.baseUrl||ia}/${i}/rest/api/2/label`);s.searchParams.set("maxResults","100"),r&&s.searchParams.set("startAt",r);let o=await this.config.request({url:s.toString(),headers:j(t.token||this.config.token)});return{pageInfo:{hasNextPage:!o.body.isLast,endCursor:(o.body.startAt+o.body.values.length).toString()},data:o.body.values.map(e=>({color:null,description:null,id:null,name:e}))}}},ic=class extends V{constructor(){super(...arguments),this._issueFieldsCache={}}async getIssueFieldsForResource(e={}){let t=(null==e?void 0:e.baseUrl)||this.config.baseUrl||"";if(!this._issueFieldsCache[t]){let i=await t3(this.config,{},e);this._issueFieldsCache[t]=i.reduce((e,t)=>({...e,[t.name]:t.id}),{})}return this._issueFieldsCache[t]??null}async getCurrentUser(e={}){let t=await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/myself`,headers:j((null==e?void 0:e.token)||this.config.token)});return{data:{name:t.body.displayName,email:t.body.emailAddress,avatarUrl:t.body.avatarUrls["48x48"],id:t.body.key,username:t.body.displayName,url:null}}}async getJiraProjects(e={}){return{data:(await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/project`,headers:j((null==e?void 0:e.token)||this.config.token)})).body.map(e=>({id:e.id,name:e.name}))}}async getIssue(e,t={}){let i=e.resourceUrl||t.baseUrl||this.config.baseUrl;if(!i)throw Error('Jira Server requires a "resourceUrl" or "baseUrl" for this function.');let r=await this.getIssueFieldsForResource(t);return await t6(this.config,{...e,fields:r},i,t)}async getIssuesForProject(e,t={}){let i=e.resourceUrl||t.baseUrl||this.config.baseUrl;if(!i)throw Error('Jira Server requires a "resourceUrl" or "baseUrl" for this function.');let r=await this.getIssueFieldsForResource(t);return await ie(this.config,{...e,fields:r},i,t)}async getIssuesForProjects(e,t={}){let i=e.resourceUrl||t.baseUrl||this.config.baseUrl;if(!i)throw Error('Jira Server requires a "resourceUrl" or "baseUrl" for this function.');let r=await this.getIssueFieldsForResource(t);return await it(this.config,{...e,fields:r},i,t)}async getIssuesForResourceForCurrentUser(e,t={}){let i=e.resourceUrl||t.baseUrl||this.config.baseUrl;if(!i)throw Error('Jira Server requires a "resourceUrl" or "baseUrl" for this function.');let r=await this.getIssueFieldsForResource(t);return await t9(this.config,{...e,fields:r},i,t)}async setIssueStatus(e,t={}){await is(this.config,e,t)}async setIssueLabels(e,t={}){await ii(this.config,e,t)}async setIssueComponents(e,t={}){await ir(this.config,e,t)}async getLabels(e={}){return{data:(await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/jql/autocompletedata/suggestions?fieldName=labels`,headers:j(e.token||this.config.token)})).body.results.map(({displayName:e})=>({color:null,description:null,id:null,name:e}))}}async getComponentsForJiraProject(e,t={}){return await io(this.config,e,t)}},iu="https://api.trello.com",ih=e=>({id:e.id,username:e.username,url:e.url,name:e.fullName,email:e.email,avatarUrl:e.avatarUrl}),id=(e,t)=>{let i=new Date(1e3*parseInt(e.id.substring(0,8),16));return{id:e.id,commentCount:e.badges.comments,number:e.idShort.toString(),title:e.name,url:e.url,closedDate:null,createdDate:new Date(i.toISOString()),author:null,updatedDate:new Date(e.dateLastActivity),assignees:e.members.map(e=>({id:e.id,username:e.username,name:e.fullName,email:null,avatarUrl:e.avatarUrl,url:null})),description:null,state:t[e.idList??""]?{id:e.idList,name:t[e.idList].name,color:null}:null,type:null,repository:null,upvoteCount:e.badges.votes,labels:e.labels.map(e=>({color:e.color,description:null,id:e.id,name:e.name}))}},ip=class extends H{async getCurrentUser(e,t={}){let i=await this.config.request({url:`${t.baseUrl||iu}/1/members/me?key=${e.appKey}&token=${t.token||this.config.token}`,headers:j(t.token||this.config.token)});return{data:{name:i.body.fullName,email:i.body.email,avatarUrl:i.body.avatarHash?`https://trello-members.s3.amazonaws.com/${i.body.id}/${i.body.avatarHash}/50.png`:null,id:i.body.id,username:i.body.username,url:i.body.url}}}async getBoardsForCurrentUser(e,t={}){return{data:(await this.config.request({url:`${t.baseUrl||iu}/1/members/me/boards?fields=name&key=${e.appKey}&token=${t.token||this.config.token}&filter=open`,headers:j(t.token||this.config.token)})).body.map(e=>({id:e.id,name:e.name}))}}async getListsForTrelloBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||iu}/1/boards/${r}/lists?key=${i}&token=${t.token||this.config.token}`,headers:j(t.token||this.config.token)})).body}}async getAccountForId(e,t={}){let{appKey:i,memberId:r}=e;return{data:ih((await this.config.request({url:`${t.baseUrl||iu}/1/members/${r}/?key=${i}&token=${t.token||this.config.token}`})).body)}}async getAccountsForTrelloBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||iu}/1/boards/${r}/members?key=${i}&token=${t.token||this.config.token}`,headers:j(t.token||this.config.token)})).body.map(e=>({id:e.id,name:e.fullName,username:e.username,email:null,avatarUrl:null,url:null}))}}async getIssuesForBoard(e,t={}){let i=["-is:archived","sort:edited"],{appKey:r,boardId:s,filterText:o,assigneeLogins:n,labelNamesOrColors:a,trelloBoardListsById:l}=e||{};n&&i.push("@me"),a&&a.forEach(e=>i.push(`label:"${e}"`));let c=`${o?`${o}`:""}${i.join(" ")} board:${s}`;return{data:(await this.config.request({url:`${t.baseUrl||iu}/1/search?key=${r}&query=${c}&cards_limit=1000&token=${t.token||this.config.token}&card_members=true`,headers:j(t.token||this.config.token)})).body.cards.map(e=>id(e,l||{}))}}async updateIssue(e,t,i,r){return await this.config.request({method:"PUT",url:`${r.baseUrl||iu}/1/cards/${t.id}?key=${e}&token=${r.token||this.config.token}&${i}`,headers:j(r.token||this.config.token)})}async setIssueStatus(e,t={}){let{appKey:i,issue:r,status:s}=e;if(!s.id)throw Error('Trello requires a status "id" for this function.');let o=`idList=${s.id}`;if(!(await this.updateIssue(i,r,o,t)).body.id)throw Error("Could not set issue status")}async setIssueAssignees(e,t={}){let{appKey:i,issue:r,assignees:s}=e,o=s.map(e=>e.id),n=`idMembers=${encodeURIComponent(o.join(","))}`;if(!(await this.updateIssue(i,r,n,t)).body.id)throw Error("Could not set issue status")}async setIssueLabels(e,t={}){let{appKey:i,issue:r,labels:s}=e,o=s.map(e=>e.id).join(",");if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||iu}/1/cards/${r.id}?key=${i}&token=${t.token||this.config.token}&idLabels=${encodeURIComponent(o)}`,headers:j(t.token||this.config.token)})).body.id)throw Error("Could not set issue status")}async setIssueArchived(e,t={}){let{appKey:i,issue:r,archived:s}=e;if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||iu}/1/cards/${r.id}?key=${i}&token=${t.token||this.config.token}&closed=${s}`,headers:j(t.token||this.config.token)})).body.id)throw Error("Could not update issue archived status")}async archiveIssue(e,t={}){await this.setIssueArchived({...e,archived:!0},t)}async unArchiveIssue(e,t={}){await this.setIssueArchived({...e,archived:!1},t)}async getLabelsForBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||iu}/1/boards/${r}/labels?key=${i}&token=${t.token||this.config.token}`,headers:j(t.token||this.config.token)})).body.map(e=>({color:e.color,description:null,id:e.id,name:e.name}))}}},ig={};P(ig,{default:()=>im});var im={},iw={};P(iw,{default:()=>iv});var iv={},iy={};P(iy,{restApiPullRequestToCommonPullRequest:()=>ib});var ib=e=>ey(e),iC={};P(iC,{decode:()=>iN,decodeV0:()=>iq,encode:()=>iU,validate:()=>iB});var ik=((g=ik||{}).Zero="0",g.One="1",g),iS=((m=iS||{}).PullRequest="pr",m.Issue="issue",m),iR=((f=iR||{}).Azure="azure",f.Github="github",f.GithubEnterprise="githubEnterprise",f.Gitlab="gitlab",f.GitlabSelfHosted="gitlabSelfHosted",f.Bitbucket="bitbucket",f.BitbucketServer="bitbucketServer",f.Jira="jira",f.JiraServer="jiraServer",f.Trello="trello",f),iP=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.entityId)throw Error("Missing required fields for Azure DevOps issue uniqueId");let t=[];return t.push("azure"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Azure DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:null,entityId:e[6]}}},iA=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.repoId||!e.entityId)throw Error("Missing required fields for Azure DevOps pull request uniqueId");let t=[];return t.push("azure"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<8)throw Error("Invalid Azure DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:e[6],entityId:e[7]}}},iI=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},iD=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},i$=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},iT=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},iE=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},i_=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},iO=class{constructor(){}validate(e){if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.projectId||!e.entityId)throw Error("Missing required fields for Jira issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"jira"==e.provider?(t.push(""),t.push(e.resourceId)):(t.push(e.domain),t.push("")),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Jira issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:""==e[4]?null:e[4],accountOrOrgId:null,organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},ix=class{constructor(){}validate(e){if(!e.accountOrOrgId)throw Error("accountOrOrgId is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.accountOrOrgId||!e.projectId||!e.entityId)throw Error("Missing required fields for Trello issue uniqueId");let t=[];return t.push("trello"),t.push("issue"),t.push("1"),t.push(""),t.push(e.accountOrOrgId),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Trello issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:e[4],organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},iF=(e,t)=>{if("issue"!==t&&"pr"!==t)throw Error("unknown entityType");switch(e){case"azure":return"pr"===t?new iA:new iP;case"bitbucket":case"bitbucketServer":return"pr"===t?new iD:new iI;case"github":case"githubEnterprise":return"pr"===t?new iT:new i$;case"gitlab":case"gitlabSelfHosted":return"pr"===t?new i_:new iE;case"jira":case"jiraServer":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new iO;case"trello":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new ix;default:throw Error("unknown provider")}},iL=e=>{if(!e.entityType)throw Error("entityType is required");if(!e.provider)throw Error("provider is required");if(!e.entityId)throw Error("entityID is required")},iB=e=>{if("0"===e.version){iL(e);return}iF(e.provider,e.entityType).validate(e)},iU=e=>iF(e.provider,e.entityType).encode(e),iN=e=>{let t=JSON.parse(e);if(!t||!t.length)throw Error("invalid issue unique id");return iF(t[0],t[1]).decode(t)},iq=(e,t,i)=>{if(!i)throw Error("entityID is required");try{let r=JSON.parse(i);if(!r||!r.length)throw Error("Invalid pull request uniqueId");let s=[e,t,"0",...r];return iF(e,t).decode(s)}catch{return{provider:e,entityType:t,version:"0",domain:"",resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:i}}},iW={};P(iW,{CHANGES_REQUESTED_ACTION_CATEGORY:()=>i3,CHANGES_REQUESTED_BUCKET_ID:()=>iY,CONFLICTS_ACTION_CATEGORY:()=>i4,CONFLICTS_BUCKET_ID:()=>iQ,DRAFT_ACTION_CATEGORY:()=>i8,DRAFT_BUCKET_ID:()=>iJ,FAILING_CI_ACTION_CATEGORY:()=>i5,FAILING_CI_BUCKET_ID:()=>ij,NEEDS_MY_REVIEW_ACTION_CATEGORY:()=>i7,NEEDS_MY_REVIEW_BUCKET_ID:()=>iz,OTHER_ACTION_CATEGORY:()=>re,OTHER_BUCKET_ID:()=>iX,PINNED_BUCKET_ID:()=>iG,READY_TO_MERGE_ACTION_CATEGORY:()=>i1,READY_TO_MERGE_BUCKET_ID:()=>iH,REVIEWER_COMMENTED_ACTION_CATEGORY:()=>i6,REVIEWER_COMMENTED_BUCKET_ID:()=>iK,SNOOZED_BUCKET_ID:()=>i0,UNASSIGNED_REVIEWERS_ACTION_CATEGORY:()=>i2,UNASSIGNED_REVIEWERS_BUCKET_ID:()=>iV,WAITING_FOR_REVIEW_ACTION_CATEGORY:()=>i9,WAITING_FOR_REVIEW_BUCKET_ID:()=>iZ,getActionablePullRequests:()=>rt,groupPullRequestsByAssignee:()=>rs,groupPullRequestsByAuthor:()=>ro,groupPullRequestsByGitKrakenTeam:()=>rc,groupPullRequestsByRepo:()=>rr,groupPullRequestsByReviewer:()=>rn,groupPullRequestsByWorkspace:()=>rl,groupPullRequestsIntoBuckets:()=>ri});var iM=(e,t,i,r)=>({id:e,faIconName:i,name:t,priority:r,pullRequests:[]}),iG="pinned",iH="readyToMerge",iV="unassignedReviewers",ij="failingCI",iQ="conflicts",iz="needsMyReview",iY="changesRequested",iK="reviewerCommented",iZ="waitingForReview",iJ="draft",iX="other",i0="snoozed",i1="readyToMerge",i2="unassignedReviewers",i5="failingCI",i4="conflicts",i7="needsMyReview",i3="changesRequested",i6="reviewerCommented",i9="waitingForReview",i8="draft",re="other",rt=(e,t,i)=>e.map(e=>{var r,s,o,n,a,l,c,u,h,d,p,g,m,f;let w={...e,suggestedActionCategory:re,priority:1e3,viewer:{canMerge:!1,isAuthor:!1,isAssignee:!1,isReviewer:!1,shouldMerge:!1,shouldAssignReviewer:!1,waitingOnReviews:!1,shouldReview:!1},failingCI:!1,hasConflicts:!1,changeRequestReviewCount:0,codeSuggestionsCount:0,commentReviewCount:0,approvalReviewCount:0};t&&(w.viewer.isAuthor=(null==(r=e.author)?void 0:r.id)===t.id,w.viewer.isAssignee=(null==(s=e.assignees)?void 0:s.some(e=>e.id===t.id))??!1,w.viewer.isReviewer=(null==(o=e.reviews)?void 0:o.some(e=>e.reviewer.id===t.id))??!1),w.viewer.canMerge=(null==(n=e.permissions)?void 0:n.canMerge)??!0,w.hasConflicts="CONFLICTS"===e.mergeableState,w.failingCI=(null==(l=null==(a=e.headCommit)?void 0:a.buildStatuses)?void 0:l.some(e=>"ERROR"===e.state||"FAILED"===e.state))||"FAILING_CHECKS"===e.mergeableState,w.commentReviewCount=(null==(c=e.reviews)?void 0:c.filter(e=>"COMMENTED"===e.state).length)??0,w.approvalReviewCount=(null==(u=e.reviews)?void 0:u.filter(e=>"APPROVED"===e.state).length)??0,w.changeRequestReviewCount=(null==(h=e.reviews)?void 0:h.filter(e=>"CHANGES_REQUESTED"===e.state).length)??0;let v=null==(d=null==i?void 0:i.enrichedItemsByUniqueId)?void 0:d[e.uuid];null!=v&&(w.viewer.enrichedItems=v,v.some(e=>"pin"===e.type)&&(w.viewer.pinned=!0,w.priority-=800),v.some(e=>"snooze"===e.type)&&(w.viewer.snoozed=!0));let y=(null==(g=null==(p=null==i?void 0:i.codeSuggestionsCountByPrUuid)?void 0:p[e.uuid])?void 0:g.count)||0;return y&&(w.codeSuggestionsCount=y),t&&!w.viewer.isAuthor&&(!w.viewer.isAssignee||w.viewer.isReviewer)||!w.viewer.canMerge||w.isDraft||w.failingCI||"MERGEABLE"!==e.mergeableState||e.reviewDecision&&"APPROVED"!==e.reviewDecision||(w.viewer.shouldMerge=!0,w.suggestedActionCategory=i1),(!t||w.viewer.isAuthor)&&e.isDraft&&(w.suggestedActionCategory=i8),(!t||w.viewer.isAuthor)&&"REVIEW_REQUESTED"===e.reviewDecision&&(w.suggestedActionCategory=i9,w.viewer.waitingOnReviews=!0),(!t||w.viewer.isAuthor)&&"COMMENTED"===e.reviewDecision&&(w.suggestedActionCategory=i6),(!t||w.viewer.isAuthor)&&w.failingCI&&(w.suggestedActionCategory=i5),(!t||w.viewer.isAuthor)&&w.hasConflicts&&(w.suggestedActionCategory=i4),(!t||w.viewer.isAuthor)&&("CHANGES_REQUESTED"===e.reviewDecision||w.codeSuggestionsCount>0)&&(w.suggestedActionCategory=i3),t&&!w.viewer.isAuthor||null!=(m=e.reviews)&&m.length||(w.suggestedActionCategory=i2,w.viewer.shouldAssignReviewer=!0),t&&null!=(f=e.reviews)&&f.some(e=>e.reviewer.id===t.id&&"REVIEW_REQUESTED"===e.state)&&(w.suggestedActionCategory=i7,w.viewer.shouldReview=!0),w}),ri=(e,t,i)=>{var r,s,o,n,a,l,c,u,h,d,p,g;let m={pinned:iM(iG,"Pinned","thumbtack",(null==(r=null==i?void 0:i.bucketPriorityOverride)?void 0:r.pinned)??-1),readyToMerge:iM(iH,"Ready to Merge","code-merge",(null==(s=null==i?void 0:i.bucketPriorityOverride)?void 0:s.readyToMerge)??0),unassignedReviewers:iM(iV,"Unassigned Reviewers","user-plus",(null==(o=null==i?void 0:i.bucketPriorityOverride)?void 0:o.unassignedReviewers)??1),failingCI:iM(ij,"Failing CI","circle-x",(null==(n=null==i?void 0:i.bucketPriorityOverride)?void 0:n.failingCI)??2),conflicts:iM(iQ,"Resolve Conflicts","triangle-exclamation",(null==(a=null==i?void 0:i.bucketPriorityOverride)?void 0:a.conflicts)??3),needsMyReview:iM(iz,"Needs My Review","eye",(null==(l=null==i?void 0:i.bucketPriorityOverride)?void 0:l.needsMyReview)??4),changesRequested:iM(iY,"Suggested Changes","file-plus",(null==(c=null==i?void 0:i.bucketPriorityOverride)?void 0:c.changesRequested)??5),reviewerCommented:iM(iK,"Reviewer Commented","comment",(null==(u=null==i?void 0:i.bucketPriorityOverride)?void 0:u.reviewerCommented)??6),waitingForReview:iM(iZ,"Waiting for Review","circle-pause",(null==(h=null==i?void 0:i.bucketPriorityOverride)?void 0:h.waitingForReview)??7),draft:iM(iJ,"Draft","compass-drafting",(null==(d=null==i?void 0:i.bucketPriorityOverride)?void 0:d.draft)??8),other:iM(iX,"Other","ellipsis",(null==(p=null==i?void 0:i.bucketPriorityOverride)?void 0:p.other)??9),snoozed:iM(i0,"Snoozed","snooze",(null==(g=null==i?void 0:i.bucketPriorityOverride)?void 0:g.snoozed)??10)},f=rt(e,t,i).reduce((e,t)=>(e[t.uuid]=t,e),{});return e.forEach(e=>{let i=f[e.uuid],r=!0;if(i.viewer.snoozed){m[i0].pullRequests.push(e);return}i.viewer.pinned&&m[iG].pullRequests.push(e),t&&!i.viewer.isAuthor&&(!i.viewer.isAssignee||i.viewer.isReviewer)||i.isDraft||!i.viewer.canMerge||"MERGEABLE"!==i.mergeableState||e.reviewDecision&&"APPROVED"!==e.reviewDecision||(m[iH].pullRequests.push(e),r=!1),i.viewer.shouldAssignReviewer&&(m[iV].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&i.failingCI&&(m[ij].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&i.hasConflicts&&(m[iQ].pullRequests.push(e),r=!1),i.viewer.shouldReview&&(m[iz].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&("CHANGES_REQUESTED"===i.reviewDecision||i.codeSuggestionsCount>0)&&(m[iY].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&"COMMENTED"===i.reviewDecision&&(m[iK].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&"REVIEW_REQUESTED"===i.reviewDecision&&(m[iZ].pullRequests.push(e),r=!1),i.isDraft&&(m[iJ].pullRequests.push(e),r=!1),r&&m[iX].pullRequests.push(e)}),Object.values(m).forEach(e=>{e.pullRequests.sort((e,t)=>f[e.uuid].priority-f[t.uuid].priority)}),m},rr=e=>{let t={};return e.forEach(e=>{let i=e.repository.id;t[i]?t[i].pullRequests.push(e):t[i]={name:e.repository.name,priority:0,pullRequests:[e],id:i}}),U(t)},rs=e=>{let t="internal-no-assignees",i={[t]:{name:"No assignees",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{e.assignees&&e.assignees.length?e.assignees.forEach(t=>{let r=t.id;i[r]?i[r].pullRequests.push(e):i[r]={accountData:t,name:B(t,`Unknown Assignee ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:r}}):i[t].pullRequests.push(e)}),U(i)},ro=e=>{let t="internal-no-author",i={[t]:{name:"No author",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{if(e.author){let t=e.author.id;i[t]?i[t].pullRequests.push(e):i[t]={accountData:e.author,name:B(e.author,`Unknown Author ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:t}}else i[t].pullRequests.push(e)}),U(i)},rn=e=>{let t="internal-no-reviewer",i={[t]:{name:"No reviewers",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{e.reviews&&e.reviews.length?e.reviews.forEach(t=>{let r=t.reviewer.id;i[r]?i[r].pullRequests.push(e):i[r]={accountData:t.reviewer,name:B(t.reviewer,`Unknown Reviewer ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:r}}):i[t].pullRequests.push(e)}),U(i)},ra=e=>{var t;return e.azureProject?[`${e.azureProject}-${e.azureOrganizationId}`]:(null==(t=e.providerData)?void 0:t.repositories.nodes.map(t=>`${e.provider}-${t.repositoryId}`))??[]},rl=(e,t)=>{let i="internal-no-workspace",r={[i]:{name:"No workspace",priority:-1,pullRequests:[],id:i,faIconName:"folder-xmark"}};if(t.length){let s=t.reduce((e,t)=>(ra(t).forEach(i=>{e[i]?e[i].push(t):e[i]=[t]}),e),{});e.forEach(e=>{let{provider:t}=iN(e.uuid),o="github"===t?e.repository.graphQLId:e.repository.id,n="azure"===t?[`${t}-${o}`,`${e.repository.project}-${e.repository.owner.login}`]:[`${t}-${o}`],a=!1,l=n.reduce((e,t)=>s[t]?e.concat(s[t]):e,[]);null!=l&&l.length&&l.forEach(t=>{a=!0;let i=t.id;r[i]?r[i].pullRequests.push(e):r[i]={name:t.name,priority:0,pullRequests:[e],id:i,faIconName:"folder"}}),a||r[i].pullRequests.push(e)})}else r[i].pullRequests=e;return U(r)},rc=(e,t,i,r)=>{let s="internal-no-team",o={[s]:{name:"No team",priority:-1,pullRequests:[],id:s}};return r.length?e.forEach(e=>{var n,a,l;let c=!1,u=new Set;u.add(null==(n=e.author)?void 0:n.id),null==(a=e.assignees)||a.forEach(e=>u.add(e.id)),null==(l=e.reviews)||l.forEach(e=>u.add(e.reviewer.id)),r.forEach(r=>{var s;if(null==(s=r.members)?void 0:s.some(e=>{var r,s;let o=null==(s=null==(r=t[e.id])?void 0:r[i])?void 0:s.providerID;return o&&u.has(o)})){c=!0;let t=r.id;o[t]?o[t].pullRequests.push(e):o[t]={name:r.name,priority:0,pullRequests:[e],id:t,teamData:r}}}),c||o[s].pullRequests.push(e)}):o[s].pullRequests=e,U(o)},ru={};P(ru,{getPullRequestRank:()=>rh});var rh=(e,t,i)=>{var r,s,o;let n=0,a,l;return null==(r=e.reviews)||r.forEach(e=>{e.reviewer.id===t&&(a=e.state),"CHANGES_REQUESTED"===e.state?l="CHANGES_REQUESTED":"APPROVED"===e.state&&"CHANGES_REQUESTED"!==l&&(l="APPROVED")}),l||(l="REVIEW_REQUESTED"),(null==(s=e.author)?void 0:s.id)===t?n+=1e3:null!=(o=e.assignees)&&o.find(e=>e.id===t)?n+=900:"REVIEW_REQUESTED"===a?n+=800:i&&(n+=700),"APPROVED"===l?"MERGEABLE"===e.mergeableState?n+=100:"CONFLICTS"===e.mergeableState?n+=90:n+=80:"CHANGES_REQUESTED"==l&&(n+=70),n},rd={};P(rd,{default:()=>rp});var rp={},rg={};P(rg,{default:()=>rm});var rm={},rf={};P(rf,{default:()=>rw});var rw={},rv=((w=rv||{}).Conflicts="conflicts",w.Failure="failure",w.NotSet="notSet",w.Queued="queued",w.RejectedByPolicy="rejectedByPolicy",w.Succeeded="succeeded",w),ry=((v=ry||{}).Completed="COMPLETED",v.NotPlanned="NOT_PLANNED",v),rb=e=>{let t={request:null==e?void 0:e.request};return{azureDevOps:new el({...t,...null==e?void 0:e.azureDevOps}),bitbucket:new ew({...t,...null==e?void 0:e.bitbucket}),bitbucketServer:new eC({...t,...null==e?void 0:e.bitbucketServer}),github:new tp({...t,...null==e?void 0:e.github}),gitlab:new tQ({...t,...null==e?void 0:e.gitlab}),jira:new il({...t,...null==e?void 0:e.jira}),jiraServer:new ic({...t,...null==e?void 0:e.jiraServer}),trello:new ip({...t,...null==e?void 0:e.trello})}},rC={azureDevOps:ig,bitbucket:iw,bitbucketServer:iy,github:ru,gitlab:rd,gitProvider:iW,jira:rg,trello:rf,entityIdentifier:iC}},4488:(e,t,i)=>{i.d(t,{j:()=>ContributorsNode});var r=i(1398),s=i(1081),o=i(1078),n=i(4342),a=i(4063),l=i(9642),c=i(6339),u=i(909),h=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};let ContributorsNode=class ContributorsNode extends a.l{constructor(e,t,i,r,s){super("contributors",e,t,i),this.parent=i,this.repo=r,this.options=s,this.updateContext({repository:r}),this._uniqueId=(0,l.pF)(this.type,this.context)}splatted=!0;get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=this.options?.ref,t=null==e&&(this.options?.all??o.H.get("views.contributors.showAllBranches"));if(null==e&&!t)try{let t=await this.view.container.git.branches(this.uri.repoPath).getBranch();t?.upstream?.name==null||t.upstream.missing||(e="@{u}")}catch{}let i=this.options?.stats??o.H.get("views.contributors.showStatistics"),r=await this.repo.git.contributors().getContributors(e,{all:t,merges:this.options?.showMergeCommits,stats:i});if(0===r.length)return[new c.S2(this.view,this,"No contributors could be found.")];(0,s.tB)(r);let n=this.view.container.vsls.active?await this.getPresenceMap(r):void 0;this.children=r.map(i=>new u.W(this.uri,this.view,this,i,{all:t,ref:e,presence:n,showMergeCommits:this.options?.showMergeCommits}))}return this.children}getTreeItem(){this.splatted=!1;let e=new r.TreeItem("Contributors",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=l.U0.Contributors,this.options?.icon!==!1&&(e.iconPath=new r.ThemeIcon("organization")),e}updateAvatar(e){if(null!=this.children)for(let t of this.children)t.contributor.email===e&&t.triggerChange()}refresh(){super.refresh(!0)}async getPresenceMap(e){let t=e.find(e=>e.current)?.email;if(null!=t)return this.view.container.vsls.getContactsPresence([t])}};p([(0,n.Yz)()],ContributorsNode.prototype,"refresh",1),p([(0,n.Yz)({args:!1})],ContributorsNode.prototype,"getPresenceMap",1)},4498:(e,t,i)=>{i.d(t,{X:()=>SearchResultsNode});var r=i(1398),s=i(2458),o=i(8191),n=i(3088),a=i(450),l=i(3500),c=i(4342),u=i(3934),h=i(9642),d=i(7763),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let m=0;let SearchResultsNode=class SearchResultsNode extends h.eu{constructor(e,t,i,r,s,o,l=0){super("search-results",n.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._search=r,this._labels=s,this._searchQueryOrLog=o,this._storedAt=l,this._instanceId=m++,this.updateContext({searchId:`${(0,a.b4)(this._search)}+${this._instanceId}`}),this._uniqueId=(0,h.pF)(this.type,this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0).catch())}_instanceId;get id(){return this._uniqueId}toClipboard(){return this.search.query}get order(){return this._storedAt}get search(){return this._search}dismiss(){this.remove(!0)}_resultsNode;ensureResults(){if(null==this._resultsNode){let e;null==this._searchQueryOrLog?(e=!0,this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel})):"function"!=typeof this._searchQueryOrLog&&(this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel},this._searchQueryOrLog)),this._resultsNode=new d.V(this.view,this,this.repoPath,this._labels.label,{query:this._searchQueryOrLog,deferred:e},{expand:!1},!0)}return this._resultsNode}async getChildren(){return this.ensureResults().getChildren()}async getTreeItem(){let e=await this.ensureResults().getTreeItem();if(e.id=this.id,e.contextValue=h.U0.SearchResults,this.view.container.git.repositoryCount>1){let t=this.view.container.git.getRepository(this.repoPath);e.description=t?.formattedName??this.repoPath}return e.iconPath=new r.ThemeIcon("search"),e}get hasMore(){return this.ensureResults().hasMore}async loadMore(e){return this.ensureResults().loadMore(e)}async edit(e){if(null==e){await (0,o.b)({command:"search",prefillOnly:!0,state:{repo:this.repoPath,...this.search,showResultsInSideBar:this}});return}let t=this.getStorageId();this._search=e.pattern,this._labels=e.labels,this._searchQueryOrLog=e.log,this._resultsNode=void 0,await this.replace(t,!0),this.triggerChange(!1),queueMicrotask(()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0}))}refresh(e=!1){this._resultsNode?.refresh(e)}getSearchLabel(e,t){if("string"==typeof e)return e;let i=t?.count??0,r=void 0===e.resultsType?{singular:"search result",plural:"search results"}:e.resultsType;return`${(0,u.td)(r.singular,i,{format:e=>t?.hasMore?`${e}+`:String(e),plural:r.plural,zero:"No"})} ${e.label}`}getSearchQuery(e,t){let i=!0;return async r=>{t=await (t??this.view.container.git.commits(this.repoPath).searchCommits(this.search)),i||t?.query==null||(t=await t.query(r)),i=!1;let s={label:this.getSearchLabel(e.label,t),log:t,hasMore:t?.hasMore??!1};return s.hasMore&&(s.more=async t=>{s.log=await s.log?.more?.(t)??s.log,s.label=this.getSearchLabel(e.label,s.log),s.hasMore=s.log?.hasMore??!0}),s}}getStorageId(){return(0,s.Fx)(`${this.repoPath}|${(0,a.b4)(this.search)}`,"base64")}remove(e=!1){return this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){return this.view.updateStorage(this.getStorageId(),{type:"search",timestamp:this._storedAt,path:this.repoPath,labels:this._labels,search:(0,a.GQ)(this.search)},e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o)})([(0,l.G)(),(0,c.Yz)()],SearchResultsNode.prototype,"refresh",1)},4499:(e,t,i)=>{i.d(t,{B:()=>s});var r=i(2425);function s(e){return(t,i,s)=>{let o,n,a;if("function"==typeof s.value)o=s.value,n="value";else if("function"==typeof s.get)o=s.get,n="get";else throw Error("Not supported");if(null==o)throw Error("Not supported");let l=`$memoize$${i}`;s[n]=function(...t){let i=(0,r.q)(l,e,...t);return Object.prototype.hasOwnProperty.call(this,i)?a=this[i]:(Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!1,value:a=o.apply(this,t)}),a)}}}},4505:(e,t,i)=>{i.d(t,{$j:()=>k,AC:()=>ResetError,C6:()=>v,CW:()=>b,Do:()=>GitSearchError,HT:()=>CherryPickError,JW:()=>I,N$:()=>WorktreeDeleteError,O7:()=>S,Ob:()=>WorkspaceUntrustedError,Oo:()=>StashPushError,PC:()=>TagError,Qb:()=>A,S0:()=>BlameIgnoreRevsFileError,UM:()=>BlameIgnoreRevsFileBadRevisionError,Uz:()=>StashApplyError,VT:()=>C,Vc:()=>PushError,Vu:()=>PausedOperationContinueError,W:()=>w,YX:()=>PullError,Yw:()=>D,a_:()=>f,b9:()=>y,fk:()=>FetchError,iX:()=>WorktreeCreateError,ol:()=>ApplyPatchCommitError,xz:()=>P,ys:()=>PausedOperationAbortError,z2:()=>R});let GitSearchError=class GitSearchError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,GitSearchError)}};var r,s,o,n,a,l,c,u,h,d,p,g,m,f=((r=f||{})[r.StashFailed=0]="StashFailed",r[r.CreateWorktreeFailed=1]="CreateWorktreeFailed",r[r.ApplyFailed=2]="ApplyFailed",r[r.ApplyAbortedWouldOverwrite=3]="ApplyAbortedWouldOverwrite",r[r.AppliedWithConflicts=4]="AppliedWithConflicts",r);let ApplyPatchCommitError=class ApplyPatchCommitError extends Error{static is(e,t){return e instanceof ApplyPatchCommitError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i){super(t||="Unable to apply patch"),this.original=i,this.reason=e,Error.captureStackTrace?.(this,ApplyPatchCommitError)}};let BlameIgnoreRevsFileError=class BlameIgnoreRevsFileError extends Error{constructor(e,t){super(`Invalid blame.ignoreRevsFile: '${e}'`),this.fileName=e,this.original=t,Error.captureStackTrace?.(this,BlameIgnoreRevsFileError)}static is(e){return e instanceof BlameIgnoreRevsFileError}};let BlameIgnoreRevsFileBadRevisionError=class BlameIgnoreRevsFileBadRevisionError extends Error{constructor(e,t){super(`Invalid revision in blame.ignoreRevsFile: '${e}'`),this.revision=e,this.original=t,Error.captureStackTrace?.(this,BlameIgnoreRevsFileBadRevisionError)}static is(e){return e instanceof BlameIgnoreRevsFileBadRevisionError}};var w=((s=w||{})[s.WorkingChanges=0]="WorkingChanges",s);let StashApplyError=class StashApplyError extends Error{static is(e,t){return e instanceof StashApplyError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;null==e?i="Unable to apply stash":"string"==typeof e?(i=e,r=void 0):(r=e,i="Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"),super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}};var v=((o=v||{})[o.ConflictingStagedAndUnstagedLines=0]="ConflictingStagedAndUnstagedLines",o[o.NothingToSave=1]="NothingToSave",o);let StashPushError=class StashPushError extends Error{static is(e,t){return e instanceof StashPushError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to stash";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Changes were stashed, but the working tree cannot be updated because at least one file has staged and unstaged changes on the same line(s)";break;case 1:i="No files to stash";break;default:i="Unable to stash"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}};var y=((n=y||{})[n.RemoteAhead=0]="RemoteAhead",n[n.TipBehind=1]="TipBehind",n[n.PushRejected=2]="PushRejected",n[n.PushRejectedWithLease=3]="PushRejectedWithLease",n[n.PushRejectedWithLeaseIfIncludes=4]="PushRejectedWithLeaseIfIncludes",n[n.PermissionDenied=5]="PermissionDenied",n[n.RemoteConnection=6]="RemoteConnection",n[n.NoUpstream=7]="NoUpstream",n[n.Other=8]="Other",n);let PushError=class PushError extends Error{static is(e,t){return e instanceof PushError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i,r){let s,o,n=`Unable to push${i?` branch '${i}'`:""}${r?` to ${r}`:""}`;if(null==e)s=n;else if("string"==typeof e)s=e,o=void 0;else switch(o=e){case 0:s=`${n} because the remote contains work that you do not have locally. Try fetching first.`;break;case 1:s=`${n} as it is behind its remote counterpart. Try pulling first.`;break;case 2:s=`${n} because some refs failed to push or the push was rejected. Try pulling first.`;break;case 3:case 4:s=`Unable to force push${i?` branch '${i}'`:""}${r?` to ${r}`:""} because some refs failed to push or the push was rejected. The tip of the remote-tracking branch has been updated since the last checkout. Try pulling first.`;break;case 5:s=`${n} because you don't have permission to push to this remote repository.`;break;case 6:s=`${n} because the remote repository could not be reached.`;break;case 7:s=`${n} because it has no upstream branch.`;break;default:s=n}super(s),this.original=t,this.reason=o,Error.captureStackTrace?.(this,PushError)}};var b=((a=b||{})[a.Conflict=0]="Conflict",a[a.GitIdentity=1]="GitIdentity",a[a.RemoteConnection=2]="RemoteConnection",a[a.UnstagedChanges=3]="UnstagedChanges",a[a.UnmergedFiles=4]="UnmergedFiles",a[a.UncommittedChanges=5]="UncommittedChanges",a[a.OverwrittenChanges=6]="OverwrittenChanges",a[a.RefLocked=7]="RefLocked",a[a.RebaseMultipleBranches=8]="RebaseMultipleBranches",a[a.TagConflict=9]="TagConflict",a[a.Other=10]="Other",a);let PullError=class PullError extends Error{static is(e,t){return e instanceof PullError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r,s="Unable to pull";if(null==e)i=s;else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i=`${s} due to conflicts.`;break;case 1:i=`${s} because you have not yet set up your Git identity.`;break;case 2:i=`${s} because the remote repository could not be reached.`;break;case 3:i=`${s} because you have unstaged changes.`;break;case 4:i=`${s} because you have unmerged files.`;break;case 5:i=`${s} because you have uncommitted changes.`;break;case 6:i=`${s} because local changes to some files would be overwritten.`;break;case 7:i=`${s} because a local ref could not be updated.`;break;case 8:i=`${s} because you are trying to rebase onto multiple branches.`;break;case 9:i=`${s} because a local tag would be overwritten.`;break;default:i=s}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,PullError)}};var C=((l=C||{})[l.NoFastForward=0]="NoFastForward",l[l.NoRemote=1]="NoRemote",l[l.RemoteConnection=2]="RemoteConnection",l[l.Other=3]="Other",l);let FetchError=class FetchError extends Error{static is(e,t){return e instanceof FetchError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i,r){let s,o,n=`Unable to fetch${i?` branch '${i}'`:""}${r?` from ${r}`:""}`;if(null==e)s=n;else if("string"==typeof e)s=e,o=void 0;else switch(o=e){case 0:s=`${n} as it cannot be fast-forwarded`;break;case 1:s=`${n} without a remote repository specified.`;break;case 2:s=`${n}. Could not connect to the remote repository.`;break;default:s=n}super(s),this.original=t,this.reason=o,Error.captureStackTrace?.(this,FetchError)}};var k=((c=k||{})[c.Conflicts=0]="Conflicts",c[c.AbortedWouldOverwrite=1]="AbortedWouldOverwrite",c[c.Other=2]="Other",c);let CherryPickError=class CherryPickError extends Error{static is(e,t){return e instanceof CherryPickError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i){let r,s,o=`Unable to cherry-pick${i?` commit '${i}'`:""}`;if(null==e)r=o;else if("string"==typeof e)r=e,s=void 0;else switch(s=e){case 1:r=`${o} as some local changes would be overwritten.`;break;case 0:r=`${o} due to conflicts.`;break;default:r=o}super(r),this.original=t,this.reason=s,Error.captureStackTrace?.(this,CherryPickError)}};let WorkspaceUntrustedError=class WorkspaceUntrustedError extends Error{constructor(){super("Unable to perform Git operations because the current workspace is untrusted"),Error.captureStackTrace?.(this,WorkspaceUntrustedError)}};var S=((u=S||{})[u.AlreadyCheckedOut=0]="AlreadyCheckedOut",u[u.AlreadyExists=1]="AlreadyExists",u);let WorktreeCreateError=class WorktreeCreateError extends Error{static is(e,t){return e instanceof WorktreeCreateError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to create worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Unable to create worktree because it is already checked out";break;case 1:i="Unable to create worktree because it already exists"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeCreateError)}};var R=((h=R||{})[h.HasChanges=0]="HasChanges",h[h.DefaultWorkingTree=1]="DefaultWorkingTree",h[h.DirectoryNotEmpty=2]="DirectoryNotEmpty",h);let WorktreeDeleteError=class WorktreeDeleteError extends Error{static is(e,t){return e instanceof WorktreeDeleteError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to delete worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Unable to delete worktree because there are uncommitted changes";break;case 1:i="Cannot delete worktree because it is the default working tree"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeDeleteError)}};var P=((d=P||{})[d.TagAlreadyExists=0]="TagAlreadyExists",d[d.TagNotFound=1]="TagNotFound",d[d.InvalidTagName=2]="InvalidTagName",d[d.PermissionDenied=3]="PermissionDenied",d[d.RemoteRejected=4]="RemoteRejected",d[d.Other=5]="Other",d);let TagError=class TagError extends Error{static is(e,t){return e instanceof TagError&&(null==t||e.reason===t)}original;reason;action;tag;static buildTagErrorMessage(e,t,i){let r;switch(r=null!=i?`Unable to ${i} tag ${t?`'${t}'`:""}`:`Unable to perform action${t?` with tag '${t}'`:"on tag"}`,e){case 0:return`${r} because it already exists`;case 1:return`${r} because it does not exist`;case 2:return`${r} because the tag name is invalid`;case 3:return`${r} because you don't have permission to push to this remote repository.`;case 4:return`${r} because the remote repository rejected the push.`;default:return r}}constructor(e,t,i,r){let s;"string"!=typeof e?s=e:super(e),super("string"==typeof e?e:TagError.buildTagErrorMessage(e,i,r)),this.original=t,this.reason=s,this.tag=i,this.action=r,Error.captureStackTrace?.(this,TagError)}withTag(e){return this.tag=e,this.message=TagError.buildTagErrorMessage(this.reason,e,this.action),this}withAction(e){return this.action=e,this.message=TagError.buildTagErrorMessage(this.reason,this.tag,e),this}};var A=((p=A||{})[p.NothingToAbort=0]="NothingToAbort",p);let PausedOperationAbortError=class PausedOperationAbortError extends Error{static is(e,t){return e instanceof PausedOperationAbortError&&(null==t||e.reason===t)}original;reason;operation;constructor(e,t,i,r){super(i||="Unable to abort operation"),this.original=r,this.reason=e,this.operation=t,Error.captureStackTrace?.(this,PausedOperationAbortError)}};var I=((g=I||{})[g.NothingToContinue=0]="NothingToContinue",g[g.UnmergedFiles=1]="UnmergedFiles",g[g.UncommittedChanges=2]="UncommittedChanges",g[g.UnstagedChanges=3]="UnstagedChanges",g[g.UnresolvedConflicts=4]="UnresolvedConflicts",g[g.WouldOverwrite=5]="WouldOverwrite",g);let PausedOperationContinueError=class PausedOperationContinueError extends Error{static is(e,t){return e instanceof PausedOperationContinueError&&(null==t||e.reason===t)}original;reason;operation;constructor(e,t,i,r){super(i||="Unable to continue operation"),this.original=r,this.reason=e,this.operation=t,Error.captureStackTrace?.(this,PausedOperationContinueError)}};var D=((m=D||{})[m.AmbiguousArgument=0]="AmbiguousArgument",m[m.ChangesWouldBeOverwritten=1]="ChangesWouldBeOverwritten",m[m.DetachedHead=2]="DetachedHead",m[m.EntryNotUpToDate=3]="EntryNotUpToDate",m[m.PermissionDenied=4]="PermissionDenied",m[m.RefLocked=5]="RefLocked",m[m.Other=6]="Other",m[m.UnmergedChanges=7]="UnmergedChanges",m);let ResetError=class ResetError extends Error{static is(e,t){return e instanceof ResetError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to reset";else if("string"==typeof e)i=e,r=void 0;else switch(i="Unable to reset",r=e){case 7:i=`${i} because there are unmerged changes`;break;case 0:i=`${i} because the argument is ambiguous`;break;case 3:i=`${i} because the entry is not up to date`;break;case 5:i=`${i} because the ref is locked`;break;case 4:i=`${i} because you don't have permission to modify affected files`;break;case 2:i=`${i} because you are in a detached HEAD state`;break;case 1:i=`${i} because your local changes would be overwritten`}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,ResetError)}}},4521:(e,t,i)=>{i.d(t,{KH:()=>u,LK:()=>l,ZQ:()=>c});var r=i(1398),s=i(4135),o=i(1078),n=i(655),a=i(6599);function l(){return(0,n.SD)("gitlens:plus:enabled",o.H.get("plusFeatures.enabled",void 0,!0))}async function c(){if(l())return!0;let e={title:"Enable"};return await r.window.showInformationMessage("Pro features are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})===e&&(await o.H.updateEffective("plusFeatures.enabled",!0),!0)}async function u(e,t,i,o){for(;;){let n=await e.subscription.getSubscription();if(n.account?.verified===!1){let s={title:"Resend Email"},o={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

You must verify your email before you can continue.`,{modal:!0},s,o)===s&&await e.subscription.resendVerification(i))continue;return!1}let l=n.plan.effective.id;if((0,a.zx)(l))break;if(o?.allowPreview&&null==n.account&&!(0,a.lc)(n)){let s={title:"Continue"},o={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

Do you want to continue to get immediate access to preview local Pro features for 3 days?`,{modal:!0},s,o)!==s)return!1;e.subscription.startPreviewTrial(i);break}if(null==n.account){let o={title:"Try GitLens Pro"},n={title:"Sign In"},a={title:"Cancel",isCloseAffordance:!0},l=await r.window.showWarningMessage(`${t}

Do you want to start your free ${s.kj}-day Pro trial for full access to all GitLens Pro features?`,{modal:!0},o,n,a);if((l===o||l===n)&&await e.subscription.loginOrSignUp(l===o,i))continue}else{let o={title:"Upgrade to Pro"},n={title:"Cancel",isCloseAffordance:!0};await r.window.showWarningMessage(`${t}

Do you want to upgrade for full access to all GitLens Pro features?`,{modal:!0},o,n)===o&&e.subscription.upgrade(s.qn.Pro,i)}return!1}return!0}},4644:(e,t,i)=>{i.d(t,{m:()=>StashNode});var r=i(1398),s=i(4199),o=i(1078),n=i(892),a=i(6006),l=i(5576),c=i(3934),u=i(9642),h=i(6729),d=i(2070),p=i(7473);let StashFileNode=class StashFileNode extends p.p{constructor(e,t,i,r){super("stash-file",e,t,i,r)}get contextValue(){return`${u.U0.File}+stashed`}};let StashNode=class StashNode extends h.t{constructor(e,t,i,r){super("stash",i.getGitUri(),e,t),this.parent=t,this.commit=i,this.options=r,this.updateContext({commit:i}),this._uniqueId=(0,u.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.commit.stashName}get ref(){return this.commit}async getChildren(){let e=(await this.commit.getCommitsForFiles({include:{stats:!0}})).map(e=>new StashFileNode(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){let t=(0,n.Ay)(e,e=>e.uri.relativePath.split("/"),(...e)=>(0,a.Fd)((0,a.HS)(...e)),this.view.config.files.compact);e=new d.x(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort((e,t)=>(0,c.wN)(e.label,t.label));return e}getTreeItem(){let e=new r.TreeItem(s.c.fromTemplate(this.view.config.formats.stashes.label,this.commit,{messageTruncateAtNewLine:!0,dateFormat:o.H.get("defaultDateFormat")}),r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=s.c.fromTemplate(this.view.config.formats.stashes.description,this.commit,{messageTruncateAtNewLine:!0,dateFormat:o.H.get("defaultDateFormat")}),e.contextValue=u.U0.Stash,this.options?.icon&&(e.iconPath=new r.ThemeIcon("archive")),e}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t,[i,n]=await Promise.allSettled([this.view.container.git.remotes(this.commit.repoPath).getBestRemotesWithProviders(e),this.commit.ensureFullDetails({include:{stats:!0}})]);if(e.isCancellationRequested)return;let a=(0,l.Ro)(i,[]),[c]=a;if(c?.hasIntegration()){let[i]=await Promise.allSettled([(0,l.zu)(this.commit.getEnrichedAutolinks(c),e)]);if(e.isCancellationRequested)return;let r=(0,l.Ro)(i);r?.paused||(t=r?.value)}let u=await s.c.fromTemplateAsync(o.H.get("views.formats.stashes.tooltip"),this.commit,{enrichedAutolinks:t,dateFormat:o.H.get("defaultDateFormat"),messageAutolinks:!0,messageIndent:4,outputFormat:"markdown",remotes:a}),h=new r.MarkdownString(u,!0);return h.supportHtml=!0,h.isTrusted=!0,h}}},4693:(e,t,i)=>{i.d(t,{$w:()=>a,Bb:()=>o,JX:()=>h,VC:()=>c,_c:()=>u,gv:()=>n,uY:()=>l});var r=i(9703),s=i(8191);function o(e,t){return(0,s.b)({command:"stash",state:{subcommand:"apply",repo:e,reference:t}})}function n(e,t){return(0,s.b)({command:"stash",state:{subcommand:"drop",repo:e,references:t}})}function a(e,t,i){return(0,s.b)({command:"stash",state:{subcommand:"rename",repo:e,reference:t,message:i}})}function l(e,t){return(0,s.b)({command:"stash",state:{subcommand:"pop",repo:e,reference:t}})}function c(e,t,i,r=!1,o=!1,n=!1,a){return(0,s.b)({command:"stash",state:{subcommand:"push",repo:e,uris:t,onlyStagedUris:a,message:i,flags:[...r?["--include-untracked"]:[],...o?["--keep-index"]:[],...n?["--staged"]:[]]}})}function u(e,t){return r.m.instance.views.revealStash(e,t)}function h(e,t){let{preserveFocus:i,...s}={...t,commit:e};return r.m.instance.views.commitDetails.show({preserveFocus:i},s)}},4704:(e,t,i)=>{i.d(t,{FV:()=>c,e8:()=>u});let r=/[\\*_{}[\]()#+\-.!]/g,s=/\\([\\`*_{}[\]()#+\-.!])/g,o=/^===/gm,n=/^\u200b===/gm,a=/\r?\n/g,l=/`/g;function c(e,t={}){return(e=e.replace(r,"\\$&").replace(o,"​==="),e=t.inlineBackticks?function(e){let t="\\`\\`\\`",i="",r=!0,s=!1,o="";for(let n=0;n<e.length;n+=1){let a=e[n];if("\n"===a&&s&&(r=!1),"```"===e.substring(n,n+3)){s?(s=!1,r?i+=`\`\`\`${o}\`\`\``:(i+=`${t}${o}${t}`,r=!0),o=""):s=!0,n+=2;continue}s?o+=a:i+=a}return s&&(i+=r?"```"+o:t+o),i}(e):e.replace(l,"\\$&"),t.quoted)?e.trim().replace(a,"	\\\n>  "):e}function u(e){return e.replace(s,"$1").replace(n,"===")}},4756:e=>{e.exports=require("tls")},4941:(e,t,i)=>{let r,s,o,n;i.d(t,{Fl:()=>d,PI:()=>g,Tl:()=>p,Yq:()=>m,bH:()=>v,m8:()=>f,zd:()=>y});let a=/(?<literal>\[.*?\])|(?<year>YYYY|YY)|(?<month>M{1,4})|(?<day>Do|DD?)|(?<weekday>d{2,4})|(?<hour>HH?|hh?)|(?<minute>mm?)|(?<second>ss?)|(?<fractionalSecond>SSS)|(?<dayPeriod>A|a)|(?<timeZoneName>ZZ?)/g,l=/(?<dateStyle>full|long|medium|short)(?:\+(?<timeStyle>full|long|medium|short))?/,c=[["year",629856e5,31536e6,"yr"],["month",2628e6,2628e6,"mo"],["week",6048e5,6048e5,"wk"],["day",864e5,864e5,"d"],["hour",36e5,36e5,"h"],["minute",6e4,6e4,"m"],["second",1e3,1e3,"s"]],u=new Map,h=new Map;function d(e){s="string"==typeof e?"system"===e||0===e.trim().length?void 0:[e]:e??void 0,o=void 0,n=void 0,u.clear(),h.clear(),r=void 0}function p(e,t){let i=new Date(e.getTime());for(let[e,r]of Object.entries(t))if(r)switch(e){case"years":i.setFullYear(i.getFullYear()+r);break;case"months":i.setMonth(i.getMonth()+r);break;case"days":i.setDate(i.getDate()+r);break;case"hours":i.setHours(i.getHours()+r);break;case"minutes":i.setMinutes(i.getMinutes()+r);break;case"seconds":i.setSeconds(i.getSeconds()+r)}return i}function g(e,t){let i=("number"==typeof e?e:e.getTime())-new Date().getTime();for(let[e,a,l,u]of c){let c=Math.abs(i);if(c>=a||1e3===a){if(t){if(null==r&&(r=null!=n?n.resolvedOptions().locale:null!=o?o.resolvedOptions().locale:(n=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"always",style:"narrow"})).resolvedOptions().locale),"en"===r||r?.startsWith("en-")){let e=Math.round(c/l);return`${e}${u}`}return null==n&&(n=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"always",style:"narrow"})),n.format(Math.round(i/l),e)}return null==o&&(o=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"auto",style:"long"})),o.format(Math.round(i/l),e)}}return""}function m(e,t,i,r=!0){t=t??void 0;let o=`${i??""}:${t}`,n=u.get(o);if(null==n){let e,c=function(e){if(null==e)return{localeMatcher:"best fit",dateStyle:"full",timeStyle:"short"};let t=l.exec(e);if(t?.groups!=null){let{dateStyle:e,timeStyle:i}=t.groups;return{localeMatcher:"best fit",dateStyle:e||"full",timeStyle:i||void 0}}let i={localeMatcher:"best fit"};for(let{groups:t}of e.matchAll(a))if(null!=t){for(let[e,r]of Object.entries(t))if(null!=r)switch(e){case"year":i.year=4===r.length?"numeric":"2-digit";break;case"month":switch(r.length){case 4:i.month="long";break;case 3:i.month="short";break;case 2:i.month="2-digit";break;case 1:i.month="numeric"}break;case"day":"DD"===r?i.day="2-digit":i.day="numeric";break;case"weekday":switch(r.length){case 4:i.weekday="long";break;case 3:i.weekday="short";break;case 2:i.weekday="narrow"}break;case"hour":i.hour=2===r.length?"2-digit":"numeric",i.hour12="hh"===r||"h"===r;break;case"minute":i.minute=2===r.length?"2-digit":"numeric";break;case"second":i.second=2===r.length?"2-digit":"numeric";break;case"fractionalSecond":i.fractionalSecondDigits=3;break;case"dayPeriod":i.dayPeriod="narrow",i.hour12=!0,i.hourCycle="h12";break;case"timeZoneName":i.timeZoneName=2===r.length?"long":"short"}}return i}(t);e=null==i?s:"system"===i?void 0:[i],n=new Intl.DateTimeFormat(e,c),r&&u.set(o,n)}if(null==t||l.test(t))return n.format(e);let c=n.formatToParts(e);return t.replace(a,(t,o,n,a,l,h,d,p,g,m,f,v,y,b,C)=>{if(null!=o)return o.substring(1,o.length-1);for(let[t,o]of Object.entries(C)){if(null==o)continue;let n=c.find(e=>e.type===t);if("Do"===o&&n?.type==="day"){var k=Number(n.value);let e=k%100;return`${k}${w[(e-20)%10]??w[e]??w[0]}`}if("a"===o&&n?.type==="dayPeriod"){let t=(function(e){let t=`${i??""}:time:${e}`,o=u.get(t);if(null==o){let n;n=null==i?s:"system"===i?void 0:[i],o=new Intl.DateTimeFormat(n,{localeMatcher:"best fit",timeStyle:e}),r&&u.set(t,o)}return o})("short").formatToParts(e).find(e=>"dayPeriod"===e.type);return` ${(t??n)?.value??""}`}return n?.value??""}return""})}function f(e,t,i,r){let s=("number"==typeof t?t:t.getTime())-("number"==typeof e?e:e.getTime()),o=r??Math.floor;switch(i){case"days":return o(s/864e5);case"hours":return o(s/36e5);case"minutes":return o(s/6e4);case"seconds":return o(s/1e3);default:return s}}let w=["th","st","nd","rd"];function v(e,t,i){return y(t,i)(e)}function y(e,t){null==e&&(e="decimal");let i=`${t??""}:${e}`,r=h.get(i);if(null==r){let o,n={localeMatcher:"best fit",style:e};o=null==t?s:"system"===t?void 0:[t],r=new Intl.NumberFormat(o,n),h.set(i,r)}return r.format}},4992:(e,t,i)=>{i.d(t,{Z:()=>Formatter});var r=i(3934);let s=new Map,o=/ /g,n={collapseWhitespace:!1,padDirection:"left",prefix:void 0,suffix:void 0,truncateTo:void 0};let Formatter=class Formatter{_item;_options;constructor(e,t){this.reset(e,t)}reset(e,t){this._item=e,this.collapsableWhitespace=0,(null!=t||null==this._options)&&(null==t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:mma"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}collapsableWhitespace=0;_padOrTruncate(e,t){if(null==e||0===e.length)return e;if(0===(t??=n).truncateTo)return`${t.prefix?t.prefix.trimEnd():""}${t.suffix?t.suffix.trimStart():""}`;t.prefix&&(e=`${t.prefix}${e}`);let i=t.suffix?(0,r.RG)(t.suffix):0,s=t.truncateTo;if(null==s)return this.collapsableWhitespace=0,t.suffix?`${e}${t.suffix}`:e;s+=this.collapsableWhitespace,this.collapsableWhitespace=0;let o=(0,r.vJ)(e,s,i+1);if(o.truncated)return`${e.slice(0,o.index)}${o.ellipsed?"…":""}${t.suffix??""}`;let a=o.width;return(t.suffix&&(e+=t.suffix,a+=i),a===s)?e:(t.collapseWhitespace&&(this.collapsableWhitespace=s-a),"left"===t.padDirection)?e.padStart(s," "):t.collapseWhitespace?e:e.padEnd(s," ")}static _formatter=void 0;static fromTemplateCore(e,t,i,s){let n;return(t=t.replace(o," "),e instanceof Formatter)?(0,r.GW)(t,e):(null==(n=null==s||"string"==typeof s?{dateFormat:s}:s).tokenOptions&&(n.tokenOptions=(0,r.Vx)(t).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null))),null==this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),(0,r.GW)(t,this._formatter))}static fromTemplateCoreAsync(e,t,i,s){let n;return(t=t.replace(o," "),e instanceof Formatter)?(0,r.Ow)(t,e):(null==(n=null==s||"string"==typeof s?{dateFormat:s}:s).tokenOptions&&(n.tokenOptions=(0,r.Vx)(t).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null))),null==this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),(0,r.Ow)(t,this._formatter))}static has(e,...t){let i=1===t.length?t[0]:`(${t.join("|")})`,r=s.get(i);return null==r&&(r=RegExp(`\\b${i}\\b`),s.set(i,r)),r.test(e)}}},5030:(e,t,i)=>{i.d(t,{Z:()=>StatusFileFormatter});var r=i(1518),s=i(4704),o=i(6006),n=i(9349),a=i(3112),l=i(2775),c=i(4992);let StatusFileFormatter=class StatusFileFormatter extends c.Z{get directory(){let e=u((0,a.C0)(this._item,!1,this._options.relativePath),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.directory)}get file(){let e=u((0,o.P8)(this._item.path),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){let e=u((0,a.CB)(this._item,{relativeTo:this._options.relativePath,truncateTo:this._options.tokenOptions.filePath?.truncateTo}),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get originalPath(){let e=u((0,a.Hk)(this._item,this._options.relativePath),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.originalPath)}get path(){let e=u((0,a.WI)(this._item,this._options.relativePath),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.path)}get status(){let e=(0,l.m)(this._item.status);return this._padOrTruncate(e,this._options.tokenOptions.status)}get working(){let e="";return e=null!=this._item.workingTreeStatus&&null!=this._item.indexStatus?`${r.EO.Pencil}${r.EO.Space}${r.EO.SpaceThinnest}${r.EO.Check}`:null!=this._item.workingTreeStatus?`${r.EO.Pencil}${r.EO.SpaceThin}${r.EO.SpaceThinnest}${r.EO.EnDash}${r.EO.Space}`:null!=this._item.indexStatus?`${r.EO.Space}${r.EO.EnDash}${r.EO.Space.repeat(2)}${r.EO.Check}`:"",this._padOrTruncate(e,this._options.tokenOptions.working)}get changes(){return(0,n.H)(this._item)?this._padOrTruncate(this._item.formatStats("stats","plaintext"!==this._options.outputFormat?{color:!0}:void 0),this._options.tokenOptions.changes):this._padOrTruncate("",this._options.tokenOptions.changes)}get changesDetail(){return(0,n.H)(this._item)?this._padOrTruncate(this._item.formatStats("expanded",{color:"plaintext"!==this._options.outputFormat,separator:", "}),this._options.tokenOptions.changesDetail):this._padOrTruncate("",this._options.tokenOptions.changes)}get changesShort(){return(0,n.H)(this._item)?this._padOrTruncate(this._item.formatStats("short",{separator:""}),this._options.tokenOptions.changesShort):this._padOrTruncate("",this._options.tokenOptions.changes)}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}};function u(e,t){return"markdown"===t?(0,s.FV)(e):e}},5167:(e,t,i)=>{i.d(t,{G5:()=>u,Hi:()=>p,PR:()=>d,Vt:()=>m,Xs:()=>f,dj:()=>g,u5:()=>h});var r=i(1398),s=i(6613),o=i(1078),n=i(6612),a=i(4941),l=i(3934),c=i(6103);function u(e,t){return(0,c.e2)(e,(0,s.Du)(s.WL.Noop,void 0,{label:"Use AI-powered GitLens features like Generate Commit Message, Explain Commit, and more",iconPath:new r.ThemeIcon("sparkle")}),{source:"ai"},t)}function h(e){switch(e){case"generate-commitMessage":return"Generate Commit Message";case"generate-stashMessage":return"Generate Stash Message";case"generate-changelog":return"Generate Changelog (Preview)";case"generate-create-cloudPatch":return"Create Cloud Patch Details";case"generate-create-codeSuggestion":return"Create Code Suggestion Details";case"generate-create-pullRequest":return"Create Pull Request Details (Preview)";case"explain-changes":return"Explain Changes";default:return"Unknown Action"}}let d=3.1;async function p(e,t,i){let s=await e.storage.getSecret(`gitlens.${t.id}.key`);if(s)return s;if(i||t.requiresAccount&&!await u(e,!1))return;let o=r.window.createInputBox();o.ignoreFocusOut=!0;let n=[];try{let e={iconPath:new r.ThemeIcon("link-external"),tooltip:`Open the ${t.name} API Key Page`};s=await new Promise(i=>{n.push(o.onDidHide(()=>i(void 0)),o.onDidChangeValue(e=>{if(e&&!t.validator(e)){o.validationMessage=`Please enter a valid ${t.name} API key`;return}o.validationMessage=void 0}),o.onDidAccept(()=>{let e=o.value.trim();if(!e||!t.validator(e)){o.validationMessage=`Please enter a valid ${t.name} API key`;return}i(e)}),o.onDidTriggerButton(i=>{i===e&&t.url&&r.env.openExternal(r.Uri.parse(t.url))})),o.password=!0,o.title=`Connect to ${t.name}`,o.placeholder=`Please enter your ${t.name} API key to use this feature`,o.prompt=`Enter your [${t.name} API Key](${t.url} "Get your ${t.name} API key")`,t.url&&(o.buttons=[e]),o.show()})}finally{o.dispose(),n.forEach(e=>void e.dispose())}if(s)return e.storage.storeSecret(`gitlens.${t.id}.key`,s).catch(),s}function g(e){if(null!==e)return null!=e?e:Math.max(0,Math.min(o.H.get("ai.modelOptions.temperature"),2))}async function m(e,t){let i={title:"Continue"},s={title:"Change Threshold"},o=await r.window.showWarningMessage(`This request will use approximately ${(0,l.td)("token",e)}, which exceeds the configured ${(0,a.bH)(t)} token threshold for large prompts.

Do you want to continue?`,{modal:!0},i,s,{title:"Cancel",isCloseAffordance:!0});return o===s&&(0,n.P9)({query:"gitlens.ai.largePromptWarningThreshold"}),o===i}function f(e){r.window.showWarningMessage(`The prompt was truncated to fit within the ${(0,l.Lu)(e.provider.name)} limits.`)}},5186:(e,t,i)=>{i.d(t,{M:()=>g,y:()=>GitWorktree});var r=i(1398),s=i(1518),o=i(377),n=i(6612),a=i(4941),l=i(4499),c=i(6006),u=i(8554),h=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};let GitWorktree=class GitWorktree{constructor(e,t,i,r,s,o,n,a,l){this.container=e,this.isDefault=t,this.type=i,this.repoPath=r,this.uri=s,this.locked=o,this.prunable=n,this.sha=a,this.branch=l}get date(){return this.branch?.date}get path(){return this.uri.scheme===s.xB.File?(0,c.Fd)(this.uri.fsPath):this.uri.toString()}get friendlyPath(){return null!=this.workspaceFolder?(0,n.kZ)(this.uri):(0,c.Fd)((0,o.V8)(this.repoPath,this.uri.fsPath))||(0,c.Fd)(this.uri.fsPath)}get formattedDate(){return"absolute"===this.container.BranchDateFormatting.dateStyle?this.formatDate(this.container.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get hasChanges(){return this._status?.hasChanges}get opened(){return this.workspaceFolder?.uri.toString()===this.uri.toString()}get name(){switch(this.type){case"bare":return"(bare)";case"detached":return(0,u.pV)(this.sha);default:return this.branch?.name||this.friendlyPath}}get workspaceFolder(){return r.workspace.getWorkspaceFolder(this.uri)}formatDate(e){return null!=this.date?(0,a.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,a.PI)(this.date):""}_status;_statusPromise;async getStatus(e){return"bare"===this.type?Promise.resolve(void 0):((null==this._statusPromise||e?.force)&&(this._statusPromise=new Promise(async(e,t)=>{try{let t=await this.container.git.status(this.uri.fsPath).getStatus();this._status=t,e(t)}catch(e){t(e)}})),this._statusPromise)}};function g(e){return e instanceof GitWorktree}p([(0,l.B)()],GitWorktree.prototype,"friendlyPath",1),p([(0,l.B)()],GitWorktree.prototype,"workspaceFolder",1),p([(0,l.B)(e=>e??"MMMM Do, YYYY h:mma")],GitWorktree.prototype,"formatDate",1)},5223:(e,t,i)=>{i.d(t,{p:()=>m});var r=i(8191),s=i(1192),o=i(3088),n=i(9403),a=i(4301),l=i(9439),c=i(7005),u=i(4338),h=i(2713),d=i(5813),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let m=class extends u.dY{constructor(e){super(["gitlens.revealCommitInView","gitlens.showQuickCommitDetails"]),this.container=e}static createMarkdownCommandLink(e,t){return(0,l.J)("gitlens.showQuickCommitDetails","string"==typeof e?{sha:e,repoPath:t}:e)}preExecute(e,t){return"gitlens.revealCommitInView"===e.command&&((t={...t}).revealInView=!0),"viewItem"===e.type&&((t={...t}).sha=e.node.uri.sha,(0,d.j7)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let a,l;if(i?.commit==null)if(i?.repoPath!=null&&null!=i.sha)l=i.repoPath,a=o.nk.fromRepoPath(l);else{if(null==(t=(0,h.q)(t,e)))return;l=(a=await o.nk.fromUri(t)).repoPath}else null==i.sha&&(i.sha=i.commit.sha),a=i.commit.getGitUri(),l=i.commit.repoPath,null==t&&(t=i.commit.file?.uri);if(null==(i={...i}).sha){if(null==e)return;let t=e.selection.active.line;if(t<0)return;try{let e=await this.container.git.getBlameForLine(a,t);if(null==e){(0,n.gD)("Unable to show commit");return}if(e.commit.isUncommitted){(0,n.CR)("Unable to show commit");return}i.sha=e.commit.sha,l=e.commit.repoPath,i.commit=e.commit}catch(e){c.Vy.error(e,"ShowQuickCommitCommand",`getBlameForLine(${t})`),(0,n.qQ)("Unable to show commit");return}}try{if((null==i.commit||null!=i.commit.file)&&(null!=i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),null==i.commit&&(i.repoLog=void 0)),null==i.repoLog&&(i.commit=await this.container.git.commits(l).getCommit(i.sha))),null==i.commit){(0,n.pW)("Unable to show commit");return}if(i.revealInView){await (0,s._c)(i.commit,{select:!0,focus:!0,expand:!0});return}await (0,r.b)({command:"show",state:{repo:l,reference:i.commit}})}catch(e){c.Vy.error(e,"ShowQuickCommitCommand"),(0,n.qQ)("Unable to show commit")}}};m=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o})([(0,a.G5)()],m)},5262:(e,t,i)=>{i.d(t,{V:()=>GitCache});var r=i(1398),s=i(1078),o=i(4342),n=i(4429),a=Object.defineProperty,l=Object.getOwnPropertyDescriptor,c=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?l(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&a(t,i,o),o};let u=Object.freeze([]);let GitCache=class GitCache{constructor(e){this.container=e,this._useCaching=s.H.get("advanced.caching.enabled"),this._disposable=r.Disposable.from(s.H.onDidChange(e=>{s.H.changed(e,"advanced.caching.enabled")&&(this._useCaching=s.H.get("advanced.caching.enabled"),this._useCaching||this.reset(!0)),s.H.changed(e,"remotes")&&this.clearCaches(void 0,"remotes")}),e.events.on("git:cache:reset",e=>this.clearCaches(e.data.repoPath,...e.data.types??u)))}_disposable;dispose(){this.reset(),this._disposable.dispose()}_useCaching=!1;get useCaching(){return this._useCaching}_bestRemotesCache;get bestRemotes(){return this._bestRemotesCache??=new Map}_branchCache;get branch(){return this.useCaching?this._branchCache??=new Map:void 0}_branchesCache;get branches(){return this.useCaching?this._branchesCache??=new Map:void 0}_contributorsCache;get contributors(){return this.useCaching?this._contributorsCache??=new Map:void 0}_defaultBranchNameCache;get defaultBranchName(){return this.useCaching?this._defaultBranchNameCache??=new Map:void 0}_pausedOperationStatusCache;get pausedOperationStatus(){return this.useCaching?this._pausedOperationStatusCache??=new Map:void 0}_remotesCache;get remotes(){return this.useCaching?this._remotesCache??=new Map:void 0}_repoInfoCache;get repoInfo(){return this._repoInfoCache??=new Map}_stashesCache;get stashes(){return this.useCaching?this._stashesCache??=new Map:void 0}_tagsCache;get tags(){return this.useCaching?this._tagsCache??=new Map:void 0}_trackedPaths=new n.m9;get trackedPaths(){return this._trackedPaths}_worktreesCache;get worktrees(){return this.useCaching?this._worktreesCache??=new Map:void 0}clearCaches(e,...t){let i=new Set;for(let r of((!t.length||t.includes("branches"))&&(i.add(this._branchCache),i.add(this._branchesCache),i.add(this._defaultBranchNameCache)),(!t.length||t.includes("contributors"))&&i.add(this._contributorsCache),(!t.length||t.includes("remotes"))&&(i.add(this._remotesCache),i.add(this._bestRemotesCache),i.add(this._defaultBranchNameCache)),(!t.length||t.includes("providers"))&&i.add(this._bestRemotesCache),(!t.length||t.includes("stashes"))&&i.add(this._stashesCache),(!t.length||t.includes("status"))&&i.add(this._pausedOperationStatusCache),(!t.length||t.includes("tags"))&&i.add(this._tagsCache),(!t.length||t.includes("worktrees"))&&i.add(this._worktreesCache),t.length||(i.add(this._repoInfoCache),i.add(this._trackedPaths)),i))null!=e?r?.delete(e):r?.clear()}reset(e=!1){this._branchCache?.clear(),this._branchCache=void 0,this._branchesCache?.clear(),this._branchesCache=void 0,this._contributorsCache?.clear(),this._contributorsCache=void 0,this._pausedOperationStatusCache?.clear(),this._pausedOperationStatusCache=void 0,this._remotesCache?.clear(),this._remotesCache=void 0,this._stashesCache?.clear(),this._stashesCache=void 0,this._tagsCache?.clear(),this._tagsCache=void 0,this._worktreesCache?.clear(),this._worktreesCache=void 0,e||(this._repoInfoCache?.clear(),this._repoInfoCache=void 0,this._trackedPaths.clear())}};c([(0,o.Rm)({singleLine:!0})],GitCache.prototype,"clearCaches",1),c([(0,o.Rm)({singleLine:!0})],GitCache.prototype,"reset",1)},5288:(e,t,i)=>{i.d(t,{NZ:()=>f,m7:()=>m,nA:()=>w});var r,s=i(1398),o=i(9487),n=i(255),a=i(9703),l=i(6250),c=i(1192),u=i(7488),h=i(2636),d=i(6612),p=i(6613),g=i(7947),m=((r=m||{})[r.Branches=1]="Branches",r[r.Tags=2]="Tags",r[r.WorkingTree=4]="WorkingTree",r[r.HEAD=8]="HEAD",r[r.BranchesAndTags=3]="BranchesAndTags",r[r.All=15]="All",r);async function f(e,t,i,r){let s=await w(e,t,i,r);return s?.value}async function w(e,t,i,r){let g,m,f=s.window.createQuickPick();f.ignoreFocusOut=r?.ignoreFocusOut??(0,d.dW)(),f.title=t,f.placeholder=r?.allowRevisions!=null&&!1!==r.allowRevisions?`${i} (or enter a revision using #)`:i,f.matchOnDescription=!0,r?.allowBack&&(f.buttons=[s.QuickInputButtons.Back]);let w=[];if(r?.keyboard!=null){let{keyboard:e}=r;(g=a.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==f.activeItems.length){let[i]=f.activeItems;if(null!=i){let r=f.ignoreFocusOut;f.ignoreFocusOut=!0,await e.onDidPressKey(t,i),f.ignoreFocusOut=r}}}}])))).start(),w.push(g)}let y=new s.CancellationTokenSource,b=v(e,r);r?.autoPick&&(b=b.then(e=>(e.length<=1&&(m={value:e[0]?.item},y.cancel()),e))),f.busy=!0,f.show();let C=(0,n.e2)(a.m.instance.git.getRepository(e),{buttons:[o.yi],ranges:r?.allowRevisions&&"boolean"!=typeof r.allowRevisions?r.allowRevisions.ranges:void 0});if(f.items=await b,r?.picked!=null){let e=f.items.find(e=>e.ref===r.picked);null!=e&&(f.activeItems=[e])}f.busy=!1;try{let e=await new Promise(e=>{w.push(y.token.onCancellationRequested(()=>f.hide()),f.onDidHide(()=>e({value:void 0})),f.onDidAccept(()=>{0!==f.activeItems.length&&e({value:f.activeItems[0]?.item})}),f.onDidChangeValue(async e=>{null!=g&&(0!==e.length?g.pause(["left","ctrl+left","right","ctrl+right"]):g.resume()),r?.allowRevisions&&(await C(f,e)||(f.items=await b))}),f.onDidTriggerItemButton(({button:e,item:{item:t}})=>{e===o.yi&&((0,h.gC)(t)?(0,l._c)(t,{select:!0,expand:!0}):(0,h.A1)(t)?(0,u._c)(t,{select:!0,expand:!0}):(0,h.bv)(t)&&(0,c.JX)(t,{pin:!1,preserveFocus:!0}))}),f.onDidTriggerButton(t=>{t===s.QuickInputButtons.Back&&e({directive:p.WL.Back})}))});if(e?.directive!=null)return e;return e?.value==null&&null!=m?m:e}finally{f.dispose(),w.forEach(e=>void e.dispose())}}async function v(e,t){let i=t?.include??3,r=await (0,n.Qj)(a.m.instance.git.getRepository(e),i&&1?["branches","tags"]:i&&1?["branches"]:i&&1?["tags"]:[],{buttons:[o.yi],filter:t?.filter,picked:t?.picked,sort:t?.sort??{branches:{current:!1},tags:{}}}),s=t?.picked;if(s){let e=r.findIndex(e=>e.ref===s);-1!==e&&r.unshift(...r.splice(e,1))}return 8&i&&r.unshift((0,g.vS)("HEAD",e,void 0,{icon:!0})),4&i&&r.unshift((0,g.vS)("",e,void 0,{icon:!0})),t?.exclude?.length?r.filter(e=>!t.exclude?.includes(e.ref)):r}},5319:(e,t,i)=>{i.d(t,{PB:()=>Repositories,dX:()=>c});var r=i(5565),s=i(1518),o=i(4111),n=i(8929),a=i(6006),l=i(4429);function c(e){let{path:t}=u(e);return t}function u(e){let t;switch(e.scheme.toLowerCase()){case s.xB.File:return{path:t=(0,a.Fd)(e.fsPath),ignoreCase:!r.j9};case s.xB.Git:return{path:t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!r.j9};case s.xB.GitLens:{t=e.path;let i=(0,o.V3)(e.authority);return null==i.uncPath||t.startsWith(i.uncPath)||(t=`${i.uncPath}${e.path}`),{path:t=47===t.charCodeAt(t.length-1)?t.slice(1,-1):t.startsWith("//")?t:t.slice(1),ignoreCase:!r.j9}}case s.xB.Virtual:case s.xB.GitHub:{t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1);let i=e.authority?.split("+",1)[0];return{path:i?`${i}/${t}`:t,ignoreCase:!1}}case s.xB.Vsls:case s.xB.VslsScc:return{path:t=47===(t=(0,n.EL)(e.path)).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!1};case s.xB.PRs:{t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1);let i=e.authority?.split("+",1)[0];if(i===s.xB.GitHub)return{path:i?`${i}/${t}`:t,ignoreCase:!1};return{path:t,ignoreCase:!r.j9}}default:return{path:t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!1}}}let Repositories=class Repositories{_trie;_count=0;constructor(){this._trie=new l.F6(u)}get count(){return this._count}add(e){let t=this._trie.set(e.uri,e);return t&&this._count++,t}clear(){this._count=0,this._trie.clear()}forEach(e,t){for(let i of this._trie.getDescendants())e.call(t,i)}get(e){return this._trie.get(e)}getClosest(e){return this._trie.getClosest(e)}has(e){return this._trie.has(e)}remove(e,t=!0){let i=this._trie.delete(e,t);return i&&this._count--,i}values(){return this._trie.getDescendants()}}},5367:(e,t,i)=>{i.d(t,{W:()=>d});var r=i(1398),s=i(9487),o=i(1518),n=i(6424),a=i(1081),l=i(6612),c=i(6851),u=i(5576),h=i(3934);async function d(e,t,i,d,p){let g=(0,u.v6)(),m=[];try{var f,w,v;let u=r.window.createQuickPick();m.push(u,u.onDidHide(()=>g.fulfill(void 0)),u.onDidAccept(()=>u.busy?void 0:g.fulfill(u.selectedItems.map(e=>e.item))),u.onDidChangeSelection((0,c.s)(e=>{if(!u.canSelectMany||u.busy)return;let t=!1;for(let i of u.items){let r=e.includes(i);(i.picked!==r||i.alwaysShow!==r)&&(i.alwaysShow=i.picked=r,t=!0)}t&&(u.items=(0,a.tB)([...u.items]),u.selectedItems=e)},10)),u.onDidTriggerButton(e=>{e===s.tH&&(u.canSelectMany?u.selectedItems=[]:g.fulfill([]))})),u.ignoreFocusOut=p?.ignoreFocusOut??(0,l.dW)(),u.title=p?.appendReposToTitle?(f=e,w=i,v=t,f.git.openRepositoryCount<=1?w:`${w}${(0,h.xv)(`${(0,h.eV)(o.EO.Dot,2,2)}${v.formattedName}`,o.uR-w.length)}`):i,u.placeholder=d,u.matchOnDescription=!0,u.matchOnDetail=!0,u.canSelectMany=p?.multiselect??!0,u.buttons=p?.clearButton?[s.tH]:[],u.busy=!0,u.show();let y=await t.git.contributors().getContributors();if(!g.pending)return;let b=await Promise.all(y.map(e=>(0,n.N)(e,p?.picked?.(e)??!1)));if(!g.pending)return;return u.items=(0,a.tB)(b),u.canSelectMany?u.selectedItems=b.filter(e=>e.picked):u.activeItems=b.filter(e=>e.picked),u.busy=!1,await g.promise}finally{m.forEach(e=>void e.dispose())}}},5419:(e,t,i)=>{i.d(t,{$e:()=>r,DL:()=>h,TT:()=>d,aE:()=>o,bP:()=>u,dQ:()=>l,jr:()=>c,rL:()=>n,zf:()=>a});let r=(0,i(9949).N)(),s=new Map;function o(e){s.delete(e)}function n(e,t){return null==t?`[${e.toString(16).padStart(13)}]`:`[${t.toString(16).padStart(5)} \u2192 ${e.toString(16).padStart(5)}]`}function a(e,t){return null==t?`[${e.padEnd(13)}]`:`[${e}${t.padStart(13-e.length)}]`}function l(){return s.get(r.current)}function c(e,t){if(null!=t&&"boolean"!=typeof t)return{scopeId:t.scopeId,prevScopeId:t.prevScopeId,prefix:`${t.prefix}${e}`};let i=t?r.current:void 0,s=r.next();return{scopeId:s,prevScopeId:i,prefix:`${n(s,i)} ${e}`}}function u(e,t){let i=c(e,t);return s.set(i.scopeId,i),{...i,[Symbol.dispose]:()=>o(i.scopeId)}}function h(e,t){return t={prevScopeId:r.current,...t},s.set(e,t),t}function d(e,t,i){null!=e&&(e.exitDetails=t,null!=i&&(e.exitFailed=i))}},5423:(e,t,i)=>{function r(){return function(){}}i.r(t),i.d(t,{default:()=>r})},5425:(e,t,i)=>{i.d(t,{do:()=>p,qr:()=>ActionRunners,zM:()=>g});var r,s=i(1398),o=i(3096),n=i(4301),a=i(1078),l=i(655),c=i(6612),u=i(9949),h=i(3934);let d=["createPullRequest","openPullRequest","hover.commands"];var p=((r=p||{})[r.BuiltIn=0]="BuiltIn",r[r.BuiltInPartner=1]="BuiltInPartner",r[r.Partner=2]="Partner",r[r.BuiltInPartnerInstaller=3]="BuiltInPartnerInstaller",r);let g="Built In";let ActionRunnerQuickPickItem=class ActionRunnerQuickPickItem{constructor(e,t){this.runner=e,this._label="string"==typeof e.label?e.label:e.label(t)}_label;get label(){return this._label}get detail(){return this.runner.name}};let NoActionRunnersQuickPickItem=class NoActionRunnersQuickPickItem{runner;get label(){return"No actions were found"}get detail(){}};let m=(0,u.N)();let RegisteredActionRunner=class RegisteredActionRunner{constructor(e,t,i){this.type=e,this.runner=t,this.unregister=i,this.id=m.next()}id;dispose(){this.unregister()}get name(){return this.runner.name}get label(){return this.runner.label}get order(){switch(this.type){case 0:return 0;case 1:return 1;case 2:return this.partnerId?1:2;case 3:return 3;default:return 100}}get partnerId(){return this.runner.partnerId}run(e){return this.runner.run(e)}};let ActionRunners=class ActionRunners{constructor(e){this.container=e;let t=[this._onDidChange,a.H.onDidChange(e=>{a.H.changed(e,"partners")&&this._updateAllContextKeys()})];for(let e of d)t.push((0,n.Lb)(`${o._}${e}`,(e,t)=>this.run(e,t)));this._disposable=s.Disposable.from(...t)}_onDidChange=new s.EventEmitter;get onDidChange(){return this._onDidChange.event}_actionRunners=new Map;_disposable;dispose(){for(let e of(this._disposable.dispose(),this._actionRunners.values()))for(let t of e)t.dispose();this._actionRunners.clear()}count(e){return this.get(e)?.length??0}get(e){var t=a.H.get("partners"),i=this._actionRunners.get(e);return null!=i&&0!==i.length?null==t?i:i.filter(e=>null==e.partnerId||null!=e.partnerId&&t[e.partnerId]?.enabled!==!1):void 0}has(e){return this.count(e)>0}register(e,t,i=2){let r=this._actionRunners.get(e);null==r&&(r=[],this._actionRunners.set(e,r));let s=e=>{this._updateContextKeys(e),this._onDidChange.fire(e)},o=this._actionRunners,n=new RegisteredActionRunner(i,t,function(){if(1===r.length)o.delete(e),s(e);else{let e=r.indexOf(this);-1!==e&&r.splice(e,1)}});return r.push(n),s(e),{dispose:()=>n.dispose()}}registerBuiltIn(e,t){return this.register(e,{...t,partnerId:void 0,name:g},0)}registerBuiltInPartner(e,t,i){return this.register(t,{...i,partnerId:e},1)}registerBuiltInPartnerInstaller(e,t,i){return this.register(t,{...i,partnerId:e,name:`${i.name} (Not Installed)`},3)}async run(e,t){let i,r=this.get(e.type);if(null!=r&&0!==r.length&&(null!=t&&(r=r.filter(e=>e.id===t)),0!==r.length)){if(r.length>1||r.every(e=>0!==e.type)){let t=r.sort((e,t)=>e.order-t.order||(0,h.wN)(e.name,t.name)).map(t=>new ActionRunnerQuickPickItem(t,e));0===t.length&&t.push(new NoActionRunnersQuickPickItem);let o=s.window.createQuickPick();o.ignoreFocusOut=(0,c.dW)();let n=[];try{let r=await new Promise(i=>{let r,s;switch(n.push(o.onDidHide(()=>i(void 0)),o.onDidAccept(()=>{0!==o.activeItems.length&&i(o.activeItems[0])})),e.type){case"createPullRequest":r="Create Pull Request",s="Choose how to create a pull request";break;case"openPullRequest":r="Open Pull Request",s="Choose how to open the pull request";break;case"hover.commands":r="Need Help or Want to Collaborate?",s="Choose what you would like to do"}o.title=r,o.placeholder=s,o.matchOnDetail=!0,o.items=t,o.show()});if(null==r)return;i=r.runner}finally{o.dispose(),n.forEach(e=>void e.dispose())}}else[i]=r;await i?.run(e)}}async _updateContextKeys(e){await (0,l.o)(`gitlens:action:${e}`,this.count(e))}async _updateAllContextKeys(){for(let e of d)await this._updateContextKeys(e)}}},5452:(e,t,i)=>{function r(e,t,i,r){return null!=e&&(null!=e.name||null!=e.email||null!=e.username)&&(null==e.name||e.name===t)&&(null==e.email||e.email===i)&&(null==e.username||e.username===r)}i.d(t,{h:()=>r})},5507:(e,t,i)=>{i.d(t,{F8:()=>h,PB:()=>a,TF:()=>c,VO:()=>d,_c:()=>u,ho:()=>l,vt:()=>n});var r=i(9703),s=i(5576),o=i(8191);async function n(e,t,i,r){let n=(0,s.v6)();if(await (0,o.b)({command:"worktree",state:{subcommand:"create",repo:e,uri:t,reference:i,addRemote:r?.addRemote,createBranch:r?.createBranch,flags:r?.createBranch?["-b"]:void 0,result:n,reveal:r?.reveal}}),!n.pending)return n.promise;n.cancel()}function a(e,t,i){return(0,o.b)({command:"worktree",state:{subcommand:"copy-changes",repo:t,worktree:i,changes:{type:e}}})}function l(e,t){return(0,o.b)({command:"worktree",state:{subcommand:"open",repo:e.repoPath,worktree:e,flags:h(t?.location),openOnly:t?.openOnly}})}function c(e,t){return(0,o.b)({command:"worktree",state:{subcommand:"delete",repo:e,uris:t}})}function u(e,t){return r.m.instance.views.revealWorktree(e,t)}function h(e){if(null!=e)switch(e){case"newWindow":return["--new-window"];case"addToWorkspace":return["--add-to-workspace"];default:return[]}}function d(e){if(null!=e)return e.includes("--new-window")?"newWindow":e.includes("--add-to-workspace")?"addToWorkspace":"currentWindow"}},5510:(e,t,i)=>{i.d(t,{C1:()=>IpcNotification,Fh:()=>c,Ge:()=>r,HE:()=>d,HM:()=>g,OG:()=>n,Oz:()=>IpcRequest,Q2:()=>IpcCommand,RR:()=>u,Vw:()=>o,YU:()=>m,ct:()=>h,j0:()=>l,lJ:()=>a,pY:()=>s});let IpcCall=class IpcCall{constructor(e,t,i=!1,r=!1){this.scope=e,this.reset=i,this.pack=r,this.method=`${e}/${t}`}method;is(e){return e.method===this.method}};let IpcCommand=class IpcCommand extends IpcCall{};let IpcRequest=class IpcRequest extends IpcCall{response;constructor(e,t,i,r){super(e,t,i,r),this.response=new IpcNotification(this.scope,`${t}/completion`,this.reset,this.pack)}};let IpcNotification=class IpcNotification extends IpcCall{};let r=new IpcCommand("core","webview/ready"),s=new IpcCommand("core","webview/focus/changed"),o=new IpcCommand("core","command/execute"),n=new IpcRequest("core","promos/applicable"),a=new IpcCommand("core","configuration/update"),l=new IpcCommand("core","telemetry/sendEvent"),c=new IpcNotification("core","ipc/promise/settled"),u=new IpcNotification("core","window/focus/didChange"),h=new IpcCommand("core","webview/focus/didChange"),d=new IpcNotification("core","configuration/didChange"),p=["rebaseEditor.enabled","currentLine.useUncommittedChangesFormat"];function g(e){return p.includes(e)}function m(e,t){}},5516:(e,t,i)=>{i.d(t,{f:()=>o});var r=i(7747),s=i(5576);async function o(e,t,i){let o,n=[];if(!i.commits.size)return{changes:n,range:t};let a=new Map,l=await e.git.remotes(i.repoPath).getBestRemoteWithIntegration();for(let t of i.commits.values()){let i=t.message??t.summary,r=await e.autolinks.getAutolinks(i,l);for(let[e,t]of(n.push({message:i,links:r,issues:[]}),r))a.set(e,t)}let c=await e.autolinks.getEnrichedAutolinks(a,l);if(null!=c){let e=await Promise.allSettled((0,r.x1)(c,async([e,[t]])=>{let i=await t;if(null!=i&&"issue"===i.type)return[e,i]}));o=new Map((0,r.x1)(e,e=>(0,s.Ro)(e)))}else o=new Map;for(let e of n)e.issues.push(...(0,r.Tj)(e.links,([e,t])=>{let i=o.get(e);return{id:i?.id??e,url:i?.url??t.url,title:i?.title}}));return{changes:n,range:t}}},5565:(e,t,i)=>{i.d(t,{HZ:()=>a,ZR:()=>d,j9:()=>l,uF:()=>u,uo:()=>h});var r=i(857),s=i(6928),o=i(932),n=i(1398);let a=n.env.uiKind===n.UIKind.Web,l="linux"===o.platform,c="darwin"===o.platform,u="win32"===o.platform;function h(){return u?"windows":c?"macOS":l?"linux":a?"web":"unknown"}function d(e){return(0,s.join)((0,r.tmpdir)(),e)}},5576:(e,t,i)=>{i.d(t,{Ar:()=>v,FO:()=>l,Mp:()=>f,NY:()=>PromiseCancelledError,Ro:()=>c,aj:()=>u,bz:()=>s,nZ:()=>n,sc:()=>g,uk:()=>w,v6:()=>a,w:()=>o,wD:()=>p,wW:()=>d,yL:()=>h,zu:()=>m});var r=i(7747);function s(...e){return new Promise((t,i)=>{let r,s=!1,o=e=>{s=!0,t(e)},n=t=>{!s&&t instanceof Error&&(null==r?r=[t]:r.push(t),e.length-r.length<1&&i(new AggregateError(r)))};for(let t of e)t.then(o,n)})}async function*o(e){let t=new Map(e.map((e,t)=>[t,e.then(e=>({index:t,value:e,status:"fulfilled"}),e=>({index:t,reason:e,status:"rejected"}))]));for(;t.size;){let e=await Promise.race(t.values());t.delete(e.index),yield e}}let PromiseCancelledError=class PromiseCancelledError extends Error{constructor(e,t){super(t),this.promise=e}};function n(e,t,i,r){return null==t&&null==i?e:new Promise((s,o)=>{let n,a,l=!1,c=t=>{n?.dispose(),a?.dispose(),l||(r?.onDidCancel!=null?r.onDidCancel(s,o,t):o(new PromiseCancelledError(e,r?.cancelMessage??("cancelled"===t?"CANCELLED":"TIMED OUT"))))};if(n=i?.onCancellationRequested(()=>c("cancelled")),null!=t)if("number"==typeof t){let e=setTimeout(()=>c("timedout"),t);a={dispose:()=>clearTimeout(e)}}else a=t.onCancellationRequested(()=>c("timedout"));e.then(()=>{l=!0,n?.dispose(),a?.dispose(),s(e)},e=>{l=!0,n?.dispose(),a?.dispose(),o(e)})})}function a(){let e={pending:!0,promise:void 0,fulfill:void 0,cancel:void 0};return e.promise=new Promise((t,i)=>{e.fulfill=function(i){e.pending=!1,t(i)},e.cancel=function(t){e.pending=!1,null!=t?i(t):i()}}),e}function l(e){return e?.pending?e.promise:void 0}function c(e,t){return e?.status==="fulfilled"?e.value:t}function u(e){return e.map(c).filter(e=>null!=e)}function h(e){return null!=e&&(e instanceof Promise||"function"==typeof e?.then)}function d(e,t,i,r){let s,o;if(!h(e))return Promise.resolve({value:e,paused:!1});if(null==t&&null==i)return e.then(e=>({value:e,paused:!1}));let n=Promise.race([e.then(e=>(s?.dispose(),o?.dispose(),t?.isCancellationRequested)?{value:Promise.resolve(e),paused:!0,reason:"cancelled"}:{value:e,paused:!1}),new Promise(r=>{let n=t=>{s?.dispose(),o?.dispose(),r({value:e,paused:!0,reason:t})};if(s=t?.onCancellationRequested(()=>n("cancelled")),null!=i){let e="number"==typeof i?AbortSignal.timeout(i):i,t=()=>n("timedout");e.addEventListener("abort",t),o={dispose:()=>e.removeEventListener("abort",t)}}})]);return null==r?n:n.then(e=>(e.paused&&setTimeout(()=>r(e),0),e))}async function p(e,t,i,s,o){if(0===e.size)return e;null!=s&&"number"==typeof s&&(s=AbortSignal.timeout(s));let n=await Promise.all((0,r.Tj)(e,([e,r])=>d(r.catch(e=>!t&&e instanceof Error?e:void 0),i,s).then(t=>[e,t])));if(null!=o&&n.some(([,e])=>e.paused)){async function a(){let e=new Map;for(let[t,i]of n)e.set(t,{value:i.paused?await i.value:i.value,paused:!1});return e}let e=n.some(([,e])=>e.paused&&"cancelled"===e.reason);o({value:a(),paused:!0,reason:e?"cancelled":"timedout"})}return new Map(n)}async function g(e,t,i,s){if(0===e.size)return e;null!=i&&"number"==typeof i&&(i=AbortSignal.timeout(i));let o=await Promise.all((0,r.Tj)(e,([e,[r,...s]])=>null==r?[e,[void 0,...s]]:d(r.catch(()=>void 0),t,i).then(t=>[e,[t,...s]])));if(null!=s&&o.some(([,[e]])=>e?.paused??!1)){async function n(){let e=new Map;for(let[t,[i,...r]]of o)e.set(t,[{value:i?.paused?await i.value:i?.value,paused:!1},...r]);return e}let e=o.some(([,[e]])=>e?.paused&&"cancelled"===e.reason);s({value:n(),paused:!0,reason:e?"cancelled":"timedout"})}return new Map(o)}async function m(e,t,i,r){null!=i&&"number"==typeof i&&(i=AbortSignal.timeout(i));let s=e.then(e=>null==e?e:g(e,t,i,r)),o=await d(e,t,i);return o.paused?{value:s,paused:o.paused,reason:o.reason}:{value:await s,paused:!1}}async function f(e,t){let i=Date.now(),r=await d(e,void 0,t.timeout);return{value:r.paused?await r.value.finally(()=>t.onSlow(Date.now()-i)):r.value,duration:Date.now()-i}}function w(e){return new Promise(t=>setTimeout(t,e))}function v(){return new Promise(e=>queueMicrotask(e))}let AggregateError=class AggregateError extends Error{constructor(e){super(`AggregateError(${e.length})
${e.map(e=>`	${String(e)}`).join("\n")}`),this.errors=e,Error.captureStackTrace?.(this,AggregateError)}}},5580:(e,t,i)=>{i.d(t,{FH:()=>n,Fv:()=>l,ej:()=>u,jI:()=>s,jh:()=>r,lh:()=>o,mJ:()=>a,xS:()=>h,zJ:()=>c});let r={id:"gitkraken",name:"GitKraken AI (Preview)",primary:!0,requiresAccount:!0,requiresUserKey:!1},s={id:"vscode",name:"Copilot",primary:!0,requiresAccount:!1,requiresUserKey:!1},o={id:"openai",name:"OpenAI",primary:!1,requiresAccount:!0,requiresUserKey:!0},n={id:"anthropic",name:"Anthropic",primary:!1,requiresAccount:!0,requiresUserKey:!0},a={id:"gemini",name:"Google",primary:!1,requiresAccount:!0,requiresUserKey:!0},l={id:"deepseek",name:"DeepSeek",primary:!1,requiresAccount:!0,requiresUserKey:!0},c={id:"xai",name:"xAI",primary:!1,requiresAccount:!0,requiresUserKey:!0},u={id:"github",name:"GitHub Models",primary:!1,requiresAccount:!0,requiresUserKey:!0},h={id:"huggingface",name:"Hugging Face",primary:!1,requiresAccount:!0,requiresUserKey:!0}},5585:(e,t,i)=>{i.d(t,{G:()=>RemotesGitProviderBase});var r=i(8336),s=i(4342),o=i(3934),n=i(1403),a=i(8557),l=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o};let RemotesGitProviderBase=class RemotesGitProviderBase{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getRemote(e,t,i){if(null!=e)return(await this.getRemotes(e,void 0,i)).find(e=>e.name===t)}async getDefaultRemote(e,t){let i=await this.getRemotes(e,void 0,t);return(0,a.ft)(i)}async getRemotesWithProviders(e,t,i){return(await this.getRemotes(e,t,i)).filter(e=>null!=e.provider)}async getRemotesWithIntegrations(e,t,i){return(await this.getRemotes(e,t,i)).filter(e=>e.hasIntegration())}async getBestRemoteWithProvider(e,t){return(await this.getBestRemotesWithProviders(e,t))[0]}async getBestRemotesWithProviders(e,t){if(null==e)return[];let i=this.cache.bestRemotes.get(e);return null==i&&(i=(async function(){let i=await this.getRemotesWithProviders(e,{sort:!0},t);if(0===i.length)return[];if(1===i.length)return[...i];if(t?.isCancellationRequested)throw new r.AL;let s=i.find(e=>e.default)?.name,n=(await this.provider.branches.getBranch(i[0].repoPath))?.getRemoteName(),a=[],l=!1;for(let e of i){let i;switch(e.name){case s:i=1e3;break;case n:i=6;break;case"upstream":i=5;break;case"origin":i=4;break;default:i=0}if(i>0&&i<1e3&&!l){let s=await e.getIntegration();if(null!=s&&(s.maybeConnected||void 0===s.maybeConnected&&await s.isConnected())){if(t?.isCancellationRequested)throw new r.AL;let o=await s.getRepositoryMetadata(e.provider.repoDesc,{cancellation:t});if(t?.isCancellationRequested)throw new r.AL;null!=o&&(i+=o.isFork?-3:3,l=!o.isFork)}}a.push([i,e])}return a.sort(([e,t],[i,r])=>0===i&&0===e?(0,o.wN)(t.name,r.name):i-e),a.map(e=>e[1])}).call(this),this.cache.bestRemotes.set(e,i)),[...await i]}async getBestRemoteWithIntegration(e,t,i){let r=await this.getBestRemotesWithProviders(e,i),s=t?.includeDisconnected??!1;for(let e of r)if(e.hasIntegration()){let i=await e.getIntegration();if(null!=i){if(t?.filter?.(e,i)===!1)continue;if(s||!0===i.maybeConnected||void 0===i.maybeConnected&&(e.default||1===r.length)&&await i.isConnected())return e}}}async setRemoteAsDefault(e,t,i=!0){await this.container.storage.storeWorkspace("remote:default",i?t:void 0),this.container.events.fire("git:repo:change",{repoPath:e,changes:[n.Z_.Remotes,n.Z_.RemoteProviders]})}};u([(0,s.Rm)()],RemotesGitProviderBase.prototype,"getRemote",1),u([(0,s.Rm)()],RemotesGitProviderBase.prototype,"getDefaultRemote",1),u([(0,s.Rm)()],RemotesGitProviderBase.prototype,"getRemotesWithProviders",1),u([(0,s.Rm)()],RemotesGitProviderBase.prototype,"getRemotesWithIntegrations",1),u([(0,s.Rm)()],RemotesGitProviderBase.prototype,"getBestRemoteWithProvider",1),u([(0,s.Rm)()],RemotesGitProviderBase.prototype,"getBestRemotesWithProviders",1),u([(0,s.Rm)()],RemotesGitProviderBase.prototype,"getBestRemoteWithIntegration",1),u([(0,s.Rm)()],RemotesGitProviderBase.prototype,"setRemoteAsDefault",1)},5662:(e,t,i)=>{function r(e){if(!e.hasFullDetails())throw Error(`GitCommit(${e.sha}) is not fully loaded`)}function s(e){return null==e?0:"number"==typeof e?e:e.added+e.changed+e.deleted}function o(e){if(!e)return{summary:""};let t=e.trim(),i=t.indexOf("\n");return i<0?{summary:t}:{summary:t.substring(0,i),body:t.substring(i+1).trim()}}i.d(t,{TH:()=>o,Zx:()=>s,aQ:()=>r})},5670:(e,t,i)=>{i.d(t,{V:()=>a,Y:()=>l});var r=i(1078),s=i(4941),o=i(7747),n=i(133);function a(e,t=!0){let i=new Date(e);if(Date.now()-e<n.s)return(0,s.PI)(i);if(t)return(0,s.Yq)(i,r.H.get("defaultDateShortFormat")??"short");let o=r.H.get("defaultDateFormat")??`dddd, MMMM Do, YYYY [at] ${r.H.get("defaultTimeFormat")??"h:mma"}`;return/[hHm]/.test(o)||(o+=` [at] ${r.H.get("defaultTimeFormat")??"h:mma"}`),(0,s.Yq)(i,o)}async function l(e){let t=new Map(e.map(e=>[e.id,e])),i=new Map;for(let[,e]of t){let r=await e.getCommonRepository();if(null==r||null==(r=t.get(r.id))){i.has(e.id),i.set(e.id,{repo:e,worktrees:new Map});continue}let s=i.get(r.id);null==s?(s={repo:r,worktrees:new Map},i.set(r.id,s)):s.worktrees.set(e.path,e)}return new Map((0,o.Tj)(i,([,e])=>[e.repo,e.worktrees]))}},5682:function(e,t,i){var r;let s=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(i(8471));function o(e){return new s.default(e)}(r=o||(o={})).HttpsProxyAgent=s.default,r.prototype=s.default.prototype,e.exports=o},5692:e=>{e.exports=require("https")},5704:(e,t,i)=>{i.d(t,{B0:()=>a,UB:()=>l,wJ:()=>AnnotationProviderBase});var r=i(1398),s=i(6612),o=i(7005),n=i(5576);function a(e){return`${e?.document.uri.toString()}|${e?.viewColumn??0}`}function l(e){let t=(0,s.ek)(e);return`${t?.toString()}|${e.group.viewColumn}`}let AnnotationProviderBase=class AnnotationProviderBase{constructor(e,t,i,s,o){this.container=e,this.onDidChangeStatus=t,this.annotationType=i,this.trackedDocument=o,this.editor=s,this.disposable=r.Disposable.from(r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}decorations;disposable;_computing;dispose(){this.clear(),this.disposable.dispose()}_annotationContext;get annotationContext(){return this._annotationContext}set annotationContext(e){this._annotationContext=e}_correlationKey;get correlationKey(){return this._correlationKey}_editor;get editor(){return this._editor}set editor(e){this._editor=e,this._correlationKey=a(e)}_status;get status(){return this._status}setStatus(e,t){this.status!==e&&(this._status=e,this.onDidChangeStatus({editor:t,status:e}))}onTextEditorSelectionChanged(e){this.editor.document===e.textEditor.document&&this.selection?.({line:e.selections[0].active.line})}canReuse(e){return!0}async clear(){this._computing?.pending&&await this._computing.promise;let e=this.decorations;if(this.decorations=void 0,this.annotationContext=void 0,this.setStatus(void 0,this.editor),null!=this.editor&&e?.length)for(let t of e)try{this.editor.setDecorations(t.decorationType,[]),t.dispose&&t.decorationType.dispose()}catch{}}async provideAnnotation(e,t){this._computing=(0,n.v6)(),this.setStatus("computing",this.editor);try{if(this.annotationContext=e,await this.onProvideAnnotation(e,t))return this.setStatus("computed",this.editor),await this.selection?.(t?.restoring?{line:this.editor.selection.active.line}:e?.selection),this._computing.fulfill(),!0}catch(e){o.Vy.error(e)}return this.setStatus(void 0,this.editor),this._computing.fulfill(),!1}refresh(e){if(null==this.editor||!this.decorations?.length)return;let t=[];for(let i of this.decorations){let r=e.get(i.decorationType);null!==r&&(null!=r&&(i.decorationType=r),t.push(i))}this.setDecorations(this.decorations)}restore(e,t){if(!1!==this.editor._disposed){if(this.editor=e,t||null==this.decorations){this.provideAnnotation(this.annotationContext,{recompute:!0,restoring:!0});return}if(this.setStatus("computing",this.editor),this.decorations?.length)for(let e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions);this.setStatus("computed",this.editor)}}setDecorations(e){if(this.decorations?.length){if(!e?.length){this.clear();return}for(let t of this.decorations.filter(t=>!e.some(e=>e.decorationType.key===t.decorationType.key)))try{this.editor.setDecorations(t.decorationType,[]),t.dispose&&t.decorationType.dispose()}catch{}}if(this.decorations=e,e?.length)for(let t of e)this.editor.setDecorations(t.decorationType,t.rangesOrOptions)}}},5725:(e,t,i)=>{i.d(t,{ST:()=>p,X:()=>u,oe:()=>d,t6:()=>h});var r=i(1398),s=i(9703),o=i(6612),n=i(892),a=i(7747),l=i(7079),c=i(7947);async function u(e,t,i,r,o){let n=s.m.instance.git.getBestRepository(e,t);if(null!=n&&o?.filter!=null&&(await o.filter(n)||(n=void 0)),null!=n)return n;let a=await d(i,r,void 0,o);if(a instanceof l.Fj){await a.execute();return}return a}async function h(e,t,i,r){let o;if(null!=(o=null==i?s.m.instance.git.highlander:await s.m.instance.git.getOrOpenRepository(i))&&r?.filter!=null&&(await r.filter(o)||(o=void 0)),null!=o)return o;let n=await d(e,t,void 0,r);if(n instanceof l.Fj){await n.execute();return}return n}async function d(e,t,i,l){let u;if(i??=s.m.instance.git.openRepositories,l?.filter==null)u=await Promise.all((0,a.Tj)(i??s.m.instance.git.openRepositories,e=>(0,c.sS)(e,e===l?.picked,{branch:!0,status:!0})));else{let{filter:e}=l;u=(0,n.x1)(await Promise.allSettled((0,a.Tj)(s.m.instance.git.openRepositories,async t=>await e(t)?(0,c.sS)(t,t===l?.picked,{branch:!0,status:!0}):void 0)),e=>"fulfilled"===e.status?e.value:void 0)}if(0===u.length)return;let h=r.window.createQuickPick();h.ignoreFocusOut=(0,o.dW)();let d=[];try{let i=await new Promise(i=>{d.push(h.onDidHide(()=>i(void 0)),h.onDidAccept(()=>{0!==h.activeItems.length&&i(h.activeItems[0])})),h.title=e,h.placeholder=t,h.matchOnDescription=!0,h.matchOnDetail=!0,h.items=u,h.show()});return i?.item}finally{h.dispose(),d.forEach(e=>void e.dispose())}}async function p(e,t="Choose a repository",i){let l;if(null==i||Array.isArray(i)||null!=i.filter||(i=void 0),null==i||Array.isArray(i))l=await Promise.all((0,a.Tj)(i??s.m.instance.git.openRepositories,e=>(0,c.sS)(e,void 0,{branch:!0,status:!0})));else{let{filter:e}=i;l=(0,n.x1)(await Promise.allSettled((0,a.Tj)(s.m.instance.git.openRepositories,async t=>await e(t)?(0,c.sS)(t,void 0,{branch:!0,status:!0}):void 0)),e=>"fulfilled"===e.status?e.value:void 0)}if(0===l.length)return[];let u=r.window.createQuickPick();u.ignoreFocusOut=(0,o.dW)();let h=[];try{let i=await new Promise(i=>{h.push(u.onDidHide(()=>i(void 0)),u.onDidAccept(()=>i(u.selectedItems))),u.title=e,u.placeholder=t,u.matchOnDescription=!0,u.matchOnDetail=!0,u.items=l,u.canSelectMany=!0,u.selectedItems=l,u.show()});if(null==i)return[];return i.map(e=>e.item)}finally{u.dispose(),h.forEach(e=>void e.dispose())}}},5738:(e,t,i)=>{i.d(t,{BX:()=>d,Hu:()=>u,vw:()=>h});var r=i(4162),s=i(3529),o=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),n=e=>{throw TypeError(e)},a=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&n("Object expected"),i&&(r=t[o("asyncDispose")]),void 0===r&&(r=t[o("dispose")],i&&(s=r)),"function"!=typeof r&&n("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},l=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let c=/^(.*)\t(.*)\s\((.*)\)$/gm;function u(e,t,i,o){var n=[];try{let l,u,h,p,g,m,f,w,v=a(n,(0,r.u)(`Git.parseRemotes(${i})`,{log:!1,logLevel:"debug"}));if(!t)return[];let y=new Map;for(;w=c.exec(t),null!=w;)if([,l,u,h]=w,l=` ${l}`.substring(1),u=` ${u}`.substring(1),h=` ${h}`.substring(1),[p,g,m]=d(u),f=y.get(l),null==f)f=new s.X(e,i,l,p,g,m,o(u,g,m),[{url:u,type:h}]),y.set(l,f);else{if(f.urls.push({url:u,type:h}),null!=f.provider&&"push"!==h)continue;let t=o(u,g,m);if(null==t)continue;f=new s.X(e,i,l,p,g,m,t,f.urls),y.set(l,f)}return v?.stop({suffix:` parsed ${y.size} remotes`}),[...y.values()]}catch(e){var u=e,h=!0}finally{l(n,u,h)}}let h=/^(?:(git:\/\/)(.*?)\/|(https?:\/\/)(?:.*?@)?(.*?)\/|git@(.*):|(ssh:\/\/)(?:.*@)?(.*?)(?::.*?)?(?:\/|(?=~))|(?:.*?@)(.*?):)(.*)$/;function d(e){let t=h.exec(e);return null==t?["","",e]:[t[1]||t[3]||t[6],t[2]||t[4]||t[5]||t[7]||t[8],t[9].replace(/\.git\/?$/,"")]}},5758:(e,t,i)=>{i.d(t,{H:()=>r});let r=500},5782:(e,t,i)=>{let r;i.d(t,{n0:()=>v,nx:()=>w,w:()=>y,kM:()=>b,v7:()=>f,iS:()=>C});var s=i(1398),o=i(1518),n=i(4199),a=i(1078);function l(e,t){let i=Math.pow(10,t);return Math.round(e*i)/i}let RGBA=class RGBA{_rgbaBrand=void 0;r;g;b;a;constructor(e,t,i,r=1){this.r=0|Math.min(255,Math.max(0,e)),this.g=0|Math.min(255,Math.max(0,t)),this.b=0|Math.min(255,Math.max(0,i)),this.a=l(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}};let HSLA=class HSLA{_hslaBrand=void 0;h;s;l;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=l(Math.max(Math.min(1,t),0),3),this.l=l(Math.max(Math.min(1,i),0),3),this.a=l(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.l===t.l&&e.a===t.a}static fromRGBA(e){let t=e.r/255,i=e.g/255,r=e.b/255,s=e.a,o=Math.max(t,i,r),n=Math.min(t,i,r),a=0,l=0,c=(n+o)/2,u=o-n;if(u>0){switch(l=Math.min(c<=.5?u/(2*c):u/(2-2*c),1),o){case t:a=(i-r)/u+6*(i<r);break;case i:a=(r-t)/u+2;break;case r:a=(t-i)/u+4}a*=60,a=Math.round(a)}return new HSLA(a,l,c,s)}static _hue2rgb(e,t,i){return(i<0&&(i+=1),i>1&&(i-=1),i<1/6)?e+(t-e)*6*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}static toRGBA(e){let t,i,r,s=e.h/360,{s:o,l:n,a}=e;if(0===o)t=i=r=n;else{let e=n<.5?n*(1+o):n+o-n*o,a=2*n-e;t=HSLA._hue2rgb(a,e,s+1/3),i=HSLA._hue2rgb(a,e,s),r=HSLA._hue2rgb(a,e,s-1/3)}return new RGBA(Math.round(255*t),Math.round(255*i),Math.round(255*r),a)}};let HSVA=class HSVA{_hsvaBrand=void 0;h;s;v;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=l(Math.max(Math.min(1,t),0),3),this.v=l(Math.max(Math.min(1,i),0),3),this.a=l(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.v===t.v&&e.a===t.a}static fromRGBA(e){let t,i=e.r/255,r=e.g/255,s=e.b/255,o=Math.max(i,r,s),n=o-Math.min(i,r,s);return new HSVA(Math.round(60*(0===n?0:o===i?((r-s)/n%6+6)%6:o===r?(s-i)/n+2:(i-r)/n+4)),0===o?0:n/o,o,e.a)}static toRGBA(e){let{h:t,s:i,v:r,a:s}=e,o=r*i,n=o*(1-Math.abs(t/60%2-1)),a=r-o,[l,c,u]=[0,0,0];return t<60?(l=o,c=n):t<120?(l=n,c=o):t<180?(c=o,u=n):t<240?(c=n,u=o):t<300?(l=n,u=o):t<=360&&(l=o,u=n),new RGBA(l=Math.round((l+a)*255),c=Math.round((c+a)*255),u=Math.round((u+a)*255),s)}};let Color=class Color{static from(e){return e instanceof Color?e:h(e)||Color.red}static fromCssVariable(e,t){return h(t.getPropertyValue(e).trim())||Color.red}static fromHex(e){return d(e)||Color.red}static equals(e,t){return!e&&!t||!!e&&!!t&&e.equals(t)}rgba;_hsla;get hsla(){return this._hsla?this._hsla:HSLA.fromRGBA(this.rgba)}_hsva;get hsva(){return this._hsva?this._hsva:HSVA.fromRGBA(this.rgba)}constructor(e){if(e)if(e instanceof RGBA)this.rgba=e;else if(e instanceof HSLA)this._hsla=e,this.rgba=HSLA.toRGBA(e);else if(e instanceof HSVA)this._hsva=e,this.rgba=HSVA.toRGBA(e);else throw Error("Invalid color ctor argument");else throw Error("Color needs a value")}equals(e){return null!=e&&!!e&&RGBA.equals(this.rgba,e.rgba)&&HSLA.equals(this.hsla,e.hsla)&&HSVA.equals(this.hsva,e.hsva)}getRelativeLuminance(){let e=Color._relativeLuminanceForComponent(this.rgba.r),t=Color._relativeLuminanceForComponent(this.rgba.g);return l(.2126*e+.7152*t+.0722*Color._relativeLuminanceForComponent(this.rgba.b),4)}static _relativeLuminanceForComponent(e){let t=e/255;return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}luminance(e){return function(e,t){if(0===t)return new Color(new RGBA(0,0,0,e.rgba.a));if(1===t)return new Color(new RGBA(255,255,255,e.rgba.a));let i=e.getRelativeLuminance(),r=20,s=(e,i)=>{let o=e.mix(i,.5),n=o.getRelativeLuminance();return!(1e-7>Math.abs(t-n))&&r--?n>t?s(e,o):s(o,i):o},o=(i>t?s(Color.black,e):s(e,Color.white)).rgba;return new Color(new RGBA(o.r,o.g,o.b,e.rgba.a))}(this,e)}getContrastRatio(e){let t=this.getRelativeLuminance(),i=e.getRelativeLuminance();return t>i?(t+.05)/(i+.05):(i+.05)/(t+.05)}isDarker(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3<128}isLighter(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3>=128}isLighterThan(e){return this.getRelativeLuminance()>e.getRelativeLuminance()}isDarkerThan(e){return this.getRelativeLuminance()<e.getRelativeLuminance()}lighten(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l+this.hsla.l*e,this.hsla.a))}darken(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l-this.hsla.l*e,this.hsla.a))}transparent(e){let{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(t,i,r,s*e))}isTransparent(){return 0===this.rgba.a}isOpaque(){return 1===this.rgba.a}opposite(){return new Color(new RGBA(255-this.rgba.r,255-this.rgba.g,255-this.rgba.b,this.rgba.a))}blend(e){let t=e.rgba,i=this.rgba.a,r=t.a,s=i+r*(1-i);if(s<1e-6)return Color.transparent;let o=this.rgba.r*i/s+t.r*r*(1-i)/s;return new Color(new RGBA(o,this.rgba.g*i/s+t.g*r*(1-i)/s,this.rgba.b*i/s+t.b*r*(1-i)/s,s))}mix(e,t){let i=this.rgba,r=e.rgba;return new Color(new RGBA(i.r+t*(r.r-i.r),i.g+t*(r.g-i.g),i.b+t*(r.b-i.b),i.a+t*(r.a-i.a)))}makeOpaque(e){if(this.isOpaque()||1!==e.rgba.a)return this;let{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(e.rgba.r-s*(e.rgba.r-t),e.rgba.g-s*(e.rgba.g-i),e.rgba.b-s*(e.rgba.b-r),1))}flatten(...e){let t=e.reduceRight((e,t)=>Color._flatten(t,e));return Color._flatten(this,t)}static _flatten(e,t){let i=1-e.rgba.a;return new Color(new RGBA(i*t.rgba.r+e.rgba.a*e.rgba.r,i*t.rgba.g+e.rgba.a*e.rgba.g,i*t.rgba.b+e.rgba.a*e.rgba.b))}_toString;toString(){return this._toString||(this._toString=function(e){return e.isOpaque()?`#${c(e.rgba.r)}${c(e.rgba.g)}${c(e.rgba.b)}`:`rgba(${e.rgba.r}, ${e.rgba.g}, ${e.rgba.b}, ${Number(e.rgba.a.toFixed(2))})`}(this)),this._toString}static getLighterColor(e,t,i){if(e.isLighterThan(t))return e;i=i||.5;let r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(s-r)/s,e.lighten(i)}static getDarkerColor(e,t,i){if(e.isDarkerThan(t))return e;i=i||.5;let r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(r-s)/r,e.darken(i)}static white=new Color(new RGBA(255,255,255,1));static black=new Color(new RGBA(0,0,0,1));static red=new Color(new RGBA(255,0,0,1));static blue=new Color(new RGBA(0,0,255,1));static green=new Color(new RGBA(0,255,0,1));static cyan=new Color(new RGBA(0,255,255,1));static lightgrey=new Color(new RGBA(211,211,211,1));static transparent=new Color(new RGBA(0,0,0,0))};function c(e){let t=e.toString(16);return 2!==t.length?`0${t}`:t}let u=/^((?:rgb|hsl)a?)\((-?\d+(?:%|deg)?)[,\s]+(-?\d+%?)[,\s]+(-?\d+%?)[,\s]*(-?[\d.]+%?)?\)$/i;function h(e){let t;if(0===(e=e.trim()).length)return null;if(e.charCodeAt(0)===o.s7.Hash)return d(e);let i=u.exec(e);if(null==i)return null;let r=i[1];switch(r){case"rgb":case"hsl":t=[parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),1];break;case"rgba":case"hsla":t=[parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),parseFloat(i[5])];break;default:return null}switch(r){case"rgb":case"rgba":return new Color(new RGBA(t[0],t[1],t[2],t[3]));case"hsl":case"hsla":return new Color(new HSLA(t[0],t[1],t[2],t[3]))}return Color.red}function d(e){let t=(e=e.trim()).length;if(0===t||e.charCodeAt(0)!==o.s7.Hash)return null;switch(t){case 7:{let t=16*p(e.charCodeAt(1))+p(e.charCodeAt(2));return new Color(new RGBA(t,16*p(e.charCodeAt(3))+p(e.charCodeAt(4)),16*p(e.charCodeAt(5))+p(e.charCodeAt(6)),1))}case 9:{let t=16*p(e.charCodeAt(1))+p(e.charCodeAt(2)),i=16*p(e.charCodeAt(3))+p(e.charCodeAt(4));return new Color(new RGBA(t,i,16*p(e.charCodeAt(5))+p(e.charCodeAt(6)),(16*p(e.charCodeAt(7))+p(e.charCodeAt(8)))/255))}case 4:{let t=p(e.charCodeAt(1)),i=p(e.charCodeAt(2)),r=p(e.charCodeAt(3));return new Color(new RGBA(16*t+t,16*i+i,16*r+r))}case 5:{let t=p(e.charCodeAt(1)),i=p(e.charCodeAt(2)),r=p(e.charCodeAt(3)),s=p(e.charCodeAt(4));return new Color(new RGBA(16*t+t,16*i+i,16*r+r,(16*s+s)/255))}default:return null}}function p(e){switch(e){case o.s7.Digit0:break;case o.s7.Digit1:return 1;case o.s7.Digit2:return 2;case o.s7.Digit3:return 3;case o.s7.Digit4:return 4;case o.s7.Digit5:return 5;case o.s7.Digit6:return 6;case o.s7.Digit7:return 7;case o.s7.Digit8:return 8;case o.s7.Digit9:return 9;case o.s7.a:case o.s7.A:return 10;case o.s7.b:case o.s7.B:return 11;case o.s7.c:case o.s7.C:return 12;case o.s7.d:case o.s7.D:return 13;case o.s7.e:case o.s7.E:return 14;case o.s7.f:case o.s7.F:return 15}return 0}var g=i(3934);let m=["#f66a0a","#ef6939","#e96950","#e26862","#db6871","#d3677e","#cc678a","#c46696","#bb66a0","#b365a9","#a965b3","#a064bb","#9664c4","#8a63cc","#7e63d3","#7162db","#6262e2","#5061e9","#3961ef","#0a60f6"];function f(){if(null==r){let e,{coldColor:t,hotColor:i}=a.H.get("heatmap");r={hot:(e="#0a60f6"===t&&"#f66a0a"===i?m:function(e,t,i){let r=[],s=Color.from(e),o=Color.from(t);r.push(s.toString());for(let e=1;e<19;e++){let t=s.mix(o,e/19);r.push(t.toString())}return r.push(o.toString()),r}(i,t,0)).slice(0,10),cold:e.slice(10,20)};let s=a.H.onDidChange(e=>{a.H.changed(e,["heatmap.ageThreshold","heatmap.hotColor","heatmap.coldColor"])&&(s.dispose(),r=void 0)})}return r}function w(e,t,i){let[r,s,o,n]=k(t,i);e.renderOptions.before.borderColor=`rgba(${r},${s},${o},${n})`}function v(e,t,i,r){let[o,n,l,c]=k(e,t),{fadeLines:u,locations:h}=a.H.get("heatmap"),d=h.includes("gutter"),p=h.includes("line"),g=h.includes("overview"),m=`${o},${n},${l},${c}`,f=r.get(m);return null==f?(f={decorationType:s.window.createTextEditorDecorationType({backgroundColor:p?`rgba(${o},${n},${l},${.15*c})`:void 0,opacity:u?`${t.computeOpacity(e).toFixed(2)} !important`:void 0,isWholeLine:!!p||!!u||void 0,gutterIconPath:d?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${o},${n},${l})' fill-opacity='${c}' x='8' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:d?"contain":void 0,overviewRulerLane:g?s.OverviewRulerLane.Center:void 0,overviewRulerColor:g?`rgba(${o},${n},${l},${.7*c})`:void 0}),rangesOrOptions:[i],dispose:!0},r.set(m,f)):f.rangesOrOptions.push(i),f.decorationType}function y(e,t,i,r){let s={renderOptions:{before:{...r}}};e.isUncommitted&&(s.renderOptions.before.color=r.uncommittedColor);let a=n.c.fromTemplate(t,e,i);return s.renderOptions.before.contentText=(0,g.eV)(a.replace(/ /g,o.EO.Space),1,1),s}function b(e,t,i,r,o,n){let l,c,u,h=0;for(let e of Object.values(o.tokenOptions))if(void 0!==e){if(null==e.truncateTo){h=-1;break}h+=e.truncateTo}if(h>=0&&(h+=(0,g.RG)((0,g.GW)(r,void 0)))>0&&(h+=3),t.enabled&&(l="solid",c="left"===t.location?"0 0 0 2px":"0 2px 0 0"),h>=0){let e=a.H.getCore("editor.letterSpacing");u=null!=e&&0!==e?`calc(${h}ch + ${Math.round(h*e)+(i?13:-6)}px)`:`calc(${h}ch ${i?"+ 13px":"- 6px"})`}return{backgroundColor:new s.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:l,borderWidth:c,color:new s.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:n.weight??"normal",fontStyle:n.style??"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:`${e?"overline solid rgba(0, 0, 0, .2)":"none"};box-sizing: border-box${i?";padding: 0 0 0 18px":""}${n.family?`;font-family: ${n.family}`:""}${n.size?`;font-size: ${n.size}px`:""};`,width:u,uncommittedColor:new s.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}function C(e,t,i,r,a=!0){let l=n.c.fromTemplate(t,e,{...i,messageTruncateAtNewLine:!0});return{renderOptions:{after:{backgroundColor:new s.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new s.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:(0,g.eV)(l.replace(/ /g,o.EO.Space),1,1),fontWeight:r?.weight??"normal",fontStyle:r?.style??"normal",textDecoration:`none${a?"":";position: absolute"}${r?.family?`;font-family: ${r.family}`:""}${r?.size?`;font-size: ${r.size}px`:""};`}}}}function k(e,t){let i=t.computeRelativeAge(e),r=function(e){let t=h(e);return null==t?null:[t.rgba.r,t.rgba.g,t.rgba.b,t.rgba.a]}((e.getTime()<t.coldThresholdTimestamp?t.colors.cold:t.colors.hot)[i]);return[...r??[0,0,0],null==r?0:0===i?1:i<=5?.8:.6]}},5813:(e,t,i)=>{i.d(t,{Or:()=>m,Bp:()=>f,K0:()=>w,j7:()=>v,d2:()=>S,BA:()=>y,Ey:()=>b,xT:()=>C,cD:()=>k,nX:()=>R,qv:()=>P,z2:()=>I,q:()=>A,oD:()=>D,vH:()=>$,qU:()=>T});var r=i(1398),s=i(2995),o=i(1974),n=i(458),a=i(3529),l=i(1403),c=i(9123),u=i(6166),h=i(4300),d=i(2937),p=i(9642),g=i(6729);function m(e){return"editorLine"===e.type}function f(e){return"timeline-item:git"===e.type}function w(e){return"viewItem"===e.type&&(0,s.P)(e.node.branch)}function v(e){return"viewItem"===e.type&&(0,o.WM)(e.node.commit)}function y(e){return"viewItem"===e.type&&(0,n.c)(e.node.contributor)}function b(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&(null!=t.file.repoPath||null!=t.repoPath)}function C(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&(0,o.WM)(t.commit)&&(null!=t.file.repoPath||null!=t.repoPath)}function k(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&null!=t.ref1&&null!=t.ref2&&(null!=t.file.repoPath||null!=t.repoPath)}function S(e){return"viewItem"===e.type&&"string"==typeof e.node.compareRef?.ref&&"string"==typeof e.node.compareWithRef?.ref}function R(e){return"viewItem"===e.type&&(e.node instanceof g.t||e.node instanceof g.p)}function P(e){return"viewItem"===e.type&&(0,a.V)(e.node.remote)}function A(e){return"viewItem"===e.type&&e.node.repo instanceof l.LN}function I(e){return"viewItem"===e.type&&"string"==typeof e.node.repoPath}function D(e){return"viewItem"===e.type&&(0,c.d)(e.node.tag)}function $(e){if("viewItem"!==e.type)return!1;let t=e.node.workspace;return t instanceof u.j2||t instanceof h.h}function T(e,t,...i){let s,o=[...i],n=i[0];if(t?.expectsEditor){if((null==n||null!=n.id&&n.document?.uri!=null)&&(s=n,n=(i=i.slice(1))[0]),i.length>0&&(null==n||n instanceof r.Uri)){let[t,...n]=i;if(null!=t){null==s&&(t.toString()===r.window.activeTextEditor?.document.uri.toString()||e.endsWith("InDiffLeft"))&&(s=r.window.activeTextEditor);let i=n[0];return null!=i&&Array.isArray(i)&&0!==i.length&&i[0]instanceof r.Uri?[{command:e,type:"uris",args:o,editor:s,uri:t,uris:i},n.slice(1)]:[{command:e,type:"uri",args:o,editor:s,uri:t},n]}i=i.slice(1)}else if(null==s){if(null!=n&&"object"==typeof n&&"lineNumber"in n&&"uri"in n){let[,...t]=i;return[{command:e,type:"editorLine",args:o,editor:void 0,line:n.lineNumber-1,uri:n.uri},t]}s=r.window.activeTextEditor}}if(n instanceof p.eu){let[t,r,...s]=i;if(t instanceof p.eu&&Array.isArray(r)&&r[0]instanceof p.eu){let i=r.filter(e=>e?.constructor===t.constructor);return[{command:e,type:"viewItems",args:o,node:t,nodes:i},s]}return[{command:e,type:"viewItem",args:o,node:t,uri:t.uri},s]}if((0,d.D0)(n)){let t=[],r=0;for(let e of i){if(!(0,d.D0)(e))break;r++,t.push(e)}return[{command:e,type:"scm-states",args:o,scmResourceStates:t,uri:t[0].resourceUri},i.slice(r)]}if((0,d.xC)(n)){let t=[],r=0;for(let e of i){if(!(0,d.xC)(e))break;r++,t.push(e)}return[{command:e,type:"scm-groups",args:o,scmResourceGroups:t},i.slice(r)]}if(function(e){return null!=e&&null!=e&&null!=e.timestamp&&null!=e.label&&null!=e.ref&&null!=e.previousRef&&null!=e.message}(n)){let[t,r,...s]=i;return[{command:e,type:"timeline-item:git",args:o,item:t,uri:r},s]}if((0,d.Y6)(n)){let[t,...r]=i;return[{command:e,type:"scm",args:o,scm:t},r]}return[{command:e,type:"unknown",args:o,editor:s,uri:s?.document.uri},i]}},5894:(e,t,i)=>{i.d(t,{E:()=>C});var r=i(1398),s=i(1518),o=i(1192),n=i(3088),a=i(8554),l=i(9403),c=i(4008),u=i(7079),h=i(6613),d=i(4301),p=i(377),g=i(9439),m=i(7005),f=i(3934),w=i(4338),v=i(2713),y=Object.defineProperty,b=Object.getOwnPropertyDescriptor;let C=class extends w.Zr{constructor(e){super(["gitlens.openFileRevision","gitlens.openBlamePriorToChange"]),this.container=e}static createMarkdownCommandLink(e,t,i){let s;return s=e instanceof r.Uri?{revisionUri:e,line:i,annotationType:t}:e,(0,g.J)("gitlens.openFileRevision",s)}async preExecute(e,t){if("gitlens.openBlamePriorToChange"===e.command){if(null==(t={...t,annotationType:"blame"}).revisionUri&&null!=e.editor){let i=e.editor.selection.active.line;if(i>=0)try{let r=await n.nk.fromUri(e.editor.document.uri),s=await this.container.git.getBlameForLine(r,i);if(null!=s)if(s.commit.isUncommitted){let e=await s.commit.getPreviousComparisonUrisForLine(i);if(e?.previous!=null)t.revisionUri=this.container.git.getRevisionUri(e.previous);else{(0,l.pR)(s.commit);return}}else{let e=null!=s?await s?.commit.getPreviousSha():void 0;if(null!=e)t.revisionUri=this.container.git.getRevisionUri(s.commit.getGitUri(!0));else{(0,l.pR)(s.commit);return}}}catch(e){m.Vy.error(e,"OpenBlamePriorToChangeCommand")}}if(null==t.revisionUri){(0,l.qQ)("Unable to open blame");return}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,v.q)(t,e)))return;let r=await n.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){let e=this.container.git.commits(r.repoPath),n=e.getLogForPath(r.fsPath).then(t=>t??(r.sha?e.getLogForPath(r.fsPath,r.sha):void 0)),l=`Open ${"blame"===i.annotationType?"Blame":"File"} at Revision${(0,f.eV)(s.EO.Dot,2,2)}`,d=`${l}${r.getFormattedFileName({suffix:r.sha?`:${(0,a.pV)(r.sha)}`:void 0,truncateTo:s.uR-l.length})}`,g=await (0,c.X)(n,d,`Choose a commit to ${"blame"===i.annotationType?"blame":"open"} the file revision from`,{empty:r.sha?void 0:{getState:async()=>{let e,t,i=[],s=await this.container.git.status(r.repoPath).getStatus();if(null!=s)for(let e of s.files){if("?"===e.workingTreeStatus||"!"===e.workingTreeStatus)continue;let[t,s]=(0,p.Uf)(e.path,void 0,!0);i.push(new u.Fj({label:t,description:s},void 0,"gitlens.openFileRevision",[this.container.git.getAbsoluteUri(e.path,r.repoPath)]))}return i.length?(e=`${r.getFormattedFileName()} is likely untracked, choose a different file?`,t=`${d} (Untracked?)`):e="No commits found",i.push((0,h.Du)(h.WL.Cancel,void 0,{label:i.length?"Cancel":"OK"})),{items:i,placeholder:e,title:t}}},picked:r.sha,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,o.vM)(t.item.file,t.item,{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!0})}},showOtherReferences:[u.Fj.fromCommand("Choose a Branch or Tag...","gitlens.openFileRevisionFrom",[t]),u.Fj.fromCommand("Choose a Stash...","gitlens.openFileRevisionFrom",[t,{stash:!0}])]});if(g?.file==null)return;await (0,o.vM)(g.file,g,{annotationType:i.annotationType,line:i.line,...i.showOptions});return}await (0,o.vM)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){m.Vy.error(e,"OpenFileAtRevisionCommand"),(0,l.qQ)("Unable to open file at revision")}}};C=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?b(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&y(t,i,o),o})([(0,d.G5)()],C)},5952:(e,t,i)=>{i.d(t,{On:()=>IssueIntegration,T5:()=>HostingIntegration,dQ:()=>v,sT:()=>IntegrationBase,yK:()=>y});var r=i(1398),s=i(457),o=i(8336),n=i(9403),a=i(1078),l=i(3500),c=i(4342),u=i(7747),h=i(7005),d=i(5419),p=i(6599),g=i(6461),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};function v(e){return"key"in e&&null!=e.key&&"id"in e&&null!=e.id&&"name"in e&&null!=e.name}function y(e){return"key"in e&&null!=e.key&&"owner"in e&&null!=e.owner&&"name"in e&&null!=e.name}let IntegrationBase=class IntegrationBase{constructor(e,t,i){this.container=e,this.authenticationService=t,this.getProvidersApi=i}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}dispose(){this._onDidChange.dispose()}get authProviderDescriptor(){return{domain:this.domain,scopes:this.authProvider.scopes}}get icon(){return this.id}async access(){let e=await this.container.subscription.getSubscription();return(0,p.k0)(e.state)}autolinks(){return[]}get connectedKey(){return`connected:${this.key}`}get maybeConnected(){return void 0===this._session?void 0:null!==this._session}get connectionExpired(){if(this._session?.expiresAt!=null)return new Date(this._session.expiresAt)<new Date}_session;getSession(e){return void 0===this._session?this.ensureSession({createIfNeeded:!1,source:e}):this._session??void 0}async connect(e){try{return!!await this.ensureSession({createIfNeeded:!0,source:e})}catch{return!1}}async disconnect(e){if(e?.currentSessionOnly&&null===this._session)return;let t=null!=this._session,i=!e?.currentSessionOnly;if(t&&!e?.currentSessionOnly&&!e?.silent){let e,t={title:"Disable"},s={title:"Disable & Sign Out"},o={title:"Cancel",isCloseAffordance:!0};if(null==(e=this.authenticationService.supports(this.authProvider.id)?await r.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?

Note: signing out clears the saved authentication.`,{modal:!0},t,s,o):await r.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?`,{modal:!0},t,o))||e===o)return;i=e===s}i&&(await this.authenticationService.get(this.authProvider.id)).deleteSession(this.authProviderDescriptor),this.resetRequestExceptionCount(),this._session=null,t&&(e?.currentSessionOnly||e?.silent||this.container.storage.storeWorkspace(this.connectedKey,!1).catch(),this._onDidChange.fire(),e?.currentSessionOnly||this.container.integrations.disconnected(this,this.key)),await this.providerOnDisconnect?.()}async reauthenticate(){void 0!==this._session&&(this._session=void 0,await this.ensureSession({createIfNeeded:!0,forceNewSession:!0}))}refresh(){this.ensureSession({createIfNeeded:!1})}requestExceptionCount=0;resetRequestExceptionCount(){this.requestExceptionCount=0}async reset(){await this.disconnect({silent:!0}),await this.container.storage.deleteWorkspace(this.connectedKey)}async syncCloudConnection(e,t){if(this._session?.cloud!==!1)switch(e){case"connected":if(t){let e=await this.authenticationService.get(this.authProvider.id);await e.deleteSession(this.authProviderDescriptor),this._session=void 0,await this.container.storage.deleteWorkspace(this.connectedKey)}else{if(null!=this._session||this.requestExceptionCount>0||!1===this.container.storage.getWorkspace(this.connectedKey))return;t=!0}await this.ensureSession({sync:t});break;case"disconnected":await this.disconnect({silent:!0})}}handleProviderException(e,t,i){return e instanceof o.AL||(h.Vy.error(e,t),(e instanceof o.v3||e instanceof o.tk)&&this.trackRequestException()),i}trackRequestException(){this.requestExceptionCount++,this.requestExceptionCount>=5&&null!==this._session&&((0,n.c8)(this.name),this.disconnect({currentSessionOnly:!0}))}async isConnected(){return await this.getSession("integrations")!=null}async ensureSession(e){let t,{createIfNeeded:i,forceNewSession:r,source:s,sync:o}=e;if(null!=this._session)return this._session;if(a.H.get("integrations.enabled")){if(i||o)await this.container.storage.deleteWorkspace(this.connectedKey);else if(!1===this.container.storage.getWorkspace(this.connectedKey))return;try{let e=await this.authenticationService.get(this.authProvider.id);t=await e.getSession(this.authProviderDescriptor,o?{sync:o,source:s}:{createIfNeeded:i,forceNewSession:r,source:s})}catch(e){if(await this.container.storage.deleteWorkspace(this.connectedKey),e instanceof Error&&e.message.includes("User did not consent"))return;t=null}return void 0!==t||i||o||await this.container.storage.deleteWorkspace(this.connectedKey),this._session=t??null,this.resetRequestExceptionCount(),null!=t&&(await this.container.storage.storeWorkspace(this.connectedKey,!0),queueMicrotask(()=>{this._onDidChange.fire(),this.container.integrations.connected(this,this.key),this.providerOnConnect?.()})),t??void 0}}getIgnoreSSLErrors(){return this.container.integrations.ignoreSSLErrors(this)}async searchMyIssues(e,t){let i=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())try{let i=await this.searchProviderMyIssues(this._session,null!=e?Array.isArray(e)?e:[e]:void 0,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}}async getIssueOrPullRequest(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getIssueOrPullRequest(t,e,this,()=>({value:(async()=>{try{let r=await this.getProviderIssueOrPullRequest(this._session,e,t,i?.type);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}})()}),i)}async getIssue(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getIssue(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderIssue(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),i)}async getCurrentAccount(e){let t=(0,d.dQ)();if(!(this.maybeConnected??await this.isConnected()))return;let{expiryOverride:i,...r}=e??{};return await this.container.cache.getCurrentAccount(this,()=>({value:(async()=>{try{let e=await this.getProviderCurrentAccount?.(this._session,r);return this.resetRequestExceptionCount(),e}catch(e){return this.handleProviderException(e,t,void 0)}})()}),{expiryOverride:i})}async getPullRequest(e,t){let i=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return await this.container.cache.getPullRequest(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequest?.(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}))}};w([(0,c.Rm)()],IntegrationBase.prototype,"connect",1),w([(0,l.G)(),(0,c.Rm)()],IntegrationBase.prototype,"disconnect",1),w([(0,c.Rm)()],IntegrationBase.prototype,"reauthenticate",1),w([(0,c.Rm)()],IntegrationBase.prototype,"syncCloudConnection",1),w([(0,c.Yz)()],IntegrationBase.prototype,"trackRequestException",1),w([(0,l.G)(),(0,c.Yz)({exit:!0})],IntegrationBase.prototype,"isConnected",1),w([(0,l.G)()],IntegrationBase.prototype,"ensureSession",1),w([(0,c.Yz)()],IntegrationBase.prototype,"searchMyIssues",1),w([(0,c.Yz)()],IntegrationBase.prototype,"getIssueOrPullRequest",1),w([(0,c.Yz)()],IntegrationBase.prototype,"getIssue",1),w([(0,c.Yz)()],IntegrationBase.prototype,"getPullRequest",1);let IssueIntegration=class IssueIntegration extends IntegrationBase{type="issues";async getAccountForResource(e){if(this.maybeConnected??await this.isConnected())try{let t=await this.getProviderAccountForResource(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getResourcesForUser(){if(this.maybeConnected??await this.isConnected())try{let e=await this.getProviderResourcesForUser(this._session);return this.resetRequestExceptionCount(),e}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getProjectsForResources(e){if(this.maybeConnected??await this.isConnected())try{let t=await this.getProviderProjectsForResources(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getProjectsForUser(){let e=await this.getResourcesForUser();if(null!=e)return this.getProjectsForResources(e)}async getIssuesForProject(e,t){if(this.maybeConnected??await this.isConnected())try{let i=await this.getProviderIssuesForProject(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,void 0,void 0)}}};w([(0,l.G)(),(0,c.Yz)()],IssueIntegration.prototype,"getAccountForResource",1),w([(0,l.G)(),(0,c.Yz)()],IssueIntegration.prototype,"getResourcesForUser",1),w([(0,c.Yz)()],IssueIntegration.prototype,"getProjectsForResources",1),w([(0,c.Yz)()],IssueIntegration.prototype,"getIssuesForProject",1);let HostingIntegration=class HostingIntegration extends IntegrationBase{type="hosting";async getAccountForEmail(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())try{let r=await this.getProviderAccountForEmail(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}async getAccountForCommit(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())try{let r=await this.getProviderAccountForCommit(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}async getDefaultBranch(e,t){let i=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getRepositoryDefaultBranch(e,this,()=>({value:(async()=>{try{let i=await this.getProviderDefaultBranch(this._session,e,t?.cancellation);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}),{expiryOverride:t?.expiryOverride})}async getRepositoryMetadata(e,t){let i=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getRepositoryMetadata(e,this,()=>({value:(async()=>{try{let i=await this.getProviderRepositoryMetadata(this._session,e,t?.cancellation);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}),{expiryOverride:t?.expiryOverride})}async mergePullRequest(e,t){let i=(0,d.dQ)();if(!(this.maybeConnected??await this.isConnected()))return!1;try{let i=await this.mergeProviderPullRequest(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,!1)}}async getPullRequestForBranch(e,t,i){let r=(0,d.dQ)();if(!(this.maybeConnected??await this.isConnected()))return;let{expiryOverride:s,...o}=i??{};return this.container.cache.getPullRequestForBranch(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequestForBranch(this._session,e,t,o);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),{expiryOverride:s})}async getPullRequestForCommit(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getPullRequestForSha(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequestForCommit(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),i)}async getMyIssuesForRepos(e,t){let i,r=this.authProvider.id;if(!(this.maybeConnected??await this.isConnected()))return;let o=await this.getProvidersApi();if(r!==s.Q7.GitLab&&(o.isRepoIdsInput(e)||r===s.Q7.AzureDevOps&&!e.every(e=>null!=e.project&&null!=e.namespace))){h.Vy.warn(`Unsupported input for provider ${r}`,"getIssuesForRepos");return}if(r===s.Q7.AzureDevOps){let s=new Set,n=new Set;for(let t of e)s.add(t.namespace),n.add(t.project);if(s.size>1){h.Vy.warn(`Multiple organizations not supported for provider ${r}`,"getIssuesForRepos");return}if(0===s.size){h.Vy.warn(`No organizations found for provider ${r}`,"getIssuesForRepos");return}let a=(0,u.$1)(s.values());if(t?.filters!=null){let e;if(!o.providerSupportsIssueFilters(r,t.filters)){h.Vy.warn(`Unsupported filters for provider ${r}`,"getIssuesForRepos");return}try{e=await o.getCurrentUserForInstance(r,a)}catch(e){h.Vy.error(e,"getIssuesForRepos");return}if(null==e){h.Vy.warn(`Unable to get current user for ${r}`,"getIssuesForRepos");return}let s=e.name;if(null==s){h.Vy.warn(`Unable to get user property for filter for ${r}`,"getIssuesForRepos");return}i={authorLogin:t.filters.includes(g.mN.Author)?s:void 0,assigneeLogins:t.filters.includes(g.mN.Assignee)?[s]:void 0,mentionLogin:t.filters.includes(g.mN.Mention)?s:void 0}}let l=JSON.parse(t?.cursor??"{}").cursors??[],c=Array.from(n.values()).map(e=>({namespace:a,project:e,cursor:void 0}));l.length>0&&(c=l);try{let e={cursors:[]},t=!1,r=[];return await Promise.all(c.map(async s=>{let n=await o.getIssuesForAzureProject(s.namespace,s.project,{...i,cursor:s.cursor});r.push(...n.values),n.paging?.more&&(t=!0,e.cursors.push({namespace:s.namespace,project:s.project,cursor:n.paging.cursor}))})),{values:r,paging:{more:t,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}if(t?.filters!=null){let e;try{e=await o.getCurrentUser(r)}catch(e){h.Vy.error(e,"getIssuesForRepos");return}if(null==e){h.Vy.warn(`Unable to get current user for ${r}`,"getIssuesForRepos");return}let s=e.username;if(null==s){h.Vy.warn(`Unable to get user property for filter for ${r}`,"getIssuesForRepos");return}i={authorLogin:t.filters.includes(g.mN.Author)?s:void 0,assigneeLogins:t.filters.includes(g.mN.Assignee)?[s]:void 0,mentionLogin:t.filters.includes(g.mN.Mention)?s:void 0}}if(o.getProviderIssuesPagingMode(r)===g.W3.Repo&&!o.isRepoIdsInput(e)){let s=JSON.parse(t?.cursor??"{}").cursors??[],n=e.map(e=>({repo:e,cursor:void 0}));s.length>0&&(n=s);try{let e={cursors:[]},s=!1,a=[];return await Promise.all(n.map(async n=>{let l=await o.getIssuesForRepo(r,n.repo,{...i,cursor:n.cursor,baseUrl:t?.customUrl});a.push(...l.values),l.paging?.more&&(s=!0,e.cursors.push({repo:n.repo,cursor:l.paging.cursor}))})),{values:a,paging:{more:s,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}try{return await o.getIssuesForRepos(r,e,{...i,cursor:t?.cursor,baseUrl:t?.customUrl})}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}async getMyPullRequestsForRepos(e,t){let i,r=this.authProvider.id;if(!(this.maybeConnected??await this.isConnected()))return;let o=await this.getProvidersApi();if(r!==s.Q7.GitLab&&(o.isRepoIdsInput(e)||r===s.Q7.AzureDevOps&&!e.every(e=>null!=e.project&&null!=e.namespace))){h.Vy.warn(`Unsupported input for provider ${r}`);return}if(t?.filters!=null){let n,a;if(!o.providerSupportsPullRequestFilters(r,t.filters)){h.Vy.warn(`Unsupported filters for provider ${r}`,"getPullRequestsForRepos");return}if(r===s.Q7.AzureDevOps){let t=new Set;for(let i of e)t.add(i.namespace);if(t.size>1){h.Vy.warn(`Multiple organizations not supported for provider ${r}`,"getPullRequestsForRepos");return}if(0===t.size){h.Vy.warn(`No organizations found for provider ${r}`,"getPullRequestsForRepos");return}let i=(0,u.$1)(t.values());try{n=await o.getCurrentUserForInstance(r,i)}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}else try{n=await o.getCurrentUser(r)}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}if(null==n){h.Vy.warn(`Unable to get current user for ${r}`,"getPullRequestsForRepos");return}switch(r){case s.Q7.Bitbucket:case s.Q7.AzureDevOps:a=n.id;break;default:a=n.username}if(null==a){h.Vy.warn(`Unable to get user property for filter for ${r}`,"getPullRequestsForRepos");return}i={authorLogin:t.filters.includes(g.XP.Author)?a:void 0,assigneeLogins:t.filters.includes(g.XP.Assignee)?[a]:void 0,reviewRequestedLogin:t.filters.includes(g.XP.ReviewRequested)?a:void 0,mentionLogin:t.filters.includes(g.XP.Mention)?a:void 0}}if(o.getProviderPullRequestsPagingMode(r)===g.W3.Repo&&!o.isRepoIdsInput(e)){let s=JSON.parse(t?.cursor??"{}").cursors??[],n=e.map(e=>({repo:e,cursor:void 0}));s.length>0&&(n=s);try{let e={cursors:[]},s=!1,a=[];return await Promise.all(n.map(async n=>{let l=await o.getPullRequestsForRepo(r,n.repo,{...i,cursor:n.cursor,baseUrl:t?.customUrl});a.push(...l.values),l.paging?.more&&(s=!0,e.cursors.push({repo:n.repo,cursor:l.paging.cursor}))})),{values:a,paging:{more:s,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}try{return await o.getPullRequestsForRepos(r,e,{...i,cursor:t?.cursor,baseUrl:t?.customUrl})}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}async searchMyPullRequests(e,t,i){let r=(0,d.dQ)();if(!(this.maybeConnected??await this.isConnected()))return;let s=Date.now();try{return{value:await this.searchProviderMyPullRequests(this._session,null!=e?Array.isArray(e)?e:[e]:void 0,t,i),duration:Date.now()-s}}catch(e){return h.Vy.error(e,r),{error:e,duration:Date.now()-s}}}async searchPullRequests(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())try{let r=await this.searchProviderPullRequests?.(this._session,e,null!=t?Array.isArray(t)?t:[t]:void 0,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}getPullRequestIdentityFromMaybeUrl(e){return this.getProviderPullRequestIdentityFromMaybeUrl?.(e)}};w([(0,l.G)(),(0,c.Yz)()],HostingIntegration.prototype,"getAccountForEmail",1),w([(0,l.G)(),(0,c.Yz)()],HostingIntegration.prototype,"getAccountForCommit",1),w([(0,c.Yz)()],HostingIntegration.prototype,"getDefaultBranch",1),w([(0,c.Yz)()],HostingIntegration.prototype,"getRepositoryMetadata",1),w([(0,c.Yz)()],HostingIntegration.prototype,"getPullRequestForBranch",1),w([(0,c.Yz)()],HostingIntegration.prototype,"getPullRequestForCommit",1),w([(0,c.Yz)()],HostingIntegration.prototype,"searchMyPullRequests",1),w([(0,c.Yz)()],HostingIntegration.prototype,"searchPullRequests",1)},6006:(e,t,i)=>{i.d(t,{Fd:()=>g,HS:()=>r.join,LC:()=>r.extname,Np:()=>d,P8:()=>r.basename,bm:()=>p,my:()=>u,oP:()=>h,pD:()=>r.dirname,vO:()=>c,vc:()=>m,xI:()=>l});var r=i(6928),s=i(5565);let o=/(?<=^\/?)([A-Z])(?=:\/)/,n=/^([a-zA-Z][\w+.-]+):/,a=/\\/g;function l(e,t,i){if(0===e.length)return;let r=e[0];for(let s=1;s<e.length;s++){let o=c(r,e[s],t,i);if(0===o)return;r=r.substring(0,o+1)}return r}function c(e,t,i,r){let o;if(0===e.length||0===t.length)return 0;(r??!s.j9)&&(e=e.toLowerCase(),t=t.toLowerCase());let n=0;for(let r=0;r<e.length&&(o=e[r])===t[r];r++)o===i&&(n=r);return n}function u(e){return n.exec(e)?.[1]}function h(e){return!p(e)&&(0,r.isAbsolute)(e)}function d(e){return"*"===(0,r.basename)(e)}function p(e){return n.test(e)}function g(e){return e&&(47===(e=e.replace(a,"/")).charCodeAt(e.length-1)&&(s.uF&&3===e.length&&":"===e[1]||(e=e.slice(0,-1))),s.uF&&(e=e.replace(o,e=>e.toLowerCase()))),e}function m(e,t,i){return(i||null==i&&!s.j9)&&(e=e.toLowerCase(),t=t.toLowerCase()),g(e)===g(t)}},6066:(e,t,i)=>{i.d(t,{SU:()=>s,id:()=>o,nB:()=>r});let r="0000000000000000000000000000000000000000-",s="0000000000000000000000000000000000000000",o="0000000000000000000000000000000000000000:"},6103:(e,t,i)=>{i.d(t,{G5:()=>a,L9:()=>c,e2:()=>l});var r=i(1398),s=i(4135),o=i(7079),n=i(6613);async function a(e,t,i){for(;;){let o=await e.subscription.getSubscription();if(o.account?.verified===!1){let s={title:"Resend Email"},o={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

You must verify your email before you can continue.`,{modal:!0},s,o)===s&&await e.subscription.resendVerification(i))continue;return!1}if(null!=o.account)break;let n={title:"Try GitLens Pro"},a={title:"Sign In"},l={title:"Cancel",isCloseAffordance:!0},c=await r.window.showWarningMessage(`${t}

Start your free ${s.kj}-day Pro trial for full access to all GitLens Pro features, or sign in.`,{modal:!0},n,a,l);if(c===a){if(await e.subscription.loginOrSignUp(!1,i))continue}else if(c===n&&await e.subscription.loginOrSignUp(!0,i))continue;return!1}return!0}async function l(e,t,i,s){for(;;){let a=(await e.subscription.getSubscription()).account;if(a?.verified===!0)break;if(s)return!1;let l=[t],c="Requires an account to continue";a?.verified===!1?(l.push((0,n.Du)(n.WL.RequiresVerification,!0),(0,o.uK)(),(0,n.Du)(n.WL.Cancel)),c="You must verify your email before you can continue"):l.push((0,n.Du)(n.WL.StartProTrial,!0),(0,n.Du)(n.WL.SignIn),(0,o.uK)(),(0,n.Du)(n.WL.Cancel));let u=await r.window.showQuickPick(l,{placeHolder:c,ignoreFocusOut:!0});if(null==u||!(u.directive===n.WL.Noop||u.directive===n.WL.RequiresVerification&&await e.subscription.resendVerification(i)||u.directive===n.WL.StartProTrial&&await e.subscription.loginOrSignUp(!0,i)||u.directive===n.WL.SignIn&&await e.subscription.loginOrSignUp(!1,i)))return!1}return!0}async function c(e,t,i,o,n){if(!await a(e,t,o))return!1;for(;!(await e.git.access(i,n)).allowed;){let i={title:"Upgrade to Pro"},n={title:"Cancel",isCloseAffordance:!0};if(!(await r.window.showWarningMessage(`${t}

Please upgrade to GitLens Pro to continue.`,{modal:!0},i,n)===i&&await e.subscription.upgrade(s.qn.Pro,o)))return!1}return!0}},6166:(e,t,i)=>{i.d(t,{UQ:()=>o,ft:()=>n,j2:()=>CloudWorkspace,y1:()=>a});let CloudWorkspace=class CloudWorkspace{constructor(e,t,i,r,s,o,n,a,l,c){this.container=e,this.id=t,this.name=i,this.organizationId=r,this.provider=s,this.repoRelation=o,this.current=n,this.azureInfo=a,this._repositoryDescriptors=l,this._localPath=c,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="cloud";_repositoryDescriptors;_repositoriesByName;_localPath;_disposable;dispose(){this._disposable.dispose()}get shared(){return null!=this.organizationId}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}async getRepositoryDescriptors(e){return(null==this._repositoryDescriptors||e?.force)&&(this._repositoryDescriptors=await this.container.workspaces.getCloudWorkspaceRepositories(this.id),this.resetRepositoriesByName()),this._repositoryDescriptors}async getRepositoryDescriptor(e){return(await this.getRepositoryDescriptors()).find(t=>t.name===e)}addRepositories(e){null==this._repositoryDescriptors?this._repositoryDescriptors=e:this._repositoryDescriptors=this._repositoryDescriptors.concat(e),this.resetRepositoriesByName()}removeRepositories(e){null!=this._repositoryDescriptors&&(this._repositoryDescriptors=this._repositoryDescriptors.filter(t=>!e.includes(t.name)),this.resetRepositoriesByName())}setLocalPath(e){this._localPath=e}};var r,s,o=((r=o||{}).GitHub="github",r.GitHubEnterprise="github_enterprise",r.GitLab="gitlab",r.GitLabSelfHosted="gitlab_self_hosted",r.Bitbucket="bitbucket",r.Azure="azure",r);let n={azure:"azure-devops",bitbucket:"bitbucket",github:"github",github_enterprise:"github",gitlab:"gitlab",gitlab_self_hosted:"gitlab"};var a=((s=a||{}).GitHub="GITHUB",s.GitHubEnterprise="GITHUB_ENTERPRISE",s.GitLab="GITLAB",s.GitLabSelfHosted="GITLAB_SELF_HOSTED",s.Bitbucket="BITBUCKET",s.Azure="AZURE",s)},6189:(e,t,i)=>{i.d(t,{Ol:()=>n,vt:()=>l});var r=i(1398),s=i(255),o=i(6612);async function n(e,t,i,n){if(null==i)return;let a=await (0,s.p9)(i,n??{});if(0===a.length)return;let l=r.window.createQuickPick();l.ignoreFocusOut=(0,o.dW)();let c=[];try{let i=await new Promise(i=>{c.push(l.onDidHide(()=>i(void 0)),l.onDidAccept(()=>{0!==l.activeItems.length&&i(l.activeItems[0])})),l.title=e,l.placeholder=t,l.matchOnDescription=!0,l.matchOnDetail=!0,l.items=a,l.show()});return i?.item}finally{l.dispose(),c.forEach(e=>void e.dispose())}}async function a(e,t,i){let s,o=r.window.createInputBox();o.ignoreFocusOut=!0;let n=[];try{s=await new Promise(i=>{n.push(o.onDidHide(()=>i(void 0)),o.onDidAccept(()=>{let e=o.value.trim();if(null==e){o.validationMessage="Please enter a valid branch name";return}i(e)})),o.title=e,o.placeholder=t,o.prompt="Enter a name for the new branch",o.show()})}finally{o.dispose(),n.forEach(e=>void e.dispose())}return s}async function l(e,t){if(null==t)return;let i={label:"Create New Branch",description:"Creates a branch to apply the Cloud Patch to. (Typing an existing branch name will use that branch.)"},s={label:"Select Existing Branch",description:"Selects an existing branch to apply the Cloud Patch to."},l=[i,s],c=r.window.createQuickPick();c.ignoreFocusOut=(0,o.dW)();let u=[];try{let r=await new Promise(t=>{u.push(c.onDidHide(()=>t(void 0)),c.onDidAccept(()=>{0!==c.activeItems.length&&t(c.activeItems[0])})),c.title=e,c.placeholder="Choose a branch option",c.matchOnDescription=!0,c.matchOnDetail=!0,c.items=l,c.show()});if(r===i)return await a(e,"Enter a name for the new branch",t);if(r===s)return await n(e,"Choose an existing branch",t);return}finally{c.dispose(),u.forEach(e=>void e.dispose())}}},6250:(e,t,i)=>{i.d(t,{$w:()=>a,TF:()=>n,_c:()=>l,vt:()=>o});var r=i(9703),s=i(8191);function o(e,t,i){return(0,s.b)({command:"branch",state:{subcommand:"create",repo:e,reference:t,name:i}})}function n(e,t){return(0,s.b)({command:"branch",state:{subcommand:"delete",repo:e,references:t}})}function a(e,t,i){return(0,s.b)({command:"branch",state:{subcommand:"rename",repo:e,reference:t,name:i}})}function l(e,t){return r.m.instance.views.revealBranch(e,t)}},6339:(e,t,i)=>{i.d(t,{RK:()=>CommandMessageNode,S2:()=>MessageNode,cb:()=>LoadMoreNode});var r=i(1398),s=i(1518),o=i(3088),n=i(1078),a=i(9642);let MessageNode=class MessageNode extends a.eu{constructor(e,t,i,r,s,n,a,l){super("message",o.Bd,e,t),this.parent=t,this.message=i,this.description=r,this.tooltip=s,this.iconPath=n,this.contextValue=a,this.resourceUri=l}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(this.message,r.TreeItemCollapsibleState.None);return e.contextValue=this.contextValue??a.U0.Message,e.description=this.description,e.tooltip=this.tooltip,e.iconPath=this.iconPath,e.resourceUri=this.resourceUri,e}};let CommandMessageNode=class CommandMessageNode extends MessageNode{constructor(e,t,i,r,s,o,n,a,l){super(e,t,r,s,o,n,a,l),this.parent=t,this._command=i}getTreeItem(){let e=super.getTreeItem();return e instanceof r.TreeItem?(e.command=this._command,e):e.then(e=>(e.command=this._command,e))}};let PagerNode=class PagerNode extends a.eu{constructor(e,t,i,r,s){super("pager",o.Bd,e,t),this.message=i,this.previousNode=r,this.options=s}async loadAll(){let e=await this.options?.getCount?.()??0;return this.view.loadMoreNodeChildren(this.parent,5e3*(e>5e3),this.previousNode,this.options?.context)}loadMore(){return this.view.loadMoreNodeChildren(this.parent,this.options?.pageSize??n.H.get("views.pageItemLimit"),this.previousNode,this.options?.context)}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(this.message,r.TreeItemCollapsibleState.None);return e.contextValue=a.U0.Pager,e.command=this.getCommand(),e}getCommand(){return{title:"Load more",command:"gitlens.views.loadMoreChildren",arguments:[this]}}};let LoadMoreNode=class LoadMoreNode extends PagerNode{constructor(e,t,i,r){super(e,t,r?.message??(r?.pageSize===0?`Load all ${s.EO.Space}${s.EO.Dash}${s.EO.Space} this may take a while`:"Load more"),i,r)}}},6363:(e,t,i)=>{function r(e,t){return e===t||null!=e&&null!=t&&e.toString()===t.toString()}i.d(t,{k:()=>r})},6386:(e,t,i)=>{i.d(t,{G:()=>f});var r=i(1192),s=i(3088),o=i(3447),n=i(2636),a=i(9403),l=i(4301),c=i(9439),u=i(7005),h=i(4338),d=i(2713),p=i(5813),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let f=class extends h.Zr{constructor(e){super(["gitlens.showCommitInView","gitlens.showInDetailsView","gitlens.showLineCommitInView"]),this.container=e}static createMarkdownCommandLink(e,t){let i="string"==typeof e?{ref:(0,n.kA)(e,t,{refType:"revision"}),repoPath:t}:e;return(0,c.J)("gitlens.showCommitInView",i)}preExecute(e,t){return"viewItem"===e.type&&(t={...t},(0,p.j7)(e)&&(t.ref=(0,o.rd)(e.node.commit))),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(i={...i}).ref){if(null==(t=(0,d.q)(t,e)))return;let r=await s.nk.fromUri(t),o=e?.selection.active.line;if(null==o)return;try{let e=await this.container.git.getBlameForLine(r,o);if(null==e){(0,a.gD)("Unable to inspect commit details");return}if(e.commit.isUncommitted){(0,a.CR)("Unable to inspect commit details");return}i.ref=e.commit}catch(e){u.Vy.error(e,"InspectCommand",`getBlameForLine(${o})`),(0,a.qQ)("Unable to inspect commit details");return}}return(0,r.JX)(i.ref)}};f=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o})([(0,l.G5)()],f)},6424:(e,t,i)=>{i.d(t,{N:()=>s});var r=i(1078);async function s(e,t,i){let s={label:e.label,description:e.current?"you":e.email,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:r.H.get("gitCommands.avatars")?await e.getAvatarUri():void 0};return i?.alwaysShow==null&&t&&(s.alwaysShow=!0),s}},6430:(e,t,i)=>{i.d(t,{x:()=>WebviewsController,c:()=>k});var r=i(1398),s=i(2458),o=i(4521),n=i(4301),a=i(4342),l=i(7747),c=i(7005),u=i(5419),h=i(710);let WebviewCommandRegistrar=class WebviewCommandRegistrar{_commandRegistrations=new Map;dispose(){this._commandRegistrations.forEach(({subscription:e})=>void e.dispose())}registerCommand(e,t,i,r,s){let o=this._commandRegistrations.get(r);if(null==o){let e=new Map;o={subscription:(0,n.Ip)(r,(...t)=>{let[i]=t;if(!(0,h.RR)(i))return;let s=i.webviewInstance?`${i.webview}:${i.webviewInstance}`:i.webview,o=e.get(s);if(null==o)throw Error(`Unable to find Command '${r}' registration for Webview '${s}'`);o.callback.call(o.thisArg,i)},this),handlers:e},this._commandRegistrations.set(r,o)}let a=i?`${t}:${i}`:t;if(o.handlers.has(a))throw Error(`Command '${r}' has already been registered for Webview '${a}'`);return o.handlers.set(a,{callback:s,thisArg:e}),{dispose:()=>{o.handlers.delete(a),0===o.handlers.size&&(this._commandRegistrations.delete(r),o.subscription.dispose())}}}};var d=i(162),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor,m=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),f=e=>{throw TypeError(e)},w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o},v=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&f("Object expected"),i&&(r=t[m("asyncDispose")]),void 0===r&&(r=t[m("dispose")],i&&(s=r)),"function"!=typeof r&&f("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},y=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let WebviewsController=class WebviewsController{constructor(e){this.container=e,this.disposables.push(this._commandRegistrar=new WebviewCommandRegistrar)}disposables=[];_commandRegistrar;_panels=new Map;_views=new Map;dispose(){this.disposables.forEach(e=>void e.dispose())}registerWebviewView(e,t,i){var s=[];try{let a=v(s,(0,u.bP)(`WebviewView(${e.id})`,!1)),l={descriptor:e};this._views.set(e.id,l);let h=[];h.push(r.window.registerWebviewViewProvider(e.id,{resolveWebviewView:async(i,s,n)=>{if(l.descriptor.plusFeature&&(!await (0,o.ZQ)()||n.isCancellationRequested))return;c.Vy.debug(a,"Resolving view"),i.webview.options={enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(this.container.context.extensionPath)],...e.webviewOptions},i.title=e.title;let u=await d.Id.create(this.container,this._commandRegistrar,e,void 0,i,t);l.controller?.dispose(),l.controller=u,h.push(u.onDidDispose(()=>{c.Vy.debug(a,"Disposing view"),l.pendingShowArgs=void 0,l.controller=void 0}),u);let[p,g]=l.pendingShowArgs??[];l.pendingShowArgs=void 0,null==g&&k(s)&&(g=[{state:s.state}]),c.Vy.debug(a,"Showing view"),await u.show(!0,p,...g??[])}},null!=e.webviewHostOptions?{webviewOptions:e.webviewHostOptions}:void 0));let p=r.Disposable.from(...h);return this.disposables.push(p),{id:e.id,get ready(){return l.controller?.ready??!1},get visible(){return l.controller?.visible??!1},dispose:function(){p.dispose()},refresh:function(e){return null!=l.controller?l.controller.refresh(e):Promise.resolve()},show:async function(t,...r){if(c.Vy.debug(a,"Showing view"),null!=l.controller)return l.controller.show(!1,t,...r);l.pendingShowArgs=[t,r],null!=i&&await i?.(...r),(0,n.S4)(`${e.id}.focus`,t)}}}catch(e){var a=e,l=!0}finally{y(s,a,l)}}registerWebviewPanel(e,t,i){var a=[];try{let g,m=v(a,(0,u.bP)(`WebviewPanel(${t.id})`,!1)),f={descriptor:t};this._panels.set(t.id,f);let w=[],{container:y,_commandRegistrar:k}=this;async function h(e,...t){let{descriptor:n}=f;if(n.plusFeature&&!await (0,o.ZQ)())return;y.usage.track(`${n.trackingFeature}:shown`).catch();let a=e?.column??n.column??r.ViewColumn.Beside;a===r.ViewColumn.Beside&&null==r.window.tabGroups.activeTabGroup.activeTab&&(a=r.ViewColumn.Active);let l=C(f,e,...t);if(null==l){let o;null!=g?(c.Vy.debug(m,"Restoring panel"),o=g,g=void 0):(c.Vy.debug(m,"Creating panel"),o=r.window.createWebviewPanel(n.id,n.title,{viewColumn:a,preserveFocus:e?.preserveFocus??!1},{enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(y.context.extensionPath)],...n.webviewOptions,...n.webviewHostOptions})),o.iconPath=r.Uri.file(y.context.asAbsolutePath(n.iconPath)),l=await d.Id.create(y,k,n,n.allowMultipleInstances?(0,s.uR)():void 0,o,i),f.controllers??=new Map,f.controllers.set(l.instanceId,l),w.push(l.onDidDispose(()=>{c.Vy.debug(m,`Disposing panel (${l.instanceId})`),f.controllers?.delete(l.instanceId)}),l),c.Vy.debug(m,`Showing panel (${l.instanceId})`),await l.show(!0,e,...t)}else c.Vy.debug(m,`Showing existing panel (${l.instanceId})`),await l.show(!1,e,...t)}async function p(e,t){g=e,c.Vy.debug(m,`Deserializing panel state=${null!=t?"<state>":"undefined"}`),await h({column:e.viewColumn,preserveFocus:!0,preserveInstance:!1},...null!=t?[{state:t}]:[])}let S=r.Disposable.from(...w,r.window.registerWebviewPanelSerializer(t.id,{deserializeWebviewPanel:p}),(0,n.Lb)(e.id,(t,...i)=>h({...e.options,...t},...i),this));return this.disposables.push(S),{id:t.id,get instances(){if(!f.controllers?.size)return[];return(0,l.Tj)(f.controllers.values(),e=>b(e))},getActiveInstance:function(){if(!f.controllers?.size)return;let e=(0,l.I6)(f.controllers.values(),e=>e.active??!1);return null!=e?b(e):void 0},getBestInstance:function(e,...t){let i=C(f,e,...t);return null!=i?b(i):void 0},splitActiveInstance:function(e){let t=null!=f.controllers?(0,l.I6)(f.controllers.values(),e=>e.active??!1):void 0,i=t?.getSplitArgs()??[];return h({...e,preserveInstance:!1},...i)},dispose:function(){S.dispose()},show:h}}catch(e){var g=e,m=!0}finally{y(a,g,m)}}};function b(e){return{id:e.id,instanceId:e.instanceId,ready:e.ready,active:e.active??!1,visible:e.visible,canReuseInstance:function(t,...i){return e.canReuseInstance(t,...i)},close:function(){e.parent.dispose()},dispose:function(){e.dispose()},refresh:function(t){return e.refresh(t)},show:function(t,...i){return e.show(!1,t,...i)}}}function C(e,t,...i){let r;if(e.controllers?.size)if(e.descriptor.allowMultipleInstances){if(t?.preserveInstance!==!1&&(t?.preserveInstance!=null&&"string"==typeof t.preserveInstance&&(r=e.controllers.get(t.preserveInstance)),null==r)){let s,o;for(let n of[...e.controllers.values()].sort((e,t)=>(e.active?-1:1)-(t.active?-1:1))){o??=n,n.active&&(s=n);let e=n.canReuseInstance(t,...i);if(!0===e){r=n;break}!1===e&&(o===n&&(o=void 0),s===n&&(s=void 0))}null==r&&t?.preserveInstance===!0&&(r=s??o)}}else r=(0,l.$1)(e.controllers)?.[1];return r}function k(e){return null!=e&&"object"==typeof e&&"state"in e&&null!=e.state&&"object"==typeof e.state}w([(0,a.Yz)({args:{0:e=>e.id,1:!1,2:!1},singleLine:!0})],WebviewsController.prototype,"registerWebviewView",1),w([(0,a.Yz)({args:{0:e=>e.id,1:e=>e.id,2:!1,3:!1},singleLine:!0})],WebviewsController.prototype,"registerWebviewPanel",1)},6461:(e,t,i)=>{i.d(t,{Ac:()=>M,EO:()=>q,Gz:()=>W,Ii:()=>b,J3:()=>F,KC:()=>y,Mt:()=>R,NT:()=>v,QF:()=>x,W3:()=>S,XP:()=>C,Y9:()=>P,bT:()=>w,d8:()=>L,iG:()=>N,lE:()=>g,mN:()=>k,n2:()=>m,tf:()=>A});var r,s,o,n=i(4478),a=i(928),l=i(7279),c=i(457),u=i(6520),h=i(7335),d=i(3934),p=i(926);let g=n.GitPullRequestReviewState,m=n.GitBuildStatusState,f=[c.PY.CloudGitHubEnterprise,c.PY.GitHubEnterprise,c.PY.CloudGitLabSelfHosted,c.PY.GitLabSelfHosted,c.PY.BitbucketServer],w=[c.Q7.GitHub,c.Q7.GitLab,c.Q7.Bitbucket,c.Q7.AzureDevOps,c.tp.Jira,c.tp.Trello,...f];function v(e){return f.includes(e)}function y(e){return[c.Q7.GitHub,c.Q7.GitLab,c.Q7.Bitbucket,c.Q7.AzureDevOps].includes(e)}function b(e){return e===c.PY.CloudGitHubEnterprise||e===c.PY.CloudGitLabSelfHosted||e===c.PY.BitbucketServer}var C=((r=C||{}).Author="author",r.Assignee="assignee",r.ReviewRequested="review-requested",r.Mention="mention",r),k=((s=k||{}).Author="author",s.Assignee="assignee",s.Mention="mention",s),S=((o=S||{}).Project="project",o.Repo="repo",o.Repos="repos",o);let R={[c.Q7.GitHub]:{domain:"github.com",id:c.Q7.GitHub,name:"GitHub",type:"hosting",iconKey:c.Q7.GitHub,issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"]},[c.PY.CloudGitHubEnterprise]:{domain:"",id:c.PY.CloudGitHubEnterprise,name:"GitHub Enterprise",type:"hosting",iconKey:c.PY.GitHubEnterprise,issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"]},[c.PY.GitHubEnterprise]:{domain:"",id:c.PY.GitHubEnterprise,name:"GitHub Enterprise",type:"hosting",iconKey:c.PY.GitHubEnterprise,issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"]},[c.Q7.GitLab]:{domain:"gitlab.com",id:c.Q7.GitLab,name:"GitLab",type:"hosting",iconKey:c.Q7.GitLab,issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["api","read_user","read_repository"]},[c.PY.CloudGitLabSelfHosted]:{domain:"",id:c.PY.CloudGitLabSelfHosted,name:"GitLab Self-Hosted",type:"hosting",iconKey:c.PY.GitLabSelfHosted,issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["api","read_user","read_repository"]},[c.PY.GitLabSelfHosted]:{domain:"",id:c.PY.GitLabSelfHosted,name:"GitLab Self-Hosted",type:"hosting",iconKey:c.PY.GitLabSelfHosted,issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["api","read_user","read_repository"]},[c.Q7.Bitbucket]:{domain:"bitbucket.org",id:c.Q7.Bitbucket,name:"Bitbucket",type:"hosting",iconKey:c.Q7.Bitbucket,pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author"],scopes:["account:read","repository:read","pullrequest:read","issue:read"]},[c.PY.BitbucketServer]:{domain:"",id:c.PY.BitbucketServer,name:"Bitbucket Data Center",type:"hosting",iconKey:c.PY.BitbucketServer,supportedPullRequestFilters:["author","review-requested"],scopes:["Project (Read)","Repository (Write)"]},[c.Q7.AzureDevOps]:{domain:"dev.azure.com",id:c.Q7.AzureDevOps,name:"Azure DevOps",type:"hosting",iconKey:c.Q7.AzureDevOps,issuesPagingMode:"project",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee"],supportedIssueFilters:["author","assignee","mention"],scopes:["vso.code","vso.identity","vso.project","vso.profile","vso.work"]},[c.tp.Jira]:{domain:"atlassian.net",id:c.tp.Jira,name:"Jira",type:"issues",iconKey:c.tp.Jira,scopes:["read:status:jira","read:application-role:jira","write:attachment:jira","read:comment:jira","read:project-category:jira","read:project:jira","read:issue.vote:jira","read:field-configuration:jira","write:issue:jira","read:issue-security-level:jira","write:issue.property:jira","read:issue.changelog:jira","read:avatar:jira","read:issue-meta:jira","read:permission:jira","offline_access","read:issue:jira","read:me","read:audit-log:jira","read:project.component:jira","read:group:jira","read:project-role:jira","write:comment:jira","read:label:jira","write:comment.property:jira","read:issue-details:jira","read:issue-type-hierarchy:jira","read:issue.transition:jira","read:user:jira","read:field:jira","read:issue-type:jira","read:project.property:jira","read:comment.property:jira","read:project-version:jira"],supportedIssueFilters:["author","assignee","mention"]},[c.tp.Trello]:{domain:"trello.com",id:c.tp.Trello,name:"Trello",type:"issues",iconKey:c.tp.Trello,scopes:[]}};function P(e,t){if(null!=e.updatedDate&&null!=e.author&&null!=e.url)return{type:"issue",provider:t,id:e.number,nodeId:e.graphQLId??e.id,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate??void 0,closed:null!=e.closedDate,state:null!=e.closedDate?"closed":"opened",author:{id:e.author.id??"",name:e.author.name??"",avatarUrl:e.author.avatarUrl??void 0,url:e.author.url??void 0},assignees:e.assignees?.map(e=>({id:e.id??"",name:e.name??"",avatarUrl:e.avatarUrl??void 0,url:e.url??void 0}))??[],project:{id:e.project?.id??"",name:e.project?.name??"",resourceId:e.project?.resourceId??"",resourceName:e.project?.namespace??""},repository:e.repository?.owner?.login!=null?{owner:e.repository.owner.login,repo:e.repository.name}:void 0,labels:e.labels.map(e=>({color:e.color??void 0,name:e.name})),commentsCount:e.commentCount??void 0,thumbsUpCount:e.upvoteCount??void 0,body:e.description??void 0}}function A(e,t){return{provider:t,id:e.id,name:e.name??void 0,email:e.email??void 0,avatarUrl:e.avatarUrl??void 0,username:e.username??void 0}}let I={[h.gI.Success]:n.GitBuildStatusState.Success,[h.gI.Failed]:n.GitBuildStatusState.Failed,[h.gI.Pending]:n.GitBuildStatusState.Pending},D={[n.GitBuildStatusState.Success]:h.gI.Success,[n.GitBuildStatusState.Failed]:h.gI.Failed,[n.GitBuildStatusState.Pending]:h.gI.Pending,[n.GitBuildStatusState.ActionRequired]:h.gI.Failed,[n.GitBuildStatusState.Error]:void 0,[n.GitBuildStatusState.Cancelled]:void 0,[n.GitBuildStatusState.OptionalActionRequired]:void 0,[n.GitBuildStatusState.Skipped]:void 0,[n.GitBuildStatusState.Running]:void 0,[n.GitBuildStatusState.Warning]:void 0},$={[h.c7.Approved]:n.GitPullRequestReviewState.Approved,[h.c7.ChangesRequested]:n.GitPullRequestReviewState.ChangesRequested,[h.c7.Commented]:n.GitPullRequestReviewState.Commented,[h.c7.ReviewRequested]:n.GitPullRequestReviewState.ReviewRequested,[h.c7.Dismissed]:null,[h.c7.Pending]:null},T={[n.GitPullRequestReviewState.Approved]:h.c7.Approved,[n.GitPullRequestReviewState.ChangesRequested]:h.c7.ChangesRequested,[n.GitPullRequestReviewState.Commented]:h.c7.Commented,[n.GitPullRequestReviewState.ReviewRequested]:h.c7.ReviewRequested},E={[h.Q6.Mergeable]:n.GitPullRequestMergeableState.Mergeable,[h.Q6.Conflicting]:n.GitPullRequestMergeableState.Conflicts,[h.Q6.Unknown]:n.GitPullRequestMergeableState.Unknown,[h.Q6.FailingChecks]:n.GitPullRequestMergeableState.FailingChecks,[h.Q6.BlockedByPolicy]:n.GitPullRequestMergeableState.Blocked},_={[n.GitPullRequestMergeableState.Mergeable]:h.Q6.Mergeable,[n.GitPullRequestMergeableState.Conflicts]:h.Q6.Conflicting,[n.GitPullRequestMergeableState.Blocked]:h.Q6.BlockedByPolicy,[n.GitPullRequestMergeableState.FailingChecks]:h.Q6.FailingChecks,[n.GitPullRequestMergeableState.Unknown]:h.Q6.Unknown,[n.GitPullRequestMergeableState.Behind]:h.Q6.Unknown,[n.GitPullRequestMergeableState.UnknownAndBlocked]:h.Q6.Unknown,[n.GitPullRequestMergeableState.Unstable]:h.Q6.Unknown},O={[n.GitPullRequestReviewState.Approved]:h.dq.Approved,[n.GitPullRequestReviewState.ChangesRequested]:h.dq.ChangesRequested,[n.GitPullRequestReviewState.Commented]:void 0,[n.GitPullRequestReviewState.ReviewRequested]:h.dq.ReviewRequired};function x(e,t,i){var r,s,o;return new h.B9(t,U(e.author),e.id,e.graphQLId||e.id,e.title,e.url??"",{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:u.LI.Write,id:e.repository.id},(r=e.state)===n.GitPullRequestState.Open?"opened":r===n.GitPullRequestState.Closed?"closed":"merged",e.createdDate,e.updatedDate,e.closedDate??void 0,e.mergedDate??void 0,e.mergeableState?_[e.mergeableState]:void 0,!!(e.permissions?.canMerge||e.permissions?.canMergeAndBypassProtections)||void 0,{base:{branch:e.baseRef?.name??"",sha:e.baseRef?.oid??"",repo:e.repository.name,owner:e.repository.owner.login,exists:null!=e.baseRef,url:e.repository.remoteInfo?.cloneUrlHTTPS?e.repository.remoteInfo.cloneUrlHTTPS.replace(/\.git$/,""):""},head:{branch:e.headRef?.name??"",sha:e.headRef?.oid??"",repo:e.headRepository?.name??"",owner:e.headRepository?.owner.login??"",exists:null!=e.headRef,url:e.headRepository?.remoteInfo?.cloneUrlHTTPS?e.headRepository.remoteInfo.cloneUrlHTTPS.replace(/\.git$/,""):""},isCrossRepository:e.headRepository?.id!==e.repository.id},e.isDraft,e.additions??void 0,e.deletions??void 0,e.commentCount??void 0,e.upvoteCount??void 0,e.reviewDecision?O[e.reviewDecision]:void 0,null==(s=e.reviews)?void 0:s?.filter(e=>e.state===n.GitPullRequestReviewState.ReviewRequested).map(e=>({isCodeOwner:!1,reviewer:U(e.reviewer),state:h.c7.ReviewRequested})),null==(o=e.reviews)?void 0:o?.filter(e=>e.state!==n.GitPullRequestReviewState.ReviewRequested).map(e=>({isCodeOwner:!1,reviewer:U(e.reviewer),state:T[e.state]})),e.assignees?.map(U)??void 0,e.headCommit?.buildStatuses?.[0]?.state?D[e.headCommit.buildStatuses[0].state]:void 0,i?.project,e.version)}function F(e,t,i){return new u.m2(t,e.id,e.graphQLId,e.title,e.url??"",e.createdDate,e.updatedDate??e.closedDate??e.createdDate,null!=e.closedDate,null!=e.closedDate?"closed":"opened",U(e.author),e.assignees?.map(U)??void 0,void 0,e.closedDate??void 0,void 0,e.commentCount??void 0,e.upvoteCount??void 0,e.description??void 0,i?.project!=null?{id:i.project.id,name:i.project.name,resourceId:i.project.resourceId,resourceName:i.project.resourceName}:e.project?.id&&e.project?.resourceId&&e.project?.namespace?{id:e.project.id,name:e.project.name,resourceId:e.project.resourceId,resourceName:e.project.namespace}:void 0)}function L(e){return{...function(e){var t;let i=[...e.reviewRequests??[],...e.latestReviews??[]];return{id:e.id,graphQLId:e.nodeId,number:Number.parseInt(e.id,10),title:e.title,url:e.url,state:"opened"===(t=e.state)?n.GitPullRequestState.Open:"closed"===t?n.GitPullRequestState.Closed:n.GitPullRequestState.Merged,isDraft:e.isDraft??!1,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate??null,mergedDate:e.mergedDate??null,commentCount:e.commentsCount??null,upvoteCount:e.thumbsUpCount??null,commitCount:null,fileCount:null,additions:e.additions??null,deletions:e.deletions??null,author:B(e.author),assignees:e.assignees?.map(B)??null,baseRef:e.refs?.base==null?null:{name:e.refs.base.branch,oid:e.refs.base.sha},headRef:e.refs?.head==null?null:{name:e.refs.head.branch,oid:e.refs.head.sha},reviews:i.filter(e=>e.state!==h.c7.Dismissed&&e.state!==h.c7.Pending).map(e=>({reviewer:B(e.reviewer),state:$[e.state]??n.GitPullRequestReviewState.ReviewRequested})),reviewDecision:function(e,t){switch(e){case h.dq.Approved:return n.GitPullRequestReviewState.Approved;case h.dq.ChangesRequested:return n.GitPullRequestReviewState.ChangesRequested;case h.dq.ReviewRequired:return n.GitPullRequestReviewState.ReviewRequested;default:if(t?.some(e=>e.state===h.c7.ReviewRequested))return n.GitPullRequestReviewState.ReviewRequested;if(t?.some(e=>e.state===h.c7.Commented))return n.GitPullRequestReviewState.Commented;return null}}(e.reviewDecision,i),repository:null!=e.repository?{id:e.repository.repo,name:e.repository.repo,owner:{login:e.repository.owner},remoteInfo:null}:{id:"",name:"",owner:{login:""},remoteInfo:null},headRepository:e.refs?.head!=null?{id:e.refs.head.repo,name:e.refs.head.repo,owner:{login:e.refs.head.owner},remoteInfo:null}:null,headCommit:null!=e.statusCheckRollupState?{buildStatuses:[{completedAt:null,description:"",name:"",state:I[e.statusCheckRollupState],startedAt:null,stage:null,url:""}]}:null,permissions:null==e.viewerCanUpdate?null:{canMerge:!0===e.viewerCanUpdate&&null!=e.repository.accessLevel&&e.repository.accessLevel>=u.LI.Write,canMergeAndBypassProtections:!0===e.viewerCanUpdate&&null!=e.repository.accessLevel&&e.repository.accessLevel>=u.LI.Admin},mergeableState:e.mergeableState?E[e.mergeableState]:n.GitPullRequestMergeableState.Unknown}}(e),uuid:a.EntityIdentifierUtils.encode((0,p.Dz)(e))}}function B(e){return{id:e.id??null,avatarUrl:e.avatarUrl??null,name:e.name??null,url:e.url??null,email:"",username:e.name??null}}function U(e){return{id:e?.id??"",name:e?.name??"unknown",avatarUrl:e?.avatarUrl??void 0,url:e?.url??""}}let N=l.GitProviderUtils.getActionablePullRequests;function q(e){return(0,d.Q_)(e,"github.com")}function W(e){return(0,d.Q_)(e,"gitlab.com")}function M(e){return q(e.domain)}},6462:(e,t,i)=>{i.r(t),i.d(t,{BitbucketIntegration:()=>BitbucketIntegration,isBitbucketCloudDomain:()=>d});var r=i(2458),s=i(457),o=i(7747),n=i(5576),a=i(5952),l=i(6461);let c=l.Mt[s.Q7.Bitbucket],u=Object.freeze({id:c.id,scopes:c.scopes});let BitbucketIntegration=class BitbucketIntegration extends a.T5{authProvider=u;id=s.Q7.Bitbucket;key=this.id;name="Bitbucket";get domain(){return c.domain}get apiBaseUrl(){return"https://api.bitbucket.org/2.0"}async mergeProviderPullRequest({accessToken:e},t,i){return(await this.getProvidersApi()).mergePullRequest(this.id,t,{accessToken:e,mergeMethod:i?.mergeMethod})}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest({accessToken:e},t,i,r){return(await this.container.bitbucket)?.getIssueOrPullRequest(this,e,t.owner,t.name,i,this.apiBaseUrl,{type:r})}async getProviderIssue({accessToken:e},t,i){return(await this.container.bitbucket)?.getIssue(this,e,t.owner,t.name,i,this.apiBaseUrl)}async getProviderPullRequestForBranch({accessToken:e},t,i,r){return(await this.container.bitbucket)?.getPullRequestForBranch(this,e,t.owner,t.name,i,this.apiBaseUrl)}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getProviderRepositoryMetadata(e,t,i){return Promise.resolve(void 0)}_accounts;async getProviderCurrentAccount({accessToken:e}){if(this._accounts??=new Map,null==this._accounts.get(e)){let t=await this.getProvidersApi(),i=await t.getCurrentUser(this.id,{accessToken:e});this._accounts.set(e,i?{provider:this,id:i.id,name:i.name??void 0,email:i.email??void 0,avatarUrl:i.avatarUrl??void 0,username:i.username??void 0}:void 0)}return this._accounts.get(e)}_workspaces;async getProviderResourcesForUser(e,t=!1){this._workspaces??=new Map;let{accessToken:i}=e;if(null==this._workspaces.get(i)||t){let t=await this.getProvidersApi(),r=await this.getProviderCurrentAccount(e);if(r?.id==null)return;let s=await t.getBitbucketResourcesForUser(r.id,{accessToken:i});this._workspaces.set(i,null!=s?s.map(e=>({...e,key:e.id})):void 0)}return this._workspaces.get(i)}async searchProviderMyPullRequests(e,t){if(null!=t)return;let i=await this.getProvidersApi();if(!i)return;let r=await g(this.container.git.openRepositories.map(e=>e.git.remotes().getRemotes())),s=await p(r.map(async e=>{let t=await e.getIntegration(),[i,r]=e.path.split("/");return t?.id===this.id?{name:r,namespace:i}:void 0})),n=await this.getProviderCurrentAccount(e);if(n?.username==null)return;let a=await this.getProviderResourcesForUser(e);if(null==a||0===a.length)return;let c=a.map(async t=>{let r=await i.getBitbucketPullRequestsAuthoredByUserForWorkspace(n.id,t.slug,{accessToken:e.accessToken});return r?.map(e=>(0,l.QF)(e,this))}),u=i.getPullRequestsForRepos(this.id,s,{query:`state="OPEN" AND reviewers.uuid="${n.id}"`,accessToken:e.accessToken}).then(e=>e.values?.map(e=>(0,l.QF)(e,this)));return[...(0,o.pD)(await g([...c,u]),e=>e.url,(e,t)=>e)]}async searchProviderMyIssues(e,t){if(null==t||0===t.length)return;let i=await this.getProviderCurrentAccount(e);if(i?.username==null)return;let r=await this.getProviderResourcesForUser(e);if(null==r||0===r.length)return;let s=await this.container.bitbucket;if(s)return await g(t.map(t=>s.getUsersIssuesForRepo(this,e.accessToken,i.id,t.owner,t.name,this.apiBaseUrl)))}storagePrefix="bitbucket";async providerOnConnect(){if(null==this._session)return;let e=(0,r.Fx)(this._session.accessToken),t=this.container.storage.get(`${this.storagePrefix}:${e}:account`),i=this.container.storage.get(`${this.storagePrefix}:${e}:workspaces`),s=t?.data?{...t.data,provider:this}:void 0,o=i?.data?.map(e=>({...e}));null==t&&null!=(s=await this.getProviderCurrentAccount(this._session))&&(await this.container.storage.deleteWithPrefix(this.storagePrefix),await this.container.storage.store(`${this.storagePrefix}:${e}:account`,{v:1,timestamp:Date.now(),data:{id:s.id,name:s.name,email:s.email,avatarUrl:s.avatarUrl,username:s.username}})),this._accounts??=new Map,this._accounts.set(this._session.accessToken,s),null==i&&(o=await this.getProviderResourcesForUser(this._session,!0),await this.container.storage.store(`${this.storagePrefix}:${e}:workspaces`,{v:1,timestamp:Date.now(),data:o})),this._workspaces??=new Map,this._workspaces.set(this._session.accessToken,o)}providerOnDisconnect(){this._accounts=void 0,this._workspaces=void 0}};let h=/^bitbucket\.org$/i;function d(e){return null!=e&&h.test(e)}async function p(e){return(await Promise.allSettled(e)).map(e=>(0,n.Ro)(e)).filter(e=>null!=e)}async function g(e){return(await p(e)).flat().filter(e=>null!=e)}},6520:(e,t,i)=>{i.d(t,{LI:()=>s,m2:()=>Issue});let Issue=class Issue{constructor(e,t,i,r,s,o,n,a,l,c,u,h,d,p,g,m,f,w){this.provider=e,this.id=t,this.nodeId=i,this.title=r,this.url=s,this.createdDate=o,this.updatedDate=n,this.closed=a,this.state=l,this.author=c,this.assignees=u,this.repository=h,this.closedDate=d,this.labels=p,this.commentsCount=g,this.thumbsUpCount=m,this.body=f,this.project=w}type="issue"};var r,s=((r=s||{})[r.Admin=100]="Admin",r[r.Maintain=40]="Maintain",r[r.Write=30]="Write",r[r.Triage=20]="Triage",r[r.Read=10]="Read",r[r.None=0]="None",r)},6525:(e,t,i)=>{let r,s;i.d(t,{A0:()=>w,H3:()=>E,ML:()=>I,Qw:()=>_,Sk:()=>T,m_:()=>C,qJ:()=>k});var o=i(1398),n=i(2458),a=i(9703),l=i(6905),c=i(1078),u=i(655),h=i(6851),d=i(7747),p=i(3934);let g=0x40000000-1,m=new Map,f=new o.EventEmitter;f.event((0,h.s)(()=>{let e=null!=r?[...(0,d.x1)(r,([e,t])=>null!=t.uri?[e,{uri:t.uri.toString(),timestamp:t.timestamp}]:void 0)]:void 0;a.m.instance.storage.store("avatars",e).catch()},1e3));let w=f.event,v="00000000000000000000000000000000",y=new Map,b=[6048e5,6e4,3e5,6e5,36e5,864e5,6048e5];function C(e,t,i){return S(e,t,i)}function k(e,t){return S(e,void 0,{...t,cached:!0})}function S(e,t,i){P(r);let s=(i?.size??16)*2;if(!e){let e=R(`${v}:${s}`,void 0,s,v,i?.defaultStyle);return e.uri??e.fallback}let o=(0,n.Fx)(e.trim().toLowerCase()),a=`${o}:${s}`,l=R(a,e,s,o,i?.defaultStyle);if(null!=l.uri)return l.uri;if(!i?.cached&&null!=t&&(0,u.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes("string"==typeof t?t:t.repoPath)){var c;let i=m.get(a);return null==i&&(c=l,Date.now()>=c.timestamp+b[Math.min(c.retries,b.length-1)])&&(i=D(l,a,e,t,{size:s}).then(e=>e??l.uri??l.fallback),m.set(a,i.finally(()=>m.delete(a)))),i??l.fallback}return i?.cached?l.uri:l.uri??l.fallback}function R(e,t,i,s,n){let a=r.get(e);return null==a?(a={uri:null!=t&&0!==t.length?function(e,t=16){let i=(0,l.P)(e);if(null!=i&&(0,p.Q_)(i.authority,"github.com"))return o.Uri.parse(`https://avatars.githubusercontent.com/${i.userId?`u/${i.userId}`:i.login}?size=${t}`)}(t,i):void 0,fallback:A(s,i,n),timestamp:0,retries:0},r.set(e,a)):null==a.fallback&&(a.fallback=A(s,i,n)),a}function P(e){null==e&&(r=new Map(a.m.instance.storage.get("avatars")?.map(([e,t])=>[e,{uri:o.Uri.parse(t.uri),timestamp:t.timestamp,retries:0}])))}function A(e,t,i){return o.Uri.parse(`https://www.gravatar.com/avatar/${e}?s=${t}&d=${i??(null==s&&(s=c.H.get("defaultGravatarsStyle",void 0,"robohash")),s)}`)}function I(e,t,i){return A((0,n.Fx)(e.trim().toLowerCase()),t,i)}async function D(e,t,i,s,{size:l=16}={}){P(r);try{let t;if("string"!=typeof s){let e=await a.m.instance.git.remotes(s.repoPath).getBestRemoteWithIntegration();e?.hasIntegration()&&(t=await (await e.getIntegration())?.getAccountForCommit(e.provider.repoDesc,s.ref,{avatarSize:l}))}if(t?.avatarUrl==null){e.uri=void 0,e.timestamp=g,e.retries=0;return}return e.uri=o.Uri.parse(t.avatarUrl),e.timestamp=Date.now(),e.retries=0,null!=t.email&&(0,p.Q_)(i,t.email)&&r.set(`${(0,n.Fx)(t.email.trim().toLowerCase())}:${l}`,{...e}),f.fire({email:i}),e.uri}catch{e.uri=void 0,e.timestamp=Date.now(),e.retries++;return}}let $=new Map([["online","#28ca42"],["away","#cecece"],["busy","#ca5628"],["dnd","#ca5628"],["offline","#cecece"]]);function T(e){let t=y.get(e);if(null==t){let i=(0,p.K3)(`<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="4" height="16" viewBox="0 0 4 16">
	<circle cx="2" cy="14" r="2" fill="${$.get(e)}"/>
</svg>`);t=encodeURI(`data:image/svg+xml;base64,${i}`),y.set(e,t)}return t}function E(e){switch(e){case"all":a.m.instance.storage.delete("avatars"),r?.clear(),m.clear();break;case"failed":for(let e of r?.values()??[])null==e.uri&&(e.timestamp=0,e.retries=0);break;case"fallback":for(let e of r?.values()??[])e.fallback=void 0}}function _(e){s=e,E("fallback")}},6599:(e,t,i)=>{i.d(t,{A_:()=>w,Cj:()=>f,JP:()=>R,Jc:()=>y,KA:()=>A,Kg:()=>o,Ld:()=>d,Mt:()=>b,NK:()=>m,Nm:()=>g,RW:()=>P,SB:()=>u,UJ:()=>l,k0:()=>S,lc:()=>k,le:()=>c,pG:()=>h,wC:()=>a,x3:()=>n,yV:()=>C,zx:()=>v});var r=i(4135),s=i(4941);let o="did-update-subscription";function n(e,t){return g(e)-g(t)}function a(e){switch(e){case r.zZ.VerificationRequired:return"verification";case r.zZ.Community:return"free";case r.zZ.ProPreview:return"preview";case r.zZ.ProPreviewExpired:return"preview-expired";case r.zZ.ProTrial:return"trial";case r.zZ.ProTrialExpired:return"trial-expired";case r.zZ.ProTrialReactivationEligible:return"trial-reactivation-eligible";case r.zZ.Paid:return"paid";default:return"unknown"}}function l(e){let{account:t,plan:{actual:i,effective:s},previewTrial:o}=e;if(t?.verified===!1)return r.zZ.VerificationRequired;if(i.id===s.id||n(i.id,s.id)>0)switch(i.id===s.id?s.id:i.id){case r.qn.Community:return null==o?r.zZ.Community:r.zZ.ProPreviewExpired;case r.qn.CommunityWithAccount:if(null!=s.nextTrialOptInDate&&new Date(s.nextTrialOptInDate)<new Date)return r.zZ.ProTrialReactivationEligible;return r.zZ.ProTrialExpired;case r.qn.Pro:case r.qn.Advanced:case r.qn.Business:case r.qn.Enterprise:return r.zZ.Paid}if(n(i.id,r.qn.CommunityWithAccount)>0)return r.zZ.Paid;switch(s.id){case r.qn.Community:return null==o?r.zZ.Community:r.zZ.ProPreview;case r.qn.CommunityWithAccount:if(null!=s.nextTrialOptInDate&&new Date(s.nextTrialOptInDate)<new Date)return r.zZ.ProTrialReactivationEligible;return r.zZ.ProTrialExpired;case r.qn.Pro:case r.qn.Advanced:case r.qn.Business:case r.qn.Enterprise:return i.id===r.qn.Community?r.zZ.ProPreview:r.zZ.ProTrial}}function c(e,t,i,r,s,o,n=!1,a){return{id:e,name:u(e),bundle:t,cancelled:n,organizationId:r,trialReactivationCount:i,nextTrialOptInDate:a,startedOn:(s??new Date).toISOString(),expiresOn:null!=o?o.toISOString():void 0}}function u(e){return`GitLens ${h(e)}`}function h(e){switch(e){case r.qn.Pro:return"Pro";case r.qn.Advanced:return"Advanced";case r.qn.Business:return"Business";case r.qn.Enterprise:return"Enterprise";default:return"Community"}}function d(e){switch(e){case r.qn.Advanced:return"ADVANCED";case r.qn.Business:return"BUSINESS";case r.qn.Enterprise:return"ENTERPRISE";default:return"PRO"}}let p=new Map([[void 0,-1],[r.qn.Community,0],[r.qn.CommunityWithAccount,1],[r.qn.Pro,2],[r.qn.Advanced,3],[r.qn.Business,4],[r.qn.Enterprise,5]]);function g(e){return p.get(e)??-1}function m(e,t){return f(e.plan.effective.expiresOn,t)}function f(e,t){return null!=e?(0,s.m8)(Date.now(),new Date(e),t,Math.round):void 0}function w(e){return v(e.plan.actual.id)}function v(e){return e!==r.qn.Community&&e!==r.qn.CommunityWithAccount}function y(e){let t=m(e);return null!=t&&t<=0}function b(e){return e.plan.actual.id!==e.plan.effective.id}function C(e){if(null==e.account||!b(e)||!1===k(e))return!1;let t=m(e);return null==t||t<=0}function k(e){let t=f(e.previewTrial?.expiresOn);return null!=t?t<=0:void 0}function S(e){return null!=e&&(e===r.zZ.Paid||e===r.zZ.ProPreview||e===r.zZ.ProTrial)}function R(e){}function P(e){return{...e,plan:{actual:c(r.qn.Community,!1,0,void 0,e?.plan?.actual?.startedOn!=null?new Date(e.plan.actual.startedOn):void 0),effective:c(r.qn.Community,!1,0,void 0,e?.plan?.actual?.startedOn!=null?new Date(e.plan.actual.startedOn):void 0)},account:void 0,activeOrganization:void 0,state:r.zZ.Community}}function A(e,t){let i=new Date,o=new Date(i);return 0!==e&&(o.setHours(23,59,59,999),o=(0,s.Tl)(o,{days:e})),{...t??=P(),plan:{...t.plan,effective:c(r.qn.Pro,!1,0,void 0,i,o)},previewTrial:{startedOn:i.toISOString(),expiresOn:o.toISOString()}}}},6612:(e,t,i)=>{let r;i.d(t,{CZ:()=>q,G1:()=>A,G5:()=>C,Hn:()=>W,Iy:()=>x,JR:()=>w,LH:()=>O,OH:()=>M,Ol:()=>f,P9:()=>N,QK:()=>_,RZ:()=>L,Xz:()=>y,c5:()=>m,dW:()=>S,ek:()=>R,g4:()=>I,g6:()=>U,gw:()=>k,k3:()=>F,kH:()=>D,kZ:()=>P,ld:()=>T,mP:()=>G,oU:()=>E,pr:()=>B,r$:()=>g,rp:()=>b,v2:()=>$});var s=i(1398),o=i(5565),n=i(1518),a=i(3088),l=i(7005),c=i(6006),u=i(3934);i(6709);var h=i(4301),d=i(1078),p=i(377);let g=(0,u.Mt)(s.env.machineId);function m(e){let t=e.toString();return s.workspace.textDocuments.find(e=>e.uri.toString()===t)}async function f(e,t){let i=function(e){let t=s.window.activeTextEditor,i=e.toString();for(let e of[...null!=t?[t]:[],...s.window.visibleTextEditors])if(e.document.uri.toString()===i&&e?.viewColumn!=null)return e}(e);return null!=i?(t?.preserveFocus||await s.window.showTextDocument(i.document,{...t,viewColumn:i.viewColumn}),i):F(e,{viewColumn:s.window.activeTextEditor?.viewColumn,...t})}function w(e,t){let i=new Map(e.map(e=>[e.toString(),e]));for(let e of s.window.visibleTextEditors)e?.viewColumn!=null&&i.delete(e.document.uri.toString());for(let e of(t={background:!0,preview:!1,...t},i.values()))(0,h.S4)("vscode.open",e,t)}async function v(){let e;if(null!=r)return r;let t=(0,o.uo)();switch(s.env.appName){case"Visual Studio Code":e="code";break;case"Visual Studio Code - Insiders":e="code-insiders";break;case"Visual Studio Code - Exploration":e="code-exploration";break;case"VSCodium":e="codium";break;case"Cursor":e="cursor";break;case"Windsurf":e="windsurf";break;default:try{let t=await s.workspace.fs.readFile(s.Uri.file((0,c.HS)(s.env.appRoot,"product.json")));e=JSON.parse(new TextDecoder().decode(t)).applicationName}catch{e="code"}}if(r=e,s.env.remoteName)return e;async function i(e){try{return await s.workspace.fs.stat(s.Uri.file(e)),e}catch{return}}switch(t){case"windows":case"linux":r=await i((0,c.HS)(s.env.appRoot,"..","..","bin",e))??await i((0,c.HS)(s.env.appRoot,"bin",e))??e;break;case"macOS":r=await i((0,c.HS)(s.env.appRoot,"bin",e))??await i((0,c.HS)(s.env.appRoot,"..","..","bin",e))??e;break;default:throw Error(`Unsupported platform: ${t}`)}return r}async function y(){let e=(0,c.Fd)(await v()).replace(/ /g,"\\ ");return`${e} --wait --reuse-window`}function b(e){if(e instanceof s.Uri){let t=e.toString();return s.window.visibleTextEditors.find(e=>e.document.uri.toString()===t)}return s.window.visibleTextEditors.find(t=>t.document===e)}function C(e,t){return{dark:s.Uri.file(e.context.asAbsolutePath(`images/dark/${t}`)),light:s.Uri.file(e.context.asAbsolutePath(`images/light/${t}`))}}function k(e){return s.window.visibleTextEditors.filter(t=>t!==e&&t.document.uri.toString()===e.document.uri.toString())}function S(){return!d.H.get("advanced.quickPick.closeOnFocusOut")}function R(e){let t=e?.input;if(null!=t&&"object"==typeof t){if("uri"in t&&t.uri instanceof s.Uri)return t.uri;if("modified"in t&&t.modified instanceof s.Uri)return t.modified}}function P(e){let t=s.workspace.getWorkspaceFolder(e);return null==t?(0,c.Fd)(e.fsPath):(0,c.Fd)((0,p.V8)(t.uri.fsPath,e.fsPath))||t.name}function A(e){return s.window.activeTextEditor?.document===e}function I(e){return e.kind===s.ColorThemeKind.Dark||e.kind===s.ColorThemeKind.HighContrast}function D(e){return e.kind===s.ColorThemeKind.Light||e.kind===s.ColorThemeKind.HighContrastLight}function $(e){return null!=e&&"object"==typeof e&&"uri"in e&&e.uri instanceof s.Uri&&"fileName"in e&&"languageId"in e&&"isDirty"in e&&"isUntitled"in e}function T(e){return null!=e&&"object"==typeof e&&!!("document"in e&&$(e.document))&&"viewColumn"in e&&"selections"in e}function E(e){var t;return t=e.document.uri,n.MV.has(t.scheme)}function _(e){return e.scheme===n.xB.Virtual||e.scheme===n.xB.GitHub}function O(e){return s.window.visibleTextEditors.some(t=>t.document===e)}function x(e){return null!=e&&"object"==typeof e&&"uri"in e&&e.uri instanceof s.Uri&&"name"in e&&"index"in e}async function F(e,t){let i,r;null!=t&&({background:i,throwOnError:r,...t}=t);try{if((0,a.t5)(e)&&(e=e.documentUri()),i||e.scheme===n.xB.GitLens&&n.fk[(0,c.LC)(e.fsPath)]){await (0,h.S4)("vscode.open",e,{background:i,...t});return}let r=await s.workspace.openTextDocument(e);return await s.window.showTextDocument(r,{preserveFocus:!1,preview:!0,viewColumn:s.ViewColumn.Active,...t})}catch(t){if((t?.toString()??"").includes("File seems to be binary and cannot be opened as text")){await (0,h.S4)("vscode.open",e);return}if(r)throw t;l.Vy.error(t,"openEditor");return}}async function L(e,t,i){try{if(i?.viewColumn===s.ViewColumn.Beside){let e=(i?.sourceViewColumn??s.window.tabGroups.activeTabGroup?.viewColumn??0)+1;e>s.ViewColumn.Nine&&(e=s.ViewColumn.One),s.window.tabGroups.all.some(t=>t.viewColumn===e)?await (0,h.S4)("workbench.action.focusRightGroup"):await (0,h.S4)("workbench.action.newGroupRight")}await (0,h.S4)("vscode.changes",t,e.map(e=>[e.uri,e.lhs,e.rhs]))}catch(e){l.Vy.error(e,"openChangesEditor")}}async function B(e,t,i,r){try{await (0,h.S4)("vscode.diff",e,t,i,r)}catch(e){l.Vy.error(e,"openDiffEditor")}}async function U(e,t){try{if(t?.viewColumn===s.ViewColumn.Beside){let e=(t?.sourceViewColumn??s.window.tabGroups.activeTabGroup?.viewColumn??0)+1;e>s.ViewColumn.Nine&&(e=s.ViewColumn.One),s.window.tabGroups.all.some(t=>t.viewColumn===e)?await (0,h.S4)("workbench.action.focusRightGroup"):await (0,h.S4)("workbench.action.newGroupRight")}await (0,h.S4)("_open.mergeEditor",e)}catch(e){l.Vy.error(e,"openMergeEditor")}}async function N(e){await (0,h.S4)("workbench.action.openSettings",e)}async function q(e){if(null!=e)return s.env.openExternal(e)}async function W(e,t,i,r=!0){r&&null==s.window.tabGroups.activeTabGroup.activeTab&&(r=!1),await (0,h.S4)("workbench.action.openWalkthrough",{category:`${e}#${t}`,step:i},r)}function M(e,t={location:"currentWindow"}){if(t?.location==="addToWorkspace"){let i=s.workspace.workspaceFolders?.length??0;return void s.workspace.updateWorkspaceFolders(i,0,{uri:e,name:t?.name})}(0,h.S4)("vscode.openFolder",e,{forceNewWindow:t?.location==="newWindow"})}async function G(e){await (0,h.S4)("revealFileInOS",e)}},6613:(e,t,i)=>{i.d(t,{Du:()=>l,WL:()=>n,hr:()=>c,qT:()=>a});var r,s=i(4135),o=i(3934),n=((r=n||{})[r.Back=0]="Back",r[r.Cancel=1]="Cancel",r[r.LoadMore=2]="LoadMore",r[r.Noop=3]="Noop",r[r.Reload=4]="Reload",r[r.RequiresVerification=5]="RequiresVerification",r[r.SignIn=6]="SignIn",r[r.StartPreview=7]="StartPreview",r[r.StartProTrial=8]="StartProTrial",r[r.RequiresPaidSubscription=9]="RequiresPaidSubscription",r);function a(e){return"number"==typeof e&&null!=n[e]}function l(e,t,i){let r=i?.label,n=i?.detail,a=i?.description;if(null==r)switch(e){case 0:r="Back";break;case 1:r="Cancel";break;case 2:r="Load more";break;case 3:r="Try again";break;case 4:r="Refresh";break;case 6:r="Sign In";break;case 7:r="Continue",n=`Continuing gives you ${s.Ep} days to preview this and other local Pro features`;break;case 8:r="Try GitLens Pro",n=`Get ${(0,o.td)("day",s.kj)} of GitLens Pro for free \u2014 no credit card required.`;break;case 5:r="Resend Email",n="You must verify your email before you can continue";break;case 9:r="Upgrade to Pro",null!=n?a??=" —   GitLens Pro is required to use this feature":n="Upgrading to GitLens Pro is required to use this feature"}return{label:r,description:a,detail:n,iconPath:i?.iconPath,buttons:i?.buttons,alwaysShow:!0,picked:t,directive:e,onDidSelect:i?.onDidSelect}}function c(e){return null!=e&&"directive"in e}},6709:(e,t,i)=>{i.d(t,{UD:()=>s,ib:()=>n,sH:()=>o});var r=i(3934);function s(e,t){return("string"==typeof e&&(e=o(e)),"string"==typeof t&&(t=o(t)),e.major>t.major)?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:void 0===e.pre&&void 0!==t.pre?1:void 0!==e.pre&&void 0===t.pre?-1:void 0!==e.pre&&void 0!==t.pre?(0,r.W1)(e.pre,t.pre):0}function o(e){let[t,i]=e.split("-"),[r,s,o]=t.split(".");return{major:"string"==typeof r?parseInt(r,10):r,minor:"string"==typeof s?parseInt(s,10):s,patch:null==o?0:"string"==typeof o?parseInt(o,10):o,pre:i}}function n(e,t){if(null==e)return!1;let[i,r]=t.split(" ");if("="===i)return 0===s(e,r);if(">"===i)return s(e,r)>0;if(">="===i)return s(e,r)>=0;if("<"===i)return 0>s(e,r);if("<="===i)return 0>=s(e,r);throw Error(`Unknown operator: ${i}`)}},6729:(e,t,i)=>{i.d(t,{p:()=>ViewRefFileNode,t:()=>ViewRefNode});var r=i(2636),s=i(4252),o=i(9642);let ViewRefNode=class ViewRefNode extends o.eu{constructor(e,t,i,r){super(e,t,i,r),this.parent=r}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${(0,r.M4)(this.ref,!1)}`}};let ViewRefFileNode=class ViewRefFileNode extends s.u${toString(){return`${super.toString()}:${this.file.path}`}}},6792:(e,t,i)=>{i.d(t,{U:()=>P,o:()=>ResultsFilesNode});var r,s=i(1398),o=i(3088),n=i(892),a=i(3500),l=i(4342),c=i(7747),u=i(6006),h=i(5576),d=i(3934),p=i(9642),g=i(2070),m=i(5030),f=i(2775),w=i(2636),v=i(4301),y=i(377),b=i(4252),C=i(6729),k=i(8029);let ResultsFileNode=class ResultsFileNode extends C.p{constructor(e,t,i,r,s,n,a){super("results-file",o.nk.fromFile(r,i,s||n),e,t,r),this.ref1=s,this.ref2=n,this.direction=a,this.updateContext({file:r}),null!=this.context.storedComparisonId?this._uniqueId=`${(0,k.dt)(this.context.storedComparisonId)}${this.direction}|${r.path}`:this._uniqueId=(0,p.pF)(this.type,this.context)}toClipboard(){return this.file.path}get ref(){return(0,w.kA)(this.ref1||this.ref2,this.uri.repoPath)}getChildren(){return[]}getTreeItem(){let e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);e.contextValue=p.U0.ResultsFile,e.description=this.description,e.tooltip=(0,b.h)(this.file);let t=(0,f.O)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,u.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,u.HS)("images","light",t))},e.command=this.getCommand(),e.checkboxState={state:this.getState("checked")??s.TreeItemCheckboxState.Unchecked,tooltip:"Mark as Reviewed"},e}_description;get description(){return void 0===this._description&&(this._description=m.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,y.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=m.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,v.gu)("gitlens.diffWith","Open Changes",{lhs:{sha:this.ref1,uri:("R"===this.file.status||"C"===this.file.status)&&"behind"===this.direction?o.nk.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},rhs:{sha:this.ref2,uri:("R"===this.file.status||"C"===this.file.status)&&"behind"!==this.direction?o.nk.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}};var S=Object.defineProperty,R=Object.getOwnPropertyDescriptor,P=((r=P||{})[r.Left=0]="Left",r[r.Right=1]="Right",r);let ResultsFilesNode=class ResultsFilesNode extends p.eu{constructor(e,t,i,r,s,n,a,l){super("results-files",o.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.ref1=r,this.ref2=s,this._filesQuery=n,this.direction=a,null!=this.direction&&this.updateContext({branchStatusUpstreamType:this.direction}),this._uniqueId=(0,p.pF)(this.type,this.context),this._options={expand:!0,timeout:100,...l}}_options;get id(){return this._uniqueId}get filter(){return this.getState("filter")}set filter(e){this.filter!==e&&(this.storeState("filter",e,!0),this._filterResults=void 0,this.triggerChange(!1))}get filterable(){return null!=this.filter||this.ref1!==this.ref2&&void 0===this.direction}async getFilesComparison(){let{files:e}=await this.getFilesQueryResults();return{files:e??[],repoPath:this.repoPath,ref1:this.ref1,ref2:this.ref2}}getFilterContextValue(){switch(this.filter){case 0:return"+filtered~left";case 1:return"+filtered~right";default:return""}}async getChildren(){let e=await this.getFilesQueryResults(),t=(null!=this.filter?e.filtered?.get(this.filter):void 0)??e.files;if(null==t)return[];let i=[...(0,c.Tj)(t,e=>new ResultsFileNode(this.view,this,this.repoPath,e,this.ref1,this.ref2,this.direction))];if("list"!==this.view.config.files.layout){let e=(0,n.Ay)(i,e=>e.uri.relativePath.split("/"),(...e)=>(0,u.Fd)((0,u.HS)(...e)),this.view.config.files.compact);i=new g.x(this.view,this,e,this.repoPath,"",void 0).getChildren()}else i.sort((e,t)=>e.priority-t.priority||(0,d.wN)(e.label,t.label));return i}async getTreeItem(){let e,t,i,r,o,n,a=this.filter;try{let l=await (0,h.nZ)(this.getFilesQueryResults(),!1===this._options.timeout?void 0:this._options.timeout);e=l.label,null==a&&null!=l.stats&&(t=`${(0,d.td)("addition",l.stats.additions)} (+), ${(0,d.td)("deletion",l.stats.deletions)} (-)${l.stats.approximated?" *approximated":""}`,n=`${e}, ${t}`),null!=a?(t="Filtered",n=`${e} &mdash; ${t}`,r=l.filtered?.get(a),null==r&&(e="files changed",i=new s.ThemeIcon("ellipsis"),o=s.TreeItemCollapsibleState.Collapsed,this._filterResults?.then(()=>queueMicrotask(()=>this.triggerChange(!1))))):r=l.files,void 0===o&&(o=null==r||0===r.length?s.TreeItemCollapsibleState.None:this._options.expand?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed)}catch(t){t instanceof h.NY&&t.promise.then(()=>queueMicrotask(()=>this.triggerChange(!1))),e="files changed",i=new s.ThemeIcon("ellipsis"),o=s.TreeItemCollapsibleState.Collapsed}let l=new s.TreeItem(`${null!=a&&null!=r?`Showing ${r.length} of `:""}${e}`,o);return l.description=t,l.id=this.id,l.iconPath=i,l.contextValue=`${p.U0.ResultsFiles}${this.filterable?"+filterable":""}${this.getFilterContextValue()}`,l.tooltip=n,l}refresh(e=!1){e&&(this.deleteState("filter"),this._filterResults=void 0,this._filesQueryResults=this._filesQuery())}_filesQueryResults;_filterResults;async getFilesQueryResults(){void 0===this._filesQueryResults&&(this._filesQueryResults=this._filesQuery());let e=await this._filesQueryResults;return null!=e.files&&this.filterable&&null!=this.filter&&e.filtered?.get(this.filter)==null&&(void 0===this._filterResults&&(this._filterResults=this.filterResults(this.filter,e)),await this._filterResults),e}async filterResults(e,t){let i,r=0===this.filter?this.ref2:this.ref1,s=await this.view.container.git.refs(this.repoPath).getMergeBase(this.ref1||"HEAD",this.ref2||"HEAD");if(null!=s){let e=await this.view.container.git.diff(this.uri.repoPath).getDiffStatus(`${s}..${r}`);null!=e&&(i=new Set(e.map(e=>e.path)))}else{let e=await this.view.container.git.commits(this.uri.repoPath).getCommit(r||"HEAD");e?.files!=null&&(i=new Set(e.files.map(e=>e.path)))}null==t.filtered&&(t.filtered=new Map),t.filtered.set(e,null==i?[]:t.files.filter(e=>i.has(e.path)))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?R(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&S(t,i,o)})([(0,a.G)(),(0,l.Yz)()],ResultsFilesNode.prototype,"refresh",1)},6796:(e,t,i)=>{let r;i.d(t,{E:()=>n});var s=i(3934);let o=/(^|\s):([-+_a-z0-9]+):($|\s)/g;function n(e){return null==r&&(r=JSON.parse((0,s.EO)(""))),e.replace(o,(e,t,i,s)=>r[i]?`${t}${r[i]}${s}`:e)}},6851:(e,t,i)=>{function r(e,t,i){let r,s,o,n,a,l,c,u,h,d,p=0;null!=i&&({edges:l,maxWait:c,signal:u,aggregator:h}=i);let g="leading"===(l??="trailing")||"both"===l,m="trailing"===l||"both"===l;function f(){if(null!=r){p=Date.now();let t=r,i=d;return d=void 0,r=void 0,o=e.apply(i,t)}}function w(){null!=n&&(clearTimeout(n),n=void 0)}function v(){null!=a&&(clearTimeout(a),a=void 0)}function y(){w(),v(),d=void 0,r=void 0,s=void 0,p=0}function b(...e){if(u?.aborted)return;let i=Date.now();null!=h&&null!=r?r=h(r,e):(d=this,r=e);let l=null==n&&null==a;s=i,w();let v=Date.now();if(s=v,n=setTimeout(()=>{n=void 0,function(e){let i=e-(s??0),r=e-p;return null==s||i>=t||i<0||null!=c&&r>=c}(Date.now())&&m&&f(),y()},t),null!=c&&!a){let e=c-(v-p);e>0?a=setTimeout(()=>{a=void 0,m&&null!=r&&f(),p=Date.now()},e):(m&&null!=r&&f(),y())}return g&&l?f():o}return b.cancel=y,b.flush=function(){return w(),v(),f()},b.pending=function(){return null!=n||null!=a},u?.addEventListener("abort",y,{once:!0}),b}i.d(t,{s:()=>r})},6875:(e,t,i)=>{i.d(t,{e:()=>DraftNode});var r=i(1398),s=i(6525),o=i(1078),n=i(4941),a=i(9642);let DraftNode=class DraftNode extends a.eu{constructor(e,t,i,r){super("draft",e,t,i),this.parent=i,this.draft=r,this.updateContext({draft:r}),this._uniqueId=(0,a.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.getUrl()}getUrl(){return this.view.container.drafts.generateWebUrl(this.draft.id)}getChildren(){return[]}getTreeItem(){let e,t=this.draft.title??`Draft (${this.draft.id})`,i=new r.TreeItem(t,r.TreeItemCollapsibleState.None),l=o.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",c=this.draft.updatedAt.getTime()-this.draft.createdAt.getTime()>=3e4;i.id=this.id;let u=a.U0.Draft;return this.draft.isMine&&(u+="+mine"),i.contextValue=u,i.description=(0,n.PI)(this.draft.updatedAt),i.command={title:"Open",command:"gitlens.views.draft.open",arguments:[this]},this.view.config.avatars&&null!=this.draft.author&&(e=this.draft.author.avatarUri??(0,s.m_)(this.draft.author.email)),i.iconPath=e??new r.ThemeIcon("suggested_pr_change"===this.draft.type?"gitlens-code-suggestion":"cloud"),i.tooltip=new r.MarkdownString(`${t}${this.draft.description?`\\
${this.draft.description}`:""}

Created ${this.draft.author?.name?` by ${this.draft.author.name}`:""} ${(0,n.PI)(this.draft.createdAt)} &nbsp; _(${(0,n.Yq)(this.draft.createdAt,l)})_${c?` \\
Last updated ${(0,n.PI)(this.draft.updatedAt)} &nbsp; _(${(0,n.Yq)(this.draft.updatedAt,l)})_`:""}`),i}}},6905:(e,t,i)=>{i.d(t,{K:()=>GitHubRemote,P:()=>b});var r=i(1398),s=i(1518),o=i(4941),n=i(4499),a=i(1212),l=i(4704),c=i(3934),u=i(8811),h=i(9842),d=i(8554),p=i(1201),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let f=/\b([^/\s]+\/[^/\s]+?)(?:\\)?#([0-9]+)\b(?!]\()/g,w=/^\/([^/]+)\/([^/]+?)\/blob(.+)$/i,v=/^L(\d+)(?:-L(\d+))?$/;let GitHubRemote=class GitHubRemote extends p.u{constructor(e,t,i,r,s,o=!1){super(t,i,r,s,o),this.container=e}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api/v3`:`https://api.${this.domain}`}get issueLinkPattern(){return`${this.baseUrl}/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"#",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!1,title:`Open Issue or Pull Request #<num> on ${this.name}`,description:`${this.name} Issue or Pull Request #<num>`},{prefix:"gh-",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!0,title:`Open Issue or Pull Request #<num> on ${this.name}`,description:`${this.name} Issue or Pull Request #<num>`},{tokenize:(e,t,i,r,n,c)=>"plaintext"===t?e:e.replace(f,(e,h,d)=>{let p,g=(0,a.W)(`${this.protocol}://${this.domain}/${(0,l.e8)(h)}/issues/${d}`),m=` "Open Issue or Pull Request #${d} from ${h} on ${this.name}"`,f=`\0${i.size}\0`;"markdown"===t?i.set(f,`[${e}](${g}${m})`):"html"===t&&i.set(f,`<a href="${g}" title=${m}>${e}</a>`);let w=r?.get(d)?.[0];if(w?.value!=null)if(w.paused)null==c||n?.has(d)||(p=c.size+1,c.set(p,`[${(0,u.xu)()} ${this.name} Issue or Pull Request ${h}#${d} $(loading~spin)](${g}${m}")`));else{let t=w.value,i=(0,l.FV)(t.title.trim());null==c||n?.has(d)||(p=c.size+1,c.set(p,`[${(0,u.xu)(t)} **${i}**](${g}${m})\\
${s.EO.Space.repeat(5)}${e} ${t.state} ${(0,o.PI)(t.closedDate??t.createdDate)}`))}else null==c||n?.has(d)||(p=c.size+1,c.set(p,`[${(0,u.xu)()} ${this.name} Issue or Pull Request ${h}#${d}](${g}${m})`));return f}),parse:(e,t)=>{let i,r,s;for(;null!=(s=f.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/issues/${r}`,alphanumeric:!1,ignoreCase:!0,title:`Open Issue or Pull Request #<num> from ${i} on ${this.name}`,description:`${this.name} Issue or Pull Request ${i}#${r}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}}]),this._autolinks}get avatarUri(){let[e]=this.splitPath();return r.Uri.parse(`https://avatars.githubusercontent.com/${e}`)}get icon(){return"github"}get id(){return"github"}get gkProviderId(){var e;return(e=this.domain,(0,c.Q_)(e,"github.com"))?"github":"githubEnterprise"}get name(){return this.formatName("GitHub")}get repoDesc(){let[e,t]=this.splitPath();return{key:this.remoteKey,owner:e,name:t}}get supportedFeatures(){return{...super.supportedFeatures,createPullRequestWithDetails:!0}}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=v.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=w.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,d.HH)(t)){let t=e.toAbsoluteUri(a.substring(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let c=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),o=a.substring(1,l),c.set(o,a.substring(l));while(l>0)if(0!==c.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&c.has(e.getNameWithoutRemote())});for(let o of t){let t=c.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}${i}${t}`)}async getUrlForCreatePullRequest(e,t){let{base:i,head:r,details:s}=e;s?.describeWithAI&&(s=await (0,h.ub)(this.container,e.repoPath,e,t??{source:"ai"}));let o=new URLSearchParams({expand:"1"});if(s?.title&&o.set("title",s.title),s?.description&&o.set("body",s.description),i.remote.url===r.remote.url)return i.branch?`${this.encodeUrl(`${this.baseUrl}/compare/${i.branch}...${r.branch}`)}?${o.toString()}`:`${this.encodeUrl(`${this.baseUrl}/compare/${r.branch}`)}?${o.toString()}`;let[n]=r.remote.path.split("/",1);return`${this.encodeUrl(`${this.baseUrl}/compare/${i.branch??"HEAD"}...${n}:${r.branch}`)}?${o.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o)})([(0,n.B)()],GitHubRemote.prototype,"repoDesc",1);let y=/^(?:(\d+)\+)?([a-zA-Z\d-]{1,39})@users\.noreply\.(.*)$/i;function b(e){let t=y.exec(e);if(null==t)return;let[,i,r,s]=t;return{userId:i,login:r,authority:s}}},6928:e=>{e.exports=require("path")},6980:(e,t,i)=>{i.d(t,{MX:()=>m,PV:()=>p,ec:()=>g});var r=i(1398),s=i(8587),o=i(5223),n=i(1518),a=i(4199),l=i(3088),c=i(6066),u=i(8554),h=i(1078),d=i(5576);async function p(e,t,i,a,l){let d,p,g,m=i.sha,w=null;async function v(){var r,s;let o;if(null==t.file)return;let n=a+1,d=t.lines.find(e=>e.line===n)??t.lines[0];if(t.isUncommitted)(0,u.KH)(m)&&(o=m);else if(null==(o=w=d.previousSha))return`\`\`\`diff
+ ${l.lineAt(a).text}
\`\`\``;let p=t.file.originalPath;null==p&&i.fsPath!==t.file.uri.fsPath&&(p=t.file.path),a=d.line-1;let g=await e.git.getDiffForLine(i,a,o,m);return null==g&&null==o&&m!==c.id&&(g=await e.git.getDiffForLine(i,a,void 0,c.id)),null!=g?(r=g,null==s&&"hunk"===h.H.get("hovers.changesDiff")?f(r.hunk):`\`\`\`diff${null==r.line.previous?"":`
- ${r.line.previous.trim()}`}${null==r.line.current?"":`
+ ${r.line.current.trim()}`}
\`\`\``):void 0}let y=await v();if(null==y)return;if(t.isUncommitted){let e=await t.getPreviousComparisonUrisForLine(a,m);if(e?.previous==null)return;d=`[$(compare-changes)](${s.T.createMarkdownCommandLink({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:t.repoPath,line:a})} "Open Changes")`,p=null==e.previous.sha||e.previous.isUncommitted?`  &nbsp;_${(0,u.pV)(e.previous.sha,{strings:{working:"Working Tree"}})}_ &nbsp;${n.EO.ArrowLeftRightLong}&nbsp; `:`  &nbsp;[$(git-commit) ${(0,u.pV)(e.previous.sha||"")}](${o.p.createMarkdownCommandLink(e.previous.sha||"")} "Show Commit") &nbsp;${n.EO.ArrowLeftRightLong}&nbsp; `,g=null==e.current.sha||e.current.isUncommitted?`_${(0,u.pV)(e.current.sha,{strings:{working:"Working Tree"}})}_`:`[$(git-commit) ${(0,u.pV)(e.current.sha||"")}](${o.p.createMarkdownCommandLink(e.current.sha||"")} "Show Commit")`}else d=`[$(compare-changes)](${s.T.createMarkdownCommandLink(t,a)} "Open Changes")`,null===w&&(w=await t.getPreviousSha()),w&&(p=`  &nbsp;[$(git-commit) ${(0,u.pV)(w)}](${o.p.createMarkdownCommandLink(w)} "Show Commit") &nbsp;${n.EO.ArrowLeftRightLong}&nbsp;`),g=`[$(git-commit) ${t.shortSha}](${o.p.createMarkdownCommandLink(t.sha)} "Show Commit")`;d=`${y}
---

Changes${p??" added in "}${g} &nbsp;&nbsp;|&nbsp;&nbsp; ${d}`;let b=new r.MarkdownString(d,!0);return b.supportHtml=!0,b.isTrusted=!0,b}async function g(e,t,i,a){let c,u,h,d=f(a);if(null==e)u="_Working Tree_",h="_Unsaved_";else{let r=await e.findFile(t);if(null==r)return;c=`[$(compare-changes)](${s.T.createMarkdownCommandLink({lhs:{sha:e.sha,uri:l.nk.fromFile(r,t.repoPath,void 0,!0).toFileUri()},rhs:{sha:"",uri:t.toFileUri()},repoPath:t.repoPath,line:i})} "Open Changes")`,u=`[$(git-commit) ${e.shortSha}](${o.p.createMarkdownCommandLink(e.sha)} "Show Commit")`,h="_Working Tree_"}c=`${d}
---

Local Changes  &nbsp;${u} &nbsp;${n.EO.ArrowLeftRightLong}&nbsp; ${h}${null==c?"":` &nbsp;&nbsp;|&nbsp;&nbsp; ${c}`}`;let p=new r.MarkdownString(c,!0);return p.supportHtml=!0,p.isTrusted=!0,p}async function m(e,t,i,s,o){let n,l,c=await (0,d.wW)(o?.remotes??e.git.remotes(t.repoPath).getBestRemotesWithProviders(),o?.cancellation,o?.timeout);if(c.paused){if("cancelled"===c.reason)return}else n=c.value,[l]=n;let u=h.H.get("hovers"),p=l?.provider!=null&&o?.autolinks!==!1&&(o?.autolinks||u.autolinks.enabled)&&u.autolinks.enhanced&&a.c.has(u.detailsMarkdownFormat,"message"),g=l?.hasIntegration()&&!1!==l.maybeIntegrationConnected&&(o?.pullRequests||o?.pullRequests!==!1&&u.pullRequests.enabled)&&a.c.has(o.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"),[m,f,w,v]=await Promise.allSettled([p?(0,d.zu)(o?.enrichedAutolinks??t.getEnrichedAutolinks(l),o?.cancellation,o?.timeout):void 0,g?(0,d.wW)(o?.pullRequest??t.getAssociatedPullRequest(l),o?.cancellation,o?.timeout):void 0,e.vsls.active?(0,d.wW)(e.vsls.getContactPresence(t.author.email),o?.cancellation,Math.min(o?.timeout??250,250)):void 0,t.isUncommitted?t.getPreviousComparisonUrisForLine(s,i.sha):void 0,null==t.message?t.ensureFullDetails():void 0]);if(o?.cancellation?.isCancellationRequested)return;let y=(0,d.Ro)(m),b=(0,d.Ro)(f),C=(0,d.Ro)(w),k=(0,d.Ro)(v),S=await a.c.fromTemplateAsync(o.format,t,{enrichedAutolinks:y?.value==null||y.paused?void 0:y.value,dateFormat:null===o.dateFormat?"MMMM Do, YYYY h:mma":o.dateFormat,editor:{line:s,uri:i},getBranchAndTagTips:o?.getBranchAndTagTips,messageAutolinks:o?.autolinks||o?.autolinks!==!1&&u.autolinks.enabled,pullRequest:b?.value,presence:C?.value,previousLineComparisonUris:k,outputFormat:"markdown",remotes:n}),R=new r.MarkdownString(S,!0);return R.supportHtml=!0,R.isTrusted=!0,R}function f(e){return`\`\`\`diff
${e.contents.trim()}
\`\`\``}},6990:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isWide=t.isFullWidth=t.isAmbiguous=void 0,t.isAmbiguous=e=>161===e||164===e||167===e||168===e||170===e||173===e||174===e||e>=176&&e<=180||e>=182&&e<=186||e>=188&&e<=191||198===e||208===e||215===e||216===e||e>=222&&e<=225||230===e||e>=232&&e<=234||236===e||237===e||240===e||242===e||243===e||e>=247&&e<=250||252===e||254===e||257===e||273===e||275===e||283===e||294===e||295===e||299===e||e>=305&&e<=307||312===e||e>=319&&e<=322||324===e||e>=328&&e<=331||333===e||338===e||339===e||358===e||359===e||363===e||462===e||464===e||466===e||468===e||470===e||472===e||474===e||476===e||593===e||609===e||708===e||711===e||e>=713&&e<=715||717===e||720===e||e>=728&&e<=731||733===e||735===e||e>=768&&e<=879||e>=913&&e<=929||e>=931&&e<=937||e>=945&&e<=961||e>=963&&e<=969||1025===e||e>=1040&&e<=1103||1105===e||8208===e||e>=8211&&e<=8214||8216===e||8217===e||8220===e||8221===e||e>=8224&&e<=8226||e>=8228&&e<=8231||8240===e||8242===e||8243===e||8245===e||8251===e||8254===e||8308===e||8319===e||e>=8321&&e<=8324||8364===e||8451===e||8453===e||8457===e||8467===e||8470===e||8481===e||8482===e||8486===e||8491===e||8531===e||8532===e||e>=8539&&e<=8542||e>=8544&&e<=8555||e>=8560&&e<=8569||8585===e||e>=8592&&e<=8601||8632===e||8633===e||8658===e||8660===e||8679===e||8704===e||8706===e||8707===e||8711===e||8712===e||8715===e||8719===e||8721===e||8725===e||8730===e||e>=8733&&e<=8736||8739===e||8741===e||e>=8743&&e<=8748||8750===e||e>=8756&&e<=8759||8764===e||8765===e||8776===e||8780===e||8786===e||8800===e||8801===e||e>=8804&&e<=8807||8810===e||8811===e||8814===e||8815===e||8834===e||8835===e||8838===e||8839===e||8853===e||8857===e||8869===e||8895===e||8978===e||e>=9312&&e<=9449||e>=9451&&e<=9547||e>=9552&&e<=9587||e>=9600&&e<=9615||e>=9618&&e<=9621||9632===e||9633===e||e>=9635&&e<=9641||9650===e||9651===e||9654===e||9655===e||9660===e||9661===e||9664===e||9665===e||e>=9670&&e<=9672||9675===e||e>=9678&&e<=9681||e>=9698&&e<=9701||9711===e||9733===e||9734===e||9737===e||9742===e||9743===e||9756===e||9758===e||9792===e||9794===e||9824===e||9825===e||e>=9827&&e<=9829||e>=9831&&e<=9834||9836===e||9837===e||9839===e||9886===e||9887===e||9919===e||e>=9926&&e<=9933||e>=9935&&e<=9939||e>=9941&&e<=9953||9955===e||9960===e||9961===e||e>=9963&&e<=9969||9972===e||e>=9974&&e<=9977||9979===e||9980===e||9982===e||9983===e||10045===e||e>=10102&&e<=10111||e>=11094&&e<=11097||e>=12872&&e<=12879||e>=57344&&e<=63743||e>=65024&&e<=65039||65533===e||e>=127232&&e<=127242||e>=127248&&e<=127277||e>=127280&&e<=127337||e>=127344&&e<=127373||127375===e||127376===e||e>=127387&&e<=127404||e>=917760&&e<=917999||e>=983040&&e<=1048573||e>=1048576&&e<=1114109,t.isFullWidth=e=>12288===e||e>=65281&&e<=65376||e>=65504&&e<=65510,t.isWide=e=>e>=4352&&e<=4447||8986===e||8987===e||9001===e||9002===e||e>=9193&&e<=9196||9200===e||9203===e||9725===e||9726===e||9748===e||9749===e||e>=9800&&e<=9811||9855===e||9875===e||9889===e||9898===e||9899===e||9917===e||9918===e||9924===e||9925===e||9934===e||9940===e||9962===e||9970===e||9971===e||9973===e||9978===e||9981===e||9989===e||9994===e||9995===e||10024===e||10060===e||10062===e||e>=10067&&e<=10069||10071===e||e>=10133&&e<=10135||10160===e||10175===e||11035===e||11036===e||11088===e||11093===e||e>=11904&&e<=11929||e>=11931&&e<=12019||e>=12032&&e<=12245||e>=12272&&e<=12287||e>=12289&&e<=12350||e>=12353&&e<=12438||e>=12441&&e<=12543||e>=12549&&e<=12591||e>=12593&&e<=12686||e>=12688&&e<=12771||e>=12783&&e<=12830||e>=12832&&e<=12871||e>=12880&&e<=19903||e>=19968&&e<=42124||e>=42128&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65106||e>=65108&&e<=65126||e>=65128&&e<=65131||e>=94176&&e<=94180||94192===e||94193===e||e>=94208&&e<=100343||e>=100352&&e<=101589||e>=101632&&e<=101640||e>=110576&&e<=110579||e>=110581&&e<=110587||110589===e||110590===e||e>=110592&&e<=110882||110898===e||e>=110928&&e<=110930||110933===e||e>=110948&&e<=110951||e>=110960&&e<=111355||126980===e||127183===e||127374===e||e>=127377&&e<=127386||e>=127488&&e<=127490||e>=127504&&e<=127547||e>=127552&&e<=127560||127568===e||127569===e||e>=127584&&e<=127589||e>=127744&&e<=127776||e>=127789&&e<=127797||e>=127799&&e<=127868||e>=127870&&e<=127891||e>=127904&&e<=127946||e>=127951&&e<=127955||e>=127968&&e<=127984||127988===e||e>=127992&&e<=128062||128064===e||e>=128066&&e<=128252||e>=128255&&e<=128317||e>=128331&&e<=128334||e>=128336&&e<=128359||128378===e||128405===e||128406===e||128420===e||e>=128507&&e<=128591||e>=128640&&e<=128709||128716===e||e>=128720&&e<=128722||e>=128725&&e<=128727||e>=128732&&e<=128735||128747===e||128748===e||e>=128756&&e<=128764||e>=128992&&e<=129003||129008===e||e>=129292&&e<=129338||e>=129340&&e<=129349||e>=129351&&e<=129535||e>=129648&&e<=129660||e>=129664&&e<=129672||e>=129680&&e<=129725||e>=129727&&e<=129733||e>=129742&&e<=129755||e>=129760&&e<=129768||e>=129776&&e<=129784||e>=131072&&e<=196605||e>=196608&&e<=262141},7005:(e,t,i)=>{i.d(t,{Vy:()=>a,j8:()=>BufferedLogChannel,nH:()=>u,zu:()=>c});var r,s=i(4342);i(3934);var o=((r=o||{})[r.Off=0]="Off",r[r.Error=1]="Error",r[r.Warn=2]="Warn",r[r.Info=3]="Info",r[r.Debug=4]="Debug",r);let n=["accessToken","password","token"],a=new class Logger2{output;provider;configure(e,t,i=!1){if(null!=e.sanitizeKeys)for(let t of n)e.sanitizeKeys.add(t);else e.sanitizeKeys=new Set(n);this.provider=e,this._isDebugging=i,this.logLevel=t}enabled(e){return this.level>=l(e)}_isDebugging=!1;get isDebugging(){return this._isDebugging}level=0;_logLevel="off";get logLevel(){return this._logLevel}set logLevel(e){this._logLevel=e,this.level=l(this._logLevel),"off"===e?(this.output?.dispose?.(),this.output=void 0):this.output??=this.provider.createChannel(this.provider.name)}get timestamp(){return`[${new Date().toISOString().replace(/T/," ").slice(0,-1)}]`}debug(e,...t){let i;(!(this.level<4)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging,null==this.output||this.level<4||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!0,t)}`))}error(e,t,...i){let r;if(!(this.level<1)||this.isDebugging){if(null==(r=null==t||"string"==typeof t?t:`${t.prefix} ${i.shift()??""}`)){let t=e instanceof Error?e.stack:void 0;if(t){let e=/.*\s*?at\s(.+?)\s/.exec(t);null!=e&&(r=e[1])}}this.isDebugging,null==this.output||this.level<1||this.output.appendLine(`${this.timestamp} ${r??""}${this.toLoggableParams(!1,i)}${null!=e?`
${String(e)}`:""}`)}}log(e,...t){let i;(!(this.level<3)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging,null==this.output||this.level<3||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!1,t)}`))}warn(e,...t){let i;(!(this.level<2)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging,null==this.output||this.level<2||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!1,t)}`))}showOutputChannel(e){this.output?.show?.(e)}toLoggable(e,t){if("object"!=typeof e)return String(e);if(Array.isArray(e))return`[${e.map(e=>this.toLoggable(e,t)).join(", ")}]`;let i=this.provider.toLoggable?.(e);if(null!=i)return i;try{return JSON.stringify(e,(e,i)=>this.provider.sanitizeKeys.has(e)?`<${e}>`:(null!=t&&(i=t(e,i)),this.provider?.sanitizer!=null&&(i=this.provider.sanitizer(e,i)),i))}catch{return"<error>"}}toLoggableParams(e,t){if(0===t.length||e&&this.level<4&&!this.isDebugging)return"";let i=t.map(e=>this.toLoggable(e)).join(", ");return 0!==i.length?` \u2014 ${i}`:""}};let BufferedLogChannel=class BufferedLogChannel{constructor(e,t=500){this.channel=e,this.interval=t}buffer=[];bufferTimer;dispose(){clearInterval(this.bufferTimer),this.bufferTimer=void 0,this.flush(),this.channel.dispose()}get name(){return this.channel.name}appendLine(e){this.buffer.push(e),this.buffer.length>=100?this.flush():this.bufferTimer??=setInterval(()=>this.flush(),this.interval)}show(e){this.channel.show?.(e)}_emptyCounter=0;flush(){if(this.buffer.length){this._emptyCounter=0;let e=this.buffer.join("\n");e+="\n",this.buffer.length=0,this.channel.append(e)}else this._emptyCounter++,this._emptyCounter>10&&(clearInterval(this.bufferTimer),this.bufferTimer=void 0,this._emptyCounter=0)}};function l(e){switch(e){case"off":default:return 0;case"error":return 1;case"warn":return 2;case"info":return 3;case"debug":return 4}}function c(e){let t;if("function"==typeof e){if(e.prototype?.constructor==null)return e.name;t=e.prototype.constructor}else t=e.constructor;let i=t?.name??"",r=i.indexOf("_");return i=-1===r?i:i.substring(r+1),t?.[s.z1]!=null&&(i=t[s.z1](e,i)),i}let u={enabled:e=>a.enabled(e)||a.isDebugging,log:(e,t,i,...r)=>{switch(e){case"error":a.error(void 0,t,i,...r);break;case"warn":a.warn(t,i,...r);break;case"info":a.log(t,i,...r);break;default:a.debug(t,i,...r)}}}},7016:e=>{e.exports=require("url")},7079:(e,t,i)=>{i.d(t,{Fj:()=>CommandQuickPickItem,Xt:()=>o,g5:()=>ActionQuickPickItem,uK:()=>s});var r=i(1398);function s(e){return{kind:r.QuickPickItemKind.Separator,label:e??""}}function o(e,t){return"string"==typeof e?{label:e,item:t}:{...e,item:t}}let CommandQuickPickItem=class CommandQuickPickItem{constructor(e,t,i,r,s){this.command=i,this.args=r,this.options=s,this.command=i,this.args=r,"string"==typeof e?this.label=e:Object.assign(this,e),null!=t&&(this.iconPath=t)}static fromCommand(e,t,i){return new CommandQuickPickItem("string"==typeof e?{label:e}:e,void 0,t,null==i?[]:Array.isArray(i)?i:[i])}static is(e){return e instanceof CommandQuickPickItem}label;description;detail;iconPath;execute(e){return void 0===this.command?Promise.resolve(void 0):r.commands.executeCommand(this.command,...this.args??[])}async onDidPressKey(e){if(this.options?.suppressKeyPress)return;let t=this.execute({preserveFocus:!0,preview:!1});this.options?.onDidPressKey?.(e,t),await t}};let ActionQuickPickItem=class ActionQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(e,void 0,void 0),this.action=t}async execute(e){return this.action(e)}}},7222:(e,t,i)=>{i.d(t,{$T:()=>o,RU:()=>u,S_:()=>p,VC:()=>c,_c:()=>g,a$:()=>l,cL:()=>h,h1:()=>a,hd:()=>n,ru:()=>d});var r=i(9703),s=i(8191);function o(e,t){return(0,s.b)({command:"cherry-pick",state:{repo:e,references:t}})}function n(e,t){return(0,s.b)({command:"fetch",state:{repos:e,reference:t}})}function a(e,t){return(0,s.b)({command:"merge",state:{repo:e,reference:t}})}function l(e,t){return(0,s.b)({command:"pull",state:{repos:e,reference:t}})}function c(e,t,i){return(0,s.b)({command:"push",state:{repos:e,flags:t?["--force"]:[],reference:i}})}function u(e,t,i=!0){return(0,s.b)({command:"rebase",state:{repo:e,destination:t,flags:i?["--interactive"]:[]}})}function h(e,t,i){let r=[];return i?.hard?r.push("--hard"):i?.soft&&r.push("--soft"),(0,s.b)({command:"reset",confirm:null==i||i.hard,state:{repo:e,reference:t,flags:r}})}function d(e,t){return(0,s.b)({command:"revert",state:{repo:e,references:t}})}function p(e,t,i){return(0,s.b)({command:"switch",state:{repos:e,reference:t},confirm:i})}function g(e,t,i){return r.m.instance.views.revealRepository(e,t,i)}},7251:(e,t,i)=>{i.d(t,{R:()=>r});let Lazy=class Lazy{constructor(e){this.valueProvider=e}_evaluated=!1;get evaluated(){return this._evaluated}_exception;_value;get value(){if(!this._evaluated)try{this._value=this.valueProvider()}catch(e){throw this._exception=e,e}finally{this._evaluated=!0}if(this._exception)throw this._exception;return this._value}};function r(e){return new Lazy(e)}},7279:(e,t,i)=>{let r,s,o;var n=Object.create,a=Object.defineProperty,l=Object.getOwnPropertyDescriptor,c=Object.getOwnPropertyNames,u=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty,d=(e,t)=>{for(var i in t)a(e,i,{get:t[i],enumerable:!0})},p=(e,t,i,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of c(t))h.call(e,s)||s===i||a(e,s,{get:()=>t[s],enumerable:!(r=l(t,s))||r.enumerable});return e},g={};d(g,{AzureDevopsUtils:()=>m,BitbucketServerUtils:()=>y,BitbucketUtils:()=>w,GitHubUtils:()=>ey,GitLabUtils:()=>eC,GitProviderUtils:()=>D,JiraUtils:()=>eS,TrelloUtils:()=>eP,Utils:()=>eI}),e.exports=p(a({},"__esModule",{value:!0}),g);var m={};d(m,{default:()=>f});var f={},w={};d(w,{default:()=>v});var v={},y={};d(y,{restApiPullRequestToCommonPullRequest:()=>I});var b={APPROVED:0,COMMENTED:1,REVIEW_REQUESTED:2,CHANGES_REQUESTED:3},C=e=>e&&0!==e.length?e.reduce((e,t)=>b[t.state]>b[e]?t.state:e,"APPROVED"):null,k=(e,t)=>e.name||e.username||e.email||t,S=e=>{let t=Object.values(e).map(e=>e.name).sort((e,t)=>e.localeCompare(t));return Object.values(e).forEach(e=>{-1!==e.priority&&(e.priority=t.indexOf(e.name))}),e},R=(o=null!=(r=i(8401))?n(u(r)):{},p(!s&&r&&r.__esModule?o:a(o,"default",{value:r,enumerable:!0}),r));globalThis.fetch||R.default;var P=e=>({name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrl??null,id:e.id.toString(),username:e.name,url:e.links.self[0].href}),A=e=>{var t,i,r,s,o,n;let a={UNAPPROVED:"REVIEW_REQUESTED",NEEDS_WORK:"CHANGES_REQUESTED",APPROVED:"APPROVED"},l=e.reviewers.map(e=>({reviewer:P(e.user),state:a[e.status]})),c=(null==(t=e.toRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:t.href)??null,u=(null==(i=e.toRef.repository.links.clone.find(e=>"https"===e.name))?void 0:i.href)??null;u||(u=(null==(r=e.toRef.repository.links.clone.find(e=>"http"===e.name))?void 0:r.href)??null);let h=(null==(s=e.fromRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:s.href)??null,d=(null==(o=e.fromRef.repository.links.clone.find(e=>"https"===e.name))?void 0:o.href)??null;return d||(d=(null==(n=e.fromRef.repository.links.clone.find(e=>"http"===e.name))?void 0:n.href)??null),{id:e.id.toString(),number:e.id,title:e.title,url:e.links.self[0].href,state:({OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"})[e.state],isDraft:!1,createdDate:new Date(e.createdDate),updatedDate:new Date(e.updatedDate),closedDate:e.closedDate?new Date(e.closedDate):null,mergedDate:"MERGED"==e.state&&e.closedDate?new Date(e.closedDate):null,baseRef:{name:e.toRef.displayId,oid:e.toRef.latestCommit},headRef:{name:e.fromRef.displayId,oid:e.fromRef.latestCommit},commentCount:e.properties.commentCount,upvoteCount:null,commitCount:null,fileCount:null,additions:null,deletions:null,author:P(e.author.user),assignees:null,reviews:l,reviewDecision:C(l),repository:{id:e.toRef.repository.id.toString(),name:e.toRef.repository.name,owner:{login:e.toRef.repository.project.key},remoteInfo:u&&c?{cloneUrlHTTPS:u,cloneUrlSSH:c}:null},headRepository:{id:e.fromRef.repository.id.toString(),name:e.fromRef.repository.name,owner:{login:e.fromRef.repository.project.key},remoteInfo:d&&h?{cloneUrlHTTPS:d,cloneUrlSSH:h}:null},headCommit:null,mergeableState:"UNKNOWN",permissions:null,version:e.version}},I=e=>A(e),D={};d(D,{CHANGES_REQUESTED_ACTION_CATEGORY:()=>eo,CHANGES_REQUESTED_BUCKET_ID:()=>z,CONFLICTS_ACTION_CATEGORY:()=>er,CONFLICTS_BUCKET_ID:()=>j,DRAFT_ACTION_CATEGORY:()=>el,DRAFT_BUCKET_ID:()=>Z,FAILING_CI_ACTION_CATEGORY:()=>ei,FAILING_CI_BUCKET_ID:()=>V,NEEDS_MY_REVIEW_ACTION_CATEGORY:()=>es,NEEDS_MY_REVIEW_BUCKET_ID:()=>Q,OTHER_ACTION_CATEGORY:()=>ec,OTHER_BUCKET_ID:()=>J,PINNED_BUCKET_ID:()=>M,READY_TO_MERGE_ACTION_CATEGORY:()=>ee,READY_TO_MERGE_BUCKET_ID:()=>G,REVIEWER_COMMENTED_ACTION_CATEGORY:()=>en,REVIEWER_COMMENTED_BUCKET_ID:()=>Y,SNOOZED_BUCKET_ID:()=>X,UNASSIGNED_REVIEWERS_ACTION_CATEGORY:()=>et,UNASSIGNED_REVIEWERS_BUCKET_ID:()=>H,WAITING_FOR_REVIEW_ACTION_CATEGORY:()=>ea,WAITING_FOR_REVIEW_BUCKET_ID:()=>K,getActionablePullRequests:()=>eu,groupPullRequestsByAssignee:()=>ep,groupPullRequestsByAuthor:()=>eg,groupPullRequestsByGitKrakenTeam:()=>ev,groupPullRequestsByRepo:()=>ed,groupPullRequestsByReviewer:()=>em,groupPullRequestsByWorkspace:()=>ew,groupPullRequestsIntoBuckets:()=>eh});var $=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.entityId)throw Error("Missing required fields for Azure DevOps issue uniqueId");let t=[];return t.push("azure"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Azure DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:null,entityId:e[6]}}},T=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.repoId||!e.entityId)throw Error("Missing required fields for Azure DevOps pull request uniqueId");let t=[];return t.push("azure"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<8)throw Error("Invalid Azure DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:e[6],entityId:e[7]}}},E=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},_=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},O=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},x=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},F=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},L=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},B=class{constructor(){}validate(e){if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.projectId||!e.entityId)throw Error("Missing required fields for Jira issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"jira"==e.provider?(t.push(""),t.push(e.resourceId)):(t.push(e.domain),t.push("")),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Jira issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:""==e[4]?null:e[4],accountOrOrgId:null,organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},U=class{constructor(){}validate(e){if(!e.accountOrOrgId)throw Error("accountOrOrgId is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.accountOrOrgId||!e.projectId||!e.entityId)throw Error("Missing required fields for Trello issue uniqueId");let t=[];return t.push("trello"),t.push("issue"),t.push("1"),t.push(""),t.push(e.accountOrOrgId),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Trello issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:e[4],organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},N=(e,t)=>{if("issue"!==t&&"pr"!==t)throw Error("unknown entityType");switch(e){case"azure":return"pr"===t?new T:new $;case"bitbucket":case"bitbucketServer":return"pr"===t?new _:new E;case"github":case"githubEnterprise":return"pr"===t?new x:new O;case"gitlab":case"gitlabSelfHosted":return"pr"===t?new L:new F;case"jira":case"jiraServer":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new B;case"trello":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new U;default:throw Error("unknown provider")}},q=e=>{let t=JSON.parse(e);if(!t||!t.length)throw Error("invalid issue unique id");return N(t[0],t[1]).decode(t)},W=(e,t,i,r)=>({id:e,faIconName:i,name:t,priority:r,pullRequests:[]}),M="pinned",G="readyToMerge",H="unassignedReviewers",V="failingCI",j="conflicts",Q="needsMyReview",z="changesRequested",Y="reviewerCommented",K="waitingForReview",Z="draft",J="other",X="snoozed",ee="readyToMerge",et="unassignedReviewers",ei="failingCI",er="conflicts",es="needsMyReview",eo="changesRequested",en="reviewerCommented",ea="waitingForReview",el="draft",ec="other",eu=(e,t,i)=>e.map(e=>{var r,s,o,n,a,l,c,u,h,d,p,g,m,f;let w={...e,suggestedActionCategory:ec,priority:1e3,viewer:{canMerge:!1,isAuthor:!1,isAssignee:!1,isReviewer:!1,shouldMerge:!1,shouldAssignReviewer:!1,waitingOnReviews:!1,shouldReview:!1},failingCI:!1,hasConflicts:!1,changeRequestReviewCount:0,codeSuggestionsCount:0,commentReviewCount:0,approvalReviewCount:0};t&&(w.viewer.isAuthor=(null==(r=e.author)?void 0:r.id)===t.id,w.viewer.isAssignee=(null==(s=e.assignees)?void 0:s.some(e=>e.id===t.id))??!1,w.viewer.isReviewer=(null==(o=e.reviews)?void 0:o.some(e=>e.reviewer.id===t.id))??!1),w.viewer.canMerge=(null==(n=e.permissions)?void 0:n.canMerge)??!0,w.hasConflicts="CONFLICTS"===e.mergeableState,w.failingCI=(null==(l=null==(a=e.headCommit)?void 0:a.buildStatuses)?void 0:l.some(e=>"ERROR"===e.state||"FAILED"===e.state))||"FAILING_CHECKS"===e.mergeableState,w.commentReviewCount=(null==(c=e.reviews)?void 0:c.filter(e=>"COMMENTED"===e.state).length)??0,w.approvalReviewCount=(null==(u=e.reviews)?void 0:u.filter(e=>"APPROVED"===e.state).length)??0,w.changeRequestReviewCount=(null==(h=e.reviews)?void 0:h.filter(e=>"CHANGES_REQUESTED"===e.state).length)??0;let v=null==(d=null==i?void 0:i.enrichedItemsByUniqueId)?void 0:d[e.uuid];null!=v&&(w.viewer.enrichedItems=v,v.some(e=>"pin"===e.type)&&(w.viewer.pinned=!0,w.priority-=800),v.some(e=>"snooze"===e.type)&&(w.viewer.snoozed=!0));let y=(null==(g=null==(p=null==i?void 0:i.codeSuggestionsCountByPrUuid)?void 0:p[e.uuid])?void 0:g.count)||0;return y&&(w.codeSuggestionsCount=y),t&&!w.viewer.isAuthor&&(!w.viewer.isAssignee||w.viewer.isReviewer)||!w.viewer.canMerge||w.isDraft||w.failingCI||"MERGEABLE"!==e.mergeableState||e.reviewDecision&&"APPROVED"!==e.reviewDecision||(w.viewer.shouldMerge=!0,w.suggestedActionCategory=ee),(!t||w.viewer.isAuthor)&&e.isDraft&&(w.suggestedActionCategory=el),(!t||w.viewer.isAuthor)&&"REVIEW_REQUESTED"===e.reviewDecision&&(w.suggestedActionCategory=ea,w.viewer.waitingOnReviews=!0),(!t||w.viewer.isAuthor)&&"COMMENTED"===e.reviewDecision&&(w.suggestedActionCategory=en),(!t||w.viewer.isAuthor)&&w.failingCI&&(w.suggestedActionCategory=ei),(!t||w.viewer.isAuthor)&&w.hasConflicts&&(w.suggestedActionCategory=er),(!t||w.viewer.isAuthor)&&("CHANGES_REQUESTED"===e.reviewDecision||w.codeSuggestionsCount>0)&&(w.suggestedActionCategory=eo),t&&!w.viewer.isAuthor||null!=(m=e.reviews)&&m.length||(w.suggestedActionCategory=et,w.viewer.shouldAssignReviewer=!0),t&&null!=(f=e.reviews)&&f.some(e=>e.reviewer.id===t.id&&"REVIEW_REQUESTED"===e.state)&&(w.suggestedActionCategory=es,w.viewer.shouldReview=!0),w}),eh=(e,t,i)=>{var r,s,o,n,a,l,c,u,h,d,p,g;let m={pinned:W(M,"Pinned","thumbtack",(null==(r=null==i?void 0:i.bucketPriorityOverride)?void 0:r.pinned)??-1),readyToMerge:W(G,"Ready to Merge","code-merge",(null==(s=null==i?void 0:i.bucketPriorityOverride)?void 0:s.readyToMerge)??0),unassignedReviewers:W(H,"Unassigned Reviewers","user-plus",(null==(o=null==i?void 0:i.bucketPriorityOverride)?void 0:o.unassignedReviewers)??1),failingCI:W(V,"Failing CI","circle-x",(null==(n=null==i?void 0:i.bucketPriorityOverride)?void 0:n.failingCI)??2),conflicts:W(j,"Resolve Conflicts","triangle-exclamation",(null==(a=null==i?void 0:i.bucketPriorityOverride)?void 0:a.conflicts)??3),needsMyReview:W(Q,"Needs My Review","eye",(null==(l=null==i?void 0:i.bucketPriorityOverride)?void 0:l.needsMyReview)??4),changesRequested:W(z,"Suggested Changes","file-plus",(null==(c=null==i?void 0:i.bucketPriorityOverride)?void 0:c.changesRequested)??5),reviewerCommented:W(Y,"Reviewer Commented","comment",(null==(u=null==i?void 0:i.bucketPriorityOverride)?void 0:u.reviewerCommented)??6),waitingForReview:W(K,"Waiting for Review","circle-pause",(null==(h=null==i?void 0:i.bucketPriorityOverride)?void 0:h.waitingForReview)??7),draft:W(Z,"Draft","compass-drafting",(null==(d=null==i?void 0:i.bucketPriorityOverride)?void 0:d.draft)??8),other:W(J,"Other","ellipsis",(null==(p=null==i?void 0:i.bucketPriorityOverride)?void 0:p.other)??9),snoozed:W(X,"Snoozed","snooze",(null==(g=null==i?void 0:i.bucketPriorityOverride)?void 0:g.snoozed)??10)},f=eu(e,t,i).reduce((e,t)=>(e[t.uuid]=t,e),{});return e.forEach(e=>{let i=f[e.uuid],r=!0;if(i.viewer.snoozed){m[X].pullRequests.push(e);return}i.viewer.pinned&&m[M].pullRequests.push(e),t&&!i.viewer.isAuthor&&(!i.viewer.isAssignee||i.viewer.isReviewer)||i.isDraft||!i.viewer.canMerge||"MERGEABLE"!==i.mergeableState||e.reviewDecision&&"APPROVED"!==e.reviewDecision||(m[G].pullRequests.push(e),r=!1),i.viewer.shouldAssignReviewer&&(m[H].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&i.failingCI&&(m[V].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&i.hasConflicts&&(m[j].pullRequests.push(e),r=!1),i.viewer.shouldReview&&(m[Q].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&("CHANGES_REQUESTED"===i.reviewDecision||i.codeSuggestionsCount>0)&&(m[z].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&"COMMENTED"===i.reviewDecision&&(m[Y].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&"REVIEW_REQUESTED"===i.reviewDecision&&(m[K].pullRequests.push(e),r=!1),i.isDraft&&(m[Z].pullRequests.push(e),r=!1),r&&m[J].pullRequests.push(e)}),Object.values(m).forEach(e=>{e.pullRequests.sort((e,t)=>f[e.uuid].priority-f[t.uuid].priority)}),m},ed=e=>{let t={};return e.forEach(e=>{let i=e.repository.id;t[i]?t[i].pullRequests.push(e):t[i]={name:e.repository.name,priority:0,pullRequests:[e],id:i}}),S(t)},ep=e=>{let t="internal-no-assignees",i={[t]:{name:"No assignees",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{e.assignees&&e.assignees.length?e.assignees.forEach(t=>{let r=t.id;i[r]?i[r].pullRequests.push(e):i[r]={accountData:t,name:k(t,`Unknown Assignee ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:r}}):i[t].pullRequests.push(e)}),S(i)},eg=e=>{let t="internal-no-author",i={[t]:{name:"No author",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{if(e.author){let t=e.author.id;i[t]?i[t].pullRequests.push(e):i[t]={accountData:e.author,name:k(e.author,`Unknown Author ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:t}}else i[t].pullRequests.push(e)}),S(i)},em=e=>{let t="internal-no-reviewer",i={[t]:{name:"No reviewers",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{e.reviews&&e.reviews.length?e.reviews.forEach(t=>{let r=t.reviewer.id;i[r]?i[r].pullRequests.push(e):i[r]={accountData:t.reviewer,name:k(t.reviewer,`Unknown Reviewer ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:r}}):i[t].pullRequests.push(e)}),S(i)},ef=e=>{var t;return e.azureProject?[`${e.azureProject}-${e.azureOrganizationId}`]:(null==(t=e.providerData)?void 0:t.repositories.nodes.map(t=>`${e.provider}-${t.repositoryId}`))??[]},ew=(e,t)=>{let i="internal-no-workspace",r={[i]:{name:"No workspace",priority:-1,pullRequests:[],id:i,faIconName:"folder-xmark"}};if(t.length){let s=t.reduce((e,t)=>(ef(t).forEach(i=>{e[i]?e[i].push(t):e[i]=[t]}),e),{});e.forEach(e=>{let{provider:t}=q(e.uuid),o="github"===t?e.repository.graphQLId:e.repository.id,n="azure"===t?[`${t}-${o}`,`${e.repository.project}-${e.repository.owner.login}`]:[`${t}-${o}`],a=!1,l=n.reduce((e,t)=>s[t]?e.concat(s[t]):e,[]);null!=l&&l.length&&l.forEach(t=>{a=!0;let i=t.id;r[i]?r[i].pullRequests.push(e):r[i]={name:t.name,priority:0,pullRequests:[e],id:i,faIconName:"folder"}}),a||r[i].pullRequests.push(e)})}else r[i].pullRequests=e;return S(r)},ev=(e,t,i,r)=>{let s="internal-no-team",o={[s]:{name:"No team",priority:-1,pullRequests:[],id:s}};return r.length?e.forEach(e=>{var n,a,l;let c=!1,u=new Set;u.add(null==(n=e.author)?void 0:n.id),null==(a=e.assignees)||a.forEach(e=>u.add(e.id)),null==(l=e.reviews)||l.forEach(e=>u.add(e.reviewer.id)),r.forEach(r=>{var s;if(null==(s=r.members)?void 0:s.some(e=>{var r,s;let o=null==(s=null==(r=t[e.id])?void 0:r[i])?void 0:s.providerID;return o&&u.has(o)})){c=!0;let t=r.id;o[t]?o[t].pullRequests.push(e):o[t]={name:r.name,priority:0,pullRequests:[e],id:t,teamData:r}}}),c||o[s].pullRequests.push(e)}):o[s].pullRequests=e,S(o)},ey={};d(ey,{getPullRequestRank:()=>eb});var eb=(e,t,i)=>{var r,s,o;let n=0,a,l;return null==(r=e.reviews)||r.forEach(e=>{e.reviewer.id===t&&(a=e.state),"CHANGES_REQUESTED"===e.state?l="CHANGES_REQUESTED":"APPROVED"===e.state&&"CHANGES_REQUESTED"!==l&&(l="APPROVED")}),l||(l="REVIEW_REQUESTED"),(null==(s=e.author)?void 0:s.id)===t?n+=1e3:null!=(o=e.assignees)&&o.find(e=>e.id===t)?n+=900:"REVIEW_REQUESTED"===a?n+=800:i&&(n+=700),"APPROVED"===l?"MERGEABLE"===e.mergeableState?n+=100:"CONFLICTS"===e.mergeableState?n+=90:n+=80:"CHANGES_REQUESTED"==l&&(n+=70),n},eC={};d(eC,{default:()=>ek});var ek={},eS={};d(eS,{default:()=>eR});var eR={},eP={};d(eP,{default:()=>eA});var eA={},eI={azureDevOps:m,bitbucket:w,bitbucketServer:y,github:ey,gitlab:eC,gitProvider:D,jira:eS,trello:eP}},7304:(e,t,i)=>{i.d(t,{V:()=>c,Zd:()=>u,dJ:()=>a,f0:()=>n,g5:()=>l,hV:()=>o});var r=i(4135),s=i(3934);let o=new Map([["git:for-each-ref:worktreePath","2.23"],["git:ignoreRevsFile","2.23"],["git:merge-tree","2.33"],["git:push:force-if-includes","2.30.0"],["git:rev-parse:end-of-options","2.30"],["git:stash:push:pathspecs","2.13.2"],["git:stash:push:staged","2.35.0"],["git:stash:push:stdin","2.30.0"],["git:status:find-renames","2.18"],["git:status:porcelain-v2","2.11"],["git:worktrees","2.17.0"],["git:worktrees:delete","2.17.0"],["git:worktrees:list","2.7.6"]]);function n(e){switch(e){case"generate-changelog":case"generate-create-pullRequest":return!0;default:return!1}}function a(e){switch(e){case"launchpad":case"startWork":case"associateIssueWithBranch":case"explain-changes":case"generate-create-cloudPatch":case"generate-create-codeSuggestion":case"generate-stashMessage":return!0;default:return!1}}let l=["graph"];function c(e){return"graph"===e?"Commit Graph":(0,s.ZH)(e)}function u(e){let t=e?.usages;if(!t?.length)return"eligible";let i=(new Date(t[t.length-1].expiresOn).getTime()-new Date().getTime())/36e5;return t.length<=r.Kt&&i>0&&i<24*r.tY?"active":"expired"}},7335:(e,t,i)=>{i.d(t,{B9:()=>PullRequest,Q6:()=>f,c7:()=>y,dq:()=>m,e0:()=>v,gI:()=>w,r0:()=>g});var r,s,o,n,a,l=i(9703),c=i(4941),u=i(4499),h=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};function g(e){return e instanceof PullRequest}let PullRequest=class PullRequest{constructor(e,t,i,r,s,o,n,a,l,c,u,h,d,p,g,m,f,w,v,y,b,C,k,S,R,P,A){this.provider=e,this.author=t,this.id=i,this.nodeId=r,this.title=s,this.url=o,this.repository=n,this.state=a,this.createdDate=l,this.updatedDate=c,this.closedDate=u,this.mergedDate=h,this.mergeableState=d,this.viewerCanUpdate=p,this.refs=g,this.isDraft=m,this.additions=f,this.deletions=w,this.commentsCount=v,this.thumbsUpCount=y,this.reviewDecision=b,this.reviewRequests=C,this.latestReviews=k,this.assignees=S,this.statusCheckRollupState=R,this.project=P,this.version=A}type="pullrequest";get closed(){return"closed"===this.state}get formattedDate(){return"absolute"===l.m.instance.PullRequestDateFormatting.dateStyle?this.formatDate(l.m.instance.PullRequestDateFormatting.dateFormat):this.formatDateFromNow()}formatDate(e){return(0,c.Yq)(this.mergedDate??this.closedDate??this.updatedDate,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,c.PI)(this.mergedDate??this.closedDate??this.updatedDate)}formatClosedDate(e){return null==this.closedDate?"":(0,c.Yq)(this.closedDate,e??"MMMM Do, YYYY h:mma")}formatClosedDateFromNow(){return null==this.closedDate?"":(0,c.PI)(this.closedDate)}formatMergedDate(e){return null==this.mergedDate?"":(0,c.Yq)(this.mergedDate,e??"MMMM Do, YYYY h:mma")??""}formatMergedDateFromNow(){return null==this.mergedDate?"":(0,c.PI)(this.mergedDate)}formatUpdatedDate(e){return(0,c.Yq)(this.updatedDate,e??"MMMM Do, YYYY h:mma")??""}formatUpdatedDateFromNow(){return(0,c.PI)(this.updatedDate)}};p([(0,u.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatDate",1),p([(0,u.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatClosedDate",1),p([(0,u.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatMergedDate",1),p([(0,u.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatUpdatedDate",1);var m=((r=m||{}).Approved="Approved",r.ChangesRequested="ChangesRequested",r.ReviewRequired="ReviewRequired",r),f=((s=f||{}).Unknown="Unknown",s.Mergeable="Mergeable",s.Conflicting="Conflicting",s.FailingChecks="FailingChecks",s.BlockedByPolicy="BlockedByPolicy",s),w=((o=w||{}).Success="success",o.Pending="pending",o.Failed="failed",o),v=((n=v||{}).Merge="merge",n.Squash="squash",n.Rebase="rebase",n),y=((a=y||{}).Approved="APPROVED",a.ChangesRequested="CHANGES_REQUESTED",a.Commented="COMMENTED",a.Dismissed="DISMISSED",a.Pending="PENDING",a.ReviewRequested="REVIEW_REQUESTED",a)},7359:function(e,t,i){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};let s=i(4434),o=r(i(5423)),n=r(i(9219)),a=o.default("agent-base");function l(){let{stack:e}=Error();return"string"==typeof e&&e.split("\n").some(e=>-1!==e.indexOf("(https.js:")||-1!==e.indexOf("node:https:"))}function c(e,t){return new c.Agent(e,t)}var u=c||(c={});let Agent=class Agent extends s.EventEmitter{constructor(e,t){super();let i=t;"function"==typeof e?this.callback=e:e&&(i=e),this.timeout=null,i&&"number"==typeof i.timeout&&(this.timeout=i.timeout),this.maxFreeSockets=1,this.maxSockets=1,this.maxTotalSockets=1/0,this.sockets={},this.freeSockets={},this.requests={},this.options={}}get defaultPort(){return"number"==typeof this.explicitDefaultPort?this.explicitDefaultPort:l()?443:80}set defaultPort(e){this.explicitDefaultPort=e}get protocol(){return"string"==typeof this.explicitProtocol?this.explicitProtocol:l()?"https:":"http:"}set protocol(e){this.explicitProtocol=e}callback(e,t,i){throw Error('"agent-base" has no default implementation, you must subclass and override `callback()`')}addRequest(e,t){let i=Object.assign({},t);"boolean"!=typeof i.secureEndpoint&&(i.secureEndpoint=l()),null==i.host&&(i.host="localhost"),null==i.port&&(i.port=i.secureEndpoint?443:80),null==i.protocol&&(i.protocol=i.secureEndpoint?"https:":"http:"),i.host&&i.path&&delete i.path,delete i.agent,delete i.hostname,delete i._defaultAgent,delete i.defaultPort,delete i.createConnection,e._last=!0,e.shouldKeepAlive=!1;let r=!1,s=null,o=i.timeout||this.timeout,c=t=>{e._hadError||(e.emit("error",t),e._hadError=!0)},u=e=>{r||(null!==s&&(clearTimeout(s),s=null),c(e))};if("function"!=typeof this.callback){c(Error("`callback` is not defined"));return}this.promisifiedCallback||(this.callback.length>=3?(a("Converting legacy callback function to promise"),this.promisifiedCallback=n.default(this.callback)):this.promisifiedCallback=this.callback),"number"==typeof o&&o>0&&(s=setTimeout(()=>{s=null,r=!0;let e=Error(`A "socket" was not created for HTTP request before ${o}ms`);e.code="ETIMEOUT",c(e)},o)),"port"in i&&"number"!=typeof i.port&&(i.port=Number(i.port));try{a("Resolving socket for %o request: %o",i.protocol,`${e.method} ${e.path}`),Promise.resolve(this.promisifiedCallback(e,i)).then(t=>{if(!r){if(null!=s&&(clearTimeout(s),s=null),t&&"function"==typeof t.addRequest){a("Callback returned another Agent instance %o",t.constructor.name),t.addRequest(e,i);return}if(t){t.once("free",()=>{this.freeSocket(t,i)}),e.onSocket(t);return}c(Error(`no Duplex stream was returned to agent-base for \`${e.method} ${e.path}\``))}},u)}catch(e){Promise.reject(e).catch(u)}}freeSocket(e,t){a("Freeing socket %o %o",e.constructor.name,t),e.destroy()}destroy(){a("Destroying agent %o",this.constructor.name)}};u.Agent=Agent,u.prototype=u.Agent.prototype,e.exports=c},7473:(e,t,i)=>{i.d(t,{k:()=>CommitFileNode,p:()=>CommitFileNodeBase});var r=i(1398),s=i(1518),o=i(5030),n=i(3088),a=i(2775),l=i(4301),c=i(377),u=i(6006),h=i(8710),d=i(4252),p=i(9642),g=i(6729);let CommitFileNodeBase=class CommitFileNodeBase extends g.p{constructor(e,t,i,r,s,o){super(e,n.nk.fromFile(r,s.repoPath,s.sha),t,i,r),this.commit=s,this.options=o,this.updateContext({commit:s,file:r}),this._uniqueId=(0,p.pF)(e,this.context)}get id(){return this._uniqueId}toClipboard(){return this.file.path}get priority(){return 0}get ref(){return this.commit}getChildren(){return[]}async getTreeItem(){if(null==this.commit.file){let e=await this.commit.getCommitForFile(this.file);if(null==e){let e=await this.view.container.git.commits(this.repoPath).getLogForPath(this.file.path,this.commit.sha,{limit:2});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.id=this.id,e.contextValue=this.contextValue,e.description=this.description,"type"===this.view.config.files.icon)e.resourceUri=r.Uri.from({scheme:s.xB.Git,authority:"gitlens-view",path:this.uri.path,query:JSON.stringify({path:this.uri.fsPath,ref:this.uri.sha,decoration:(0,h.E)("commit-file",{status:this.file.status}).toString()})});else{e.resourceUri=(0,h.E)("commit-file",{status:this.file.status});let t=(0,a.O)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,u.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,u.HS)("images","light",t))}}return e.tooltip=(0,d.h)(this.file),e.command=this.getCommand(),this._label=void 0,e}get contextValue(){return this.commit.isUncommitted?this.commit.isUncommittedStaged?`${p.U0.File}+staged`:`${p.U0.File}+unstaged`:`${p.U0.File}+committed${this.options?.branch?.current?"+current":""}${this.options?.branch?.current&&this.options.branch.sha===this.commit.ref?"+HEAD":""}${this.options?.unpublished?"+unpublished":""}`}get description(){return o.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,c.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=o.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}getCommand(){let e;return e=this.commit.lines.length?this.commit.lines[0].line-1:this.options?.selection?.active.line??0,(0,l.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{commit:this.commit,uri:n.nk.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}})}};let CommitFileNode=class CommitFileNode extends CommitFileNodeBase{constructor(e,t,i,r,s){super("commit-file",e,t,i,r,s)}}},7488:(e,t,i)=>{i.d(t,{TF:()=>n,_c:()=>a,vt:()=>o});var r=i(9703),s=i(8191);function o(e,t,i){return(0,s.b)({command:"tag",state:{subcommand:"create",repo:e,reference:t,name:i}})}function n(e,t){return(0,s.b)({command:"tag",state:{subcommand:"delete",repo:e,references:t}})}function a(e,t){return r.m.instance.views.revealTag(e,t)}},7524:(e,t,i)=>{i.d(t,{Xu:()=>PullRequestNode,k0:()=>b,_u:()=>C});var r=i(1398),s=i(3088),o=i(2995),n=i(1920),a=i(8811),l=i(9842),c=i(9317),u=i(8554),h=i(4301),d=i(3934),p=i(8710),g=i(4063),m=i(9642),f=i(6339),w=i(6875);let CodeSuggestionsNode=class CodeSuggestionsNode extends g.l{constructor(e,t,i,r){super("drafts-code-suggestions",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.pullRequest=r,this._uniqueId=(0,m.pF)(this.type,this.context)}get id(){return this._uniqueId}async getChildren(){if(null==this.children){let e,t=await this.getSuggestedChanges();t?.length&&(t.sort((e,t)=>t.updatedAt.getTime()-e.updatedAt.getTime()),e=t.map(e=>new w.e(this.uri,this.view,this,e))),e?.length||(e=[new f.S2(this.view,this,"No code suggestions")]),this.children=e}return this.children}getTreeItem(){let e=new r.TreeItem("Code Suggestions",r.TreeItemCollapsibleState.Collapsed);return e.contextValue=m.U0.CodeSuggestions,e}async getSuggestedChanges(){let e=this.view.container.git.getRepository(this.repoPath);return null==e?[]:await this.view.container.drafts.getCodeSuggestions(this.pullRequest,e)}};var v=i(7763),y=i(6792);let PullRequestNode=class PullRequestNode extends g.l{constructor(e,t,i,r,n){let a,l;"string"==typeof r?l=r:(l=r.repoPath,a=r),super("pullrequest",s.nk.fromRepoPath(l),e,t),this.parent=t,this.pullRequest=i,this.options=n,null!=a&&(a instanceof o.Z?this.updateContext({branch:a}):this.updateContext({commit:a})),this.updateContext({pullRequest:i}),this._uniqueId=(0,m.pF)(this.type,this.context),this.repoPath=l}repoPath;get id(){return this._uniqueId}toClipboard(e){let t=this.getUrl();return"markdown"===e?`[${this.pullRequest.id}](${t}) ${this.pullRequest.title}`:t}getUrl(){return this.pullRequest.url}get baseRef(){if(this.pullRequest.refs?.base!=null)return{refType:"branch",repoPath:this.repoPath,ref:this.pullRequest.refs.base.sha,name:this.pullRequest.refs.base.branch,remote:!0}}get ref(){if(this.pullRequest.refs?.head!=null)return{refType:"branch",repoPath:this.repoPath,ref:this.pullRequest.refs.head.sha,name:this.pullRequest.refs.head.branch,remote:!0}}async getChildren(){if(null==this.children){let e=await b(this.view,this,this.pullRequest,this.repoPath);this.children=e}return this.children}getTreeItem(){let e=this.pullRequest.refs?.base!=null&&null!=this.pullRequest.refs.head,t=new r.TreeItem(`#${this.pullRequest.id}: ${this.pullRequest.title}`,e?this.options?.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=m.U0.PullRequest,this.pullRequest.refs?.base!=null&&null!=this.pullRequest.refs.head&&(t.contextValue+="+refs"),t.description=`${this.pullRequest.state}, ${this.pullRequest.formatDateFromNow()}`,t.iconPath=(0,a.pr)(this.pullRequest),t.tooltip=C(this.pullRequest,this.context),t}};async function b(e,t,i,s){let o;if(null==(o=null==s?await (0,l.sY)(e.container,i,{promptIfNeeded:!0}):"string"==typeof s?e.container.git.getRepository(s):s))return[new f.S2(e,t,`Unable to locate repository '${i.refs?.head.owner??i.repository.owner}/${i.refs?.head.repo??i.repository.repo}'.`)];let a=o.path,g=(0,c.tI)(a,i.refs),m=(0,c.Yv)(i);if(!await (0,l.Jp)(i,o,{silent:!0}))return[new f.RK(e,t,(0,h.gu)("gitlens.views.addPullRequestRemote","Add Pull Request Remote...",t,i,o),`Unable to find a remote for '${m.provider.repoDomain}'`,void 0,`Click to add a remote for '${m.provider.repoDomain}'`,new r.ThemeIcon("question",new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor")),void 0,(0,p.E)("remote",{state:"missing"}))];let w=await (0,l.td)(i,o,{promptMessage:`Unable to open details for PR #${i.id} because of a missing remote.`},g);if(!w?.right)return[new f.S2(e,t,"No commits could be found.")];let b={ref1:g.base.ref,ref2:g.head.ref,range:(0,u.Xn)(g.base.ref,g.head.ref,"..")};return[new v.V(e,t,a,"Commits",{query:(0,n.R6)(e.container,a,b.range),comparison:b},{autolinks:!1,expand:!1,description:(0,d.td)("commit",w?.right??0)}),new CodeSuggestionsNode(e,t,a,i),new y.o(e,t,a,b.ref1,b.ref2,()=>(0,n.Hn)(e.container,a,(0,u.Xn)(b.ref1,b.ref2,"..."),!1),void 0,{expand:!0,timeout:!1})]}function C(e,t){let i=new r.MarkdownString("",!0);i.supportHtml=!0,i.isTrusted=!0,t?.commit!=null&&i.appendMarkdown(`Commit \`$(git-commit) ${t.commit.shortSha}\` was introduced by $(git-pull-request) PR #${e.id}

`);let s=` "Open Pull Request \\#${e.id} on ${e.provider.name}"`;return i.appendMarkdown(`${(0,a.xu)(e)} [**${e.title.trim()}**](${e.url}${s}) \\
[${t?.idPrefix??""}#${e.id}](${e.url}${s}) by [@${e.author.name}](${e.author.url} "Open @${e.author.name} on ${e.provider.name}") was ${e.state.toLowerCase()} ${e.formatDateFromNow()}`),t?.codeSuggestionsCount!=null&&t.codeSuggestionsCount>0&&i.appendMarkdown(`

$(gitlens-code-suggestion) ${(0,d.td)("code suggestion",t.codeSuggestionsCount)}`),i}},7528:(e,t,i)=>{i.d(t,{R3:()=>a,TF:()=>l,WQ:()=>o,_c:()=>c,hd:()=>n});var r=i(9703),s=i(8191);function o(e,t,i,r){return(0,s.b)({command:"remote",confirm:r?.confirm,state:{repo:e,subcommand:"add",name:t,url:i,flags:r?.fetch?["-f"]:void 0,reveal:r?.reveal}})}async function n(e,t){if("string"==typeof e){let t=r.m.instance.git.getRepository(e);if(null==t)return;e=t}await e.fetch({remote:t})}async function a(e,t){return(0,s.b)({command:"remote",state:{repo:e,subcommand:"prune",remote:t}})}async function l(e,t){return(0,s.b)({command:"remote",state:{repo:e,subcommand:"remove",remote:t}})}function c(e,t){return r.m.instance.views.revealRemote(e,t)}},7640:(e,t,i)=>{i.d(t,{DN:()=>ViewBase,lm:()=>w});var r=i(1398),s=i(1681),o=i(4301),n=i(1078),a=i(4342),l=i(3489),c=i(6851),u=i(7005),h=i(5419),d=i(5576),p=i(9642),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let ViewBase=class ViewBase{constructor(e,t,i,s,o){if(this.container=e,this.type=t,this.name=i,this.trackingFeature=s,this.grouped=o,this.description=this.getViewDescription(),this.disposables.push(this._onDidChangeNodesCheckedState,this._onDidChangeNodeCollapsibleState,this._onDidChangeSelection,this._onDidChangeTreeData,this._onDidChangeVisibility,this._onDidInitialize,(0,l.Oo)(e.onReady)(this.onReady,this)),this.container.debugging||n.H.get("debug")){let e=function(e,t,i){null==e.tooltip&&(e.tooltip=new r.MarkdownString(null!=e.label&&"string"!=typeof e.label?e.label.label:e.label??"")),"string"==typeof e.tooltip?e.tooltip=`${e.tooltip}

---
context: ${e.contextValue}
node: ${t.toString()}${null!=i?`
parent: ${i.toString()}`:""}`:e.tooltip.appendMarkdown(`

---

context: \`${e.contextValue}\`\\
node: \`${t.toString()}\`${null!=i?`\\
parent: \`${i.toString()}\``:""}`)},t=this.getTreeItem;this.getTreeItem=async function(i){let r=await t.apply(this,[i]);return null==i.resolveTreeItem&&e(r,i,i.getParent()),r};let i=this.resolveTreeItem;this.resolveTreeItem=async function(t,r,s){return e(t=await i.apply(this,[t,r,s]),r,r.getParent()),t}}this.disposables.push(...this.registerCommands())}is(e){return this.type===e}isAny(...e){return e.includes(this.type)}_disposed=!1;get disposed(){return this._disposed}get id(){return`gitlens.views.${this.type}`}_onDidChangeSelection=new r.EventEmitter;get onDidChangeSelection(){return this._onDidChangeSelection.event}_onDidChangeNodesCheckedState=new r.EventEmitter;get onDidChangeNodesCheckedState(){return this._onDidChangeNodesCheckedState.event}_onDidChangeNodeCollapsibleState=new r.EventEmitter;get onDidChangeNodeCollapsibleState(){return this._onDidChangeNodeCollapsibleState.event}_onDidChangeTreeData=new r.EventEmitter;get onDidChangeTreeData(){return this._onDidChangeTreeData.event}_onDidChangeVisibility=new r.EventEmitter;get onDidChangeVisibility(){return this._onDidChangeVisibility.event}_onDidInitialize=new r.EventEmitter;disposables=[];root;tree;initialized=!1;_lastKnownLimits=new Map;dispose(){this._disposed=!0,this._nodeState?.dispose(),this._nodeState=void 0,this.root?.dispose(),r.Disposable.from(...this.disposables).dispose()}onReady(){this.initialize({canSelectMany:this.canSelectMany,showCollapseAll:!this.grouped&&this.showCollapseAll}),queueMicrotask(()=>this.onConfigurationChanged())}get canReveal(){return!0}get canSelectMany(){return!1}_nodeState;get nodeState(){return null==this._nodeState&&(this._nodeState=new ViewNodeState),this._nodeState}get showCollapseAll(){return!0}filterConfigurationChanged(e){return!!n.H.changed(e,"views")&&!!(n.H.changed(e,`views.${this.configKey}`)||n.H.changed(e,s.md.map(e=>`views.${e}`)))}get badge(){return this.tree?.badge}set badge(e){null!=this.tree&&(this.tree.badge=e)}_title;get title(){return this._title}set title(e){this._title=e,null!=this.tree&&(this.tree.title=e)}_description;get description(){return this._description}set description(e){this._description=e,null!=this.tree&&(this.tree.description=e)}_message;get message(){return this._message}set message(e){this._message=e,null!=this.tree&&(this.tree.message=e)}getQualifiedCommand(e){return`gitlens.views.${this.type}.${e}`}onConfigurationChanged(e){null!=e&&null!=this.root&&this.refresh(!0)}initialize(e){this.tree=r.window.createTreeView(this.grouped?"gitlens.views.scm.grouped":this.id,{...e,treeDataProvider:this}),this.disposables.push(n.H.onDidChange(e=>{this.filterConfigurationChanged(e)&&(this._config=void 0,this.onConfigurationChanged(e))},this),this.tree,this.tree.onDidChangeSelection((0,c.s)(this.onSelectionChanged,250),this),this.tree.onDidChangeVisibility((0,c.s)(this.onVisibilityChanged,250),this),this.tree.onDidChangeCheckboxState(this.onCheckboxStateChanged,this),this.tree.onDidCollapseElement(this.onElementCollapsed,this),this.tree.onDidExpandElement(this.onElementExpanded,this)),null!=this._title?this.tree.title=this._title:this._title=this.tree.title,null!=this._description&&(this.tree.description=this._description),null!=this._message&&(this.tree.message=this._message)}ensureRoot(e=!1){return(null==this.root||e)&&(this.root?.dispose(),this.root=this.getRoot()),this.root}getChildren(e){if(null!=e)return e.getChildren();let t=this.ensureRoot().getChildren();return this.initialized||((0,d.yL)(t)?t.then(()=>{this.initialized||(this.initialized=!0,setTimeout(()=>this._onDidInitialize.fire(),1))}):(this.initialized=!0,setTimeout(()=>this._onDidInitialize.fire(),1))),t}getParent(e){return e.getParent()}getTreeItem(e){return e.getTreeItem()}getViewDescription(e){return`${this.grouped?`${this.name.toLocaleLowerCase()} `:""}${null!=e?`(${e})`:""}`||void 0}resolveTreeItem(e,t,i){return t.resolveTreeItem?.(e,i)??e}onElementCollapsed(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Collapsed})}onElementExpanded(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Expanded})}onCheckboxStateChanged(e){try{for(let[t,i]of e.items){if(null==t.id)throw Error("Id is required for checkboxes");t.storeState("checked",i,!0)}}finally{this._onDidChangeNodesCheckedState.fire(e)}}onSelectionChanged(e){this._onDidChangeSelection.fire(e),this.notifySelections()}onVisibilityChanged(e){e.visible&&this.container.usage.track(`${this.trackingFeature}:shown`).catch(),this._onDidChangeVisibility.fire(e),e.visible&&this.notifySelections()}notifySelections(){let e=this.selection?.[0];null!=e&&((e.is("commit")||e.is("stash")||e.is("file-commit")||e.is("commit-file")||e.is("stash-file"))&&this.container.events.fire("commit:selected",{commit:e.commit,interaction:"passive",preserveFocus:!0,preserveVisibility:!0},{source:this.id}),(e.is("file-commit")||e.is("commit-file")||e.is("stash-file"))&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}get activeSelection(){if(null!=this.tree&&null!=this.root)return this.tree.selection[0]}get selection(){return null==this.tree||null==this.root?[]:this.tree.selection}get visible(){return this.tree?.visible??!1}async findNode(e,t){let i=(0,h.dQ)();async function r(){try{return await this.findNodeCoreBFS(e,this.ensureRoot(),t?.allowPaging??!1,t?.canTraverse,t?.maxDepth??2,t?.token)}catch(e){u.Vy.error(e,i);return}}return this.initialized?r.call(this):(this.show({preserveFocus:!0}),new Promise(e=>(0,l.Oo)(this._onDidInitialize.event)(()=>e(r.call(this)),this)))}async findNodeCoreBFS(e,t,i,r,s,o){let a,l,c=[t,void 0],u=n.H.get("advanced.maxListItems"),h=0;for(;c.length>1&&!o?.isCancellationRequested;){if(null==(a=c.shift())){if(h++,c.push(void 0),h>s)break;continue}if(e(a))return a;if(null!=r){let e=r(a);if((0,d.yL)(e)){if(!await e)continue}else if(!e)continue}if(0!==(l=await a.getChildren()).length){for(;null!=a&&!(0,p.DQ)(a);)a=await a.getSplattedChild?.();if(null!=a&&(0,p.DQ)(a)){let t=l.find(e);if(null!=t)return t;if(i&&a.hasMore)for(;;){if(o?.isCancellationRequested)return;if(await this.loadMoreNodeChildren(a,u),null!=(t=(await (0,d.nZ)(Promise.resolve(a.getChildren()),6e4,o,{onDidCancel:e=>e([])})).find(e)))return t;if(!a.hasMore)break}continue}c.push(...l)}}}async ensureRevealNode(e,t){let i=[],r=e;for(;null!=r;)i.push(r),r=r.getParent();for(let e of(i.length>1&&i.pop(),i.reverse()))try{await this.reveal(e,t)}catch{}}async refresh(e=!1){e&&this.nodeState.reset(),await this.root?.refresh?.(e),this.triggerNodeChange()}async refreshNode(e,t=!1,i=!1){let r=await e.refresh?.(t);(i||!0!==r)&&this.triggerNodeChange(e)}async reveal(e,t){if(null!=this.tree)try{await this.tree.reveal(e,t)}catch(e){u.Vy.error(e)}}async show(e){let t=(0,h.dQ)();try{let t=`${this.grouped?"gitlens.views.scm.grouped":this.id}.focus`;this.initialized||((0,o.S4)(t,e),await new Promise(e=>{(0,l.Oo)(this._onDidInitialize.event)(()=>e(),this)})),await (0,o.S4)(t,e)}catch(e){u.Vy.error(e,t)}}getNodeLastKnownLimit(e){return this._lastKnownLimits.get(e.id)}async loadMoreNodeChildren(e,t,i,r){null!=i&&await this.reveal(i,{select:!0}),await e.loadMore(t,r),this._lastKnownLimits.set(e.id,e.limit)}resetNodeLastKnownLimit(e){this._lastKnownLimits.delete(e.id)}triggerNodeChange(e){this._onDidChangeTreeData.fire(null!=e&&e!==this.root?e:void 0)}_config;get config(){if(null==this._config){let e={...n.H.get("views")};for(let t of s.ZD)delete e[t];this._config={...e,...n.H.get("views")[this.configKey]}}return this._config}};f([(0,a.Rm)({args:{0:"<function>",1:e=>`options=${JSON.stringify({...e,canTraverse:void 0,token:void 0})}`}})],ViewBase.prototype,"findNode",1),f([(0,a.Yz)()],ViewBase.prototype,"refresh",1),f([(0,a.Yz)({args:{0:e=>e.toString()}})],ViewBase.prototype,"refreshNode",1),f([(0,a.Rm)({args:{0:e=>e.toString()}})],ViewBase.prototype,"reveal",1),f([(0,a.Rm)()],ViewBase.prototype,"show",1),f([(0,a.Yz)({args:{0:e=>e.toString(),2:e=>e?.toString()}})],ViewBase.prototype,"loadMoreNodeChildren",1),f([(0,a.Yz)({args:{0:e=>e.toString()},singleLine:!0})],ViewBase.prototype,"resetNodeLastKnownLimit",1),f([(0,a.Yz)({args:{0:e=>e?.toString()}})],ViewBase.prototype,"triggerNodeChange",1);let ViewNodeState=class ViewNodeState{_store;_stickyStore;dispose(){this.reset(),this._stickyStore?.clear(),this._stickyStore=void 0}reset(){this._store?.clear(),this._store=void 0}delete(e,t){for(let i of[this._store,this._stickyStore])if(null!=i)for(let[r,s]of i)r.startsWith(e)&&(s.delete(t),0===s.size&&i.delete(r))}deleteState(e,t){if(null==t)this._store?.delete(e),this._stickyStore?.delete(e);else for(let i of[this._store,this._stickyStore]){if(null==i)continue;let r=i.get(e);null!=r&&(r.delete(t),0===r.size&&i.delete(e))}}get(e,t){let i=new Map;for(let r of[this._store,this._stickyStore])if(null!=r)for(let[s,o]of r)s.startsWith(e)&&o.has(t)&&i.set(s,o.get(t));return i}getState(e,t){return this._stickyStore?.get(e)?.get(t)??this._store?.get(e)?.get(t)}storeState(e,t,i,r){let s;r?(null==this._stickyStore&&(this._stickyStore=new Map),s=this._stickyStore):(null==this._store&&(this._store=new Map),s=this._store);let o=s.get(e);null!=o?o.set(t,i):s.set(e,new Map([[t,i]]))}};function w(e,t){if(!e?.length)return;let i=t?.length?e.filter(e=>!t.includes(e)):[...e];if(i.length)if(i.length>1e3)setTimeout(()=>{for(let e of i)e.dispose()},500);else for(let e of i)e.dispose()}},7697:(e,t,i)=>{i.d(t,{DR:()=>f,Lr:()=>m,XM:()=>n,Yv:()=>C,a0:()=>l,cc:()=>a,cg:()=>c,oQ:()=>k});var r=i(6520),s=i(7335);let o=/\.visualstudio\.com$/;function n(e){return"Completed"===e||"Resolved"===e||"Removed"===e}function a(e){switch(e){case"Resolved":case"Completed":case"Removed":return"closed";default:return"opened"}}function l(e){switch(e){case"abandoned":return"closed";case"completed":return"merged";default:return"opened"}}function c(e){return"opened"!==l(e)}function u(e){return e.hostname.split(".")[0]}function h(e){return e.pathname.split("/")[1]}function d(e){return o.test(e.hostname)?u(e):h(e)}let p=/([^/]+)\/_git\/([^/]+)/,g=/([^/]+)\/([^/]+)\/_git\/([^/]+)/;function m(e){let t="string"==typeof e?new URL(e):e;if(o.test(t.hostname)){let e=u(t),i=p.exec(t.pathname);if(null==i)throw Error(`Invalid VSTS URL: ${t.toString()}`);let[,r,s]=i;return[e,r,s]}let i=g.exec(t.pathname);if(null==i)throw Error(`Invalid Azure URL: ${t.toString()}`);let[,r,s,n]=i;return[r,s,n]}function f(e){let t=new URL(e.url),i=new URL(t.origin).toString(),r=`${e.repository.project.name}/_git/${e.repository.name}`;if(o.test(t.hostname))return`${i}/${r}/pullrequest/${e.pullRequestId}`;let s=h(t);return`${i}/${s}/${r}/pullrequest/${e.pullRequestId}`}function w(e){switch(e){case 10:case 5:return s.c7.Approved;case 0:default:return s.c7.ReviewRequested;case -5:case -10:return s.c7.ChangesRequested}}function v(e){return{isCodeOwner:void 0,reviewer:{avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url},state:w(e.vote??0)}}function y(e){return e.startsWith("refs/heads/")?e.replace("refs/heads/",""):e}function b(e,t){return{avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url}}function C(e,t,i,o){let n=new URL(e.url);return new s.B9(t,b(e.createdBy,"pullRequest"),e.pullRequestId.toString(),e.pullRequestId.toString(),e.title,f(e),{owner:d(n),repo:e.repository.name,id:e.repository.id,accessLevel:r.LI.Write},l(e.status),new Date(e.creationDate),new Date(e.closedDate||e.creationDate),e.closedDate?new Date(e.closedDate):void 0,e.closedDate&&"completed"===e.status?new Date(e.closedDate):void 0,function(e){switch(e){case"conflicts":return s.Q6.Conflicting;case"failure":return s.Q6.FailingChecks;case"rejectedByPolicy":return s.Q6.BlockedByPolicy;case"succeeded":return s.Q6.Mergeable;default:return s.Q6.Unknown}}(e.mergeStatus??"notSet"),void 0,{base:{branch:e.targetRefName?y(e.targetRefName):"",sha:e.lastMergeTargetCommit?.commitId??"",repo:e.repository.name,owner:d(n),exists:null!=e.targetRefName,url:e.repository.webUrl},head:{branch:e.sourceRefName?y(e.sourceRefName):"",sha:e.lastMergeSourceCommit?.commitId??"",repo:e.forkSource?.repository!=null?e.forkSource.repository.name:e.repository.name,owner:d(n),exists:null!=e.sourceRefName,url:e.forkSource?.repository!=null?e.forkSource.repository.webUrl:e.repository.webUrl},isCrossRepository:null!=e.forkSource},e.isDraft,void 0,void 0,void 0,void 0,function(e){let t=e.map(e=>w(e));return t.includes(s.c7.ChangesRequested)?s.dq.ChangesRequested:t.includes(s.c7.ReviewRequested)?s.dq.ReviewRequired:t.includes(s.c7.Approved)?s.dq.Approved:void 0}(e.reviewers?.filter(e=>e.isRequired).map(e=>e.vote??0)??[]),e.reviewers.filter(e=>null==e.vote||0===e.vote).map(e=>v(e)),e.reviewers.filter(e=>null!=e.vote&&0!==e.vote).map(e=>v(e)),e.reviewers.map(e=>({avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url})),void 0,{id:e.repository?.project?.id,name:o,resourceId:"",resourceName:i})}function k(e,t,i,s){return new r.m2(t,e.id.toString(),e.id.toString(),e.fields["System.Title"],e._links.html.href,new Date(e.fields["System.CreatedDate"]),new Date(e.fields["System.ChangedDate"]),n(s),a(s),b(e.fields["System.CreatedBy"],"issue"),null!=e.fields["System.AssignedTo"]?[b(e.fields["System.AssignedTo"],"issue")]:[],void 0,e.fields["Microsoft.VSTS.Common.ClosedDate"]?new Date(e.fields["Microsoft.VSTS.Common.ClosedDate"]):void 0,void 0,e.fields["System.CommentCount"],void 0,e.fields["System.Description"],i)}},7747:(e,t,i)=>{function r(e,t){if(null==e)return 0;let i=0;for(let r of e)(null==t||t(r))&&i++;return i}function*s(e,t){if(void 0===t)for(let t of e)null!=t&&(yield t);else for(let i of e)t(i)&&(yield i)}function*o(e,t){for(let i of e){let e=t(i);null!=e&&(yield e)}}function n(e,t){for(let i of e)if(t(i))return i}function a(e){return e[Symbol.iterator]().next().value}function*l(e,t){for(let i of e)yield*t(i)}function c(e){return l(e,e=>e)}function u(e,t){let i=Object.create(null);for(let r of e){let e=t(r),s=i[e];null==s?i[e]=[r]:s.push(r)}return i}function h(e,t,i){let r=new Map,s=i?.filterNullGroups??!1;for(let i of e){let e=t(i);if(null==e&&s)continue;let o=r.get(e);null==o?r.set(e,[i]):o.push(i)}return r}function d(e,t,i){let r=new Map;for(let s of e){let e=i(s);if(null==e)continue;let o=t(s),n=r.get(o);null==n?r.set(o,[e]):n.push(e)}return r}function p(e,t){let i=e[Symbol.iterator](),r=i.next();if(r.done)return"";let s=String(r.value);for(;!(r=i.next()).done;)s+=`${t}${r.value}`;return s}function g(e){let t;for(t of e);return t}function*m(e,t){for(let i of e)yield t(i)}function f(e,t){let i=Number.POSITIVE_INFINITY;if(null==t)for(let t of e)t<i&&(i=t);else for(let r of e){let e=t(r);e<i&&(i=e)}return i}function*w(e,t){let i=0;for(let r of e)i>=t&&(yield r),i++}function v(e,t){for(let i of e)if(null==t||t(i))return!0;return!1}function y(e,t){if(null==e)return 0;let i=0;if(null==t)for(let t of e)i+=t;else for(let r of e)i+=t(r);return i}function*b(...e){for(let t of e)if(null!=t)for(let e of t)yield e}function C(e,t,i){let r=new Map;for(let s of e){let e=t(s),o=r.get(e);if(void 0===o)r.set(e,s);else{let t=i(o,s);void 0!==t&&r.set(e,t)}}return r.values()}i.d(t,{$1:()=>a,$z:()=>u,Bq:()=>c,Fi:()=>h,HV:()=>g,I6:()=>n,KC:()=>b,R9:()=>w,Tj:()=>m,U9:()=>r,cz:()=>y,fA:()=>d,fj:()=>p,jk:()=>f,pD:()=>C,pb:()=>s,qI:()=>l,x1:()=>o,zN:()=>v})},7763:(e,t,i)=>{i.d(t,{V:()=>ResultsCommitsNode});var r=i(1398),s=i(3088),o=i(1974),n=i(5516),a=i(1078),l=i(3500),c=i(4342),u=i(7747),h=i(5576),d=i(9642),p=i(7335),g=i(4063),m=i(8811),f=i(4941);let AutolinkedItemNode=class AutolinkedItemNode extends d.eu{constructor(e,t,i,r,o){super("autolink",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.item=r,this.maybeEnriched=o,this._uniqueId=(0,d.pF)(`${this.type}+${r.id}`,this.context)}get id(){return this._uniqueId}async toClipboard(e){let t=await this.maybeEnriched;return"markdown"===e?`[${this.item.prefix??""}${this.item.id}](${this.item.url})${t?.title?` - ${t?.title}`:""}`:`${this.item.id}: ${t?.title??this.item.url}`}getUrl(){return this.item.url}getChildren(){return[]}getTreeItem(){let e=this.maybeEnriched,t=(0,h.yL)(e);if(t&&e.then(e=>{this.maybeEnriched=e,this.view.triggerNodeChange(this)}),t||null==e){let e=this.item,{provider:i}=e,s=new r.TreeItem(e.description??`Autolink ${e.prefix}${e.id}`,r.TreeItemCollapsibleState.None);return s.description=i?.name??"Custom",s.iconPath=new r.ThemeIcon(t?"loading~spin":null==e.type?"link":"pullrequest"===e.type?"git-pull-request":"issues"),s.contextValue=d.U0.AutolinkedItem,s.tooltip=new r.MarkdownString(`${e.description?`Autolinked ${e.description}`:`${null==e.type?"Autolinked":"pullrequest"===e.type?"Autolinked Pull Request":"Autolinked Issue"} ${e.prefix}${e.id}`} \\
[${e.url}](${e.url}${null!=e.title?` "${e.title}"`:""})`),s}let i=(0,f.PI)(e.closedDate??e.updatedDate??e.createdDate),s=new r.TreeItem(`${e.id}: ${e.title}`,r.TreeItemCollapsibleState.None);s.description=i,s.iconPath=(0,m.pr)(e),s.contextValue=`${d.U0.AutolinkedItem}+${"pullrequest"===e.type?"pr":"issue"}`;let o=` "Open ${"pullrequest"===e.type?"Pull Request":"Issue"} \\#${e.id} on ${e.provider.name}"`,n=new r.MarkdownString(`${(0,m.xu)(e)} [**${e.title.trim()}**](${e.url}${o}) \\
[#${e.id}](${e.url}${o}) was ${e.closed?"merged"===e.state?"merged":"closed":"opened"} ${i}`,!0);return n.supportHtml=!0,n.isTrusted=!0,s.tooltip=n,s}};var w=i(6339),v=i(7524);let y=0;let AutolinkedItemsNode=class AutolinkedItemsNode extends g.l{constructor(e,t,i,r,o){super("autolinks",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.log=r,this.expand=o,this._instanceId=y++,this.updateContext({autolinksId:String(this._instanceId)}),this._uniqueId=(0,d.pF)(this.type,this.context)}_instanceId;get id(){return this._uniqueId}async getChildren(){if(null==this.children){let e,t=[...this.log.commits.values()];if(t.length){let i=await this.view.container.git.remotes(this.repoPath).getBestRemoteWithProvider(),r=t.map(e=>e.message).join("\n"),[s]=await Promise.allSettled([this.view.container.autolinks.getEnrichedAutolinks(r,i).then(e=>null!=e?(0,h.sc)(e,void 0,250):void 0)]),o=(0,h.Ro)(s);o?.size&&(e=[...o.values()].map(([e,t])=>null!=e&&(0,p.r0)(e?.value)?new v.Xu(this.view,this,e.value,this.log.repoPath):new AutolinkedItemNode(this.view,this,this.repoPath,t,e?.value)))}e?.length||(e=[new w.S2(this.view,this,"No autolinked issues or pull requests could be found.")]),this.log.hasMore&&e.push(new w.cb(this.view,this.parent,e[e.length-1],{context:{expandAutolinks:!0},message:"Load more commits to search for autolinks"})),this.children=e}return this.children}getTreeItem(){let e=new r.TreeItem("Autolinked Issues and Pull Requests",this.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=d.U0.AutolinkedItems,e}};var b=i(2199),C=i(4488),k=i(3957),S=i(6792),R=i(4644),P=Object.defineProperty,A=Object.getOwnPropertyDescriptor;let ResultsCommitsNode=class ResultsCommitsNode extends d.eu{constructor(e,t,i,r,o,n,a){super("results-commits",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._label=r,this._results=o,null!=o.direction&&this.updateContext({branchStatusUpstreamType:o.direction}),this._uniqueId=(0,d.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this),this._options={autolinks:!0,expand:!0,...n},null!=a&&(this.splatted=a)}limit;_options;get id(){return this._uniqueId}get ref1(){return this._results.comparison?.ref1}get ref2(){return this._results.comparison?.ref2}get isComparisonFiltered(){return this.context.comparisonFiltered}_onChildrenCompleted;async getChildren(){this._onChildrenCompleted?.cancel(),this._onChildrenCompleted=(0,h.v6)();let{log:e}=await this.getCommitsQueryResults();if(null==e)return this._onChildrenCompleted?.fulfill(),[new w.S2(this.view,this,"No results found")];let[t]=await Promise.all([this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath)]),i=[];this._options.autolinks&&i.push(new AutolinkedItemsNode(this.view,this,this.uri.repoPath,e,this._expandAutolinks)),this._expandAutolinks=!1,this._results.comparison?.range&&this.view.config.showComparisonContributors&&i.push(new C.j(this.uri,this.view,this,this.view.container.git.getRepository(this.uri.repoPath),{icon:!1,ref:this._results.comparison?.range,stats:this.view.config.showContributorsStatistics}));let{files:r}=this._results;null==r||this.isComparisonFiltered||i.push(new S.o(this.view,this,this.uri.repoPath,r.ref1,r.ref2,r.query,this._results.direction,{expand:!1}));let s={expand:this._options.expand&&1===e.count};return i.push(...(0,k.h)((0,u.Tj)(e.commits.values(),e=>(0,o.kk)(e)?new R.m(this.view,this,e,{icon:!0}):new b.e(this.view,this,e,void 0,void 0,t,s)),this,void 0,{show:e.count>1})),e.hasMore&&i.push(new w.cb(this.view,this,i[i.length-1])),this._onChildrenCompleted?.fulfill(),i}async getTreeItem(){let e,t;if(this._results.deferred)e=this._label,t=r.TreeItemCollapsibleState.Collapsed;else{let i,s=await (0,h.wW)(this.getCommitsQueryResults(),void 0,100);s.paused?(queueMicrotask(async()=>{try{await this._onChildrenCompleted?.promise}catch{return}await s.value,this.view.triggerNodeChange(this.parent)}),t=r.TreeItemCollapsibleState.Collapsed):({label:e,log:i}=s.value,t=null==i||0===i.count?r.TreeItemCollapsibleState.None:this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed)}let i=new r.TreeItem(e??this._label,t);return i.id=this.id,i.contextValue=null!=this._results.comparison?d.U0.CompareResultsCommits:d.U0.SearchResultsCommits,i.description=this._options.description,i}refresh(e=!1){e&&(this._commitsQueryResults=void 0,this._commitsQueryResultsPromise=void 0,this.getCommitsQueryResults())}_commitsQueryResultsPromise;async getCommitsQueryResults(){if(null==this._commitsQueryResultsPromise){this._commitsQueryResultsPromise=this._results.query(this.limit??a.H.get("advanced.maxSearchItems"));let e=await this._commitsQueryResultsPromise;this._commitsQueryResults=e,this._hasMore=e.hasMore,this._results.deferred&&(this._results.deferred=!1,this.parent.triggerChange(!1))}return this._commitsQueryResultsPromise}_commitsQueryResults;maybeGetCommitsQueryResults(){return this._commitsQueryResults}_hasMore=!0;get hasMore(){return this._hasMore}_expandAutolinks=!1;async loadMore(e,t){let i=await this.getCommitsQueryResults();i?.hasMore&&(null!=t&&"expandAutolinks"in t&&(this._expandAutolinks=!!t.expandAutolinks),await i.more?.(e??this.view.config.pageItemLimit),this.limit=i.log?.count,this.triggerChange(!1))}async getChangesForChangelog(){let e={base:{ref:this.ref1,label:`\`${this.ref1}\``},head:{ref:this.ref2,label:`\`${this.ref2}\``}},{log:t}=await this.getCommitsQueryResults();return null==t?{changes:[],range:e}:(0,n.f)(this.view.container,e,t)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?A(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&P(t,i,o)})([(0,l.G)(),(0,c.Yz)()],ResultsCommitsNode.prototype,"refresh",1)},7947:(e,t,i)=>{i.d(t,{$N:()=>GitWizardQuickPickItem,G0:()=>C,IC:()=>w,Rc:()=>v,iq:()=>S,rA:()=>y,sS:()=>k,vS:()=>b});var r=i(1398),s=i(1818),o=i(1518),n=i(9703),a=i(6796),l=i(1974),c=i(8811),u=i(2636),h=i(8557),d=i(8554),p=i(1078),g=i(4941),m=i(3934),f=i(7079);let GitWizardQuickPickItem=class GitWizardQuickPickItem extends f.Fj{constructor(e,t){super(e,void 0,"gitlens.gitCommands",[t],{suppressKeyPress:!0})}executeSteps(e){return(0,s.g)(n.m.instance,this.args[0],e)}};async function w(e,t,i){let s="";if(i?.type===!0?s=!0===i.current&&e.current?"current branch":"branch":i?.type==="remote"?e.remote&&(s="remote branch"):i?.current===!0&&e.current&&(s="current branch"),i?.status&&!e.remote&&null!=e.upstream){let t=o.EO.Dash;if(e.upstream.missing)t=o.EO.Warning;else{let i=await e.getRemote();if(null!=i){let e,r;for(let{type:t}of i.urls)if("fetch"===t){if(e=!0,r)break}else if("push"===t&&(r=!0,e))break;e&&r?t=o.EO.ArrowsRightLeft:r?t=o.EO.ArrowRight:e&&(t=o.EO.ArrowLeft)}}let i=`${e.getTrackingStatus({suffix:`${o.EO.Space} `})}${t}${o.EO.Space} ${e.upstream.name}`;s=s?`${s}${o.EO.Space.repeat(2)}${i}`:i}return i?.ref&&(e.sha&&(s=s?`${s} $(git-commit)${o.EO.Space}${(0,d.pV)(e.sha)}`:`$(git-commit)${o.EO.Space}${(0,d.pV)(e.sha)}`),void 0!==e.date&&(s=s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}${e.formattedDate}`:e.formattedDate)),{label:i?.checked||i?.checked==null&&i?.current==="checkmark"&&e.current?`${e.name}${(0,m.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t??e.current,item:e,current:e.current,ref:e.name,remote:e.remote,iconPath:e.starred?new r.ThemeIcon("star-full"):i?.worktree?(0,c.wL)(n.m.instance,e):(0,c.BI)(n.m.instance,e)}}async function v(e,t,i){let s;return(0,l.kk)(e)?y(e,t,{...i,icon:i?.icon==="avatar"||i?.icon}):(i?.icon==="avatar"&&(p.H.get("gitCommands.avatars")?s=await e.getAvatarUri():i.icon=!0),i?.icon===!0&&(s=new r.ThemeIcon("git-commit")),i?.compact)?{label:e.summary,description:`${e.author.name}, ${e.formattedDate}${(0,m.eV)("$(git-commit)",2,1)}${e.shortSha}${(0,m.eV)(o.EO.Dot,2,2)}${e.formatStats("short")}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e,iconPath:s}:{label:e.summary,description:"",detail:`${o.EO.Space.repeat(2)}${e.author.name}, ${e.formattedDate}${(0,m.eV)("$(git-commit)",2,1)}${e.shortSha}${(0,m.eV)(o.EO.Dot,2,2)}${e.formatStats("short")}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:s}}function y(e,t,i){let s=null==e.number?"":`${e.number}: `;return i?.compact?{label:`${s}${e.summary}`,description:`${e.formattedDate}${(0,m.eV)(o.EO.Dot,2,2)}${e.formatStats("short")}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e,iconPath:i.icon?new r.ThemeIcon("archive"):void 0}:{label:`${s}${e.summary}`,description:"",detail:`${o.EO.Space.repeat(2)}${e.formattedDate}${(0,m.eV)(o.EO.Dot,2,2)}${e.formatStats("short")}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:i?.icon?new r.ThemeIcon("archive"):void 0}}function b(e,t,i,s){let n;return""===e?{label:"Working Tree",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,u.kA)(e,t,{refType:"revision",name:"Working Tree"}),current:!1,ref:e,remote:!1,iconPath:s?.icon?new r.ThemeIcon("file-directory"):void 0}:"HEAD"===e?{label:"HEAD",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,u.kA)(e,t,{refType:"revision",name:"HEAD"}),current:!1,ref:e,remote:!1,iconPath:s?.icon?new r.ThemeIcon("git-branch"):void 0}:("string"==typeof e?n=(0,u.kA)(e,t):e=(n=e).ref,(0,d.p8)(e))?{label:`Range ${n.name}`,description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:n,current:!1,ref:e,remote:!1}:{label:`Commit ${n.name}`,description:s?.ref?`$(git-commit)${o.EO.Space}${e}`:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:n,current:!1,ref:e,remote:!1}}function C(e,t,i){let s="";if(i?.type&&(s="remote"),i?.upstream){let t=(0,h.Qw)(e);s=s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}${t}`:t}return{label:i?.checked?`${e.name}${(0,m.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:new r.ThemeIcon("cloud")}}async function k(e,t,i){let r;(i?.branch||i?.status)&&(r=await e.git.status().getStatus());let s="";if(i?.branch&&null!=r&&(s=r.branch),i?.status&&null!=r){let e="";0!==r.files.length&&(e=r.getFormattedDiffStatus({compact:!0,prefix:(0,m.eV)(o.EO.Dot,2,2)}));let t=r.getUpstreamStatus({prefix:s?`${o.EO.Space} `:""}),i=`${t}${e}`;i&&(s=s?`${s}${i}`:i)}if(i?.fetched){let t=await e.getLastFetched();if(0!==t){let e=`Last fetched ${(0,g.PI)(new Date(t))}`;s=s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}${e}`:e}}return{label:e.formattedName,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,repoPath:e.path}}function S(e,t,i){let s="";if(i?.type&&(s="tag"),i?.ref&&(s=`${s}${(0,m.eV)("$(git-commit)",2*!!s,1)}${(0,d.pV)(e.sha)}`,s=`${s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}`:""}${e.formattedDate}`),i?.message){let t=(0,a.E)(e.message);s=s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}${t}`:t}return{label:i?.checked?`${e.name}${(0,m.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,current:!1,ref:e.name,remote:!1,iconPath:new r.ThemeIcon("tag")}}},8029:(e,t,i)=>{i.d(t,{dt:()=>b,ip:()=>CompareResultsNode,oI:()=>C,pi:()=>k,sV:()=>S});var r=i(1398),s=i(2458),o=i(3088),n=i(1920),a=i(8554),l=i(3500),c=i(4342),u=i(3489),h=i(3934),d=i(8698),p=i(9642),g=i(7763),m=i(6792),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o};let y=0;let CompareResultsNode=class CompareResultsNode extends d.Y{constructor(e,t,i,r,s,n=0){super("compare-results",o.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._ref=r,this._compareWith=s,this._storedAt=n,this._instanceId=y++,this.updateContext({comparisonId:`${r.ref}+${s.ref}+${this._instanceId}`,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,p.pF)(this.type,this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0).catch())}_instanceId;get id(){return this._uniqueId}etag(){return this._storedAt}get order(){return this._storedAt}get ahead(){return{ref1:this._compareWith.ref||"HEAD",ref2:this._ref.ref}}get behind(){return{ref1:this._ref.ref,ref2:this._compareWith.ref||"HEAD"}}get compareRef(){return this._ref}get compareWithRef(){return this._compareWith}_isFiltered;get filterByAuthors(){let e=this.getState("filterCommits"),t=!!e?.length;return null!=this._isFiltered&&this._isFiltered!==t&&this.updateContext({comparisonFiltered:t}),this._isFiltered=t,e}subscribe(){return r.Disposable.from((0,u.HC)(this.view.onDidChangeNodesCheckedState,this.onNodesCheckedStateChanged,this),(0,u.HC)(this.view.container.integrations.onDidChangeConnectionState,this.onIntegrationConnectionStateChanged,this))}onIntegrationConnectionStateChanged(){this.view.triggerNodeChange(this.parent)}onNodesCheckedStateChanged(e){let t=b(this.getStorageId());e.items.some(([e])=>e.id?.startsWith(t))&&this.store(!0).catch()}dismiss(){this.remove(!0)}async getChildren(){if(null==this.children){let e={...this.ahead,range:(0,a.Xn)(this.ahead.ref1,this.ahead.ref2,"..")},t={...this.behind,range:(0,a.Xn)(this.behind.ref1,this.behind.ref2,"..")},i=await this.view.container.git.commits(this.repoPath).getLeftRightCommitCount((0,a.Xn)(t.ref1||"HEAD",t.ref2,"..."),{authors:this.filterByAuthors}),r=this.view.container.git.refs(this.repoPath),s=await r.getMergeBase(t.ref1,t.ref2,{forkPoint:!0})??await r.getMergeBase(t.ref1,t.ref2),o=[new g.V(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery(t.range),comparison:t,direction:"behind",files:{ref1:""===t.ref1?"":s??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,h.td)("commit",i?.right??0),expand:!1}),new g.V(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery(e.range),comparison:e,direction:"ahead",files:{ref1:s??e.ref1,ref2:e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,h.td)("commit",i?.left??0),expand:!1})];this.filterByAuthors?.length||o.push(new m.o(this.view,this,this.repoPath,this._compareWith.ref,this._ref.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})),this.children=o}return this.children}getTreeItem(){let e;if(this.view.container.git.repositoryCount>1){let t=this.repoPath?this.view.container.git.getRepository(this.repoPath):void 0;e=t?.formattedName??this.repoPath}let t=new r.TreeItem(`Comparing ${this._ref.label??(0,a.pV)(this._ref.ref,{strings:{working:"Working Tree"}})} with ${this._compareWith.label??(0,a.pV)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,r.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=`${p.U0.CompareResults}${""===this._ref.ref?"+working":""}${this.filterByAuthors?.length?"+filtered":""}`,t.description=e,t.iconPath=new r.ThemeIcon("compare-changes"),t}async getDiffRefs(){return Promise.resolve([this._compareWith.ref,this._ref.ref])}async getFilesComparison(){let e=(await this.getChildren()).find(e=>e.is("results-files"));return e?.getFilesComparison()}clearReviewed(){k(this.view,this.getStorageId()),this.store().catch()}async swap(){if(""===this._ref.ref){r.window.showErrorMessage("Cannot swap comparisons with the working tree");return}let e=this.getStorageId(),t=this._ref;this._ref=this._compareWith,this._compareWith=t,await this.replace(e,!0),this.children=void 0,this.view.triggerNodeChange(this.parent),queueMicrotask(()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0}))}async getAheadFilesQuery(){return(0,n.Hn)(this.view.container,this.repoPath,(0,a.Xn)(this._compareWith?.ref||"HEAD",this._ref.ref||"HEAD","..."),""===this._ref.ref)}async getBehindFilesQuery(){return(0,n.Hn)(this.view.container,this.repoPath,(0,a.Xn)(this._ref.ref||"HEAD",this._compareWith.ref||"HEAD","..."),!1)}getCommitsQuery(e){return(0,n.R6)(this.view.container,this.repoPath,e,this.filterByAuthors)}getFilesQuery(){return(0,n.i9)(this.view.container,this.repoPath,this._ref.ref,this._compareWith.ref)}getStorageId(){return(0,s.Fx)(`${this.repoPath}|${this._ref.ref}|${this._compareWith.ref}`,"base64")}remove(e=!1){return k(this.view,this.getStorageId()),this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return k(this.view,e),await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){let t=this.getStorageId(),i=C(this.view,t);return this.view.updateStorage(t,{type:"comparison",timestamp:this._storedAt,path:this.repoPath,ref1:{label:this._ref.label,ref:this._ref.ref},ref2:{label:this._compareWith.label,ref:this._compareWith.ref},checkedFiles:i.length>0?i:void 0},e)}};function b(e){return`${e}|`}function C(e,t){let i=[];for(let[s,o]of e.nodeState.get(b(t),"checked"))o===r.TreeItemCheckboxState.Checked&&i.push(s);return i}function k(e,t){e.nodeState.delete(b(t),"checked")}function S(e,t){if(t?.length)for(let i of t)e.nodeState.storeState(i,"checked",r.TreeItemCheckboxState.Checked,!0)}v([(0,l.G)(),(0,c.Yz)()],CompareResultsNode.prototype,"getDiffRefs",1),v([(0,c.Rm)()],CompareResultsNode.prototype,"clearReviewed",1),v([(0,c.Rm)()],CompareResultsNode.prototype,"swap",1)},8094:(e,t,i)=>{i.d(t,{m:()=>j,P:()=>V});var r=i(457),s=i(6461),o=i(1078),n=i(7005),a=i(5952),l=i(3915),c=i(7697),u=i(1201);let h=/\/_git\/?/i,d=/^DefaultCollection\//i,p=/^(.*?)\/(.*?)\/(.*)/,g=/^(ssh|vs-ssh)\./i,m=/^\/?v\d\//i,f=/path=([^&]+)/i,w=/line=(\d+)(?:&lineEnd=(\d+))?/;let AzureDevOpsRemote=class AzureDevOpsRemote extends u.u{constructor(e,t,i,r,s,o=!1){let n;if(g.test(t)){i=i.replace(m,""),t=t.replace(g,"");let e=p.exec(i);if(null!=e){let[,r,s,a]=e;n=s,o?(t=`${r}.${t}`,i=`${s}/_git/${a}`):i=`${r}/${s}/_git/${a}`}}else{let e=p.exec(i);if(null!=e){let[,,t]=e;n=t}}super(t,i=decodeURIComponent(i),r,s),this.container=e,this.project=n}project;get issueLinkPattern(){let e=this.baseUrl.replace(h,"/");return`${e}/_workitems/edit/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"#",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!1,title:`Open Work Item #<num> on ${this.name}`,type:"issue",description:`${this.name} Work Item #<num>`},{prefix:"PR ",url:`${this.baseUrl}/pullrequest/<num>`,alphanumeric:!1,ignoreCase:!1,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"azdo"}get id(){return"azure-devops"}get gkProviderId(){return"azureDevops"}get name(){return"Azure DevOps"}get providerDesc(){if(null!=this.gkProviderId&&null!=this.owner&&null!=this.repoName&&null!=this.project)return{id:this.gkProviderId,repoDomain:this.project,repoName:this.repoName,repoOwnerDomain:this.owner}}_displayPath;get displayPath(){return void 0===this._displayPath&&(this._displayPath=this.path.replace(h,"/").replace(d,"")),this._displayPath}async getLocalInfoFromRemoteUri(e,t,i){let r,s;if(t.authority!==this.domain)return Promise.resolve(void 0);if(t.query){let e=w.exec(t.query);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let o=f.exec(t.query);if(null==o)return Promise.resolve(void 0);let[,n]=o,a=e.toAbsoluteUri(n,{validate:i?.validate});return Promise.resolve(null!=a?{uri:a,startLine:r,endLine:s}:void 0)}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/?version=GB${e}&_a=history`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branchCompare?baseVersion=GB${e}&targetVersion=GB${t}`)}async isReadyForForCrossForkPullRequestUrls(){let e=(0,l.p)(this.id),t=e&&await this.container.integrations.get(e);return t?.maybeConnected??t?.isConnected()??!1}async getUrlForCreatePullRequest({base:e,head:t},i){let r=new URLSearchParams({sourceRef:t.branch,targetRef:e.branch??""});if(e.remote.url!==t.remote.url){let t,i=function(e){if(v.test(e)){e=e.replace(v,"");let t=p.exec(e);if(null!=t){let[,e,i,r]=t;return{org:e,project:i,repo:r}}}else{let[t,i,r]=(0,c.Lr)(e);return{org:t,project:i,repo:r}}}(e.remote.url);if(null==i)return;let{org:s,project:o,repo:n}=i,u=(0,l.p)(this.id),h=u&&await this.container.integrations.get(u);if(h?.isConnected&&h instanceof a.T5&&(t=(await h.getRepoInfo?.({project:o,name:n,owner:s}))?.id),!t)return;r.set("targetRepositoryId",t)}return`${this.encodeUrl(`${this.getRepoBaseUrl(t.remote.path)}/pullrequestcreate`)}?${r.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`&line=${r.start.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:`&line=${r.start.line}&lineEnd=${r.end.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:"",i)?this.encodeUrl(`${this.baseUrl}?path=${e}&version=GC${i}${s}&_a=contents`):t?this.encodeUrl(`${this.baseUrl}/?path=/${e}&version=GB${t}&_a=contents${s}`):this.encodeUrl(`${this.baseUrl}?path=/${e}${s}`)}};let v=/^(?:[^@]+@)?([^:]+):v\d\//;var y=i(8554);let b=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,C=/^lines-(\d+)(?::(\d+))?$/;let BitbucketRemote=class BitbucketRemote extends u.u{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}get issueLinkPattern(){return`${this.baseUrl}/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"issue #",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!0,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",url:`${this.baseUrl}/pull-requests/<num>`,alphanumeric:!1,ignoreCase:!0,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"bitbucket"}get id(){return"bitbucket"}get gkProviderId(){return"bitbucket"}get name(){return this.formatName("Bitbucket")}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=C.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=b.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,y.HH)(t)){let t=e.toAbsoluteUri(a.substring(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let c=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),o=a.substring(1,l),c.set(o,a.substring(l));while(l>0)if(0!==c.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&c.has(e.getNameWithoutRemote())});for(let o of t){let t=c.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return`${this.encodeUrl(`${this.baseUrl}/branches/compare/${t}\r${e}`)}#diff`}getUrlForCreatePullRequest({base:e,head:t}){let{owner:i,name:r}=this.repoDesc,s=new URLSearchParams({source:t.branch,dest:`${i}/${r}::${e.branch??""}`});return`${this.encodeUrl(`${this.getRepoBaseUrl(t.remote.path)}/pull-requests/new`)}?${s.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#${e}-${r.start.line}`:`#${e}-${r.start.line}:${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/src/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};var k=i(9842);let S=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,R=/^lines-(\d+)(?::(\d+))?$/;let BitbucketServerRemote=class BitbucketServerRemote extends u.u{constructor(e,t,i,r,s,o=!1){super(t,i,r,s,o),this.container=e}get issueLinkPattern(){return`${this.baseUrl}/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"issue #",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!0,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",alphanumeric:!1,ignoreCase:!0,url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get baseUrl(){let[e,t]=this.splitPath();return`${this.protocol}://${this.domain}/projects/${e}/repos/${t}`}splitPath(){if(this.path.startsWith("scm/")&&this.path.indexOf("/")!==this.path.lastIndexOf("/")){let e=this.path.replace("scm/",""),t=e.indexOf("/");return[e.substring(0,t),e.substring(t+1)]}return super.splitPath()}get icon(){return"bitbucket"}get id(){return"bitbucket-server"}get gkProviderId(){return"bitbucketServer"}get name(){return this.formatName("Bitbucket Server")}get supportedFeatures(){return{...super.supportedFeatures,createPullRequestWithDetails:!0}}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=R.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=S.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,y.HH)(t)){let t=e.toAbsoluteUri(a.substring(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let c=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),o=a.substring(1,l),c.set(o,a.substring(l));while(l>0)if(0!==c.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&c.has(e.getNameWithoutRemote())});for(let o of t){let t=c.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/commits?until=${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replaceAll("%250D","%0D")}async getUrlForCreatePullRequest(e,t){let{base:i,head:r,details:s}=e;s?.describeWithAI&&(s=await (0,k.ub)(this.container,e.repoPath,e,t??{source:"ai"}));let o=new URLSearchParams({sourceBranch:r.branch,targetBranch:i.branch??""});return s?.title&&o.set("title",s.title),s?.description&&o.set("description",s.description),`${this.encodeUrl(`${this.baseUrl}/pull-requests?create`)}&${o.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#${r.start.line}`:`#${r.start.line}-${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${i}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${t}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/browse/${e}`)}${s}`}};var P=i(3934);let CustomRemote=class CustomRemote extends u.u{urls;constructor(e,t,i,r,s){super(e,t,r,s,!0),this.urls=i}get id(){return"custom"}get gkProviderId(){}get name(){return this.formatName("Custom")}get issueLinkPattern(){throw Error("unsupported")}get autolinks(){return[]}getLocalInfoFromRemoteUri(e,t){return Promise.resolve(void 0)}getUrlForRepository(){return this.getUrl(this.urls.repository,this.getContext())}getUrlForBranches(){return this.getUrl(this.urls.branches,this.getContext())}getUrlForBranch(e){return this.getUrl(this.urls.branch,this.getContext({branch:e}))}getUrlForCommit(e){return this.getUrl(this.urls.commit,this.getContext({id:e}))}getUrlForComparison(e,t,i){if(null!=this.urls.comparison)return this.getUrl(this.urls.comparison,this.getContext({ref1:e,ref2:t,notation:i}))}getUrlForCreatePullRequest({base:e,head:t}){if(null!=this.urls.createPullRequest)return this.getUrl(this.urls.createPullRequest,this.getContext({base:e.branch??"",head:t.branch}))}getUrlForFile(e,t,i,r){let s,o,n;s=null!=r?r.start.line===r.end.line?(0,P.GW)(this.urls.fileLine,{line:r.start.line,line_encoded:r.start.line}):(0,P.GW)(this.urls.fileRange,{start:r.start.line,start_encoded:r.start.line,end:r.end.line,end_encoded:r.end.line}):"",i?(o=this.urls.fileInCommit,n=this.getContext({id:i,file:e,line:s})):t?(o=this.urls.fileInBranch,n=this.getContext({branch:t,file:e,line:s})):(o=this.urls.file,n=this.getContext({file:e,line:s}));let a=(0,P.GW)(o,n);if((0,P.Vx)(o).some(e=>e.key.endsWith("_encoded")))return a;let l=a.includes("#");if(a=this.encodeUrl(a),l){let e=a.lastIndexOf("%23");-1!==e&&(a=`${a.substring(0,e)}#${a.substring(e+3)}`)}return a}getUrl(e,t){let i=(0,P.GW)(e,t);return(0,P.Vx)(e).some(e=>e.key.endsWith("_encoded"))?i:this.encodeUrl(i)}getContext(e){let[t,i]=this.splitPath(),r={repo:this.path,repoBase:t,repoPath:i,...e};for(let[e,t]of Object.entries(r))r[`${e}_encoded`]=encodeURIComponent(t);return r}};let A=/^\/([^/]+)\/\+(.+)$/i,I=/^(\d+)$/;let GerritRemote=class GerritRemote extends u.u{constructor(e,t,i,r,s=!1,o=!0){o&&"ssh"!==i&&(t=t.replace(/^a\//,"")),super(e,t,i,r,s)}get issueLinkPattern(){return`${this.baseReviewUrl}/q/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"Change-Id: ",url:this.issueLinkPattern,alphanumeric:!0,ignoreCase:!0,title:`Open Change #<num> on ${this.name}`,description:`${this.name} Change #<num>`}]),this._autolinks}get icon(){return"gerrit"}get id(){return"gerrit"}get gkProviderId(){}get name(){return this.formatName("Gerrit")}get baseUrl(){return`${this.protocol}://${this.domain}/plugins/gitiles/${this.path}`}get baseReviewUrl(){return`${this.protocol}://${this.domain}`}async getLocalInfoFromRemoteUri(e,t,i){let r;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=I.exec(t.fragment);if(null!=e){let[,t]=e;t&&(r=parseInt(t,10))}}let s=A.exec(t.path);if(null==s)return;let[,,o]=s,n=o.indexOf("/",1);if(-1!==n){let t=o.substring(1,n);if((0,y.HH)(t)||"HEAD"===t){let t=e.toAbsoluteUri(o.substring(n),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r}}}if(o.startsWith("/refs/heads/")){let t,s=o.substring(12),a=new Map;n=s.length;do n=s.lastIndexOf("/",n-1),t=s.substring(1,n),a.set(t,s.substring(n));while(n>0)if(0!==a.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(let s of t){let t=a.get(s.getNameWithoutRemote());if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r}}}return}if(o.startsWith("/refs/tags/")){let t,s=o.substring(11),a=new Map;n=s.length;do n=s.lastIndexOf("/",n-1),t=s.substring(1,n),a.set(t,s.substring(n));while(n>0)if(0!==a.size){let{values:t}=await e.git.tags().getTags({filter:e=>a.has(e.name)});for(let s of t){let t=a.get(s.name);if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseReviewUrl}/admin/repos/${this.path},branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/+/refs/heads/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}${i}${t}`)}getUrlForCreatePullRequest({base:e,head:t}){let i=new URLSearchParams({sourceBranch:t.branch,targetBranch:e.branch??""});return this.encodeUrl(`${this.baseReviewUrl}/createPullRequest?${i.toString()}`)}getUrlForFile(e,t,i,r){let s=null!=r?`#${r.start.line}`:"";return i?`${this.encodeUrl(`${this.baseUrl}/+/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.getUrlForBranch(t)}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/+/HEAD/${e}`)}${s}`}};let D=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,$=/^L(\d+)(?:-L(\d+))?$/;let GiteaRemote=class GiteaRemote extends u.u{constructor(e,t,i,r,s,o=!1){super(t,i,r,s,o),this.container=e}get issueLinkPattern(){return`${this.baseUrl}/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"#",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!1,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`}]),this._autolinks}get icon(){return"gitea"}get id(){return"gitea"}get gkProviderId(){}get name(){return this.formatName("Gitea")}get supportedFeatures(){return{...super.supportedFeatures,createPullRequestWithDetails:!0}}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o,n;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=$.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let a=D.exec(t.path);if(null==a)return;let[,,,l]=a;if(l.startsWith("/commit/")&&(o=8,-1!==(n=l.indexOf("/",o)))){let t=l.substring(o,n);if((0,y.HH)(t)){let t=e.toAbsoluteUri(l.substring(n),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}if(l.startsWith("/branch/")){let t,a=new Map;n=o=8;do t=l.substring(o,n),a.set(t,l.substring(n)),n=l.indexOf("/",n+1);while(n<l.length&&-1!==n)if(0!==a.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(let o of t){let t=a.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/src/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}...${t}`)}async getUrlForCreatePullRequest(e,t){let{base:i,head:r,details:s}=e;s?.describeWithAI&&(s=await (0,k.ub)(this.container,e.repoPath,e,t??{source:"ai"}));let o=new URLSearchParams({head:r.branch,base:i.branch??""});return s?.title&&o.set("title",s.title),s?.description&&o.set("body",s.description),`${this.encodeUrl(`${this.baseUrl}/pulls/new`)}?${o.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/src/commit/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/branch/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/src/${e}`)}${s}`}};var T=i(6905),E=i(1518),_=i(4941),O=i(4499),x=i(1212),F=i(4704),L=i(8811),B=Object.defineProperty,U=Object.getOwnPropertyDescriptor;let N=/\b([^/\s]+\/[^/\s]+?)(?:\\)?#([0-9]+)\b(?!]\()/g,q=/\b([^/\s]+\/[^/\s]+?)(?:\\)?!([0-9]+)\b(?!]\()/g,W=/^\/([^/]+)\/([^/]+?)\/-\/blob(.+)$/i,M=/^L(\d+)(?:-(\d+))?$/;let GitLabRemote=class GitLabRemote extends u.u{constructor(e,t,i,r,s,o=!1){super(t,i,r,s,o),this.container=e}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api`:`https://${this.domain}/api`}get issueLinkPattern(){return`${this.baseUrl}/-/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"#",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!1,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"!",url:`${this.baseUrl}/-/merge_requests/<num>`,alphanumeric:!1,ignoreCase:!1,title:`Open Merge Request !<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !<num>`},{tokenize:(e,t,i,r,s,o)=>"plaintext"===t?e:e.replace(N,(e,n,a)=>{let l,c=(0,x.W)(`${this.protocol}://${this.domain}/${(0,F.e8)(n)}/-/issues/${a}`),u=` "Open Issue #${a} from ${n} on ${this.name}"`,h=`\0${i.size}\0`;"markdown"===t?i.set(h,`[${e}](${c}${u})`):"html"===t&&i.set(h,`<a href="${c}" title=${u}>${e}</a>`);let d=r?.get(a)?.[0];if(d?.value!=null)if(d.paused)null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,L.xu)()} GitLab Issue ${n}#${a} $(loading~spin)](${c}${u}")`));else{let t=d.value,i=(0,F.FV)(t.title.trim());null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,L.xu)(t)} **${i}**](${c}${u})\\
${E.EO.Space.repeat(5)}${e} ${t.state} ${(0,_.PI)(t.closedDate??t.createdDate)}`))}else null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,L.xu)()} GitLab Issue ${n}#${a}](${c}${u})`));return h}),parse:(e,t)=>{let i,r,s;for(;null!=(s=N.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/-/issues/${r}`,alphanumeric:!1,ignoreCase:!0,title:`Open Issue #<num> from ${i} on ${this.name}`,type:"issue",description:`${this.name} Issue ${i}#${r}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}},{tokenize:(e,t,i,r,s,o)=>"plaintext"===t?e:e.replace(q,(e,n,a)=>{let l,c=(0,x.W)(`${this.protocol}://${this.domain}/${n}/-/merge_requests/${a}`),u=` "Open Merge Request !${a} from ${n} on ${this.name}"`,h=`\0${i.size}\0`;"markdown"===t?i.set(h,`[${e}](${c}${u})`):"html"===t&&i.set(h,`<a href="${c}" title=${u}>${e}</a>`);let d=r?.get(a)?.[0];if(d?.value!=null)if(d.paused)null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,L.xu)()} ${this.name} Merge Request ${n}!${a} $(loading~spin)](${c}${u}")`));else{let t=d.value,i=(0,F.FV)(t.title.trim());null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,L.xu)(t)} **${i}**](${c}${u})\\
${E.EO.Space.repeat(5)}${e} ${t.state} ${(0,_.PI)(t.closedDate??t.createdDate)}`))}else null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,L.xu)()} ${this.name} Merge Request ${n}!${a}](${c}${u})`));return h}),parse:(e,t)=>{let i,r,s;for(;null!=(s=q.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}!`,url:`${this.protocol}://${this.domain}/${i}/-/merge_requests/${r}`,alphanumeric:!1,ignoreCase:!0,title:`Open Merge Request !<num> from ${i} on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !${r} from ${i}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}}]),this._autolinks}get icon(){return"gitlab"}get id(){return"gitlab"}get gkProviderId(){var e;return(e=this.domain,(0,P.Q_)(e,"gitlab.com"))?"gitlab":"gitlabSelfHosted"}get name(){return this.formatName("GitLab")}get repoDesc(){let[e,t]=this.splitPath();return{key:this.remoteKey,owner:e,name:t}}get supportedFeatures(){return{...super.supportedFeatures,createPullRequestWithDetails:!0}}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=M.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=W.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,y.HH)(t)){let t=e.toAbsoluteUri(a.substring(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let c=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),o=a.substring(1,l),c.set(o,a.substring(l));while(l>0)if(0!==c.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&c.has(e.getNameWithoutRemote())});for(let o of t){let t=c.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/-/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/-/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/-/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/-/compare/${e}${i}${t}`)}async isReadyForForCrossForkPullRequestUrls(){let e=(0,l.p)(this.id),t=e&&await this.container.integrations.get(e);return t?.maybeConnected??t?.isConnected()??!1}async getUrlForCreatePullRequest(e,t){let{base:i,head:r,details:s}=e;s?.describeWithAI&&(s=await (0,k.ub)(this.container,e.repoPath,e,t??{source:"ai"}));let o=new URLSearchParams({utf8:"✓","merge_request[source_branch]":r.branch,"merge_request[target_branch]":i.branch??""});if(i.remote.url!==r.remote.url){let e,t={owner:i.remote.path.split("/")[0],name:i.remote.path.split("/")[1]},r=(0,l.p)(this.id),s=r&&await this.container.integrations.get(r);if(s?.isConnected&&s instanceof a.T5&&(e=(await s.getRepoInfo?.(t))?.id),!e)return;o.set("merge_request[target_project_id]",e)}return s?.title&&o.set("merge_request[title]",s.title),s?.description&&o.set("merge_request[description]",s.description),`${this.encodeUrl(`${this.getRepoBaseUrl(r.remote.path)}/-/merge_requests/new`)}?${o.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/-/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/-/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?U(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&B(t,i,o)})([(0,O.B)()],GitLabRemote.prototype,"repoDesc",1);let GoogleSourceRemote=class GoogleSourceRemote extends GerritRemote{constructor(e,t,i,r,s=!1){super(e,t,i,r,s,!1)}get id(){return"google-source"}get gkProviderId(){}get name(){return this.formatName("Google Source")}get issueLinkPattern(){throw Error("unsupported")}get autolinks(){return[]}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}get reviewDomain(){let[e,...t]=this.domain.split(".");return[`${e}-review`,...t].join(".")}get baseReviewUrl(){return`${this.protocol}://${this.reviewDomain}`}};let G=[{custom:!1,matcher:"bitbucket.org",creator:(e,t,i)=>new BitbucketRemote(t,i)},{custom:!1,matcher:"github.com",creator:(e,t,i)=>new T.K(e,t,i)},{custom:!1,matcher:"gitlab.com",creator:(e,t,i)=>new GitLabRemote(e,t,i)},{custom:!1,matcher:/\bdev\.azure\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(e,t,i)},{custom:!0,matcher:/^(.+\/(?:bitbucket|stash))\/scm\/(.+)$/i,creator:(e,t,i)=>new BitbucketServerRemote(e,t,i)},{custom:!1,matcher:/\bgitlab\b/i,creator:(e,t,i)=>new GitLabRemote(e,t,i)},{custom:!1,matcher:/\bvisualstudio\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(e,t,i,void 0,void 0,!0)},{custom:!1,matcher:/\bgitea\b/i,creator:(e,t,i)=>new GiteaRemote(e,t,i)},{custom:!1,matcher:/\bgerrithub\.io$/i,creator:(e,t,i)=>new GerritRemote(t,i)},{custom:!1,matcher:/\bgooglesource\.com$/i,creator:(e,t,i)=>new GoogleSourceRemote(t,i)}],H={[r.PY.CloudGitHubEnterprise]:(e,t,i)=>new T.K(e,t,i),[r.PY.CloudGitLabSelfHosted]:(e,t,i)=>new GitLabRemote(e,t,i),[r.PY.BitbucketServer]:(e,t,i)=>new BitbucketServerRemote(e,t,i)};function V(e,t){let i=[];if(e?.length)for(let t of e){let e,r=function(e){switch(e.type){case"AzureDevOps":return(t,i,r)=>new AzureDevOpsRemote(t,i,r,e.protocol,e.name,!0);case"Bitbucket":return(t,i,r)=>new BitbucketRemote(i,r,e.protocol,e.name,!0);case"BitbucketServer":return(t,i,r)=>new BitbucketServerRemote(t,i,r,e.protocol,e.name,!0);case"Custom":return(t,i,r)=>new CustomRemote(i,r,e.urls,e.protocol,e.name);case"Gerrit":return(t,i,r)=>new GerritRemote(i,r,e.protocol,e.name,!0);case"GoogleSource":return(t,i,r)=>new GoogleSourceRemote(i,r,e.protocol,e.name,!0);case"Gitea":return(t,i,r)=>new GiteaRemote(t,i,r,e.protocol,e.name,!0);case"GitHub":return(t,i,r)=>new T.K(t,i,r,e.protocol,e.name,!0);case"GitLab":return(t,i,r)=>new GitLabRemote(t,i,r,e.protocol,e.name,!0);default:return}}(t);if(null!=r){try{if(e=t.regex?RegExp(t.regex,"i"):t.domain?.toLowerCase(),null==e)throw Error("No matcher found")}catch(e){n.Vy.error(e,`Loading remote provider '${t.name??""}' failed`)}i.push({custom:!0,matcher:e,creator:r})}}if(t?.length)for(let e of t){let t=e.integrationId;if((0,s.Ii)(t)&&e.domain){let r=e.domain.toLocaleLowerCase(),s={custom:!1,matcher:r,creator:H[t]},o=i.findIndex(e=>e.matcher===r);-1!==o?i[o]=s:i.push(s)}}return i.push(...G),i}async function j(e,t){return null==t&&(t=V(o.H.get("remotes",null),await e.integrations.getConfigured())),(i,r,s)=>(function(e,t,i,r,s){try{let o=r.toLowerCase();for(let{custom:n,matcher:a,creator:l}of t){if("string"==typeof a){if(a===o)return l(e,r,s);continue}if(a.test(o))return l(e,r,s);if(!n)continue;let t=a.exec(i);if(null!=t)return l(e,t[1],t[2])}return}catch(e){n.Vy.error(e,"createRemoteProvider");return}})(e,t,i,r,s)}},8191:(e,t,i)=>{i.d(t,{V:()=>n,b:()=>o});var r=i(4301),s=i(5576);async function o(e){let t=(0,s.v6)();return await (0,r.RS)("gitlens.gitCommands",{...e,completion:t}),t.promise}async function n(e,t){await (0,r.Y0)("gitlens.browseRepoAtRevision",void 0,{uri:e,before:t?.before,openInNewWindow:t?.openInNewWindow})}},8238:(e,t,i)=>{i.d(t,{OB:()=>r,Oi:()=>s,fc:()=>o});let r=new Map([["workbench.view.scm",["branches","commits","remotes","repositories","stashes","tags","worktrees","contributors"]],["workbench.view.extension.gitlensPanel",["graph","graphDetails"]],["workbench.view.extension.gitlensInspect",["commitDetails","fileHistory","lineHistory","timeline","searchAndCompare"]],["workbench.view.extension.gitlens",["home","workspaces"]]]),s=["commit-file","file-commit","results-file","stash-file"],o=[...s,"conflict-file","status-file","uncommitted-file"]},8255:(e,t,i)=>{i.d(t,{O:()=>o});var r=i(1974),s=i(6066);function o(e,t,i,o,n,a){return new r.Yg(e,t,i,new r.M7("You",n?.email??void 0,o),new r.M7("You",n?.email??void 0,o),"Uncommitted changes",a?.parents??(i===s.id?["HEAD"]:[]),"Uncommitted changes",a?.files,a?.stats,[])}},8286:(e,t,i)=>{i.d(t,{Nm:()=>l,P5:()=>c,Rp:()=>s,aL:()=>a,eS:()=>u,fK:()=>o,lj:()=>n,oJ:()=>h,t6:()=>r});let r=["mergeable","unassigned-reviewers","failed-checks","conflicts","needs-my-review","code-suggestions","changes-requested","reviewer-commented","waiting-for-review","draft","other"],s=["current-branch","pinned","mergeable","blocked","follow-up","needs-review","waiting-for-review","draft","other","snoozed"],o=["mergeable","blocked","follow-up","needs-review"],n=new Map([["current-branch","$(git-branch)"],["pinned","$(pinned)"],["mergeable","$(rocket)"],["blocked","$(error)"],["follow-up","$(report)"],["needs-review","$(comment-unresolved)"],["waiting-for-review","$(gitlens-clock)"],["draft","$(git-pull-request-draft)"],["other","$(ellipsis)"],["snoozed","$(bell-slash)"]]),a=new Map([["current-branch","Current Branch"],["pinned","Pinned"],["mergeable","Ready to Merge"],["blocked","Blocked"],["follow-up","Requires Follow-up"],["needs-review","Needs Your Review"],["waiting-for-review","Waiting for Review"],["draft","Draft"],["other","Other"],["snoozed","Snoozed"]]),l=new Map([["mergeable","mergeable"],["conflicts","blocked"],["failed-checks","blocked"],["unassigned-reviewers","blocked"],["needs-my-review","needs-review"],["code-suggestions","follow-up"],["changes-requested","follow-up"],["reviewer-commented","follow-up"],["waiting-for-review","waiting-for-review"],["draft","draft"],["other","other"]]),c=new Map([["readyToMerge","mergeable"],["unassignedReviewers","unassigned-reviewers"],["failingCI","failed-checks"],["conflicts","conflicts"],["needsMyReview","needs-my-review"],["changesRequested","changes-requested"],["reviewerCommented","reviewer-commented"],["waitingForReview","waiting-for-review"],["draft","draft"],["other","other"]]),u=new Map([["mergeable",["merge"]],["unassigned-reviewers",["open"]],["failed-checks",["open"]],["conflicts",["open"]],["needs-my-review",["open"]],["code-suggestions",["open"]],["changes-requested",["open"]],["reviewer-commented",["open"]],["waiting-for-review",["open"]],["draft",["open"]],["other",[]]]),h=new Map([["mergeable",["Ready to Merge","Ready to merge"]],["unassigned-reviewers",["Unassigned Reviewers","You need to assign reviewers"]],["failed-checks",["Failed Checks","You need to resolve the failing checks"]],["conflicts",["Resolve Conflicts","You need to resolve merge conflicts"]],["needs-my-review",["Needs Your Review","${author} requested your review"]],["code-suggestions",["Code Suggestions","Code suggestions have been made on this pull request"]],["changes-requested",["Changes Requested","Reviewers requested changes before this can be merged"]],["reviewer-commented",["Reviewers Commented","Reviewers have commented on this pull request"]],["waiting-for-review",["Waiting for Review","Waiting for reviewers to approve this pull request"]],["draft",["Draft","Continue working on your draft"]],["other",["Other","Opened by ${author} ${createdDateRelative}"]]])},8336:(e,t,i)=>{i.d(t,{AL:()=>CancellationError,DD:()=>RequiresIntegrationError,HG:()=>RequestRateLimitError,LN:()=>RequestNotFoundError,ND:()=>ProviderNotFoundError,QI:()=>ProviderFetchError,R:()=>l,Uk:()=>AccessDeniedError,V9:()=>AIError,Vp:()=>RequestsAreBlockedTemporarilyError,Vq:()=>ProviderNotSupportedError,WT:()=>AuthenticationRequiredError,ax:()=>c,d0:()=>AINoRequestDataError,dU:()=>ExtensionNotFoundError,gK:()=>OpenVirtualRepositoryError,ly:()=>RequestGoneError,pf:()=>AccountValidationError,tk:()=>RequestClientError,ts:()=>RequestUnprocessableEntityError,v3:()=>AuthenticationError,zK:()=>u});var r,s,o,n=i(1398),a=i(6599);let AccessDeniedError=class AccessDeniedError extends Error{subscription;required;constructor(e,t){let i;super(e.account?.verified===!1?"Email verification required":null!=t&&(0,a.zx)(t)?"GitLens Pro required":"Plan required"),this.subscription=e,this.required=t,Error.captureStackTrace?.(this,AccessDeniedError)}};let AccountValidationError=class AccountValidationError extends Error{original;statusCode;statusText;constructor(e,t,i,r){super(e+=`; status=${i}: ${r}`),this.original=t,this.statusCode=i,this.statusText=r,Error.captureStackTrace?.(this,AccountValidationError)}};var l=((r=l||{})[r.UserDidNotConsent=1]="UserDidNotConsent",r[r.Unauthorized=2]="Unauthorized",r[r.Forbidden=3]="Forbidden",r);let AuthenticationError=class AuthenticationError extends Error{id;original;reason;constructor(e,t,i){let r,s;if(null==t)r=`Unable to get required authentication session for '${e}'`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t){case 1:r=`'${e}' authentication is required for this operation`;break;case 2:r=`Your '${e}' credentials are either invalid or expired`;break;case 3:r=`Your '${e}' credentials do not have the required access`}super(r),this.id=e,this.original=i,this.reason=s,Error.captureStackTrace?.(this,AuthenticationError)}};let AuthenticationRequiredError=class AuthenticationRequiredError extends Error{constructor(){super("Authentication required"),Error.captureStackTrace?.(this,AuthenticationRequiredError)}};let CancellationError=class CancellationError extends n.CancellationError{constructor(e){super(),this.original=e,Error.captureStackTrace?.(this,CancellationError)}};let ExtensionNotFoundError=class ExtensionNotFoundError extends Error{constructor(e,t){super(`Unable to find the ${t} extension (${e}). Please ensure it is installed and enabled.`),this.extensionId=e,this.extensionName=t,Error.captureStackTrace?.(this,ExtensionNotFoundError)}};var c=((s=c||{})[s.RemoteHubApiNotFound=1]="RemoteHubApiNotFound",s[s.NotAGitHubRepository=2]="NotAGitHubRepository",s[s.GitHubAuthenticationNotFound=3]="GitHubAuthenticationNotFound",s[s.GitHubAuthenticationDenied=4]="GitHubAuthenticationDenied",s);let OpenVirtualRepositoryError=class OpenVirtualRepositoryError extends Error{original;reason;repoPath;constructor(e,t,i){let r,s;if(null==t)r=`Unable to open the virtual repository: ${e}`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t,r=`Unable to open the virtual repository: ${e}; `,s){case 1:r+="Unable to get required api from the GitHub Repositories extension. Please ensure that the GitHub Repositories extension is installed and enabled";break;case 2:r+="Only GitHub repositories are supported currently";break;case 3:r+="Unable to get required GitHub authentication";break;case 4:r+="GitHub authentication is required"}super(r),this.original=i,this.reason=s,this.repoPath=e,Error.captureStackTrace?.(this,OpenVirtualRepositoryError)}};let ProviderFetchError=class ProviderFetchError extends Error{constructor(e,t,i){super(`${e} request failed: ${!t.ok?`(${t.status}) ${t.statusText}. `:""}${i?.length?i[0].message:""}`),this.response=t,Error.captureStackTrace?.(this,ProviderFetchError)}get status(){return this.response.status}get statusText(){return this.response.statusText}};let ProviderNotFoundError=class ProviderNotFoundError extends Error{constructor(e){super(`No provider registered for '${null==e?String(e):"string"==typeof e?e:e.toString(!0)}'`),Error.captureStackTrace?.(this,ProviderNotFoundError)}};let ProviderNotSupportedError=class ProviderNotSupportedError extends Error{constructor(e){super(`Action is not supported on the ${e} provider.`),Error.captureStackTrace?.(this,ProviderNotSupportedError)}};let RequestClientError=class RequestClientError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,RequestClientError)}};let RequestNotFoundError=class RequestNotFoundError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,RequestNotFoundError)}};let RequestRateLimitError=class RequestRateLimitError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.token=t,this.resetAt=i,Error.captureStackTrace?.(this,RequestRateLimitError)}};let RequestGoneError=class RequestGoneError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,RequestGoneError)}};let RequestUnprocessableEntityError=class RequestUnprocessableEntityError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,RequestUnprocessableEntityError)}};let RequestsAreBlockedTemporarilyError=class RequestsAreBlockedTemporarilyError extends Error{constructor(){super("Requests are blocked"),Error.captureStackTrace?.(this,RequestsAreBlockedTemporarilyError)}};let RequiresIntegrationError=class RequiresIntegrationError extends Error{constructor(e){super(e),Error.captureStackTrace?.(this,RequiresIntegrationError)}};var u=((o=u||{})[o.DeniedByOrganization=0]="DeniedByOrganization",o[o.DeniedByUser=1]="DeniedByUser",o[o.NoEntitlement=2]="NoEntitlement",o[o.NoRequestData=3]="NoRequestData",o[o.RateLimitExceeded=4]="RateLimitExceeded",o[o.RateLimitOrFundsExceeded=5]="RateLimitOrFundsExceeded",o[o.RequestTooLarge=6]="RequestTooLarge",o[o.ModelNotSupported=7]="ModelNotSupported",o[o.ServiceCapacityExceeded=8]="ServiceCapacityExceeded",o[o.Unauthorized=9]="Unauthorized",o[o.UserQuotaExceeded=10]="UserQuotaExceeded",o);let AIError=class AIError extends Error{original;reason;constructor(e,t){let i;switch(e){case 2:i="You do not have the required entitlement to use this feature";break;case 6:i="The request is too large";break;case 10:i="You have exceeded your user token limit";break;case 4:i="Rate limit exceeded";break;case 5:i="Rate limit exceeded or your account is out of funds";break;case 8:i="Service capacity exceeded";break;case 3:i=t?.message??"No data was provided for the request";break;case 7:i="Model not supported for this request";break;case 9:i="You are not authorized to use the specified provider or model";break;case 0:i="Your organization has denied access to the specified provider or model";break;case 1:i="You have denied access to the specified provider or model";break;default:i=t?.message??"An unknown error occurred"}super(i),this.original=t,this.reason=e,Error.captureStackTrace?.(this,AIError)}};let AINoRequestDataError=class AINoRequestDataError extends AIError{constructor(e){super(3,e?Error(e):void 0),Error.captureStackTrace?.(this,AINoRequestDataError)}}},8401:(e,t,i)=>{let r;i.r(t),i.d(t,{AbortError:()=>M,FetchError:()=>p,Headers:()=>Headers,Request:()=>Request,Response:()=>Response,default:()=>z});var s=i(2203),o=i(8611),n=i(7016),a=i(8834),l=i(5692),c=i(3106);let u=s.Readable,h=Symbol("buffer"),d=Symbol("type");let Blob=class Blob{constructor(){this[d]="";let e=arguments[0],t=arguments[1],i=[];if(e){let t=Number(e.length);for(let r=0;r<t;r++){let t,s=e[r];(t=s instanceof Buffer?s:ArrayBuffer.isView(s)?Buffer.from(s.buffer,s.byteOffset,s.byteLength):s instanceof ArrayBuffer?Buffer.from(s):s instanceof Blob?s[h]:Buffer.from("string"==typeof s?s:String(s))).length,i.push(t)}}this[h]=Buffer.concat(i);let r=t&&void 0!==t.type&&String(t.type).toLowerCase();r&&!/[^\u0020-\u007E]/.test(r)&&(this[d]=r)}get size(){return this[h].length}get type(){return this[d]}text(){return Promise.resolve(this[h].toString())}arrayBuffer(){let e=this[h];return Promise.resolve(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength))}stream(){let e=new u;return e._read=function(){},e.push(this[h]),e.push(null),e}toString(){return"[object Blob]"}slice(){let e,t,i=this.size,r=arguments[0],s=arguments[1];e=void 0===r?0:r<0?Math.max(i+r,0):Math.min(r,i);let o=Math.max((void 0===s?i:s<0?Math.max(i+s,0):Math.min(s,i))-e,0),n=this[h].slice(e,e+o),a=new Blob([],{type:arguments[2]});return a[h]=n,a}};function p(e,t,i){Error.call(this,e),this.message=e,this.type=t,i&&(this.code=this.errno=i.code),Error.captureStackTrace(this,this.constructor)}Object.defineProperties(Blob.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),Object.defineProperty(Blob.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0}),p.prototype=Object.create(Error.prototype),p.prototype.constructor=p,p.prototype.name="FetchError";try{r=require("encoding").convert}catch{}let g=Symbol("Body internals"),m=s.PassThrough;function f(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=i.size,o=i.timeout;null==e?e=null:v(e)?e=Buffer.from(e.toString()):y(e)||Buffer.isBuffer(e)||("[object ArrayBuffer]"===Object.prototype.toString.call(e)?e=Buffer.from(e):ArrayBuffer.isView(e)?e=Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof s||(e=Buffer.from(String(e)))),this[g]={body:e,disturbed:!1,error:null},this.size=void 0===r?0:r,this.timeout=void 0===o?0:o,e instanceof s&&e.on("error",function(e){let i="AbortError"===e.name?e:new p(`Invalid response body while trying to fetch ${t.url}: ${e.message}`,"system",e);t[g].error=i})}function w(){var e=this;if(this[g].disturbed)return f.Promise.reject(TypeError(`body used already for: ${this.url}`));if(this[g].disturbed=!0,this[g].error)return f.Promise.reject(this[g].error);let t=this.body;if(null===t)return f.Promise.resolve(Buffer.alloc(0));if(y(t)&&(t=t.stream()),Buffer.isBuffer(t))return f.Promise.resolve(t);if(!(t instanceof s))return f.Promise.resolve(Buffer.alloc(0));let i=[],r=0,o=!1;return new f.Promise(function(s,n){let a;e.timeout&&(a=setTimeout(function(){o=!0,n(new p(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,"body-timeout"))},e.timeout)),t.on("error",function(t){"AbortError"===t.name?(o=!0,n(t)):n(new p(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t))}),t.on("data",function(t){if(!o&&null!==t){if(e.size&&r+t.length>e.size){o=!0,n(new p(`content size at ${e.url} over limit: ${e.size}`,"max-size"));return}r+=t.length,i.push(t)}}),t.on("end",function(){if(!o){clearTimeout(a);try{s(Buffer.concat(i,r))}catch(t){n(new p(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t))}}})})}function v(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&("URLSearchParams"===e.constructor.name||"[object URLSearchParams]"===Object.prototype.toString.call(e)||"function"==typeof e.sort)}function y(e){return"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&"string"==typeof e.constructor.name&&/^(Blob|File)$/.test(e.constructor.name)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}function b(e){let t,i,r=e.body;if(e.bodyUsed)throw Error("cannot clone body after it is used");return r instanceof s&&"function"!=typeof r.getBoundary&&(t=new m,i=new m,r.pipe(t),r.pipe(i),e[g].body=t,r=i),r}function C(e){if(null===e)return null;if("string"==typeof e)return"text/plain;charset=UTF-8";if(v(e))return"application/x-www-form-urlencoded;charset=UTF-8";if(y(e))return e.type||null;if(Buffer.isBuffer(e))return null;else if("[object ArrayBuffer]"===Object.prototype.toString.call(e))return null;else if(ArrayBuffer.isView(e))return null;else if("function"==typeof e.getBoundary)return`multipart/form-data;boundary=${e.getBoundary()}`;else if(e instanceof s)return null;else return"text/plain;charset=UTF-8"}function k(e){let t=e.body;return null===t?0:y(t)?t.size:Buffer.isBuffer(t)?t.length:t&&"function"==typeof t.getLengthSync?t._lengthRetrievers&&0==t._lengthRetrievers.length||t.hasKnownLength&&t.hasKnownLength()?t.getLengthSync():null:null}f.prototype={get body(){return this[g].body},get bodyUsed(){return this[g].disturbed},arrayBuffer(){return w.call(this).then(function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)})},blob(){let e=this.headers&&this.headers.get("content-type")||"";return w.call(this).then(function(t){return Object.assign(new Blob([],{type:e.toLowerCase()}),{[h]:t})})},json(){var e=this;return w.call(this).then(function(t){try{return JSON.parse(t.toString())}catch(t){return f.Promise.reject(new p(`invalid json response body at ${e.url} reason: ${t.message}`,"invalid-json"))}})},text(){return w.call(this).then(function(e){return e.toString()})},buffer(){return w.call(this)},textConverted(){var e=this;return w.call(this).then(function(t){return function(e,t){let i,s;if("function"!=typeof r)throw Error("The package `encoding` must be installed to use the textConverted() function");let o=t.get("content-type"),n="utf-8";return o&&(i=/charset=([^;]*)/i.exec(o)),s=e.slice(0,1024).toString(),!i&&s&&(i=/<meta.+?charset=(['"])(.+?)\1/i.exec(s)),!i&&s&&(!(i=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(s))&&(i=/<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(s))&&i.pop(),i&&(i=/charset=(.*)/i.exec(i.pop()))),!i&&s&&(i=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(s)),i&&("gb2312"===(n=i.pop())||"gbk"===n)&&(n="gb18030"),r(e,"UTF-8",n).toString()}(t,e.headers)})}},Object.defineProperties(f.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}}),f.mixIn=function(e){for(let t of Object.getOwnPropertyNames(f.prototype))if(!(t in e)){let i=Object.getOwnPropertyDescriptor(f.prototype,t);Object.defineProperty(e,t,i)}},f.Promise=global.Promise;let S=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,R=/[^\t\x20-\x7e\x80-\xff]/;function P(e){if(e=`${e}`,S.test(e)||""===e)throw TypeError(`${e} is not a legal HTTP header name`)}function A(e){if(e=`${e}`,R.test(e))throw TypeError(`${e} is not a legal HTTP header value`)}function I(e,t){for(let i in t=t.toLowerCase(),e)if(i.toLowerCase()===t)return i}let D=Symbol("map");let Headers=class Headers{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(this[D]=Object.create(null),e instanceof Headers){let t=e.raw();for(let e of Object.keys(t))for(let i of t[e])this.append(e,i);return}if(null==e);else if("object"==typeof e){let t=e[Symbol.iterator];if(null!=t){if("function"!=typeof t)throw TypeError("Header pairs must be iterable");let i=[];for(let t of e){if("object"!=typeof t||"function"!=typeof t[Symbol.iterator])throw TypeError("Each header pair must be iterable");i.push(Array.from(t))}for(let e of i){if(2!==e.length)throw TypeError("Each header pair must be a name/value tuple");this.append(e[0],e[1])}}else for(let t of Object.keys(e)){let i=e[t];this.append(t,i)}}else throw TypeError("Provided initializer must be an object")}get(e){P(e=`${e}`);let t=I(this[D],e);return void 0===t?null:this[D][t].join(", ")}forEach(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,i=$(this),r=0;for(;r<i.length;){var s=i[r];let o=s[0],n=s[1];e.call(t,n,o,this),i=$(this),r++}}set(e,t){e=`${e}`,t=`${t}`,P(e),A(t);let i=I(this[D],e);this[D][void 0!==i?i:e]=[t]}append(e,t){e=`${e}`,t=`${t}`,P(e),A(t);let i=I(this[D],e);void 0!==i?this[D][i].push(t):this[D][e]=[t]}has(e){return P(e=`${e}`),void 0!==I(this[D],e)}delete(e){P(e=`${e}`);let t=I(this[D],e);void 0!==t&&delete this[D][t]}raw(){return this[D]}keys(){return E(this,"key")}values(){return E(this,"value")}[Symbol.iterator](){return E(this,"key+value")}};function $(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"key+value";return Object.keys(e[D]).sort().map("key"===t?function(e){return e.toLowerCase()}:"value"===t?function(t){return e[D][t].join(", ")}:function(t){return[t.toLowerCase(),e[D][t].join(", ")]})}Headers.prototype.entries=Headers.prototype[Symbol.iterator],Object.defineProperty(Headers.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(Headers.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});let T=Symbol("internal");function E(e,t){let i=Object.create(_);return i[T]={target:e,kind:t,index:0},i}let _=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==_)throw TypeError("Value of `this` is not a HeadersIterator");var e=this[T];let t=e.target,i=e.kind,r=e.index,s=$(t,i);return r>=s.length?{value:void 0,done:!0}:(this[T].index=r+1,{value:s[r],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));Object.defineProperty(_,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});let O=Symbol("Response internals"),x=o.STATUS_CODES;let Response=class Response{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};f.call(this,e,t);let i=t.status||200,r=new Headers(t.headers);if(null!=e&&!r.has("Content-Type")){let t=C(e);t&&r.append("Content-Type",t)}this[O]={url:t.url,status:i,statusText:t.statusText||x[i],headers:r,counter:t.counter}}get url(){return this[O].url||""}get status(){return this[O].status}get ok(){return this[O].status>=200&&this[O].status<300}get redirected(){return this[O].counter>0}get statusText(){return this[O].statusText}get headers(){return this[O].headers}clone(){return new Response(b(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}};f.mixIn(Response.prototype),Object.defineProperties(Response.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}}),Object.defineProperty(Response.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});let F=Symbol("Request internals"),L=n.URL||a.URL,B=n.parse,U=n.format;function N(e){return/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e)&&(e=new L(e).toString()),B(e)}let q="destroy"in s.Readable.prototype;function W(e){return"object"==typeof e&&"object"==typeof e[F]}let Request=class Request{constructor(e){let t,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};W(e)?t=N(e.url):(t=e&&e.href?N(e.href):N(`${e}`),e={});let r=i.method||e.method||"GET";if(r=r.toUpperCase(),(null!=i.body||W(e)&&null!==e.body)&&("GET"===r||"HEAD"===r))throw TypeError("Request with GET/HEAD method cannot have body");let s=null!=i.body?i.body:W(e)&&null!==e.body?b(e):null;f.call(this,s,{timeout:i.timeout||e.timeout||0,size:i.size||e.size||0});let o=new Headers(i.headers||e.headers||{});if(null!=s&&!o.has("Content-Type")){let e=C(s);e&&o.append("Content-Type",e)}let n=W(e)?e.signal:null;if("signal"in i&&(n=i.signal),null!=n&&!function(e){let t=e&&"object"==typeof e&&Object.getPrototypeOf(e);return!!(t&&"AbortSignal"===t.constructor.name)}(n))throw TypeError("Expected signal to be an instanceof AbortSignal");this[F]={method:r,redirect:i.redirect||e.redirect||"follow",headers:o,parsedURL:t,signal:n},this.follow=void 0!==i.follow?i.follow:void 0!==e.follow?e.follow:20,this.compress=void 0!==i.compress?i.compress:void 0===e.compress||e.compress,this.counter=i.counter||e.counter||0,this.agent=i.agent||e.agent}get method(){return this[F].method}get url(){return U(this[F].parsedURL)}get headers(){return this[F].headers}get redirect(){return this[F].redirect}get signal(){return this[F].signal}clone(){return new Request(this)}};function M(e){Error.call(this,e),this.type="aborted",this.message=e,Error.captureStackTrace(this,this.constructor)}f.mixIn(Request.prototype),Object.defineProperty(Request.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(Request.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}}),M.prototype=Object.create(Error.prototype),M.prototype.constructor=M,M.prototype.name="AbortError";let G=n.URL||a.URL,H=s.PassThrough,V=function(e,t){let i=new G(t).hostname,r=new G(e).hostname;return i===r||"."===i[i.length-r.length-1]&&i.endsWith(r)};function j(e,t){if(!j.Promise)throw Error("native promise missing, set fetch.Promise to your favorite alternative");return f.Promise=j.Promise,new j.Promise(function(i,r){var n,a;let u,h,d=new Request(e,t),g=function(e){let t=e[F].parsedURL,i=new Headers(e[F].headers);if(i.has("Accept")||i.set("Accept","*/*"),!t.protocol||!t.hostname)throw TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(t.protocol))throw TypeError("Only HTTP(S) protocols are supported");if(e.signal&&e.body instanceof s.Readable&&!q)throw Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let r=null;if(null==e.body&&/^(POST|PUT)$/i.test(e.method)&&(r="0"),null!=e.body){let t=k(e);"number"==typeof t&&(r=String(t))}r&&i.set("Content-Length",r),i.has("User-Agent")||i.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),e.compress&&!i.has("Accept-Encoding")&&i.set("Accept-Encoding","gzip,deflate");let o=e.agent;return"function"==typeof o&&(o=o(t)),Object.assign({},t,{method:e.method,headers:function(e){let t=Object.assign({__proto__:null},e[D]),i=I(e[D],"Host");return void 0!==i&&(t[i]=t[i][0]),t}(i),agent:o})}(d),m=("https:"===g.protocol?l:o).request,f=d.signal,w=null,v=function(){let e=new M("The user aborted a request.");r(e),d.body&&d.body instanceof s.Readable&&Q(d.body,e),w&&w.body&&w.body.emit("error",e)};if(f&&f.aborted){v();return}let b=function(){v(),P()},C=m(g);function P(){C.abort(),f&&f.removeEventListener("abort",b),clearTimeout(u)}f&&f.addEventListener("abort",b),d.timeout&&C.once("socket",function(e){u=setTimeout(function(){r(new p(`network timeout at: ${d.url}`,"request-timeout")),P()},d.timeout)}),C.on("error",function(e){r(new p(`request to ${d.url} failed, reason: ${e.message}`,"system",e)),w&&w.body&&Q(w.body,e),P()}),n=C,a=function(e){(!f||!f.aborted)&&w&&w.body&&Q(w.body,e)},n.on("socket",function(e){h=e}),n.on("response",function(e){let t=e.headers;"chunked"!==t["transfer-encoding"]||t["content-length"]||e.once("close",function(e){if(h&&h.listenerCount("data")>0&&!e){let e=Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",a(e)}})}),14>parseInt(process.version.substring(1))&&C.on("socket",function(e){e.addListener("close",function(t){let i=e.listenerCount("data")>0;if(w&&i&&!t&&!(f&&f.aborted)){let e=Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",w.body.emit("error",e)}})}),C.on("response",function(e){clearTimeout(u);let t=function(e){let t=new Headers;for(let i of Object.keys(e))if(!S.test(i))if(Array.isArray(e[i]))for(let r of e[i])R.test(r)||(void 0===t[D][i]?t[D][i]=[r]:t[D][i].push(r));else R.test(e[i])||(t[D][i]=[e[i]]);return t}(e.headers);if(j.isRedirect(e.statusCode)){let o=t.get("Location"),n=null;try{n=null===o?null:new G(o,d.url).toString()}catch(e){if("manual"!==d.redirect){r(new p(`uri requested responds with an invalid redirect URL: ${o}`,"invalid-redirect")),P();return}}switch(d.redirect){case"error":r(new p(`uri requested responds with a redirect, redirect mode is set to error: ${d.url}`,"no-redirect")),P();return;case"manual":if(null!==n)try{t.set("Location",n)}catch(e){r(e)}break;case"follow":var s;if(null===n)break;if(d.counter>=d.follow){r(new p(`maximum redirect reached at: ${d.url}`,"max-redirect")),P();return}let a={headers:new Headers(d.headers),follow:d.follow,counter:d.counter+1,agent:d.agent,compress:d.compress,method:d.method,body:d.body,signal:d.signal,timeout:d.timeout,size:d.size};if(!V(d.url,n)||(s=d.url,new G(n).protocol!==new G(s).protocol))for(let e of["authorization","www-authenticate","cookie","cookie2"])a.headers.delete(e);if(303!==e.statusCode&&d.body&&null===k(d)){r(new p("Cannot follow redirect with body being a readable stream","unsupported-redirect")),P();return}(303===e.statusCode||(301===e.statusCode||302===e.statusCode)&&"POST"===d.method)&&(a.method="GET",a.body=void 0,a.headers.delete("content-length")),i(j(new Request(n,a))),P();return}}e.once("end",function(){f&&f.removeEventListener("abort",b)});let o=e.pipe(new H),n={url:d.url,status:e.statusCode,statusText:e.statusMessage,headers:t,size:d.size,timeout:d.timeout,counter:d.counter},a=t.get("Content-Encoding");if(!d.compress||"HEAD"===d.method||null===a||204===e.statusCode||304===e.statusCode){i(w=new Response(o,n));return}let l={flush:c.Z_SYNC_FLUSH,finishFlush:c.Z_SYNC_FLUSH};if("gzip"==a||"x-gzip"==a){i(w=new Response(o=o.pipe(c.createGunzip(l)),n));return}if("deflate"==a||"x-deflate"==a){let t=e.pipe(new H);t.once("data",function(e){i(w=new Response(o=(15&e[0])==8?o.pipe(c.createInflate()):o.pipe(c.createInflateRaw()),n))}),t.on("end",function(){w||i(w=new Response(o,n))});return}if("br"==a&&"function"==typeof c.createBrotliDecompress){i(w=new Response(o=o.pipe(c.createBrotliDecompress()),n));return}i(w=new Response(o,n))});let A=d.body;null===A?C.end():y(A)?A.stream().pipe(C):Buffer.isBuffer(A)?(C.write(A),C.end()):A.pipe(C)})}function Q(e,t){e.destroy?e.destroy(t):(e.emit("error",t),e.end())}j.isRedirect=function(e){return 301===e||302===e||303===e||307===e||308===e},j.Promise=global.Promise;let z=j},8471:function(e,t,i){var r=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))(function(s,o){function n(e){try{l(r.next(e))}catch(e){o(e)}}function a(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(n,a)}l((r=r.apply(e,t||[])).next())})},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});let o=s(i(9278)),n=s(i(4756)),a=s(i(7016)),l=s(i(2613)),c=s(i(5423)),u=i(7359),h=s(i(8730)),d=c.default("https-proxy-agent:agent");let HttpsProxyAgent=class HttpsProxyAgent extends u.Agent{constructor(e){var t;let i;if(!(i="string"==typeof e?a.default.parse(e):e))throw Error("an HTTP(S) proxy server `host` and `port` must be specified!");d("creating new HttpsProxyAgent instance: %o",i),super(i);let r=Object.assign({},i);this.secureProxy=i.secureProxy||"string"==typeof(t=r.protocol)&&/^https:?$/i.test(t),r.host=r.hostname||r.host,"string"==typeof r.port&&(r.port=parseInt(r.port,10)),!r.port&&r.host&&(r.port=this.secureProxy?443:80),!this.secureProxy||"ALPNProtocols"in r||(r.ALPNProtocols=["http 1.1"]),r.host&&r.path&&(delete r.path,delete r.pathname),this.proxy=r}callback(e,t){return r(this,void 0,void 0,function*(){var i,r;let s,{proxy:a,secureProxy:c}=this;c?(d("Creating `tls.Socket`: %o",a),s=n.default.connect(a)):(d("Creating `net.Socket`: %o",a),s=o.default.connect(a));let u=Object.assign({},a.headers),g=`${t.host}:${t.port}`,m=`CONNECT ${g} HTTP/1.1\r
`;a.auth&&(u["Proxy-Authorization"]=`Basic ${Buffer.from(a.auth).toString("base64")}`);let{host:f,port:w,secureEndpoint:v}=t;for(let e of(i=w,((r=v)||80!==i)&&(!r||443!==i)&&(f+=`:${w}`),u.Host=f,u.Connection="close",Object.keys(u)))m+=`${e}: ${u[e]}\r
`;let y=h.default(s);s.write(`${m}\r
`);let{statusCode:b,buffered:C}=yield y;if(200===b){if(e.once("socket",p),t.secureEndpoint){d("Upgrading socket connection to TLS");let e=t.servername||t.host;return n.default.connect(Object.assign(Object.assign({},function(e,...t){let i,r={};for(i in e)t.includes(i)||(r[i]=e[i]);return r}(t,"host","hostname","path","port")),{socket:s,servername:e}))}return s}s.destroy();let k=new o.default.Socket({writable:!1});return k.readable=!0,e.once("socket",e=>{d("replaying proxy buffer for failed request"),l.default(e.listenerCount("data")>0),e.push(C),e.push(null)}),k})}};function p(e){e.resume()}t.default=HttpsProxyAgent},8554:(e,t,i)=>{i.d(t,{HH:()=>m,KH:()=>b,S4:()=>k,Xn:()=>R,_k:()=>v,a$:()=>f,i8:()=>y,jY:()=>P,p8:()=>A,pV:()=>S,zr:()=>w});var r=i(6066);let s=/^([\w\-/]+(?:\.[\w\-/]+)*)?(\.\.\.?)([\w\-/]+(?:\.[\w\-/]+)*)?$/,o=/^([\w\-/]+(?:\.[\w\-/]+)*)(\.\.\.?)([\w\-/]+(?:\.[\w\-/]+)*)$/,n=/^([\w\-/]+(?:\.[\w\-/]+)*)(\.\.)([\w\-/]+(?:\.[\w\-/]+)*)$/,a=/^([\w\-/]+(?:\.[\w\-/]+)*)(\.\.\.)([\w\-/]+(?:\.[\w\-/]+)*)$/,l=/(^[0-9a-f]{40}([\^@~:]\S*)?$)|(^[0]{40}(:|-)$)/,c=/(^[0-9a-f]{40}$)|(^[0]{40}(:|-)$)/,u=/(^[0-9a-f]{40})\^[0-3]?$/,h=/^(.*?)([\^@~:].*)?$/,d=/^[0]{40}(?:[\^@~:]\S*)?:?$/,p=/^[0]{40}([\^@~]\S*)?:$/;function g(e,t){return!!t&&e.test(t)}function m(e){return g(c,e)}function f(e){return g(l,e)}function w(e){return g(u,e)}function v(e,t=!1){return e===r.SU||e===r.id||!t&&g(d,e)}function y(e){return e===`${r.SU}^`||e===`${r.id}^`}function b(e,t=!1){return e===r.id||!t&&g(p,e)}let C=7;function k(e){C=e}function S(e,t){if(e===r.nB)return"(deleted)";if(!e)return t?.strings?.working??"";if(v(e))return b(e)?t?.strings?.uncommittedStaged??"Index":t?.strings?.uncommitted??"Working Tree";if(A(e)||!f(e))return e;let i=Math.max(5,C),s=h.exec(e);if(null!=s){let[,e,t]=s;if(null!=t)return`${e.substring(0,i)}${t}`}return e.substring(0,i)}function R(e,t,i){return`${e??""}${i}${t??""}`}function P(e){let t=s.exec(e);if(null==t)return;let[,i,r,o]=t;return{left:i||void 0,right:o||void 0,notation:r}}function A(e,t="any"){if(null==e)return!1;switch(t){case"qualified":return o.test(e);case"qualified-double-dot":return n.test(e);case"qualified-triple-dot":return a.test(e);default:return s.test(e)}}},8557:(e,t,i)=>{i.d(t,{O5:()=>a,Qw:()=>l,U6:()=>c,ft:()=>s,lb:()=>o,zF:()=>n});var r=i(1518);function s(e){return 1===e.length?e[0]:e.find(e=>e.default)}function o(e){if(0===e.length)return;let t=s(e);if(null!=t)return t.provider.name;let i=e[0].provider.name;if(e.every(e=>e.provider.name===i))return i}function n(e){if(0===e.length)return;let t=s(e);if(null!=t)return[t.provider];let i=e[0].provider.name;if(e.every(e=>e.provider.name===i))return e.map(e=>e.provider)}function a(e){var t;return null!=(t=e?.provider)?`gitlens-provider-${t.icon}`:"cloud"}function l(e){let t=function(e){let t,i,s;for(let{type:t}of e.urls)if("fetch"===t){if(i=!0,s)break}else if("push"===t&&(s=!0,i))break;return i&&s?r.EO.ArrowsRightLeft:s?r.EO.ArrowRight:i?r.EO.ArrowLeft:r.EO.Dash}(e),{provider:i}=e;return null!=i?`${t}${r.EO.Space} ${i.name} ${r.EO.Space}${r.EO.Dot}${r.EO.Space} ${i.displayPath}`:`${t}${r.EO.Space} ${e.domain?`${e.domain} ${r.EO.Space}${r.EO.Dot}${r.EO.Space} `:""}${e.path}`}function c(e){return Array.isArray(e)?e.map(e=>e.remoteKey).sort().join(","):e.remoteKey}},8573:(e,t,i)=>{function r(e,t){return`${e}|tags/${t}`}i.d(t,{gt:()=>r,oq:()=>o});let s=/^(refs\/)?tags\//i;function o(e){return{name:e.replace(s,"")}}},8587:(e,t,i)=>{i.d(t,{T:()=>w});var r=i(1398),s=i(1518),o=i(1974),n=i(6066),a=i(8554),l=i(9403),c=i(4301),u=i(6612),h=i(9439),d=i(7005),p=i(6006),g=i(4338),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor;let w=class extends g.Kt{constructor(e){super("gitlens.diffWith"),this.container=e}static createMarkdownCommandLink(e,t){let i;if((0,o.WM)(e)){if(null==e.file||null==e.unresolvedPreviousSha)throw Error("Commit has no file");i=e.isUncommitted?{repoPath:e.repoPath,lhs:{sha:"HEAD",uri:e.file.uri},rhs:{sha:"",uri:e.file.uri},line:t}:{repoPath:e.repoPath,lhs:{sha:e.unresolvedPreviousSha,uri:e.file.originalUri??e.file.uri},rhs:{sha:e.sha,uri:e.file.uri},line:t}}else i=e;return(0,h.J)("gitlens.diffWith",i)}async execute(e){if(e?.lhs!=null&&e?.rhs!=null&&null!=(e={...e,lhs:{...e.lhs},rhs:{...e.rhs},showOptions:null==e.showOptions?void 0:{...e.showOptions}}).repoPath)try{let t=e.lhs.sha,i=e.rhs.sha;if([e.lhs.sha,e.rhs.sha]=await Promise.all([await this.container.git.refs(e.repoPath).resolveReference(e.lhs.sha,e.lhs.uri,{timeout:(0,a.a$)(e.lhs.sha)?100:void 0}),await this.container.git.refs(e.repoPath).resolveReference(e.rhs.sha,e.rhs.uri,{timeout:(0,a.a$)(e.rhs.sha)?100:void 0})]),e.lhs.sha!==n.nB&&(t=e.lhs.sha),e.rhs.sha&&e.rhs.sha!==n.nB){let t=await this.container.git.commits(e.repoPath).getCommitFileStatus(e.rhs.uri,e.rhs.sha);t?.status==="D"?e.rhs.sha=n.nB:i=e.rhs.sha,t?.status==="A"&&e.lhs.sha.endsWith("^")&&(e.lhs.sha=n.nB)}let[o,l]=await Promise.all([this.container.git.getBestRevisionUri(e.repoPath,e.lhs.uri.fsPath,e.lhs.sha),this.container.git.getBestRevisionUri(e.repoPath,e.rhs.uri.fsPath,e.rhs.sha)]),c=(0,a.pV)(i,{strings:{uncommitted:"Working Tree"}});null==l?c=(0,a._k)(e.rhs.sha)?"deleted":0===c.length&&e.rhs.sha===n.nB?"not in Working Tree":`deleted${0===c.length?"":` in ${c}`}`:null==o&&(c=`added${0===c.length?"":` in ${c}`}`);let h=e.lhs.sha!==n.nB?(0,a.pV)(t):"";null==o&&0===e.rhs.sha.length&&(null!=l?(h=0===h.length?"":`not in ${h}`,c=""):h=`deleted${0===h.length?"":` in ${h}`}`),null==e.lhs.title&&(null!=o||0!==h.length)&&(e.lhs.title=`${(0,p.P8)(e.lhs.uri.fsPath)}${h?` (${h})`:""}`),null==e.rhs.title&&(e.rhs.title=`${(0,p.P8)(e.rhs.uri.fsPath)}${c?` (${c})`:""}`);let d=null!=e.lhs.title&&null!=e.rhs.title?`${e.lhs.title} ${s.EO.ArrowLeftRightLong} ${e.rhs.title}`:e.lhs.title??e.rhs.title;null==e.showOptions&&(e.showOptions={}),null==e.showOptions.viewColumn&&(e.showOptions.viewColumn=r.ViewColumn.Active),null!=e.line&&0!==e.line&&(e.showOptions.selection=new r.Range(e.line,0,e.line,0)),await (0,u.pr)(o??this.container.git.getRevisionUri(n.nB,e.lhs.uri.fsPath,e.repoPath),l??this.container.git.getRevisionUri(n.nB,e.rhs.uri.fsPath,e.repoPath),d,e.showOptions)}catch(e){d.Vy.error(e,"DiffWithCommand","getVersionedFile"),(0,l.qQ)("Unable to open compare")}}};w=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o})([(0,c.G5)()],w)},8611:e=>{e.exports=require("http")},8698:(e,t,i)=>{i.d(t,{Y:()=>SubscribeableViewNode});var r=i(1398),s=i(3500),o=i(4342),n=i(3489),a=i(4063),l=i(9642),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o),o};let SubscribeableViewNode=class SubscribeableViewNode extends a.l{disposable;subscription;loaded=!1;constructor(e,t,i,s){super(e,t,i,s);let o=[(0,n.HC)(this.view.onDidChangeVisibility,this.onVisibilityChanged,this)];(0,l.Qj)(this.view)&&o.push((0,n.HC)(this.view.onDidChangeAutoRefresh,this.onAutoRefreshChanged,this));let a=this.getTreeItem;this.getTreeItem=function(){return this.loaded=!0,this.ensureSubscription(),a.apply(this)};let c=this.getChildren;this.getChildren=function(){return this.loaded=!0,this.ensureSubscription(),c.apply(this)},this.disposable=r.Disposable.from(...o)}dispose(){super.dispose(),this.unsubscribe(),this.disposable?.dispose()}async triggerChange(e=!1,t=!1){this.loaded&&!this._disposed&&(e&&!this.view.visible&&(this._pendingReset=e),await super.triggerChange(e,t))}_canSubscribe=!0;get canSubscribe(){return this._canSubscribe&&!this._disposed}set canSubscribe(e){this._canSubscribe!==e&&(this._canSubscribe=e,this.ensureSubscription(),e&&this.triggerChange())}_etag;_pendingReset=!1;get requiresResetOnVisible(){let e=this._pendingReset;this._pendingReset=!1;let t=this.etag();return t!==this._etag&&(this._etag=t,e=!0),e}async unsubscribe(){if(this._etag=this.etag(),null!=this.subscription){let e=this.subscription;this.subscription=void 0,(await e)?.dispose()}}onAutoRefreshChanged(){this.onVisibilityChanged({visible:this.view.visible})}onVisibilityChanged(e){this.ensureSubscription(),e.visible&&this.triggerChange(this.requiresResetOnVisible)}async ensureSubscription(){if(!this.canSubscribe||!this.view.visible||(0,l.Qj)(this.view)&&!this.view.autoRefresh){await this.unsubscribe();return}null==this.subscription&&(this.subscription=Promise.resolve(this.subscribe()),await this.subscription)}async resetSubscription(){await this.unsubscribe(),await this.ensureSubscription()}};h([(0,o.Yz)()],SubscribeableViewNode.prototype,"triggerChange",1),h([(0,o.Yz)()],SubscribeableViewNode.prototype,"unsubscribe",1),h([(0,o.Yz)()],SubscribeableViewNode.prototype,"onAutoRefreshChanged",1),h([(0,o.Yz)()],SubscribeableViewNode.prototype,"onVisibilityChanged",1),h([(0,s.G)(),(0,o.Yz)()],SubscribeableViewNode.prototype,"ensureSubscription",1),h([(0,s.G)(),(0,o.Yz)()],SubscribeableViewNode.prototype,"resetSubscription",1)},8710:(e,t,i)=>{i.d(t,{E:()=>n,l:()=>ViewFileDecorationProvider});var r=i(1398),s=i(8973),o=i(1518);let ViewFileDecorationProvider=class ViewFileDecorationProvider{_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}disposable;constructor(){this.disposable=r.Disposable.from(this._onDidChange,r.window.registerFileDecorationProvider(this))}dispose(){this.disposable.dispose()}provideFileDecoration(e,t){if(e.scheme===o.xB.Git){let t=(0,s.o)(e);t?.decoration!=null&&(e=r.Uri.parse(t?.decoration))}return function(e,t){if("gitlens-view"===e.scheme)switch(e.authority){case"branch":let i;var s=e,n=0;let l=a(s);switch(l?.status){case"ahead":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchAheadForegroundColor"),tooltip:"Ahead"};break;case"behind":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchBehindForegroundColor"),tooltip:"Behind"};break;case"diverged":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchDivergedForegroundColor"),tooltip:"Diverged"};break;case"missingUpstream":i={badge:o.EO.Warning,color:new r.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"),tooltip:"Missing Upstream"};break;case"upToDate":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor"),tooltip:"Up to Date"};break;case"unpublished":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor"),tooltip:"Unpublished"};break;default:i={badge:"  "}}return l?.showStatusOnly?i:l?.current?{...i,badge:o.EO.Bullseye,tooltip:"Current"}:l?.worktree?.opened?{...i,badge:"●",tooltip:"Opened Worktree"}:l?.starred?{...i,badge:"★",tooltip:"Favorited"}:i;case"commit-file":var c=e,u=0;let h=a(c);switch(h?.status){case"!":return{badge:"I",color:new r.ThemeColor("gitlens.decorations.ignoredForegroundColor"),tooltip:"Ignored"};case"?":return{badge:"U",color:new r.ThemeColor("gitlens.decorations.untrackedForegroundColor"),tooltip:"Untracked"};case"A":return{badge:"A",color:new r.ThemeColor("gitlens.decorations.addedForegroundColor"),tooltip:"Added"};case"C":return{badge:"C",color:new r.ThemeColor("gitlens.decorations.copiedForegroundColor"),tooltip:"Copied"};case"D":return{badge:"D",color:new r.ThemeColor("gitlens.decorations.deletedForegroundColor"),tooltip:"Deleted"};case"M":return{badge:"M",tooltip:"Modified"};case"R":return{badge:"R",color:new r.ThemeColor("gitlens.decorations.renamedForegroundColor"),tooltip:"Renamed"}}return;case"remote":var d=e,p=0;let g=a(d);switch(g?.state){case"default":return{badge:o.EO.Check,tooltip:"Default Remote"};case"missing":return{badge:"?",color:new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor"),tooltip:""}}return;case"repositories":var m=e,f=0;let w=a(m);if(w?.currentWorkspace)return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceCurrentForegroundColor"),tooltip:""};return;case"repository":var v=e,y=0;let b=a(v);if(b?.workspace)switch(b?.state){case"open":return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceRepoOpenForegroundColor"),tooltip:""};case"missing":return{badge:"?",color:new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor"),tooltip:""}}return;case"status":var C=e,k=0;let S=a(C);switch(S?.status){case"cherry-pick":case"merge":case"rebase":case"revert":if(S?.conflicts)return{badge:"!",color:new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")};return{color:new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor")}}return;case"workspace":var R=e,P=0;let A=a(R);if(A?.current)return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceCurrentForegroundColor"),tooltip:""};return;case"worktree":var I=e,D=0;let $=a(I);return $?.missing?{badge:o.EO.Warning,color:new r.ThemeColor("gitlens.decorations.worktreeMissingForegroundColor"),tooltip:""}:$?.hasChanges?{badge:"●",color:new r.ThemeColor("gitlens.decorations.worktreeHasUncommittedChangesForegroundColor"),tooltip:"Has Uncommitted Changes"}:void 0}}(e,t)}};function n(e,t){let i=new URLSearchParams;return i.set("state",JSON.stringify(t)),r.Uri.parse(`gitlens-view://${e}?${i.toString()}`)}function a(e){let t=new URLSearchParams(e.query).get("state");if(null!=t)return JSON.parse(t)}},8730:function(e,t,i){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});let s=r(i(5423)).default("https-proxy-agent:parse-proxy-response");t.default=function(e){return new Promise((t,i)=>{let r=0,o=[];function n(){let i=e.read();i?function(e){o.push(e),r+=e.length;let i=Buffer.concat(o,r);if(-1===i.indexOf("\r\n\r\n")){s("have not received end of HTTP headers yet..."),n();return}let a=i.toString("ascii",0,i.indexOf("\r\n")),l=+a.split(" ")[1];s("got proxy server response: %o",a),t({statusCode:l,buffered:i})}(i):e.once("readable",n)}function a(e){s("onclose had error %o",e)}function l(){s("onend")}e.on("error",function t(r){e.removeListener("end",l),e.removeListener("error",t),e.removeListener("close",a),e.removeListener("readable",n),s("onerror %o",r),i(r)}),e.on("close",a),e.on("end",l),n()})}},8754:(e,t,i)=>{i.d(t,{Z:()=>StatusFileNode});var r=i(1398),s=i(5030),o=i(3088),n=i(9349),a=i(2775),l=i(8554),c=i(4301),u=i(377),h=i(6006),d=i(4252),p=i(9642),g=i(2436);let StatusFileNode=class StatusFileNode extends d.u${_files;_hasStagedChanges;_hasUnstagedChanges;_type;constructor(e,t,i,r,s){let n,a;for(let e of r.reverse())null==n?n=e:("M"===n.status||"M"!==e.status)&&(n=e);n??=r[r.length-1];let l=!1,c=!1;for(let{commit:e}of r)if(e.isUncommitted)if(e.isUncommittedStaged){l=!0,c||(a=e.sha);break}else a=void 0,c=!0;else if(c)break;else{a=e.sha;break}super("status-file",o.nk.fromFile(n,i,a),e,t,n),this._files=r,this._type=s,this._hasStagedChanges=l,this._hasUnstagedChanges=c}toClipboard(){return this.fileName}get fileName(){return this.file.path}getChildren(){return this._files.map(e=>new g.f(this.view,this,e,e.commit))}getTreeItem(){let e=1===this._files.length,t=new r.TreeItem(this.label,e?r.TreeItemCollapsibleState.None:r.TreeItemCollapsibleState.Collapsed);t.description=this.description,t.command=this.getCommand();let i=this._files.map(t=>`${(0,d.o1)(t,e?"":`in \`\`\`${t.commit.isUncommitted?"":"$(git-commit) "}${(0,l.pV)(t.commit.sha)}\`\`\``)}${(0,n.H)(t)&&null!=t.stats?"\n\n":"\\\n"}`).join("").trim();if(i.endsWith("\\")&&(i=i.slice(0,-1)),t.tooltip=new r.MarkdownString(i,!0),this._hasStagedChanges||this._hasUnstagedChanges)t.contextValue=p.U0.File,t.contextValue+=this._hasStagedChanges?"+staged":"",t.contextValue+=this._hasUnstagedChanges?"+unstaged":"",t.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),t.iconPath=r.ThemeIcon.File;else{t.contextValue=p.U0.StatusFileCommits;let e=(0,a.O)(this.file.status);t.iconPath={dark:this.view.container.context.asAbsolutePath((0,h.HS)("images","dark",e)),light:this.view.container.context.asAbsolutePath((0,h.HS)("images","light",e))}}return this._label=void 0,this._description=void 0,t}_description;get description(){return null==this._description&&(this._description=s.Z.fromTemplate(this.view.config.formats.files.description,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,u.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=s.Z.fromTemplate(this.view.config.formats.files.label,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._label}get commit(){return this._files[0]?.commit}get priority(){return this._hasStagedChanges&&!this._hasUnstagedChanges?-3:this._hasStagedChanges?-2:this._hasUnstagedChanges?-1:0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){let e;if((this._hasStagedChanges||this._hasUnstagedChanges)&&1===this._files.length)return(0,c.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{commit:this.commit,uri:o.nk.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}});switch(this._type){case"ahead":case"behind":{let t=this._files[this._files.length-1].commit,i=this._files[0].commit;e={lhs:{sha:`${t.sha}^`,uri:o.nk.fromFile(t.files?.find(e=>e.path===this.file.path)??this.file.path,this.repoPath,`${t.sha}^`,!0)},rhs:{sha:i.sha,uri:o.nk.fromFile(i.files?.find(e=>e.path===this.file.path)??this.file.path,this.repoPath,i.sha)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};break}default:{let t=this._files[this._files.length-1].commit,i=t.files?.find(e=>e.path===this.file.path)??this.file;e={lhs:{sha:`${t.sha}^`,uri:o.nk.fromFile(i,this.repoPath,void 0,!0)},rhs:{sha:"",uri:o.nk.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}}}}return(0,c.gu)("gitlens.diffWith","Open Changes",e)}}},8811:(e,t,i)=>{i.d(t,{BI:()=>n,Wf:()=>p,b_:()=>l,nL:()=>c,pL:()=>g,pr:()=>h,wL:()=>m,x1:()=>d,xu:()=>u});var r=i(1398),s=i(6612),o=i(8557);function n(e,t){switch(t?.status){case"ahead":case"behind":case"diverged":return(0,s.G5)(e,`icon-branch-${t.status}.svg`);case"upToDate":return(0,s.G5)(e,"icon-branch-synced.svg");default:return new r.ThemeIcon("git-branch")}}let a={".":void 0,"!":"diff-ignored","?":"diff-added",A:"diff-added",D:"diff-removed",M:"diff-modified",R:"diff-renamed",C:"diff-added",AA:"warning",AU:"warning",UA:"warning",DD:"warning",DU:"warning",UD:"warning",UU:"warning",T:"diff-modified",U:"diff-modified"};function l(e){let t=a[e];return null!=t?new r.ThemeIcon(t):void 0}function c(e){if(null==e)return`<span class="codicon codicon-link" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;if("pullrequest"!==e.type)return e.closed?`<span class="codicon codicon-pass" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`:`<span class="codicon codicon-issues" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;switch(e.state){case"merged":return`<span class="codicon codicon-git-merge" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;case"closed":return`<span class="codicon codicon-git-pull-request-closed" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#f85149":"#cf222e"};"></span>`;case"opened":return`<span class="codicon codicon-git-pull-request" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;default:return'<span class="codicon codicon-git-pull-request"></span>'}}function u(e){if(null==e)return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(link)</span>`;if("pullrequest"!==e.type)return e.closed?`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(pass)</span>`:`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(issues)</span>`;switch(e.state){case"merged":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(git-merge)</span>`;case"closed":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#f85149":"#cf222e"};">$(git-pull-request-closed)</span>`;case"opened":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(git-pull-request)</span>`;default:return"$(git-pull-request)"}}function h(e){if(null==e)return new r.ThemeIcon("link",new r.ThemeColor("gitlens.closedAutolinkedIssueIconColor"));if("pullrequest"!==e.type)return e.closed?new r.ThemeIcon("pass",new r.ThemeColor("gitlens.closedAutolinkedIssueIconColor")):new r.ThemeIcon("issues",new r.ThemeColor("gitlens.openAutolinkedIssueIconColor"));switch(e.state){case"merged":return new r.ThemeIcon("git-merge",new r.ThemeColor("gitlens.mergedPullRequestIconColor"));case"closed":return new r.ThemeIcon("git-pull-request-closed",new r.ThemeColor("gitlens.closedPullRequestIconColor"));case"opened":return new r.ThemeIcon("git-pull-request",new r.ThemeColor("gitlens.openPullRequestIconColor"));default:return new r.ThemeIcon("git-pull-request")}}function d(e,t,i){return i?.avatars&&t?.provider?.icon!=null?(0,s.G5)(e,`icon-${t.provider.icon}.svg`):new r.ThemeIcon((0,o.O5)(t))}function p(e,t,i,o=r.window.activeColorTheme){if(t.provider?.icon==null)return;let n=r.Uri.joinPath(e.context.extensionUri,`images/${(0,s.kH)(o)?"light":"dark"}/icon-${t.provider.icon}.svg`);return null!=i?i(n):n}function g(e,t,i){let r=t.virtual?"-cloud":"",o=i?.branchStatus;switch(o){case"ahead":case"behind":case"diverged":return(0,s.G5)(e,`icon-repo-${o}${r}.svg`);case"upToDate":if(i?.hasWorkingTreeChanges)return(0,s.G5)(e,`icon-repo-changes${r}.svg`);return(0,s.G5)(e,`icon-repo-synced${r}.svg`);default:if(i?.hasWorkingTreeChanges)return(0,s.G5)(e,`icon-repo-changes${r}.svg`);return(0,s.G5)(e,`icon-repo${r}.svg`)}}function m(e,t,i){switch(t?.status){case"ahead":case"behind":case"diverged":return(0,s.G5)(e,`icon-repo-${t.status}.svg`);case"upToDate":if(i?.hasWorkingTreeChanges)return(0,s.G5)(e,"icon-repo-changes.svg");return(0,s.G5)(e,"icon-repo-synced.svg");default:if(i?.hasWorkingTreeChanges)return(0,s.G5)(e,"icon-repo-changes.svg");return(0,s.G5)(e,"icon-repo.svg")}}},8834:(e,t,i)=>{t.URL=i(7016).URL},8860:(e,t,i)=>{i.d(t,{h:()=>s});var r=i(9349);function s(e,t,i){return t.map(t=>{let s=i.find(e=>e.path===t.path)?.stats;return null!=s?new r.l(e,t.repoPath,t.path,t.status,t.originalPath,t.previousSha,s,t.staged):t})}},8929:(e,t,i)=>{i.d(t,{EL:()=>a,VN:()=>l});var r=i(1398),s=i(6006);let o=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/,n=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/;function a(e){var t,i;if("string"==typeof e&&(0,s.bm)(e)&&(e=r.Uri.parse(e)),"string"==typeof e){return(t=e,o.test(t))?e:(e=(0,s.Fd)(e),`/~0${47===e.charCodeAt(0)?e:`/${e}`}`)}let n=e.fsPath;return(i=n,o.test(i))?e:(n=(0,s.Fd)(n),e.with({path:`/~0${47===n.charCodeAt(0)?n:`/${n}`}`}))}function l(e){return n.test(e)}},8973:(e,t,i)=>{i.d(t,{o:()=>s});var r=i(1518);function s(e){if(e.scheme===r.xB.Git)try{return JSON.parse(e.query)}catch{}}},9023:e=>{e.exports=require("util")},9123:(e,t,i)=>{i.d(t,{d:()=>u,r:()=>GitTag});var r=i(4941),s=i(4499),o=i(7005),n=i(8573),a=Object.defineProperty,l=Object.getOwnPropertyDescriptor,c=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?l(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&a(t,i,o),o};function u(e){return e instanceof GitTag}let GitTag=class GitTag{constructor(e,t,i,r,s,o,a){this.container=e,this.repoPath=t,this.refName=i,this.sha=r,this.message=s,this.date=o,this.commitDate=a,({name:this._name}=(0,n.oq)(i)),this.id=(0,n.gt)(t,this._name)}refType="tag";id;_name;get name(){return this._name}toString(){return`${(0,o.zu)(this)}(${this.id})`}get formattedDate(){return"absolute"===this.container.TagDateFormatting.dateStyle?this.formatDate(this.container.TagDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.name}formatCommitDate(e){return null!=this.commitDate?(0,r.Yq)(this.commitDate,e??"MMMM Do, YYYY h:mma"):""}formatCommitDateFromNow(){return null!=this.commitDate?(0,r.PI)(this.commitDate):""}formatDate(e){return null!=this.date?(0,r.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,r.PI)(this.date):""}getBasename(){let e=this.name.lastIndexOf("/");return -1!==e?this.name.substring(e+1):this.name}};c([(0,s.B)(e=>e??"MMMM Do, YYYY h:mma")],GitTag.prototype,"formatCommitDate",1),c([(0,s.B)(e=>e??"MMMM Do, YYYY h:mma")],GitTag.prototype,"formatDate",1),c([(0,s.B)()],GitTag.prototype,"getBasename",1)},9219:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t,i){return new Promise((r,s)=>{e.call(this,t,i,(e,t)=>{e?s(e):r(t)})})}}},9259:function(e){var t,i,r,s,o,n,a,l,c,u,h,d,p,g,m,f,w,v,y,b,C,k,S,R,P,A,I,D,$,T,E,_,O,x,F,L,B,U,N;"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global&&global,r="3.7.5",s="function"==typeof atob,o="function"==typeof btoa,n="function"==typeof Buffer,a="function"==typeof TextDecoder?new TextDecoder:void 0,l="function"==typeof TextEncoder?new TextEncoder:void 0,u=(i={},(c=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")).forEach(function(e,t){return i[e]=t}),i),h=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,d=String.fromCharCode.bind(String),p="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(e){return new Uint8Array(Array.prototype.slice.call(e,0))},g=function(e){return e.replace(/=/g,"").replace(/[+\/]/g,function(e){return"+"==e?"-":"_"})},m=function(e){return e.replace(/[^A-Za-z0-9\+\/]/g,"")},f=function(e){for(var t,i,r,s,o="",n=e.length%3,a=0;a<e.length;){if((i=e.charCodeAt(a++))>255||(r=e.charCodeAt(a++))>255||(s=e.charCodeAt(a++))>255)throw TypeError("invalid character found");o+=c[(t=i<<16|r<<8|s)>>18&63]+c[t>>12&63]+c[t>>6&63]+c[63&t]}return n?o.slice(0,n-3)+"===".substring(n):o},w=o?function(e){return btoa(e)}:n?function(e){return Buffer.from(e,"binary").toString("base64")}:f,v=n?function(e){return Buffer.from(e).toString("base64")}:function(e){for(var t=[],i=0,r=e.length;i<r;i+=4096)t.push(d.apply(null,e.subarray(i,i+4096)));return w(t.join(""))},y=function(e,t){return void 0===t&&(t=!1),t?g(v(e)):v(e)},b=function(e){if(e.length<2){var t=e.charCodeAt(0);return t<128?e:t<2048?d(192|t>>>6)+d(128|63&t):d(224|t>>>12&15)+d(128|t>>>6&63)+d(128|63&t)}var t=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return d(240|t>>>18&7)+d(128|t>>>12&63)+d(128|t>>>6&63)+d(128|63&t)},C=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,k=function(e){return e.replace(C,b)},S=n?function(e){return Buffer.from(e,"utf8").toString("base64")}:l?function(e){return v(l.encode(e))}:function(e){return w(k(e))},R=function(e,t){return void 0===t&&(t=!1),t?g(S(e)):S(e)},P=function(e){return R(e,!0)},A=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,I=function(e){switch(e.length){case 4:var t=((7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3))-65536;return d((t>>>10)+55296)+d((1023&t)+56320);case 3:return d((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return d((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},D=function(e){return e.replace(A,I)},$=function(e){if(e=e.replace(/\s+/g,""),!h.test(e))throw TypeError("malformed base64.");e+="==".slice(2-(3&e.length));for(var t,i,r,s="",o=0;o<e.length;)t=u[e.charAt(o++)]<<18|u[e.charAt(o++)]<<12|(i=u[e.charAt(o++)])<<6|(r=u[e.charAt(o++)]),s+=64===i?d(t>>16&255):64===r?d(t>>16&255,t>>8&255):d(t>>16&255,t>>8&255,255&t);return s},T=s?function(e){return atob(m(e))}:n?function(e){return Buffer.from(e,"base64").toString("binary")}:$,E=n?function(e){return p(Buffer.from(e,"base64"))}:function(e){return p(T(e).split("").map(function(e){return e.charCodeAt(0)}))},_=function(e){return E(x(e))},O=n?function(e){return Buffer.from(e,"base64").toString("utf8")}:a?function(e){return a.decode(E(e))}:function(e){return D(T(e))},x=function(e){return m(e.replace(/[-_]/g,function(e){return"-"==e?"+":"/"}))},F=function(e){return O(x(e))},L=function(e){return{value:e,enumerable:!1,writable:!0,configurable:!0}},B=function(){var e=function(e,t){return Object.defineProperty(String.prototype,e,L(t))};e("fromBase64",function(){return F(this)}),e("toBase64",function(e){return R(this,e)}),e("toBase64URI",function(){return R(this,!0)}),e("toBase64URL",function(){return R(this,!0)}),e("toUint8Array",function(){return _(this)})},U=function(){var e=function(e,t){return Object.defineProperty(Uint8Array.prototype,e,L(t))};e("toBase64",function(e){return y(this,e)}),e("toBase64URI",function(){return y(this,!0)}),e("toBase64URL",function(){return y(this,!0)})},(N={version:r,VERSION:r,atob:T,atobPolyfill:$,btoa:w,btoaPolyfill:f,fromBase64:F,toBase64:R,encode:R,encodeURI:P,encodeURL:P,utob:k,btou:D,decode:F,isValid:function(e){if("string"!=typeof e)return!1;var t=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(t)||!/[^\s0-9a-zA-Z\-_]/.test(t)},fromUint8Array:y,toUint8Array:_,extendString:B,extendUint8Array:U,extendBuiltins:function(){B(),U()}}).Base64={},Object.keys(N).forEach(function(e){return N.Base64[e]=N[e]}),e.exports=N},9278:e=>{e.exports=require("net")},9317:(e,t,i)=>{i.d(t,{Gv:()=>o,Yv:()=>n,pf:()=>l,tI:()=>s,z2:()=>a});var r=i(8554);function s(e,t){return{repoPath:e,base:{ref:t.base.sha,label:`${t.base.branch} (${(0,r.pV)(t.base.sha)})`},head:{ref:t.head.sha,label:t.head.branch}}}function o(e){let t,i=e.match(/(?:\/)(\d+)/);return null!=i&&(t=i[1]),null==t&&null!=(i=e.match(/^#?(\d+)$/))&&(t=i[1]),null==t?void 0:{ownerAndRepo:void 0,prNumber:t,provider:void 0}}function n(e,t=!0){return t?{remote:{url:e.refs?.head?.url,domain:e.provider.domain},name:`${e.refs?.head?.owner??e.repository.owner}/${e.refs?.head?.repo??e.repository.repo}`,provider:{id:e.provider.id,domain:e.provider.domain,repoDomain:e.refs?.head?.owner??e.repository.owner,repoName:e.refs?.head?.repo??e.repository.repo}}:{remote:{url:e.refs?.base?.url??e.url,domain:e.provider.domain},name:`${e.refs?.base?.owner??e.repository.owner}/${e.refs?.base?.repo??e.repository.repo}`,provider:{id:e.provider.id,domain:e.provider.domain,repoDomain:e.refs?.base?.owner??e.repository.owner,repoName:e.refs?.base?.repo??e.repository.repo,repoOwnerDomain:e.refs?.base?.owner??e.repository.owner}}}function a(e){return null!=o(e)}function l(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate,closed:e.closed,author:{id:e.author.id,name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},state:e.state,mergedDate:e.mergedDate,mergeableState:e.mergeableState,refs:e.refs?{head:{exists:e.refs.head.exists,owner:e.refs.head.owner,repo:e.refs.head.repo,sha:e.refs.head.sha,branch:e.refs.head.branch,url:e.refs.head.url},base:{exists:e.refs.base.exists,owner:e.refs.base.owner,repo:e.refs.base.repo,sha:e.refs.base.sha,branch:e.refs.base.branch,url:e.refs.base.url},isCrossRepository:e.refs.isCrossRepository}:void 0,isDraft:e.isDraft,additions:e.additions,deletions:e.deletions,commentsCount:e.commentsCount,thumbsUpCount:e.thumbsUpCount,reviewDecision:e.reviewDecision,reviewRequests:e.reviewRequests,assignees:e.assignees,project:e.project?{id:e.project.id,name:e.project.name,resourceId:e.project.resourceId,resourceName:e.project.resourceName}:void 0}}},9326:(e,t,i)=>{i.d(t,{T:()=>UriSet});let UriMap=class UriMap{static defaultToKey=e=>e.toString();[Symbol.toStringTag]="UriMap";_map;constructor(e){if(this._map=new Map,e?.length)for(let[t,i]of e)this.set(t,i)}set(e,t){return this._map.set(UriMap.defaultToKey(e),{uri:e,value:t}),this}get(e){return this._map.get(UriMap.defaultToKey(e))?.value}has(e){return this._map.has(UriMap.defaultToKey(e))}get size(){return this._map.size}clear(){this._map.clear()}delete(e){return this._map.delete(UriMap.defaultToKey(e))}forEach(e,t){for(let[i,r]of(void 0!==t&&(e=e.bind(t)),this._map))e(r.value,r.uri,this)}*values(){for(let e of this._map.values())yield e.value}*keys(){for(let e of this._map.values())yield e.uri}*entries(){for(let e of this._map.values())yield[e.uri,e.value]}*[Symbol.iterator](){for(let[,e]of this._map)yield[e.uri,e.value]}};let UriSet=class UriSet{[Symbol.toStringTag]="UriSet";_map;constructor(e){if(this._map=new UriMap,e?.length)for(let t of e)this.add(t)}get size(){return this._map.size}add(e){return this._map.set(e,e),this}clear(){this._map.clear()}delete(e){return this._map.delete(e)}forEach(e,t){this._map.forEach((i,r)=>e.call(t,r,r,this))}has(e){return this._map.has(e)}entries(){return this._map.entries()}keys(){return this._map.keys()}values(){return this._map.keys()}[Symbol.iterator](){return this.keys()}}},9349:(e,t,i)=>{i.d(t,{H:()=>c,l:()=>GitFileChange});var r=i(4499),s=i(3934),o=i(1079),n=Object.defineProperty,a=Object.getOwnPropertyDescriptor,l=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?a(t,i):t,l=e.length-1;l>=0;l--)(s=e[l])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n(t,i,o),o};function c(e){return e instanceof GitFileChange}let GitFileChange=class GitFileChange{constructor(e,t,i,r,s,o,n,a){this.container=e,this.repoPath=t,this.path=i,this.status=r,this.originalPath=s,this.previousSha=o,this.stats=n,this.staged=a}get hasConflicts(){switch(this.status){case o.Vk.AddedByThem:case o.Vk.AddedByUs:case o.Vk.AddedByBoth:case o.Vk.DeletedByThem:case o.Vk.DeletedByUs:case o.Vk.DeletedByBoth:case o.Vk.ModifiedByBoth:return!0;default:return!1}}get uri(){return this.container.git.getAbsoluteUri(this.path,this.repoPath)}get originalUri(){return this.originalPath?this.container.git.getAbsoluteUri(this.originalPath,this.repoPath):void 0}getWorkingUri(){return this.container.git.getWorkingUri(this.repoPath,this.uri)}formatStats(e,t){let{stats:i}=this;if(null==i)return t?.empty??"";let{additions:r,deletions:o}=i;if(r<0&&o<0)return t?.empty??"";let n=t?.separator??" ",a=[];if(r){let i="expanded"===e?`${(0,s.td)("line",r)} added`:`+${r}`;t?.color&&"short"!==e?a.push(`<span style="color:var(--vscode-gitDecoration-addedResourceForeground);">${i}</span>`):a.push(i)}else"stats"===e&&(t?.color?a.push('<span style="color:var(--vscode-gitDecoration-addedResourceForeground);">+0</span>'):a.push("+0"));if(o){let i="expanded"===e?`${(0,s.td)("line",o)} deleted`:`-${o}`;t?.color&&"short"!==e?a.push(`<span style="color:var(--vscode-gitDecoration-deletedResourceForeground);">${i}</span>`):a.push(i)}else"stats"===e&&(t?.color?a.push('<span style="color:var(--vscode-gitDecoration-deletedResourceForeground);">-0</span>'):a.push("-0"));let l=a.join(n);return"stats"===e&&t?.color&&(l=`<span style="background-color:var(--vscode-textCodeBlock-background);border-radius:3px;">&nbsp;${l}&nbsp;&nbsp;</span>`),`${t?.prefix??""}${l}`}};l([(0,r.B)()],GitFileChange.prototype,"uri",1),l([(0,r.B)()],GitFileChange.prototype,"originalUri",1),l([(0,r.B)()],GitFileChange.prototype,"getWorkingUri",1)},9403:(e,t,i)=>{i.d(t,{A5:()=>S,AO:()=>C,AQ:()=>A,CR:()=>k,D5:()=>w,Dg:()=>u,JS:()=>y,Ng:()=>I,U_:()=>E,_o:()=>v,c8:()=>D,gD:()=>f,hU:()=>R,iJ:()=>P,ky:()=>p,lW:()=>T,o2:()=>b,pR:()=>h,pW:()=>d,pn:()=>g,qQ:()=>m,wW:()=>$});var r=i(1398),s=i(1518),o=i(4505),n=i(4301),a=i(1078),l=i(6612),c=i(7005);function u(e){return e instanceof o.UM?_("error",`Unable to show blame. Invalid revision (${e.revision}) specified in the blame.ignoreRevsFile in your Git config.`,"suppressBlameInvalidIgnoreRevsFileBadRevisionWarning"):_("error",`Unable to show blame. Invalid or missing blame.ignoreRevsFile (${e.fileName}) specified in your Git config.`,"suppressBlameInvalidIgnoreRevsFileWarning")}function h(e){return null==e?_("info","There is no previous commit.","suppressCommitHasNoPreviousCommitWarning"):_("info",`Commit ${e.shortSha} (${e.author.name}, ${e.formattedDate}) has no previous commit.`,"suppressCommitHasNoPreviousCommitWarning")}function d(e){return _("warn",`${e}. The commit could not be found.`,"suppressCommitNotFoundWarning")}async function p(e){let t={title:"Create Pull Request..."};return await _("info",`Would you like to create a Pull Request for branch '${e}'?`,"suppressCreatePullRequestPrompt",{title:"Don't Show Again"},t)===t}async function g(){let e={title:"Disable Debug Logging"};return await _("warn","GitLens debug logging is currently enabled. Unless you are reporting an issue, it is recommended to be disabled. Would you like to disable it?","suppressDebugLoggingWarning",{title:"Don't Show Again"},e)===e}async function m(e){c.Vy.enabled("error")?null!=await _("error",`${e}. See output channel for more details.`,void 0,null,{title:"Open Output Channel"})&&c.Vy.showOutputChannel():null!=await _("error",`${e}. If the error persists, please enable debug logging and try again.`,void 0,null,{title:"Enable Debug Logging"})&&(0,n.RS)("gitlens.enableDebugLogging")}function f(e){return _("warn",`${e}. The file is probably not under source control.`,"suppressFileNotUnderSourceControlWarning")}function w(){return _("error","GitLens requires Git to be enabled. Please re-enable Git — set `git.enabled` to true and reload.","suppressGitDisabledWarning")}function v(){return _("error","GitLens is unable to use Git. Your Git configuration seems to be invalid. Please resolve any issues with your Git configuration and reload.")}function y(){return _("error","GitLens was unable to find Git. Please make sure Git is installed. Also ensure that Git is either in the PATH, or that 'git.path' is pointed to its installed location.","suppressGitMissingWarning")}function b(e,t){return _("error",`GitLens requires a newer version of Git (>= ${t}) than is currently installed (${e}). Please install a more recent version of Git.`,"suppressGitVersionWarning")}async function C(e){let t={title:"Upgrade"},i=await _("error",`This pre-release version (${e}) of GitLens has expired. Please upgrade to a more recent pre-release, or switch to the release version.`,void 0,null,t);i===t?(0,n.S4)("workbench.extensions.installExtension","eamodio.gitlens",{installPreReleaseVersion:!0}):i==={title:"Switch to Release Version"}&&(0,n.S4)("workbench.extensions.action.switchToRelease","eamodio.gitlens")}function k(e){return _("warn",`${e}. The line has uncommitted changes.`,"suppressLineUncommittedWarning")}function S(e){return _("warn",`${e}. No repository could be found.`,"suppressNoRepositoryWarning")}function R(){return _("warn","Closing either the git-rebase-todo file or the Rebase Editor will start the rebase.","suppressRebaseSwitchToTextWarning")}function P(){return _("error","Requests to GitKraken have stopped being sent for this session, because of too many failed requests.","suppressGkDisconnectedTooManyFailedRequestsWarningMessage",void 0,{title:"OK"})}function A(e){return _("error",e,"suppressGkRequestFailed500Warning",void 0,{title:"OK"})}function I(){return _("error","GitKraken request timed out.","suppressGkRequestTimedOutWarning",void 0,{title:"OK"})}function D(e){return _("error",`Rich integration with ${e} has been disconnected for this session, because of too many failed requests.`,"suppressIntegrationDisconnectedTooManyFailedRequestsWarning",void 0,{title:"OK"})}function $(e){return _("error",e,"suppressIntegrationRequestFailed500Warning",void 0,{title:"OK"})}function T(e){return _("error",`${e} request timed out.`,"suppressIntegrationRequestTimedOutWarning",void 0,{title:"OK"})}async function E(e){let t={title:"View Release Notes"};await _("info",`Upgraded to GitLens ${e}${"17"===e?" with all new [GitKraken AI](https://gitkraken.com/solutions/gitkraken-ai?source=gitlens&product=gitlens&utm_source=gitlens-extension&utm_medium=in-app-links) access included in GitLens Pro, AI changelog and pull request creation, and Bitbucket integration.":" — see what's new."}`,void 0,null,t,{title:"OK",isCloseAffordance:!0})===t&&(0,l.CZ)(s.DS.releaseNotes)}async function _(e,t,i,s={title:"Don't Show Again"},...o){let n;if(c.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)})`),null!=i&&a.H.get(`advanced.messages.${i}`)){c.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) skipped`);return}switch(null!=i&&null!==s&&o.push(s),e){case"info":n=await r.window.showInformationMessage(t,...o);break;case"warn":n=await r.window.showWarningMessage(t,...o);break;case"error":n=await r.window.showErrorMessage(t,...o)}if(null==i||null!==s&&n!==s||(c.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) don't show again requested`),await function(e){let t={...a.H.get("advanced.messages")};for(let[i,r]of(t[e]=!0,Object.entries(t)))!0!==r&&delete t[i];return a.H.update("advanced.messages",t,r.ConfigurationTarget.Global)}(i),n!==s))return c.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) returned ${null!=n?n.title:n}`),n}},9412:(e,t,i)=>{i.d(t,{N:()=>MergeConflictCurrentChangesNode});var r=i(1398),s=i(1518),o=i(3088),n=i(2636),a=i(4301),l=i(1078),c=i(9642),u=i(2436);let MergeConflictCurrentChangesNode=class MergeConflictCurrentChangesNode extends c.eu{constructor(e,t,i,r){super("conflict-current-changes",o.nk.fromFile(r,i.repoPath,"HEAD"),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){return this._commit??=this.view.container.git.commits(this.status.repoPath).getCommit("HEAD"),this._commit}getChildren(){return[]}async getTreeItem(){let e=await this.getCommit(),t=new r.TreeItem("Current changes",r.TreeItemCollapsibleState.None);return t.contextValue=c.U0.MergeConflictCurrentChanges,t.description=`${(0,n.M4)(this.status.current,{expand:!1,icon:!1})}${null!=e?` (${(0,n.M4)(e,{expand:!1,icon:!1})})`:" (HEAD)"}`,t.iconPath=this.view.config.avatars?await e?.getAvatarUri({defaultStyle:l.H.get("defaultGravatarsStyle")})??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.Jl)("vscode.open","Open Revision",this.view.container.git.getRevisionUri("HEAD",this.file.path,this.status.repoPath)):(0,a.gu)("gitlens.diffWith","Open Changes",{lhs:{sha:this.status.mergeBase,uri:o.nk.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:"HEAD",uri:o.nk.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${(0,n.M4)(this.status.current,{expand:!1,icon:!1})})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t=await this.getCommit();if(e.isCancellationRequested)return;let i=new r.MarkdownString(`Current changes on ${(0,n.M4)(this.status.current,{label:!1})}\\
$(file)${s.EO.Space}${this.file.path}`,!0);if(null==t)return i;let o=await (0,u.m)(this.view.container,t,this.file,this.view.config.formats.commits.tooltipWithStatus,{cancellation:e});return i.appendMarkdown(`

${o}`),i.isTrusted=!0,i}}},9426:(e,t,i)=>{i.d(t,{UZ:()=>T,Vy:()=>O,Zh:()=>x,_v:()=>_,hJ:()=>L,pX:()=>F,qJ:()=>LaunchpadProvider});var r=i(1398),s=i(2458),o=i(457),n=i(8336),a=i(1192),l=i(9842),c=i(9317),u=i(4301),h=i(1078),d=i(655),p=i(6612),g=i(3500),m=i(4342),f=i(7747),w=i(7005),v=i(5419),y=i(5576),b=i(9881),C=i(3373),k=i(4015),S=i(3951),R=i(6461),P=i(495),A=i(8286),I=Object.defineProperty,D=Object.getOwnPropertyDescriptor,$=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?D(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&I(t,i,o),o};let T=[o.Q7.GitHub,o.PY.CloudGitHubEnterprise,o.Q7.GitLab,o.PY.CloudGitLabSelfHosted,o.Q7.AzureDevOps,o.Q7.Bitbucket,o.PY.BitbucketServer];function E(e){return T.includes(e)}let LaunchpadProvider=class LaunchpadProvider{constructor(e){this.container=e,this._disposable=r.Disposable.from(this._onDidChange,this._onDidRefresh,h.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(this.onIntegrationConnectionStateChanged,this),...this.registerCommands())}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidRefresh=new r.EventEmitter;get onDidRefresh(){return this._onDidRefresh.event}_disposable;dispose(){this._disposable.dispose()}_prs;async getPullRequestsWithSuggestionCounts(e){return(e?.force||null==this._prs||this._prs.expiresAt<Date.now())&&(this._prs={promise:this.fetchPullRequestsWithSuggestionCounts(e?.cancellation),expiresAt:Date.now()+18e5}),this._prs?.promise}async fetchPullRequestsWithSuggestionCounts(e){let t,i=(0,v.dQ)(),[r,s]=await Promise.allSettled([B(this.container.integrations.getMyPullRequests(T,e,!0),"getMyPullRequests",this.container),this.container.subscription.getSubscription(!0)]);if("rejected"===r.status)throw w.Vy.error(r.reason,i,"Failed to get pull requests"),r.reason;let o=(0,y.Ro)(r)?.value;if(o?.error!=null)throw w.Vy.error(o.error,i,"Failed to get pull requests"),o.error;let n=(0,y.Ro)(s);if(o?.value?.length&&n?.account!=null)try{t=await B(this.container.drafts.getCodeSuggestionCounts(o.value.filter(e=>(0,R.Ac)(e.provider))),"getCodeSuggestionCounts",this.container)}catch(e){w.Vy.error(e,i,"Failed to get code suggestion counts")}return{prs:o,suggestionCounts:t}}async getSearchedPullRequests(e,t){let i=await this.getConnectedIntegrations(),r=await this.getPullRequestIdentityFromSearch(e,i),s={value:[],duration:0},o=async e=>{let{provider:t,ownerAndRepo:i,prNumber:s}=r??{};if((null==t||t===e.id)&&null!=s&&null!=i){let[t,r]=i.split("/",2),o=await B(e?.getPullRequest({key:i,owner:t,name:r},s),"getPullRequest",this.container);if(o?.value!=null)return{value:[o.value],duration:o.duration}}},n=async i=>{let r=await B(i?.searchPullRequests(e,void 0,t),"searchPullRequests",this.container);if(null!=r)return{value:r.value,duration:r.duration}},a=r?o:n;return await Promise.allSettled([...i.keys()].filter(e=>(i.get(e)&&E(e))??!1).map(async e=>{let t=await this.container.integrations.get(e);if(null==t)return;let i=await a(t),r=i?.value;r&&(s.value?.push(...r),s.duration=Math.max(s.duration,i.duration))})),{prs:s,suggestionCounts:void 0}}_enrichedItems;async getEnrichedItems(e){return(e?.force||null==this._enrichedItems||this._enrichedItems.expiresAt<Date.now())&&(this._enrichedItems={promise:B(this.container.enrichments.get(void 0,e?.cancellation),"getEnrichedItems",this.container),expiresAt:Date.now()+18e5}),this._enrichedItems?.promise}_codeSuggestions;async getCodeSuggestions(e,t){if(!(e.codeSuggestionsCount<1)){if((null==this._codeSuggestions||t?.force)&&(this._codeSuggestions=new Map),t?.force||!this._codeSuggestions.has(e.uuid)||this._codeSuggestions.get(e.uuid).expiresAt<Date.now()){let t=e.provider.id;if(!E(t)||!(0,R.Ac)(e.provider))return;this._codeSuggestions.set(e.uuid,{promise:B(this.container.drafts.getCodeSuggestions(e,t,{includeArchived:!1}),"getCodeSuggestions",this.container),expiresAt:Date.now()+18e5})}return this._codeSuggestions.get(e.uuid).promise}}refresh(){this._prs=void 0,this._enrichedItems=void 0,this._codeSuggestions=void 0,this._onDidChange.fire()}async pin(e){e.viewer.pinned=!0,this._onDidChange.fire(),await this.container.enrichments.pinItem(e.enrichable),this._enrichedItems=void 0,this._onDidChange.fire()}async unpin(e){if(e.viewer.pinned=!1,this._onDidChange.fire(),null==e.viewer.enrichedItems)return;let t=e.viewer.enrichedItems.find(e=>"pin"===e.type);null!=t&&(await this.container.enrichments.unpinItem(t.id),this._enrichedItems=void 0,this._onDidChange.fire())}async snooze(e){e.viewer.snoozed=!0,this._onDidChange.fire(),await this.container.enrichments.snoozeItem(e.enrichable),this._enrichedItems=void 0,this._onDidChange.fire()}async unsnooze(e){if(e.viewer.snoozed=!1,this._onDidChange.fire(),null==e.viewer.enrichedItems)return;let t=e.viewer.enrichedItems.find(e=>"snooze"===e.type);null!=t&&(await this.container.enrichments.unsnoozeItem(t.id),this._enrichedItems=void 0,this._onDidChange.fire())}async merge(e){if(e.headRef?.oid==null)return;let t=e.provider.id;if(!E(t)||"Merge"!==await r.window.showQuickPick(["Merge","Cancel"],{placeHolder:`Are you sure you want to merge ${e.headRef?.name??"this pull request"}${e.baseRef?.name?` into ${e.baseRef.name}`:""}? This cannot be undone.`}))return;let i=await this.container.integrations.get(t);null!=i&&(await i.mergePullRequest(e.underlyingPullRequest),this.refresh())}open(e){null!=e.url&&((0,p.CZ)(e.url),this._prs=void 0)}openCodeSuggestion(e,t){let i=e.codeSuggestions?.value?.find(e=>e.id===t);null!=i&&(this._codeSuggestions?.delete(e.uuid),this._prs=void 0,(0,u.RS)("gitlens.openCloudPatch",{type:"code_suggestion",draft:i}))}openCodeSuggestionInBrowser(e){(0,p.CZ)(this.container.drafts.generateWebUrl(e))}async switchTo(e,t){if(e.openRepository?.localBranch?.current){(0,C.$)({type:"wip",inReview:t?.startCodeSuggestion,repository:e.openRepository.repo,source:"launchpad"});return}let i=this.getItemBranchDeepLink(e,t?.startCodeSuggestion?b.zB.SwitchToAndSuggestPullRequest:t?.openInWorktree?b.zB.SwitchToPullRequestWorktree:b.zB.SwitchToPullRequest);if(null==i)return;let r=t?.openInWorktree?await (0,l.sY)(this.container,e.underlyingPullRequest,{skipVirtual:!0}):void 0;this._codeSuggestions?.delete(e.uuid),await this.container.deepLinks.processDeepLinkUri(i,!1,r)}async openChanges(e){if(e.openRepository?.localBranch?.current&&(await this.switchTo(e),null!=e.refs)){let t=(0,c.tI)(e.openRepository.repo.path,e.refs);await (0,a.$5)(this.container,{repoPath:t.repoPath,lhs:t.base.ref,rhs:t.head.ref},{title:`Changes in Pull Request #${e.id}`})}}async openInGraph(e){let t=this.getItemBranchDeepLink(e);null!=t&&await this.container.deepLinks.processDeepLinkUri(t,!1)}generateWebUrl(){return this.container.urls.getGkDevUrl("launchpad")}getItemBranchDeepLink(e,t){if("pullrequest"!==e.type||null==e.headRef||e.repoIdentity?.remote?.url==null)return;let i=null==t&&e.openRepository?.localBranch?.current?e.openRepository.localBranch.name:e.headRef.name;return F(this.container,e.underlyingPullRequest,i,e.repoIdentity.remote.url,t)}async getMatchingOpenRepository(e,t){if(null==e.repoIdentity.remote.url)return;let i=t.get(e.repoIdentity.remote.url);if(null==i){if(e.underlyingPullRequest?.refs?.base?.url==null||null==(i=t.get(e.underlyingPullRequest.refs.base.url)))return;let[r]=i;return{repo:r}}let[r,s]=i,o=`${s.name}/${e.refs?.head.branch??e.headRef?.name}`,n=await r.git.branches().getLocalBranchByUpstream?.(o);return{repo:r,remote:s,localBranch:n}}async getMatchingRemoteMap(e){let t=new Set;for(let i of e)null!=i.repoIdentity.remote.url&&t.add(i.repoIdentity.remote.url.replace(/\.git$/,""));let i=new Map;async function r(e){if(0!==t.size)for(let r of(await e.git.remotes().getRemotes())){if(0===t.size)return;let s=r.url.replace(/\.git$/,"");if(t.has(s)){if(i.set(s,[e,r]),t.delete(s),0===t.size)return}else for(let[s]of t)if(r.matches(s)){if(i.set(s,[e,r]),t.delete(s),0===t.size)return;break}}}return await Promise.allSettled((0,f.Tj)(this.container.git.openRepositories,e=>r(e))),i}isMaybeSupportedLaunchpadPullRequestSearchUrl(e){return(0,k.X)(e)||(0,S.R)(e)||(0,c.z2)(e)}async getPullRequestIdentityFromSearch(e,t){for(let i of T)if(t.get(i)){let t=await this.container.integrations.get(i);if(null==t)continue;let r=t.getPullRequestIdentityFromMaybeUrl(e);if(r)return r}return(0,c.Gv)(e)}async getCategorizedItems(e,t){let i,r,s=(0,v.dQ)(),o=!!e?.search,a=!o&&(e?.force||null==this._prs),l=new Set((h.H.get("launchpad.ignoredRepositories")??[]).map(e=>e.toLowerCase())),u=h.H.get("launchpad.staleThreshold");null!=u&&(i=new Date).setDate(i.getDate()-u);try{let[a,u,h]=await Promise.allSettled([this.container.git.isDiscoveringRepositories,this.getEnrichedItems({force:e?.force,cancellation:t}),o?"string"==typeof e.search?this.getSearchedPullRequests(e.search,t):{prs:{value:e.search,duration:0},suggestionCounts:void 0}:this.getPullRequestsWithSuggestionCounts({force:e?.force,cancellation:t})]);if(t?.isCancellationRequested)throw new n.AL;if("rejected"===h.status)return w.Vy.error(h.reason,s,"Failed to get pull requests with suggestion counts"),r={error:h.reason instanceof Error?h.reason:Error(String(h.reason))};let d=(0,y.Ro)(u),p=(0,y.Ro)(h),g=p?.prs;if(g?.value==null)return r={items:[],timings:{prs:p?.prs?.duration,codeSuggestionCounts:p?.suggestionCounts?.duration,enrichedItems:d?.duration}};let m={};if(d?.value!=null)for(let e of d.value)e.entityId in m?m[e.entityId].push(e):m[e.entityId]=[e];let v=l.size?g.value.filter(e=>!l.has(`${e.repository.owner.toLowerCase()}/${e.repository.repo.toLowerCase()}`)):g.value,b=await this.container.integrations.getMyCurrentAccounts(T),C=v.map(e=>{let t=(0,R.d8)(e),i=e.provider.id,r=E(i)?(0,P.dF)(i)?(0,P.u7)(i):(0,P.Kb)(i)?(0,P.pn)(i):void 0:void 0;if(!r){w.Vy.warn(`Unsupported provider ${i}`);return}let s={type:"pr",id:t.uuid,url:e.url,provider:r},o=(0,c.Yv)(e);return{...t,type:"pullrequest",uuid:t.uuid,provider:e.provider,enrichable:s,repoIdentity:o,refs:e.refs,underlyingPullRequest:e}}),k=this.getActionablePullRequests(C.filter(e=>null!=e),b,{enrichedItemsByUniqueId:m}),S=await this.getMatchingRemoteMap(k),{suggestionCounts:I}=p,D=await Promise.allSettled(k.map(async t=>{let r=I?.value?.[t.uuid]?.count??0,s=A.P5.get(t.suggestedActionCategory);!e?.search&&null!=i&&t.updatedDate.getTime()<i.getTime()?s="other":r>0&&t.viewer.isAuthor&&(s="code-suggestions");let n=await this.getMatchingOpenRepository(t,S),a=function(e,t,i){let r=[...A.eS.get(e)];return i?(r.push("show-overview","open-changes"),(0,R.Ac)(t)&&r.push("code-suggest")):(r.push("open-worktree","switch"),(0,R.Ac)(t)&&r.push("switch-and-code-suggest")),r.push("open-in-graph"),r}(s,t.provider,n?.localBranch?.current??!1);return{...t,currentViewer:b.get(t.provider.id),codeSuggestionsCount:r,isNew:!o&&this.isItemNewInGroup(t,s),isSearched:o,actionableCategory:s,suggestedActions:a,openRepository:n,underlyingPullRequest:t.underlyingPullRequest}}));return r={items:[...(0,f.x1)(D,e=>(0,y.Ro)(e))],timings:{prs:p?.prs?.duration,codeSuggestionCounts:p?.suggestionCounts?.duration,enrichedItems:d?.duration}}}finally{e?.search||this.updateGroupedIds(r?.items??[]),null!=r&&a&&this._onDidRefresh.fire(r)}}getActionablePullRequests(e,t,i){let r=(0,f.Fi)(e,e=>e.provider.id),s=[];for(let[e,o]of r.entries()){let r=t.get(e);if(null==r){w.Vy.warn(`No current user for integration ${e}`);continue}let n=(0,R.iG)(o,{id:r.id},i);s.push(...n)}return s}_groupedIds;isItemNewInGroup(e,t){return null!=this._groupedIds&&!this._groupedIds.has(`${e.uuid}:${A.Nm.get(t)}`)}updateGroupedIds(e){let t=new Set;for(let i of e){let e=A.Nm.get(i.actionableCategory),r=`${i.uuid}:${e}`;t.has(r)||t.add(r)}this._groupedIds=t}async hasConnectedIntegration(){for(let e of T){let t=await this.container.integrations.get(e);if(null!=t&&(t.maybeConnected??await t.isConnected()))return(0,d.o)("gitlens:launchpad:connected",!0),!0}return(0,d.o)("gitlens:launchpad:connected",!1),!1}async getConnectedIntegrations(){let e=new Map;return await Promise.allSettled(T.map(async t=>{let i=await this.container.integrations.get(t);if(null==i){e.set(t,!1);return}let r=(i.maybeConnected??await i.isConnected())&&await i.access();e.set(t,r)})),(0,d.o)("gitlens:launchpad:connected",(0,f.zN)(e.values(),e=>e)),e}async ensureLaunchpadItemCodeSuggestions(e,t){return e.codeSuggestions??=await this.getCodeSuggestions(e,t),e.codeSuggestions}registerCommands(){return[(0,u.Lb)("gitlens.launchpad.indicator.toggle",()=>{let e=h.H.get("launchpad.indicator.enabled")??!1;h.H.updateEffective("launchpad.indicator.enabled",!e)})]}onConfigurationChanged(e){if(!h.H.changed(e,"launchpad"))return;let t=h.H.get("launchpad");this.container.telemetry.sendEvent("launchpad/configurationChanged",{"config.launchpad.staleThreshold":t.staleThreshold,"config.launchpad.includedOrganizations":t.includedOrganizations?.length??0,"config.launchpad.ignoredOrganizations":t.ignoredOrganizations?.length??0,"config.launchpad.ignoredRepositories":t.ignoredRepositories?.length??0,"config.launchpad.indicator.enabled":t.indicator.enabled,"config.launchpad.indicator.icon":t.indicator.icon,"config.launchpad.indicator.label":t.indicator.label,"config.launchpad.indicator.useColors":t.indicator.useColors,"config.launchpad.indicator.groups":t.indicator.groups.join(","),"config.launchpad.indicator.polling.enabled":t.indicator.polling.enabled,"config.launchpad.indicator.polling.interval":t.indicator.polling.interval}),(h.H.changed(e,"launchpad.includedOrganizations")||h.H.changed(e,"launchpad.ignoredOrganizations")||h.H.changed(e,"launchpad.ignoredRepositories")||h.H.changed(e,"launchpad.staleThreshold"))&&(this.refresh(),this.getCategorizedItems({force:!0}))}async onIntegrationConnectionStateChanged(e){E(e.key)&&(0,d.o)("gitlens:launchpad:connected","connected"===e.reason||await this.hasConnectedIntegration())}};function _(e){if(e.viewer.snoozed)return["snoozed"];let t=[];e.viewer.pinned&&t.push("pinned"),e.openRepository?.localBranch?.current&&t.push("current-branch"),e.isDraft&&t.push("draft");let i=A.Nm.get(e.actionableCategory);return e.isDraft&&"needs-review"!==i||t.push(i),t}function O(e){if(null==e||0===e.length)return new Map;let t=new Map(A.Rp.map(e=>[e,[]]));for(let i of(function(e){e.sort((e,t)=>(e.viewer.pinned?-1:1)-(t.viewer.pinned?-1:1)||A.t6.indexOf(e.actionableCategory)-A.t6.indexOf(t.actionableCategory)||t.updatedDate.getTime()-e.updatedDate.getTime())}(e),e))for(let e of _(i))t.get(e).push(i);return t.get("needs-review").sort((e,t)=>(e.isDraft?1:-1)-(t.isDraft?1:-1)),t.get("pinned").sort((e,t)=>t.updatedDate.getTime()-e.updatedDate.getTime()),t.get("draft").sort((e,t)=>t.updatedDate.getTime()-e.updatedDate.getTime()),t}function x(e){if(null==e||0===e.length)return new Map;let t=new Map(A.Rp.map(e=>[e,0]));function i(e){t.set(e,(t.get(e)??0)+1)}for(let t of e){if(t.viewer.snoozed){i("snoozed");continue}t.viewer.pinned&&i("pinned"),t.openRepository?.localBranch?.current&&i("current-branch"),i(t.isDraft?"draft":A.Nm.get(t.actionableCategory))}return t}function F(e,t,i,s,n){let a=h.H.get("deepLinks.schemeOverride"),l="string"==typeof a?a:r.env.uriScheme,c=new URLSearchParams({url:t.provider.id!==o.Q7.AzureDevOps&&s.startsWith("https")?s.endsWith(".git")?s:`${s}.git`:s});return n&&c.set("action",n),c.set("prId",t.id),c.set("prTitle",t.title),t.refs&&(c.set("prBaseRef",t.refs.base.sha),c.set("prHeadRef",t.refs.head.sha)),r.Uri.parse(`${l}://${e.context.extension.id}/link/${b.vk.Repository}/-/${b.vk.Branch}/${encodeURIComponent(i)}?${c.toString()}`)}function L(e){return(0,s.Fx)(e.uuid)}function B(e,t,i){return(0,y.Mp)(e,{timeout:3e4,onSlow:e=>{i.telemetry.sendEvent("launchpad/operation/slow",{timeout:3e4,operation:t,duration:e})}})}$([(0,m.Yz)({args:{0:e=>`force=${e?.force}`}})],LaunchpadProvider.prototype,"getPullRequestsWithSuggestionCounts",1),$([(0,m.Yz)({args:!1})],LaunchpadProvider.prototype,"fetchPullRequestsWithSuggestionCounts",1),$([(0,m.Yz)({args:{0:e=>`force=${e?.force}`}})],LaunchpadProvider.prototype,"getEnrichedItems",1),$([(0,m.Yz)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`,1:e=>`force=${e?.force}`}})],LaunchpadProvider.prototype,"getCodeSuggestions",1),$([(0,m.Rm)()],LaunchpadProvider.prototype,"refresh",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"pin",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"unpin",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"snooze",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"unsnooze",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"merge",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"open",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"openCodeSuggestion",1),$([(0,m.Rm)()],LaunchpadProvider.prototype,"openCodeSuggestionInBrowser",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"switchTo",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"openChanges",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"openInGraph",1),$([(0,g.G)(e=>`${e?.force??!1}|${e?.search!=null&&"string"!=typeof e.search?e.search.map(e=>e.url).join(","):e?.search}`),(0,m.Rm)({args:{0:e=>`force=${e?.force}`,1:!1}})],LaunchpadProvider.prototype,"getCategorizedItems",1),$([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`,1:e=>`force=${e?.force}`}})],LaunchpadProvider.prototype,"ensureLaunchpadItemCodeSuggestions",1)},9439:(e,t,i)=>{function r(e,t){return null==t?`command:${e}`:`command:${e}?${encodeURIComponent("string"==typeof t?t:JSON.stringify(t))}`}function s(e,t){return null==t?`command:${e}`:`command:${e}?${encodeURIComponent("string"==typeof t?t:JSON.stringify(t)).replace(/([()])/g,"\\$1")}`}i.d(t,{J:()=>s,U:()=>r})},9487:(e,t,i)=>{i.d(t,{$o:()=>E,EH:()=>C,F7:()=>S,FF:()=>a,II:()=>v,K0:()=>ToggleQuickInputButton,KD:()=>A,Lx:()=>n,M_:()=>f,NA:()=>D,Q8:()=>O,Rn:()=>b,S:()=>h,TR:()=>c,UM:()=>x,UO:()=>U,V3:()=>B,XS:()=>u,Zo:()=>R,iD:()=>y,ig:()=>p,kk:()=>_,lA:()=>I,m:()=>g,oS:()=>F,qk:()=>m,re:()=>k,tH:()=>o,w7:()=>d,wt:()=>P,xU:()=>$,y2:()=>L,yi:()=>T,yn:()=>l,z3:()=>w});var r=i(1398),s=i(9703);let ToggleQuickInputButton=class ToggleQuickInputButton{constructor(e,t=!1){this.state=e,this._on=t}get iconPath(){let e=this.getToggledState().icon;return"string"==typeof e?{dark:r.Uri.file(s.m.instance.context.asAbsolutePath(`images/dark/${e}.svg`)),light:r.Uri.file(s.m.instance.context.asAbsolutePath(`images/light/${e}.svg`))}:e}get tooltip(){return this.getToggledState().tooltip}get on(){return this._on}set on(e){this._on=e}getState(){return"function"==typeof this.state?this.state():this.state}getToggledState(){return this.on?this.getState().on:this.getState().off}};let SelectableQuickInputButton=class SelectableQuickInputButton extends ToggleQuickInputButton{constructor(e,t,i=!1){super({off:{tooltip:e,icon:t.off},on:{tooltip:e,icon:t.on}},i)}};let o={iconPath:new r.ThemeIcon("clear-all"),tooltip:"Clear"},n={iconPath:new r.ThemeIcon("plug"),tooltip:"Connect Additional Integrations"},a={iconPath:new r.ThemeIcon("feedback"),tooltip:"Give Us Feedback"},l={iconPath:new r.ThemeIcon("repo-fetch"),tooltip:"Fetch"},c={iconPath:new r.ThemeIcon("refresh"),tooltip:"Load More"},u=class extends SelectableQuickInputButton{constructor(e=!1){super("Match Case",{off:"icon-match-case",on:"icon-match-case-selected"},e)}},h=class extends SelectableQuickInputButton{constructor(e=!1){super("Match All",{off:"icon-match-all",on:"icon-match-all-selected"},e)}},d=class extends SelectableQuickInputButton{constructor(e=!1){super("Match using Regular Expressions",{off:"icon-match-regex",on:"icon-match-regex-selected"},e)}},p={iconPath:new r.ThemeIcon("git-commit"),tooltip:"Choose a Specific Commit"},g=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super(()=>({on:{tooltip:"Choose a Specific Commit",icon:new r.ThemeIcon("git-commit")},off:{tooltip:`Choose a Branch${t.showTags?" or Tag":""}`,icon:new r.ThemeIcon("git-branch")}}),e),this.onDidClick=i}},m={iconPath:new r.ThemeIcon("info"),tooltip:"Learn about GitLens Pro"},f={iconPath:new r.ThemeIcon("merge"),tooltip:"Merge..."},w={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on Jira"},v={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on GitHub"},y={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on GitLab"},b={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on Azure DevOps"},C={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on Bitbucket"},k={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on gitkraken.dev"},S={iconPath:new r.ThemeIcon("gear"),tooltip:"Launchpad Settings"},R={iconPath:new r.ThemeIcon("pinned"),tooltip:"Pin"},P={iconPath:new r.ThemeIcon("pin"),tooltip:"Unpin"},A={iconPath:new r.ThemeIcon("bell-slash"),tooltip:"Snooze"},I={iconPath:new r.ThemeIcon("refresh"),tooltip:"Refresh"},D={iconPath:new r.ThemeIcon("bell"),tooltip:"Unsnooze"},$={iconPath:new r.ThemeIcon("empty-window"),tooltip:"Open in New Window"},T={iconPath:new r.ThemeIcon("search"),tooltip:"Reveal in Side Bar"},E={iconPath:new r.ThemeIcon("settings-gear"),tooltip:"Set as Default Remote"},_={iconPath:new r.ThemeIcon("eye"),tooltip:"Inspect Details"},O={iconPath:new r.ThemeIcon("compare-changes"),tooltip:"Open Changes"},x={iconPath:new r.ThemeIcon("link-external"),tooltip:"Show Results in Side Bar"},F={iconPath:new r.ThemeIcon("empty-window"),tooltip:"Open in Worktree"},L=class extends SelectableQuickInputButton{constructor(e=!1){super("Show Tags",{off:new r.ThemeIcon("tag"),on:"icon-tag-selected"},e)}},B={iconPath:new r.ThemeIcon("gitlens-confirm-checked"),tooltip:"You will be presented with a required confirmation step before the action is performed"},U=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super(()=>({on:{tooltip:t?"For future actions, you will be presented with confirmation step before the action is performed\nClick to toggle":"You will be presented with confirmation step before the action is performed\nClick to toggle",icon:new r.ThemeIcon("gitlens-confirm-checked")},off:{tooltip:t?"For future actions, you won't be presented with confirmation step before the action is performed\nClick to toggle":"You won't be presented with confirmation step before the action is performed\nClick to toggle",icon:new r.ThemeIcon("gitlens-confirm-unchecked")}}),e),this.onDidClick=i}}},9565:(e,t,i)=>{i.d(t,{Nx:()=>s,sP:()=>n,t2:()=>o});var r=i(4465);function s(e,t){return t?.once&&(e=(0,r.Oo)(e)),{dispose:e,[Symbol.dispose]:e}}function o(e,t){return t?.once&&(e=(0,r.Oo)(e)),{dispose:e,[Symbol.asyncDispose]:e}}function n(e,t,i){return{...e,...o(t,i)}}},9624:(e,t,i)=>{i.d(t,{q:()=>u,t:()=>h});var r=i(1398),s=i(9703),o=i(2995),n=i(1974),a=i(1403),l=i(9123),c=i(998);function u(e,t){if(""===e||null==t||"object"!=typeof t)return t;if(!e.startsWith("_"))return t instanceof Error?String(t):t instanceof r.Uri?"sha"in t&&"string"==typeof t.sha&&t.sha?`${t.sha}:${t.toString()}`:t.toString():(0,a.Z6)(t)||(0,o.P)(t)||(0,n.WM)(t)||(0,l.d)(t)||(0,c.sN)(t)?t.toString():(0,s.u)(t)?"<container>":t}function h(e,t){if(t instanceof Date)return t.getTime();if(t instanceof Map||t instanceof Set)return[...t.entries()];if(t instanceof Function||t instanceof Error)return;if(t instanceof RegExp||t instanceof r.Uri)return t.toString();if((0,s.u)(t))return;let i=this[e];return i instanceof Date?i.getTime():i instanceof r.Uri?i.toString():t}},9642:(e,t,i)=>{i.d(t,{DQ:()=>m,K2:()=>y,Qj:()=>f,U0:()=>d,eu:()=>g,jZ:()=>w,pF:()=>p,sr:()=>v});var r,s=i(8286),o=i(3500),n=i(4342),a=i(4465),l=i(7005),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o),o},d=((r=d||{}).ActiveFileHistory="gitlens:history:active:file",r.ActiveLineHistory="gitlens:history:active:line",r.AutolinkedItems="gitlens:autolinked:items",r.AutolinkedItem="gitlens:autolinked:item",r.Branch="gitlens:branch",r.Branches="gitlens:branches",r.BranchOrTagFolder="gitlens:pseudo:folder",r.BranchStatusAheadOfUpstream="gitlens:status-branch:upstream:ahead",r.BranchStatusBehindUpstream="gitlens:status-branch:upstream:behind",r.BranchStatusMissingUpstream="gitlens:status-branch:upstream:missing",r.BranchStatusNoUpstream="gitlens:status-branch:upstream:none",r.BranchStatusSameAsUpstream="gitlens:status-branch:upstream:same",r.BranchStatusFiles="gitlens:status-branch:files",r.CodeSuggestions="gitlens:drafts:code-suggestions",r.Commit="gitlens:commit",r.Commits="gitlens:commits",r.CommitsCurrentBranch="gitlens:commits:current-branch",r.Compare="gitlens:compare",r.CompareBranch="gitlens:compare:branch",r.ComparePicker="gitlens:compare:picker",r.ComparePickerWithRef="gitlens:compare:picker:ref",r.CompareResults="gitlens:compare:results",r.CompareResultsCommits="gitlens:compare:results:commits",r.Contributor="gitlens:contributor",r.Contributors="gitlens:contributors",r.DateMarker="gitlens:date-marker",r.Draft="gitlens:draft",r.File="gitlens:file",r.FileHistory="gitlens:history:file",r.Folder="gitlens:folder",r.Grouping="gitlens:grouping",r.LaunchpadItem="gitlens:launchpad:item",r.LineHistory="gitlens:history:line",r.MergeConflictCurrentChanges="gitlens:merge-conflict:current",r.MergeConflictIncomingChanges="gitlens:merge-conflict:incoming",r.Message="gitlens:message",r.MessageSignIn="gitlens:message:signin",r.Pager="gitlens:pager",r.PausedOperationCherryPick="gitlens:paused-operation:cherry-pick",r.PausedOperationMerge="gitlens:paused-operation:merge",r.PausedOperationRebase="gitlens:paused-operation:rebase",r.PausedOperationRevert="gitlens:paused-operation:revert",r.PullRequest="gitlens:pullrequest",r.Reflog="gitlens:reflog",r.ReflogRecord="gitlens:reflog-record",r.Remote="gitlens:remote",r.Remotes="gitlens:remotes",r.Repositories="gitlens:repositories",r.Repository="gitlens:repository",r.RepositoryFolder="gitlens:repo-folder",r.ResultsFile="gitlens:file:results",r.ResultsFiles="gitlens:results:files",r.SearchAndCompare="gitlens:searchAndCompare",r.SearchResults="gitlens:search:results",r.SearchResultsCommits="gitlens:search:results:commits",r.Stash="gitlens:stash",r.Stashes="gitlens:stashes",r.StatusFileCommits="gitlens:status:file:commits",r.StatusFiles="gitlens:status:files",r.StatusAheadOfUpstream="gitlens:status:upstream:ahead",r.StatusBehindUpstream="gitlens:status:upstream:behind",r.StatusMissingUpstream="gitlens:status:upstream:missing",r.StatusNoUpstream="gitlens:status:upstream:none",r.StatusSameAsUpstream="gitlens:status:upstream:same",r.Tag="gitlens:tag",r.Tags="gitlens:tags",r.UncommittedFiles="gitlens:uncommitted:files",r.Workspace="gitlens:workspace",r.WorkspaceMissingRepository="gitlens:workspaceMissingRepository",r.Workspaces="gitlens:workspaces",r.Worktree="gitlens:worktree",r.Worktrees="gitlens:worktrees",r);function p(e,t){let i="";return t.root&&(i+="/root"),null!=t.workspace&&(i+=`/ws/${t.workspace.id}`),null!=t.wsRepositoryDescriptor&&(i+=`/wsrepo/${t.wsRepositoryDescriptor.id}`),null!=t.repository&&(i+=`/repo/${t.repository.id}`),null!=t.worktree&&(i+=`/worktree/${t.worktree.uri.path}`),null!=t.remote&&(i+=`/remote/${t.remote.name}`),null!=t.tag&&(i+=`/tag/${t.tag.id}`),null!=t.branch&&(i+=`/branch/${t.branch.id}`),null!=t.branchStatus&&(i+=`/branch-status/${t.branchStatus.upstream?.name??"-"}`),null!=t.branchStatusUpstreamType&&(i+=`/branch-status-direction/${t.branchStatusUpstreamType}`),null!=t.launchpadGroup?(i+=`/lp/${t.launchpadGroup}`,null!=t.launchpadItem&&(i+=`/${t.launchpadItem.type}/${t.launchpadItem.uuid}`)):null!=t.launchpadItem&&(i+=`/lp/${s.Nm.get(s.P5.get(t.launchpadItem.suggestedActionCategory))}/${t.launchpadItem.type}/${t.launchpadItem.uuid}`),null!=t.pullRequest&&(i+=`/pr/${t.pullRequest.id}`),null!=t.pausedOperation&&(i+=`/paused-operation/${t.pausedOperation}`),null!=t.reflog&&(i+=`/reflog/${t.reflog.sha}+${t.reflog.selector}+${t.reflog.command}+${t.reflog.commandArgs??""}+${t.reflog.date.getTime()}`),null!=t.contributor&&(i+=`/contributor/${t.contributor.id??`${t.contributor.username}+${t.contributor.email}+${t.contributor.name}`}`),null!=t.autolinksId&&(i+=`/autolinks/${t.autolinksId}`),null!=t.comparisonId&&(i+=`/comparison/${t.comparisonId}`),null!=t.searchId&&(i+=`/search/${t.searchId}`),null!=t.commit&&(i+=`/commit/${t.commit.sha}`),null!=t.file&&(i+=`/file/${t.file.path}+${t.file.status}`),null!=t.draft&&(i+=`/draft/${t.draft.id}`),`gitlens://viewnode/${e}${i}`}let g=class{constructor(e,t,i,r){this.type=e,this.view=i,this.parent=r,this._uri=t}is(e){return this.type===e}isAny(...e){return e.includes(this.type)}_uniqueId;splatted=!1;_disposed=!1;dispose(){this._disposed=!0}get id(){return this._uniqueId}_context;get context(){return this._context??this.parent?.context??{}}updateContext(e,t=!1){this._context=this.getNewContext(e,t)}getNewContext(e,t=!1){return{...t?this.parent?.context:this.context,...e}}toString(){return(0,l.zu)(this)}_uri;get uri(){return this._uri}getParent(){return this.parent?.splatted?this.parent?.getParent():this.parent}getCommand(){}triggerChange(e=!1,t=!1,i){return this._disposed?Promise.resolve():this.splatted&&null!=this.parent&&this.parent!==i?this.parent.triggerChange(e,t):this.view.refreshNode(this,e,t)}deleteState(e){if(null==this.id)throw Error("Id is required to delete state");this.view.nodeState.deleteState(this.id,e)}getState(e){if(null==this.id)throw Error("Id is required to get state");return this.view.nodeState.getState(this.id,e)}storeState(e,t,i){if(null==this.id)throw Error("Id is required to store state");this.view.nodeState.storeState(this.id,e,t,i)}};function m(e){return(0,a.is)(e,"loadMore")}function f(e){return(0,a.is)(e,"onDidChangeAutoRefresh")}function w(e){return"function"==typeof e.edit}function v(e){return"function"==typeof e.dismissNode}function y(e){return null!=e&&"repoPath"in e&&"string"==typeof e.repoPath?e.repoPath:void 0}h([(0,o.G)(),(0,n.Yz)()],g.prototype,"triggerChange",1),g=h([(0,n.Is)((e,t)=>`${t}${null!=e.id?`(${e.id})`:""}`)],g)},9703:(e,t,i)=>{let r,s,o,n,a,l,c,u,h,d,p,g;i.d(t,{m:()=>uC,u:()=>uk});var m,f,w=i(1398),v=i(1078);let y=require("child_process"),b=require("fs");var C=i(6928),k=i(932),S=i(97),R=i(1518),P=i(7304),A=((m=A||{})[m.Throw=0]="Throw",m[m.Ignore=1]="Ignore",m),I=i(4505),D=i(377),$=i(892),T=i(6006),E=i(4162),_=i(3934),O=i(1974),x=i(9349),F=i(1079),L=i(6066),B=i(5452),U=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),N=e=>{throw TypeError(e)},q=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&N("Object expected"),i&&(r=t[U("asyncDispose")]),void 0===r&&(r=t[U("dispose")],i&&(s=r)),"function"!=typeof r&&N("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},W=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let M=/diff --git a\/(.*) b\/(.*)/,G=/^@@ -(\d+?),(\d+?) \+(\d+?),(\d+?) @@/,H=/(\S)\S*\t([^\t\n]+)(?:\t(.+))?/,V=/^(\d+?|-)\s+?(\d+?|-)\s+?(.*)(?:\n\s(delete|rename|copy|create))?/,j=/(.+)\s=>\s(.+)/,Q=/(.*?){(.+?)?\s=>\s(.*?)?}(.*)/,z=/^<r> (.*)\s*(?:(?:diff --git a\/(.*) b\/(.*))|(?:(\S)\S*\t([^\t\n]+)(?:\t(.+))?))/gm,Y=/^<r> (\S+)\s*(.*)$/s,K=/^(\S)\S*\t([^\t\n]+)(?:\t(.+)?)?$/gm,Z=/(?<files>\d+) files? changed(?:, (?<additions>\d+) insertions?\(\+\))?(?:, (?<deletions>\d+) deletions?\(-\))?/,J="%x3c",X="%x3e",ee="%x2f",et="%x20";var ei=((f=ei||{})[f.Log=0]="Log",f[f.LogFile=1]="LogFile",f);function er(e,t){let i=t?.prefix??"",r=[];for(let s in e)r.push(s),i+=`${t?.fieldPrefix??""}${e[s]}${t?.fieldSuffix??(t?.fieldPrefix==null?"%x00":"")}`;let s=["-z",`--format=${i}`];return t?.additionalArgs?.length&&s.push(...t.additionalArgs),{arguments:s,parse:function*(e){let i;if(!e)return;let s={},o=0,n=(0,_.i5)(e,t?.separator??"\0");if(t?.skip)for(let e=0;e<t.skip;e++)i=n.next();for(;!(i=n.next()).done;)s[r[o++]]=i.value,o===r.length&&(o=0,i=n.next(),t?.parseEntry?.(n,s),yield s,s={})}}}function es(e){return{arguments:["-z",`--format=${e}`],parse:function*(e){let t,i=(0,_.i5)(e,"\0");for(;!(t=i.next()).done;)yield t.value}}}function eo(e){let t=[],i=[];if(null!=e){let r="%x00";for(let t in e)i.push(t),r+=`%x00${e[t]}`;t=["-z",`--format=${r}`,"--name-status"]}else t=["-z","--name-status"];return{arguments:t,parse:function*(t){let r,s,o;for(let n of(0,_.i5)(t,"\0\0\0")){let t;r={},s=[],o=(0,_.HX)(n,"\0"),null!=e&&(o.next(),o.next());let a=0;for(;!(t=o.next()).done;)if(a<i.length)r[i[a++]]=t.value;else{let e={status:t.value.trim(),path:void 0};e.path=(t=o.next()).value,(e.status.startsWith("R")||e.status.startsWith("C"))&&(e.originalPath=(t=o.next()).value),s.push(e)}r.files=s,yield r}}}}function en(e){let t=[],i=[];if(null!=e){let r="%x00";for(let t in e)i.push(t),r+=`%x00${e[t]}`;t=["-z",`--format=${r}`,"--numstat","--summary"]}else t=["-z","--numstat","--summary"];return{arguments:t,parse:function*(t){let r,s,o;for(let n of(0,_.i5)(t,"\0\0\0","\n\0\0")){let t;r={},s=[],o=(0,_.HX)(n,"\0"),null!=e&&(o.next(),o.next());let a=0;for(;!(t=o.next()).done;)if(a<i.length)r[i[a++]]=t.value;else{let e,i;if(!t.value)continue;if(!t.value.includes("	")){let e,i,r,o,n,a,l,c;for(let u of t.value.split("\n")){let t,h,d;if(!(u=u.trim())||null==(e=/(rename) (.*?)\{?([^{]+)\s+=>\s+([^}]+)\}?(.*?)?(?: \(\d+%\))|(create|delete) mode \d+ (.+)/.exec(u)))continue;[,i,r,o,n,a,l,c]=e,null!=i?(t=(0,T.Fd)((0,T.HS)(r,n,a??"")),h=(0,T.Fd)((0,T.HS)(r,o,a??"")),d="R"):(t=(0,T.Fd)(c),d="create"===l?"A":"D");let p=s.find(e=>e.path===t);null!=p&&p.status!==d&&(p.status=d,null!=h&&(p.originalPath=h))}break}let[r,n,a]=t.value.split("	");if(r=r.trim(),n=n.trim(),a=a.trim()){let t=a.indexOf(" => ");-1!==t&&(e=a.substring(0,t),a=a.substring(t+4),i="R")}else e=(t=o.next()).value.trim(),a=(t=o.next()).value.trim(),i="R";let l={status:i??"M",path:a,originalPath:e,additions:"-"===r?0:parseInt(r,10),deletions:"-"===n?0:parseInt(n,10)};s.push(l)}r.files=s,yield r}}}}function ea(e){return er(e,{additionalArgs:["--shortstat"],parseEntry:function(e,t){let i=e.next().value,r=Z.exec(i);return r?.groups!=null&&(t.stats={files:Number(r.groups.files||0),additions:Number(r.groups.additions||0),deletions:Number(r.groups.deletions||0)}),e.next(),t},prefix:"%x00%x00",separator:"\0",fieldSuffix:"%x00",skip:2})}let el=`${J}${ee}f${X}%n${J}r${X}${et}%H%n${J}a${X}${et}%aN%n${J}e${X}${et}%aE%n${J}d${X}${et}%at%n${J}n${X}${et}%cN%n${J}m${X}${et}%cE%n${J}c${X}${et}%ct%n${J}p${X}${et}%P%n${J}t${X}${et}%D%n${J}s${X}%n%B%n${J}${ee}s${X}%n${J}f${X}`,ec=`${J}${ee}f${X}%n${J}r${X}${et}%H%n${J}a${X}${et}%aN%n${J}e${X}${et}%aE%n${J}d${X}${et}%at%n${J}n${X}${et}%cN%n${J}m${X}${et}%cE%n${J}c${X}${et}%ct%n${J}p${X}${et}%P%n${J}s${X}%n%B%n${J}${ee}s${X}%n${J}f${X}`,eu=`${J}r${X}${et}%H`;function eh(e,t,i,r,s,o,n,a,l,c,u,h,d){var p=[];try{let g,m,f,w,v,y=q(p,(0,E.u)(`Git.parseLog(${r}, fileName=${s}, sha=${o})`,{log:!1,logLevel:"debug"}));if(!t)return;let b={},C=0,k=!0,S=(0,_.HX)(`${t}</f>`),R=S.next();if(R.done)return;void 0!==r&&(r=(0,T.Fd)(r));let P=new Map,A=a;t:for(;!(R=S.next()).done&&(v=R.value,!l||!a||!(C>=a));){;switch(v.charCodeAt(1)){case 114:b={sha:v.substring(4)};break;case 97:L.SU===b.sha?b.author="You":b.author=v.substring(4);break;case 101:b.authorEmail=v.substring(4);break;case 100:b.authorDate=v.substring(4);break;case 110:b.committer=v.substring(4);break;case 109:b.committerEmail=v.substring(4);break;case 99:b.committedDate=v.substring(4);break;case 112:v=v.substring(4),b.parentShas=0!==v.length?v.split(" "):void 0;break;case 116:v=v.substring(4),b.tips=0!==v.length?v.split(", "):void 0;break;case 115:for(;!(R=S.next()).done&&(v=R.value,"</s>"!==v);){;null==b.summary?b.summary=v:b.summary+=`
${v}`}null!=b.summary&&(b.summary=b.summary.trim());break;case 102:{R=S.next();let t=!0;for((R.done||"</f>"===R.value)&&(t=!1);t&&!(R=S.next()).done&&(v=R.value,"</f>"!==v);){;if(!v.startsWith("warning:"))if(0===i)m=H.exec(v),null!=m&&(void 0===b.files&&(b.files=[]),f=m[3],void 0!==f?b.files.push({status:m[1],path:f,originalPath:m[2]}):b.files.push({status:m[1],path:m[2]}));else{if(m=M.exec(v),null!=m){for([,b.originalPath,b.path]=m,b.path===b.originalPath?(b.originalPath=void 0,b.status=F.NO.Modified):b.status=F.NO.Renamed,S.next(),S.next(),R=S.next(),m=G.exec(R.value),null!==m&&(b.line={sha:b.sha,originalLine:parseInt(m[1],10),line:parseInt(m[3],10)});!(R=S.next()).done&&"</f>"!==R.value;);break}if(R=S.next(),m=V.exec(`${v}
${R.value}`),null!=m)switch(b.fileStats={additions:Number(m[1])||0,deletions:Number(m[2])||0,changes:0},m[4]){case void 0:default:b.status="M",b.path=m[3];break;case"copy":case"rename":if(b.status="copy"===m[4]?"C":"R",f=m[3],w=Q.exec(f),null!=w){let[,e,t,i,r]=w;i?b.path=`${e}${i}${r}`:b.path=`${e.endsWith("/")&&r.startsWith("/")?e.slice(0,-1):e}${r}`,t?b.originalPath=`${e}${t}${r}`:b.originalPath=`${e.endsWith("/")&&r.startsWith("/")?e.slice(0,-1):e}${r}`}else w=j.exec(f),null!=w?(b.path=w[2],b.originalPath=w[1]):b.path=f;break;case"create":b.status="A",b.path=m[3];break;case"delete":b.status="D",b.path=m[3]}if(R.done||"</f>"===R.value)break}}if(void 0!==b.files&&(b.path=(0,$.x1)(b.files,e=>e.path?e.path:void 0).join(", ")),k&&void 0===r&&1===i&&void 0!==s?(r=(0,T.Fd)(s.replace(s.startsWith("/")?`/${b.path}`:b.path,"")),g=(0,T.Fd)((0,D.V8)(r,s))):g=b.path??(null!=r&&null!=s?(0,T.Fd)((0,D.V8)(r,s)):void 0),k=!1,h&&!u?.has(b.sha))continue;let o=P.get(b.sha);if(void 0===o){if(C++,a&&C>a)break t}else A&&A--;!function(e,t,i,r,s,o,n,a,l){if(null==i){null!=t.author&&(0,B.h)(a,t.author,t.authorEmail)&&(t.author="You"),null!=t.committer&&(0,B.h)(a,t.committer,t.committerEmail)&&(t.committer="You");let c=t.originalPath??(o!==t.path?t.path:void 0),u={files:t.files?.map(t=>new x.l(e,s,t.path,t.status,t.originalPath))};1===r&&null!=o&&(u.file=new x.l(e,s,o,t.status,c,void 0,t.fileStats));let h=l?.get(t.sha);null!=h?(i=new O.Yg(e,s,h.sha,h.author,h.committer,h.summary,h.parents,h.message,u,void 0,null!=t.line?[t.line]:[],t.tips,h.stashName,h.stashOnRef),n.set(h.sha,i)):(i=new O.Yg(e,s,t.sha,new O.M7(t.author,t.authorEmail,new Date(1e3*t.authorDate)),new O.M7(t.committer,t.committerEmail,new Date(1e3*t.committedDate)),t.summary?.split("\n",1)[0]??"",t.parentShas??[],t.summary??"",u,void 0,null!=t.line?[t.line]:[],t.tips),n.set(t.sha,i))}}(e,b,o,i,r,g,P,n,u)}}}return y?.stop({suffix:` parsed ${P.size} commits`}),{repoPath:r,commits:P,sha:o,count:C,limit:a,range:c,hasMore:d??!!(A&&C>A&&1!==A)}}catch(e){var g=e,m=!0}finally{W(p,g,m)}}function ed(e,t,i){var r=[];try{let s,o,n,a,l,c,u;q(r,(0,E.u)("Git.parseLogSimple",{log:!1,logLevel:"debug"}));do{if(u=z.exec(e),null==u)break;if(u[1]===i||t-- >0)continue;[,s,o,n,a,l,c]=u,l=` ${n||o||c||l}`.substring(1),a=null==a||0===a.length?void 0:` ${a}`.substring(1)}while(t>=0)return z.lastIndex=0,[null==s||0===s.length?void 0:` ${s}`.substring(1),l,a]}catch(e){var s=e,o=!0}finally{W(r,s,o)}}function ep(e,t){var i=[];try{let r,s,o;q(i,(0,E.u)("Git.parseLogSimpleRenamed",{log:!1,logLevel:"debug"}));let n=Y.exec(e);if(null==n)return[void 0,void 0,void 0];let[,a,l]=n;for(;n=K.exec(l),null!=n;){if([,r,s,o]=n,t!==s){r=void 0,s=void 0,o=void 0;continue}s=` ${o||s}`.substring(1),r=null==r||0===r.length?void 0:` ${r}`.substring(1);break}return K.lastIndex=0,[null==a||0===a.length||null==s?void 0:` ${a}`.substring(1),s,r]}catch(e){var r=e,s=!0}finally{W(i,r,s)}}var eg=i(5738),em=i(8554),ef=i(6612),ew=i(4342),ev=i(7005),ey=i(5758),eb=i(5419),eC=i(5576),ek=i(6709);let eS="win32"===k.platform,eR=/[\\/]/,eP=/\.ps1$/i,eA=/\.(bat|cmd)$/i,eI=/\.(js)$/i;function eD(e){if(eR.test(e))return e;let t=(0,C.join)(".",e);try{let e=(0,b.statSync)(t);if(e?.isFile()&&e$(e))return t}catch{}let i=k.env.PATH;if(null!=i&&0!==i.length){let t;for(let r of i.split(eS?";":":")){let i=(0,C.join)(r,e);try{if(t=(0,b.statSync)(i),t?.isFile()&&e$(t))return i}catch{}}}return e}function e$(e){if(eS)return!0;let t=!e.gid||null!=k.getgid&&e.gid===k.getgid(),i=!e.uid||null!=k.getuid&&e.uid===k.getuid();return!!(1&e.mode||8&e.mode&&t||64&e.mode&&i)}let eT=/stdout maxBuffer( length)? exceeded/;let RunError=class RunError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.stdout=t,this.stderr=i,t=t.trim(),i=i.trim(),Error.captureStackTrace?.(this,RunError)}get cmd(){return this.original.cmd}get killed(){return this.original.killed}get code(){return this.original.code??void 0}get signal(){return this.original.signal}};let CancelledRunError=class CancelledRunError extends RunError{constructor(e,t,i,r="SIGTERM"){super({name:"CancelledRunError",message:"Cancelled",cmd:e,killed:t,code:i,signal:r},"",""),Error.captureStackTrace?.(this,CancelledRunError)}};function eE(e,t,r,s){let{cancellation:o,exitCodeOnly:n,stdin:a,stdinEncoding:l,...c}={maxBuffer:1048576e3,...s},u=!1;return new Promise((s,h)=>{let d=(0,y.execFile)(e,t,c,async(o,a,l)=>{if(!u){if(n){s(o?.code??d.exitCode);return}if(null!=o){let e,t;if(eT.test(o.message)&&(o.message=`Command output exceeded the allocated stdout buffer. Set 'options.maxBuffer' to a larger value than ${c.maxBuffer} bytes`),"utf8"===r||"binary"===r||"buffer"===r)e=a.toString(),t=l.toString();else{let s=(await i.e(590).then(i.t.bind(i,4854,23))).decode;e=s(Buffer.from(a,"binary"),r),t=s(Buffer.from(l,"binary"),r)}h(new RunError(o,e,t));return}l&&ev.Vy.warn(`Warning(${e} ${t.join(" ")}): ${l}`),"utf8"===r||"binary"===r||"buffer"===r?s(a):s((0,(await i.e(590).then(i.t.bind(i,4854,23))).decode)(Buffer.from(a,"binary"),r))}});o?.onCancellationRequested(()=>{let t=d.kill();u=!0,n?s(0):h(new CancelledRunError(e,t))}),null!=a&&d.stdin?.end(a,l??"utf8")})}async function e_(e){return new Promise(t=>(0,b.access)(e,b.constants.F_OK,e=>t(null==e)))}var eO=Object.defineProperty,ex=Object.getOwnPropertyDescriptor;let eF=Object.freeze([]),eL=Object.freeze({}),eB=Object.freeze(["-c","color.branch=false"]),eU=Object.freeze(["-c","color.diff=false"]),eN=Object.freeze(["-c","log.showSignature=false"]),eq=Object.freeze(["-c","log.showSignature=false","-c","diff.renameLimit=0"]),eW=Object.freeze(["-c","color.status=false"]),eM=new TextDecoder("utf8"),eG="4b825dc642cb6eb9a060e54bf8d69288fbee4904",eH={alreadyCheckedOut:/already checked out/i,alreadyExists:/already exists/i,ambiguousArgument:/fatal:\s*ambiguous argument ['"].+['"]: unknown revision or path not in the working tree/i,badRevision:/bad revision '(.*?)'/i,cantLockRef:/cannot lock ref|unable to update local ref/i,changesWouldBeOverwritten:/Your local changes to the following files would be overwritten|Your local changes would be overwritten/i,commitChangesFirst:/Please, commit your changes before you can/i,conflict:/^CONFLICT \([^)]+\): \b/m,detachedHead:/You are in 'detached HEAD' state/i,entryNotUpToDate:/error:\s*Entry ['"].+['"] not uptodate\. Cannot merge\./i,failedToDeleteDirectoryNotEmpty:/failed to delete '(.*?)': Directory not empty/i,invalidLineCount:/file .+? has only \d+ lines/i,invalidObjectName:/invalid object name: (.*)\s/i,invalidObjectNameList:/could not open object name list: (.*)\s/i,invalidTagName:/invalid tag name/i,mainWorkingTree:/is a main working tree/i,noFastForward:/\(non-fast-forward\)/i,noMergeBase:/no merge base/i,noRemoteRepositorySpecified:/No remote repository specified\./i,noUpstream:/^fatal: The current branch .* has no upstream branch/i,notAValidObjectName:/Not a valid object name/i,noUserNameConfigured:/Please tell me who you are\./i,noPausedOperation:/no merge (?:in progress|to abort)|no cherry-pick(?: or revert)? in progress|no rebase in progress/i,permissionDenied:/Permission.*denied/i,pushRejected:/^error: failed to push some refs to\b/m,rebaseMultipleBranches:/cannot rebase onto multiple branches/i,refLocked:/fatal:\s*cannot lock ref ['"].+['"]: unable to create file/i,remoteAhead:/rejected because the remote contains work/i,remoteConnection:/Could not read from remote repository/i,remoteRejected:/rejected because the remote contains work/i,tagAlreadyExists:/tag .* already exists/i,tagConflict:/! \[rejected\].*\(would clobber existing tag\)/m,tagNotFound:/tag .* not found/i,uncommittedChanges:/contains modified or untracked files/i,unmergedChanges:/error:\s*you need to resolve your current index first/i,unmergedFiles:/is not possible because you have unmerged files|You have unmerged files/i,unresolvedConflicts:/You must edit all merge conflicts|Resolve all conflicts/i,unstagedChanges:/You have unstaged changes/i},eV={notARepository:/Not a git repository/i,outsideRepository:/is outside repository/i,noPath:/no such path/i,noCommits:/does not have any commits/i,notFound:/Path '.*?' does not exist in/i,foundButNotInRevision:/Path '.*?' exists on disk, but not in/i,headNotABranch:/HEAD does not point to a branch/i,noUpstream:/no upstream configured for branch '(.*?)'/i,unknownRevision:/ambiguous argument '.*?': unknown revision or path not in the working tree|not stored as a remote-tracking branch/i,mustRunInWorkTree:/this operation must be run in a work tree/i,patchWithConflicts:/Applied patch to '.*?' with conflicts/i,noRemoteRepositorySpecified:/No remote repository specified\./i,remoteConnectionError:/Could not read from remote repository/i,notAGitCommand:/'.+' is not a git command/i,tipBehind:/tip of your current branch is behind/i};function ej(e,t,i){let r=e.message||e.toString();if(null!=r&&0!==r.length){for(let e of Object.values(eV))if(e.test(r)){let e=void 0!==i?` [${(0,_.$l)(i)}ms]`:"";return ev.Vy.warn(`[${t}] Git ${r.trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${R.EO.Dot} `)}${e}`),""}let e=eH.badRevision.exec(r);if(null!=e){let[,t]=e;if(t?.endsWith("^3"))return""}}throw e}let eQ=0,ez=[[eH.tagAlreadyExists,I.xz.TagAlreadyExists],[eH.tagNotFound,I.xz.TagNotFound],[eH.invalidTagName,I.xz.InvalidTagName],[eH.permissionDenied,I.xz.PermissionDenied],[eH.remoteRejected,I.xz.RemoteRejected]],eY=[[eH.ambiguousArgument,I.Yw.AmbiguousArgument],[eH.changesWouldBeOverwritten,I.Yw.ChangesWouldBeOverwritten],[eH.detachedHead,I.Yw.DetachedHead],[eH.entryNotUpToDate,I.Yw.EntryNotUpToDate],[eH.permissionDenied,I.Yw.PermissionDenied],[eH.refLocked,I.Yw.RefLocked],[eH.unmergedChanges,I.Yw.UnmergedChanges]];let Git=class Git{pendingCommands=new Map;async exec(e,...t){let i,r;if(!w.workspace.isTrusted)throw new I.Ob;let s=(0,S.k)(),{configs:o,correlationKey:n,errors:a,encoding:l,...c}=e;t=t.filter(e=>null!=e);let u={...c,encoding:(l??"utf8")==="utf8"?"utf8":"buffer",env:{...k.env,...this._gitEnv,...e.env??eL,GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"}},h=`[${u.cwd}] git ${t.join(" ")}`,d=`${void 0!==n?`${n}:`:""}${e?.stdin!=null?`${eQ===Number.MAX_SAFE_INTEGER&&(eQ=0),eQ++}:`:""}${h}`,p=this.pendingCommands.get(d);void 0===p?(i=!1,t.unshift("-c","core.quotepath=false","-c","color.ui=false",...null!=o?o:eF),"win32"===k.platform&&t.unshift("-c","core.longpaths=true"),p=eE(await this.path(),t,l??"utf8",u),this.pendingCommands.set(d,p)):(i=!0,ev.Vy.debug(`${(0,eb.zf)("GIT")} ${h} ${R.EO.Dot} waiting...`));try{return await p}catch(t){switch(r=t,a){case A.Ignore:return r=void 0,"";case A.Throw:throw t;default:return r=void 0,ej(t,e.cwd,s)}}finally{this.pendingCommands.delete(d),this.logGitCommand(h,r,(0,_.$l)(s),i)}}async spawn(e,...t){let i;if(!w.workspace.isTrusted)throw new I.Ob;let r=(0,S.k)(),{cancellation:s,configs:o,stdin:n,stdinEncoding:a,...l}=e,c={stdio:[n?"pipe":"ignore",null,null],...l,env:{...k.env,...this._gitEnv,...e.env??eL,GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"}},u=`(spawn) [${c.cwd}] git ${t.join(" ")}`;if(t.unshift("-c","core.quotepath=false","-c","color.ui=false",...void 0!==o?o:eF),"win32"===k.platform&&t.unshift("-c","core.longpaths=true"),s){let e=new AbortController;c.signal=e.signal,s.onCancellationRequested(()=>e.abort())}let h=(0,y.spawn)(await this.path(),t,c);return n&&h.stdin?.end(n,a??"utf8"),h.once("error",e=>i=e),h.once("exit",()=>this.logGitCommand(u,i,(0,_.$l)(r),!1)),h}_gitLocation;_gitLocationPromise;async getLocation(){return null==this._gitLocation&&(null==this._gitLocationPromise&&(this._gitLocationPromise=this._gitLocator()),this._gitLocation=await this._gitLocationPromise),this._gitLocation}_gitLocator;setLocator(e){this._gitLocator=e,this._gitLocationPromise=void 0,this._gitLocation=void 0}_gitEnv;setEnv(e){this._gitEnv=e}async path(){return(await this.getLocation()).path}async ensureSupports(e,t,i){let r=P.hV.get(e);if(null==r)return;let s=await this.version();if(-1===(0,ek.UD)((0,ek.sH)(s),(0,ek.sH)(r)))throw Error(`${t} requires a newer version of Git (>= ${r}) than is currently installed (${s}).${i}`)}supports(e){let t=P.hV.get(e);return null==t||(null!=this._gitLocation?-1!==(0,ek.UD)((0,ek.sH)(this._gitLocation.version),(0,ek.sH)(t)):this.version().then(e=>-1!==(0,ek.UD)((0,ek.sH)(e),(0,ek.sH)(t))))}async version(){return(await this.getLocation()).version}ignoreRevsFileMap=new Map;async blame(e,t,i){let r,[s,o]=(0,D.Uf)(t,e,!0),n=["blame","--root","--incremental"];if(i?.ignoreWhitespace&&n.push("-w"),i?.startLine!=null&&null!=i.endLine&&n.push(`-L ${i.startLine},${i.endLine}`),i?.args!=null){let e=i.args.findIndex(e=>"--ignore-revs-file"!==e&&e.startsWith("--ignore-revs-file"));if(-1!==e){let t=/^--ignore-revs-file\s*=?\s*(.*)$/.exec(i.args[e]);null!=t&&i.args.splice(e,1,"--ignore-revs-file",t[1])}n.push(...i.args)}let a=this.supports("git:ignoreRevsFile"),l=(0,eC.yL)(a)?await a:a,c=n.indexOf("--ignore-revs-file");if(l){let e;-1!==c?(e=n[c+1],(0,T.oP)(e)||(e=(0,T.HS)(o,e))):e=(0,T.HS)(o,".git-blame-ignore-revs");let t=this.ignoreRevsFileMap.get(e);if(void 0!==t)l=t;else{try{l=await e_(e)}catch{l=!1}this.ignoreRevsFileMap.set(e,l)}}l||-1===c?l&&-1===c&&n.push("--ignore-revs-file",".git-blame-ignore-revs"):n.splice(c,2),i?.contents!=null?(n.push("--contents","-"),r=i.contents):i?.ref&&((0,em.KH)(i.ref)?(n.push("--contents","-"),r=await this.show__content(e,t,":")):n.push(i.ref));try{return await this.exec({cwd:o,stdin:r,correlationKey:i?.correlationKey},...n,"--",s)}catch(t){let e=eH.invalidObjectNameList.exec(t.message);if(null!=e)throw new I.S0(e[1],t);if(null!=(e=eH.invalidObjectName.exec(t.message)))throw new I.UM(e[1],t);throw t}}branchOrTag__containsOrPointsAt(e,t,i){let r=[i?.type??"branch"];for(let e of(i?.all?r.push("-a"):i?.remotes&&r.push("-r"),r.push("--format=%(refname:short)"),t))r.push(i?.mode==="pointsAt"?`--points-at=${e}`:`--contains=${e}`);return i?.name!=null&&r.push(i.name),this.exec({cwd:e,configs:eB,errors:A.Ignore},...r)}checkout(e,t,{createBranch:i,path:r}={}){let s=["checkout"];return i?s.push("-b",i,t,"--"):(s.push(t,"--"),r&&([r,e]=(0,D.Uf)(r,e,!0),s.push(r))),this.exec({cwd:e},...s)}async cherrypick(e,t,i={}){let r=["cherry-pick"];i?.noCommit&&r.push("-n"),r.push(t);try{await this.exec({cwd:e,errors:i?.errors},...r)}catch(r){let e=r?.toString()??"",i=I.$j.Other;throw eH.changesWouldBeOverwritten.test(e)||eH.changesWouldBeOverwritten.test(r.stderr??"")?i=I.$j.AbortedWouldOverwrite:(eH.conflict.test(e)||eH.conflict.test(r.stdout??""))&&(i=I.$j.Conflicts),new I.HT(i,r,t)}}async clone(e,t){let i=0,[,,r]=(0,eg.BX)(e),s=r.split("/").pop();if(!s)return;let o=(0,C.join)(t,s);for(;await e_(o)&&i<20;)i++,o=(0,C.join)(t,`${r}-${i}`);return await this.exec({cwd:t},"clone",e,o),o}async config__get(e,t,i){let r=await this.exec({cwd:t??"",errors:A.Ignore,local:i?.local},"config","--get",e);return 0===r.length?void 0:r.trim()}async config__get_regex(e,t,i){let r=await this.exec({cwd:t??"",errors:A.Ignore,local:i?.local},"config","--get-regex",e);return 0===r.length?void 0:r.trim()}async diff(e,t,i,r,s={}){let o=["diff","--no-ext-diff","--minimal"];null!=s.linesOfContext&&o.push(`-U${s.linesOfContext}`),s.renames&&o.push(`-M${null==s.similarityThreshold?"":`${s.similarityThreshold}%`}`),null!=s.filters&&0!==s.filters.length&&o.push(`--diff-filter=${s.filters.join("")}`),i&&(i.endsWith("^3^")&&(i=eG),o.push((0,em.KH)(i)?"--staged":i)),r&&o.push((0,em.KH)(r)?"--staged":r);try{return await this.exec({cwd:e,configs:eU,encoding:s.encoding},...o,"--",t)}catch(n){let o=eH.badRevision.exec(n.message);if(null!==o){let[,n]=o;if(n===i&&n?.endsWith("^"))return this.diff(e,t,eG,r,s)}throw n}}async diff__contents(e,t,i,r,s={}){let o=["diff",`-M${null==s.similarityThreshold?"":`${s.similarityThreshold}%`}`,"--no-ext-diff","-U0","--minimal"];null!=s.filters&&0!==s.filters.length&&o.push(`--diff-filter=${s.filters.join("")}`),o.push("--no-index");try{return await this.exec({cwd:e,configs:eU,encoding:s.encoding,stdin:r},...o,"--",t,"-")}catch(n){if(n instanceof RunError&&n.stdout)return n.stdout;let o=eH.badRevision.exec(n.message);if(null!==o){let[,n]=o;if(n===i&&n?.endsWith("^"))return this.diff__contents(e,t,eG,r,s)}throw n}}async fetch(e,t={}){let i=["fetch"];t.prune&&i.push("--prune"),t.branch&&t.remote?t.upstream&&t.pull?i.push("-u",t.remote,`${t.upstream}:${t.branch}`):i.push(t.remote,t.upstream||t.branch):t.remote?i.push(t.remote):t.all&&i.push("--all");try{await this.exec({cwd:e},...i)}catch(r){let e=r?.toString()??"",i=I.VT.Other;throw eH.noFastForward.test(e)||eH.noFastForward.test(r.stderr??"")?i=I.VT.NoFastForward:eH.noRemoteRepositorySpecified.test(e)||eH.noRemoteRepositorySpecified.test(r.stderr??"")?i=I.VT.NoRemote:(eH.remoteConnection.test(e)||eH.remoteConnection.test(r.stderr??""))&&(i=I.VT.RemoteConnection),new I.fk(i,r,t?.branch,t?.remote)}}async push(e,t){let i=["push"];null!=t.force&&(t.force.withLease?(i.push("--force-with-lease"),t.force.ifIncludes&&await this.supports("git:push:force-if-includes")&&i.push("--force-if-includes")):i.push("--force")),t.branch&&t.remote?t.upstream?i.push("-u",t.remote,`${t.branch}:${t.upstream}`):t.publish?i.push("--set-upstream",t.remote,t.branch):i.push(t.remote,t.branch):t.remote&&i.push(t.remote);try{await this.exec({cwd:e},...i)}catch(r){let e=r?.toString()??"",i=I.b9.Other;throw eH.remoteAhead.test(e)||eH.remoteAhead.test(r.stderr??"")?i=I.b9.RemoteAhead:eV.tipBehind.test(e)||eV.tipBehind.test(r.stderr??"")?i=I.b9.TipBehind:eH.pushRejected.test(e)||eH.pushRejected.test(r.stderr??"")?i=t?.force?.withLease?/! \[rejected\].*\(stale info\)/m.test(r.stderr||"")?I.b9.PushRejectedWithLease:t.force.ifIncludes&&/! \[rejected\].*\(remote ref updated since checkout\)/m.test(r.stderr||"")?I.b9.PushRejectedWithLeaseIfIncludes:I.b9.PushRejected:I.b9.PushRejected:eH.permissionDenied.test(e)||eH.permissionDenied.test(r.stderr??"")?i=I.b9.PermissionDenied:eH.remoteConnection.test(e)||eH.remoteConnection.test(r.stderr??"")?i=I.b9.RemoteConnection:(eH.noUpstream.test(e)||eH.noUpstream.test(r.stderr??""))&&(i=I.b9.NoUpstream),new I.Vc(i,r,t?.branch,t?.remote)}}async pull(e,t){let i=["pull"];t.tags&&i.push("--tags"),t.rebase&&i.push("-r");try{await this.exec({cwd:e},...i)}catch(i){let e=i?.toString()??"",t=I.CW.Other;throw eH.conflict.test(e)||eH.conflict.test(i.stdout??"")?t=I.CW.Conflict:eH.noUserNameConfigured.test(e)||eH.noUserNameConfigured.test(i.stderr??"")?t=I.CW.GitIdentity:eH.remoteConnection.test(e)||eH.remoteConnection.test(i.stderr??"")?t=I.CW.RemoteConnection:eH.unstagedChanges.test(e)||eH.unstagedChanges.test(i.stderr??"")?t=I.CW.UnstagedChanges:eH.unmergedFiles.test(e)||eH.unmergedFiles.test(i.stderr??"")?t=I.CW.UnmergedFiles:eH.commitChangesFirst.test(e)||eH.commitChangesFirst.test(i.stderr??"")?t=I.CW.UncommittedChanges:eH.changesWouldBeOverwritten.test(e)||eH.changesWouldBeOverwritten.test(i.stderr??"")?t=I.CW.OverwrittenChanges:eH.cantLockRef.test(e)||eH.cantLockRef.test(i.stderr??"")?t=I.CW.RefLocked:eH.rebaseMultipleBranches.test(e)||eH.rebaseMultipleBranches.test(i.stderr??"")?t=I.CW.RebaseMultipleBranches:(eH.tagConflict.test(e)||eH.tagConflict.test(i.stderr??""))&&(t=I.CW.TagConflict),new I.YX(t,i)}}log(e,t,i,...r){return this.exec({cwd:e,cancellation:i?.cancellation,configs:i?.configs??eN,errors:i?.errors,stdin:i?.stdin},"log",...i?.stdin?["--stdin"]:eF,...r,...t&&!(0,em.KH)(t)?[t]:eF,...r.includes("--")?eF:["--"])}async logStreamTo(e,t,i,r,...s){let o=["log",...s];r?.stdin&&o.push("--stdin");let n=await this.spawn({cwd:e,configs:r?.configs??eN,stdin:r?.stdin},...o,"--"),a=eK(t),l=!1,c=0;return new Promise((e,t)=>{let r=[],s=[];function o(e){r.push(e)}function u(e){t(e)}function h(i){0!==i&&t(Error(r.join(""))),e([s,c])}n.on("error",u),n.on("exit",h),n.stdout.setEncoding("utf8"),n.stdout.on("data",function t(r){s.push(r),c+=r.match(/(?:^\x00*|\x00\x00)[0-9a-f]{40}\x00/g)?.length??0,!l&&a.test(r)&&(l=!0,c>i&&(i=c+50)),l&&!(c<=i)&&(n.removeListener("exit",h),n.removeListener("error",u),n.stdout.removeListener("data",t),n.stderr.removeListener("data",o),n.kill(),e([s,c]))}),n.stderr.setEncoding("utf8"),n.stderr.on("data",o)})}log__file(e,t,i,{all:r,argsOrFormat:s,fileMode:o="full",filters:n,limit:a,merges:l=!1,ordering:c,renames:u=!0,reverse:h=!1,since:d,skip:p,startLine:g,endLine:m}={}){let[f,w]=(0,D.Uf)(t,e,!0);null==s&&(s=[`--format=${r?el:ec}`]),"string"==typeof s&&(s=[`--format=${s}`]);let v=["log",...s,"--use-mailmap"];return c&&v.push(`--${c}-order`),a&&!h&&v.push(`-n${a+1}`),p&&v.push(`--skip=${p}`),d&&v.push(`--since="${d}"`),r&&v.push("--all","--single-worktree"),l&&v.push("--first-parent"),u&&null!=g&&(u=!1),u&&v.push("--follow"),null!=n&&0!==n.length&&v.push(`--diff-filter=${n.join("")}`),"none"!==o&&(null==g?"simple"===o||(0,T.Np)(f)?v.push("--name-status"):v.push("--numstat","--summary"):v.push(`-L ${g},${null==m?g:m}:${f}`)),i&&!(0,em.KH)(i)&&(h?v.push("--reverse","--ancestry-path",`${i}..HEAD`):v.push(i)),null==g&&v.push("--",f),this.exec({cwd:w,configs:eN},...v)}async log__file_recent(e,t,i){let r=["log",`-M${i?.similarityThreshold==null?"":`${i?.similarityThreshold}%`}`,"-n1","--format=%H"];i?.ordering&&r.push(`--${i?.ordering}-order`),i?.ref&&r.push(i?.ref);let s=await this.exec({cancellation:i?.cancellation,cwd:e,configs:eN,errors:A.Ignore},...r,"--",t);return 0===s.length?void 0:s.trim()}async ls_files(e,t,i){let r=["ls-files"];i?.rev&&((0,em._k)(i.rev)?(0,em.KH)(i.rev)&&r.push("--stage"):r.push(`--with-tree=${i.rev}`)),!i?.rev&&i?.untracked&&r.push("-o");let s=await this.exec({cwd:e,errors:A.Ignore},...r,"--",t);return 0===s.length?void 0:s.trim()}async reset(e,t,i){try{let r=[];i?.hard?r.push("--hard"):i?.soft&&r.push("--soft"),i?.ref&&r.push(i.ref),await this.exec({cwd:e},"reset","-q",...r,"--",...t)}catch(t){let e=t?.toString()??"";for(let[i,r]of eY)if(i.test(e)||i.test(t.stderr??""))throw new I.AC(r,t);throw new I.AC(I.Yw.Other,t)}}async rev_parse__currentBranch(e,t){try{return[await this.exec({cwd:e,errors:A.Throw},"rev-parse","--abbrev-ref","--symbolic-full-name","@","@{u}","--"),void 0]}catch(r){let i=r?.toString()??"";if(eH.badRevision.test(i)||eV.noUpstream.test(i)){let t,i,s;if(null!=r.stdout&&0!==r.stdout.length)return[r.stdout,void 0];try{if(t=await this.exec({cwd:e},"symbolic-ref","--short","HEAD"),null!=t)return[t.trim(),void 0]}catch{}if(null!=(t=await this.symbolic_ref__HEAD(e,"origin")))return[t.startsWith("origin/")?t.substring(7):t,void 0];let o=await this.config__get("init.defaultBranch",e)??"main",n=await this.config__get_regex(`branch\\.${o}\\.+`,e,{local:!0});if(n){let e=/^branch\..+\.remote\s(.+)$/m.exec(n);null!=e&&(i=e[1]),null!=(e=/^branch\..+\.merge\srefs\/heads\/(.+)$/m.exec(n))&&(s=e[1])}return[`${o}${i&&s?`
${i}/${s}`:""}`,void 0]}if(eV.headNotABranch.test(i)){let i=(await this.exec({cwd:e,configs:eN,errors:A.Ignore},"log","-n1","--format=%H",t?`--${t}-order`:void 0,"--"))?.trim();if(!i)return;return[`(HEAD detached at ${(0,em.pV)(i)})`,i]}ej(r,e);return}}async symbolic_ref__HEAD(e,t){let i=!1;for(;;)try{let i=await this.exec({cwd:e},"symbolic-ref","--short",`refs/remotes/${t}/HEAD`);return i?.trim()||void 0}catch(r){if(/is not a symbolic ref/.test(r.stderr))try{if(!i){i=!0,await this.exec({cwd:e},"remote","set-head","-a",t);continue}let r=await this.exec({cwd:e},"ls-remote","--symref",t,"HEAD");if(null!=r){let e=/ref:\s(\S+)\s+HEAD/m.exec(r);if(null!=e){let[,i]=e;return`${t}/${i.substring(11).trim()}`}}}catch{}return}}async rev_parse__git_dir(e){let t=await this.exec({cwd:e,errors:A.Ignore},"rev-parse","--git-dir","--git-common-dir");if(!t?.length)return;let[i,r]=t.split("\n").map(e=>e.trimStart());return((0,T.oP)(i)||(i=(0,T.HS)(e,i)),i=(0,T.Fd)(i),r)?((0,T.oP)(r)||(r=(0,T.HS)(e,r)),{path:i,commonPath:(r=(0,T.Fd)(r))!==i?r:void 0}):{path:i}}async rev_parse__show_toplevel(e){let t;if(!w.workspace.isTrusted)try{if((0,b.accessSync)((0,T.HS)(e,"HEAD")),t=await this.exec({cwd:e,errors:A.Throw,configs:["-C",e]},"rev-parse","--show-cdup"),""===t.trim())return ev.Vy.log(`Skipping (untrusted workspace); bare clone repository detected in '${e}'`),eF}catch{}try{return t=await this.exec({cwd:e,errors:A.Throw},"rev-parse","--show-toplevel"),0===t.length?eF:[!0,(0,T.Fd)(t.trimStart().replace(/[\r|\n]+$/,""))]}catch(s){if(s instanceof I.Ob)return eF;let i=/(?:^fatal: detected dubious ownership in repository at '([^']+)'|unsafe repository \('([^']+)' is owned by someone else\))[\s\S]*(git config --global --add safe\.directory [^\n•]+)/m.exec(s.stderr);if(null!=i)return ev.Vy.log(`Skipping; unsafe repository detected in '${i[1]||i[2]}'; run '${i[3]}' to allow it`),[!1];let r=/this operation must be run in a work tree/.test(s.stderr);if(r&&w.workspace.isTrusted&&"true"===(t=await this.exec({cwd:e,errors:A.Ignore},"rev-parse","--is-bare-repository")).trim()){let t=await this.rev_parse__git_dir(e),i=t?.commonPath??t?.path;if(i?.length)return[!0,i]}if(r||"ENOENT"===s.code){let t=!r&&await e_(e);if(!t){do{let i=(0,T.pD)(e);if(i===e||0===i.length)return eF;e=i,t=await e_(e)}while(!t)return this.rev_parse__show_toplevel(e)}}return eF}}async show__content(e,t,i,r){let[s,o]=(0,D.Uf)(t,e,!0);if((0,em.KH)(i)&&(i=":"),(0,em._k)(i))throw Error(`ref=${i} is uncommitted`);let n={configs:eN,cwd:o,encoding:r?.encoding??"utf8",errors:A.Throw},a=i.endsWith(":")?`${i}./${s}`:`${i}:./${s}`;try{return await this.exec(n,"show","--textconv",a,"--")}catch(o){let s=o?.toString()??"";if(":"===i&&eH.badRevision.test(s))return this.show__content(e,t,"HEAD:",r);if(eH.badRevision.test(s)||eV.notFound.test(s)||eV.foundButNotInRevision.test(s))return;return ej(o,n.cwd)}}async stash__push(e,t,i){let r,s=["stash","push"];if((i?.includeUntracked||i?.pathspecs?.length)&&!i?.onlyStaged&&s.push("--include-untracked"),i?.keepIndex&&!i?.includeUntracked&&s.push("--keep-index"),i?.onlyStaged)if(await this.supports("git:stash:push:staged"))s.push("--staged");else throw Error(`Git version ${P.hV.get("git:stash:push:staged")}}2.35 or higher is required for --staged`);t&&s.push("-m",t),i?.pathspecs?.length?i.stdin?(r=i.pathspecs.join("\0"),s.push("--pathspec-from-file=-","--pathspec-file-nul","--")):s.push("--",...i.pathspecs):s.push("--");try{if((await this.exec({cwd:e,stdin:r},...s)).includes("No local changes to save"))throw new I.Oo(I.C6.NothingToSave)}catch(e){if(e instanceof RunError&&e.stdout.includes("Saved working directory and index state")&&e.stderr.includes("Cannot remove worktree changes"))throw new I.Oo(I.C6.ConflictingStagedAndUnstagedLines);throw e}}async status(e,t=1,i,...r){let s=["status",t>=2?`--porcelain=v${t}`:"--porcelain","--branch","-u"];return await this.supports("git:status:find-renames")&&s.push(`--find-renames${i?.similarityThreshold==null?"":`=${i.similarityThreshold}%`}`),this.exec({cwd:e,configs:eW,env:{GIT_OPTIONAL_LOCKS:"0"}},...s,"--",...r)}async tag(e,...t){try{return await this.exec({cwd:e},"tag",...t)}catch(t){let e=t?.toString()??"";for(let[i,r]of ez)if(i.test(e)||i.test(t.stderr??""))throw new I.PC(r,t);throw new I.PC(I.xz.Other,t)}}async readDotGitFile(e,t,i){try{let r=await w.workspace.fs.readFile(w.Uri.joinPath(e.uri,...t)),s=eM.decode(r);if(s=i?.trim??!0?s.trim():s,i?.numeric){let e=Number.parseInt(s,10);return isNaN(e)?void 0:e}return s}catch(e){if(i?.throw)throw e;return}}async runGitCommandViaTerminal(e,t,i,r){let s,o=(0,eb.dQ)(),n=await this.getLocation(),a=(0,T.Fd)(n.path??"git"),l=v.H.get("terminal.overrideGitEditor")?`-c "core.editor=${await (0,ef.Xz)()}" `:"",c=i.map(e=>e.startsWith("#")||/['();$|>&<]/.test(e)?`"${e}"`:e);if(a.includes(" ")){let i=w.env.shell;ev.Vy.debug(o,`\u2022 git path '${a}' contains spaces, detected shell: '${i}'`),s=`${(eS?/(pwsh|powershell)\.exe/i:/pwsh/i).test(i)?"&":""} "${a}" -C "${e}" ${l}${t} ${c.join(" ")}`}else s=`${a} -C "${e}" ${l}${t} ${c.join(" ")}`;ev.Vy.log(o,`\u2022 '${s}'`),this.logCore(`${(0,eb.zf)("TERMINAL")} ${s}`);let d=(null==u&&(u=w.window.createTerminal("GitLens"),h=w.window.onDidCloseTerminal(e=>{e===u&&(u=void 0,h?.dispose(),h=void 0)}),uC.instance.context.subscriptions.push(h)),u);d.show(!1),d.sendText(s,r?.execute??!1)}logGitCommand(e,t,i,r){let s=i>ey.H,o=s&&r?" (slow, waiting)":r?" (waiting)":s?" (slow)":"";null!=t?ev.Vy.error("",`${(0,eb.zf)("GIT")} ${e} ${R.EO.Dot} ${(t.message||String(t)||"").trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${R.EO.Dot} `)} [${i}ms]${o}`):s?ev.Vy.warn(`${(0,eb.zf)("GIT",`*${i}ms`)} ${e} [*${i}ms]${o}`):ev.Vy.log(`${(0,eb.zf)("GIT",`${i}ms`)} ${e} [${i}ms]${o}`),this.logCore(`${(0,eb.zf)(s?"*":"",`${i}ms`)} ${e}${o}`,t)}_gitOutput;logCore(e,t){ev.Vy.enabled(null!=t?"error":"debug")&&(this._gitOutput??=w.window.createOutputChannel("GitLens (Git)",{log:!0}),this._gitOutput.appendLine(`${ev.Vy.timestamp} ${e}${null!=t?` ${R.EO.Dot} FAILED`:""}`),null!=t&&this._gitOutput.appendLine(`
${String(t)}
`))}};function eK(e){return RegExp(`(?:^\0*|\0\0)${e}\0`)}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ex(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eO(t,i,o)})([(0,ew.Rm)()],Git.prototype,"runGitCommandViaTerminal",1);var eZ=i(2458),eJ=i(1220),eX=i(5565),e0=i(5262),e1=i(3088),e2=i(4111),e5=i(3949),e4=i(1403),e7=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),e3=e=>{throw TypeError(e)},e6=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&e3("Object expected"),i&&(r=t[e7("asyncDispose")]),void 0===r&&(r=t[e7("dispose")],i&&(s=r)),"function"!=typeof r&&e3("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},e9=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};function e8(e,t,i,r,s){var o=[];try{let n,a,l,c,u=e6(o,(0,E.u)(`Git.parseBlame(${t})`,{log:!1,logLevel:"debug"}));if(!i)return;let h=new Map,d=new Map,p=[];for(a of(0,_.HX)(i))if(!((l=a.split(" ")).length<2)){if([n]=l,null==c){c={sha:n,originalLine:parseInt(l[1],10),line:parseInt(l[2],10),lineCount:parseInt(l[3],10)};continue}switch(n){case"author":c.sha===L.SU?c.author="You":c.author=a.slice(n.length+1).trim();break;case"author-mail":{if(c.sha===L.SU){c.authorEmail=r?.email;continue}c.authorEmail=a.slice(n.length+1).trim();let e=c.authorEmail.indexOf("<");if(e>=0){let t=c.authorEmail.indexOf(">",e);t>e?c.authorEmail=c.authorEmail.substring(e+1,t):c.authorEmail=c.authorEmail.substring(e+1)}break}case"author-time":c.sha===L.SU&&null!=s?c.authorTime=s:c.authorTime=1e3*parseInt(l[1],10);break;case"author-tz":c.authorTimeZone=l[1];break;case"committer":(0,em._k)(c.sha)?c.committer="You":c.committer=a.slice(n.length+1).trim();break;case"committer-mail":{if((0,em._k)(c.sha)){c.committerEmail=r?.email;continue}c.committerEmail=a.slice(n.length+1).trim();let e=c.committerEmail.indexOf("<");if(e>=0){let t=c.committerEmail.indexOf(">",e);t>e?c.committerEmail=c.committerEmail.substring(e+1,t):c.committerEmail=c.committerEmail.substring(e+1)}break}case"committer-time":c.sha===L.SU&&null!=s?c.committerTime=s:c.committerTime=1e3*parseInt(l[1],10);break;case"committer-tz":c.committerTimeZone=l[1];break;case"summary":c.summary=a.slice(n.length+1).trim();break;case"previous":c.previousSha=l[1],c.previousPath=l.slice(2).join(" ");break;case"filename":c.path=a.slice(n.length+1),function(e,t,i,r,s,o,n){let a=r.get(t.sha);if(null==a){if(null!=t.author){(0,B.h)(n,t.author,t.authorEmail)&&(t.author="You");let e=s.get(t.author);null==e&&(e={name:t.author,lineCount:0},s.set(t.author,e))}null!=t.committer&&(0,B.h)(n,t.committer,t.committerEmail)&&(t.committer="You"),a=new O.Yg(e,i,t.sha,new O.M7(t.author,t.authorEmail,new Date(t.authorTime)),new O.M7(t.committer,t.committerEmail,new Date(t.committerTime)),t.summary,[],void 0,new x.l(e,i,t.path,F.NO.Modified,t.previousPath&&t.previousPath!==t.path?t.previousPath:void 0,t.previousSha),void 0,[]),r.set(t.sha,a)}for(let e=0,i=t.lineCount;e<i;e++){let i={sha:t.sha,previousSha:a.file.previousSha,originalLine:t.originalLine+e,line:t.line+e};a.lines.push(i),o[i.line-1]=i}}(e,c,t,d,h,p,r),c=void 0}}for(let[,e]of d){if(!e.author.name)continue;let t=h.get(e.author.name);if(null==t)return;t.lineCount+=e.lines.length}let g=new Map([...h.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return u?.stop({suffix:` parsed ${p.length} lines, ${d.size} commits`}),{repoPath:t,authors:g,commits:d,lines:p}}catch(e){var n=e,a=!0}finally{e9(o,n,a)}}var te=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tt=e=>{throw TypeError(e)},ti=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&tt("Object expected"),i&&(r=t[te("asyncDispose")]),void 0===r&&(r=t[te("dispose")],i&&(s=r)),"function"!=typeof r&&tt("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},tr=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let ts=/(\d+)\s+files? changed(?:,\s+(\d+)\s+insertions?\(\+\))?(?:,\s+(\d+)\s+deletions?\(-\))?/;function to(e){let[t,i]=e.split(","),r=Number(t),s=Number(i)||1;return{count:s,position:{start:r,end:r+s-1}}}function tn(e,t=!1){var i=[];try{let r,s=ti(i,(0,E.u)("Git.parseFileDiff",{log:!1,logLevel:"debug"}));if(!e)return;let o=[],n=e.split("\n"),a=-1;for(;++a<n.length&&!n[a].startsWith("@@"););for(;a<n.length;){if(!(r=n[a]).startsWith("@@")){a++;continue}let[e,t]=r.split("@@")[1].trim().split(" "),i=to(t.slice(1)),s=to(e.slice(1)),l=new Map,c=i.position.start;r=n[++a];let u=a;for(;a<n.length&&!r.startsWith("@@");)switch(r[0]){case"-":{let e=c;for(;r?.startsWith("-");)l.set(e++,{current:void 0,previous:r.slice(1),state:"removed"}),r=n[++a];if(r?.startsWith("+")){let e=c;for(;r?.startsWith("+");){let t=l.get(e);null!=t?(t.current=r.slice(1),t.state="changed"):l.set(e,{current:r.slice(1),previous:void 0,state:"added"}),e++,r=n[++a]}c=e}else c=e;break}case"+":l.set(c++,{current:r.slice(1),previous:void 0,state:"added"}),r=n[++a];break;case" ":l.set(c++,{current:r.slice(1),previous:r.slice(1),state:"unchanged"}),r=n[++a];break;default:r=n[++a]}let h={contents:`${n.slice(u,a).join("\n")}
`,current:i,previous:s,lines:l};o.push(h)}return s?.stop({suffix:` parsed ${o.length} hunks`}),{contents:t?e:void 0,hunks:o}}catch(e){var r=e,s=!0}finally{tr(i,r,s)}}function ta(e,t){var i=[];try{let r,s=ti(i,(0,E.u)("Git.parseDiffNameStatusFiles",{log:!1,logLevel:"debug"}));if(!e)return;let o=[],n=e.split("\0");for(let e=0;e<n.length-1;e++){let i;r=n[e][0],"."===r&&(r="?"),("R"===r||"C"===r)&&(i=n[++e]);let s=n[++e];o.push({status:r,path:s,originalPath:i,repoPath:t})}return s?.stop({suffix:` parsed ${o.length} files`}),o}catch(e){var r=e,s=!0}finally{tr(i,r,s)}}var tl=i(3711),tc=i(2636),tu=i(8557),th=i(9403),td=i(5319),tp=i(3500),tg=i(6851),tm=i(7747),tf=i(786),tw=Object.defineProperty,tv=Object.getOwnPropertyDescriptor;let AICommitMessageProvider=class AICommitMessageProvider{constructor(e,t){this.container=e,this.scmGit=t,this._disposable=v.H.onDidChange(this.onConfigurationChanged,this),this.onConfigurationChanged()}icon=new w.ThemeIcon("sparkle");title="Generate Commit Message (Experimental)";_disposable;_subscription;onConfigurationChanged(e){(null==e||v.H.changed(e,"ai.generateCommitMessage.enabled"))&&(v.H.get("ai.generateCommitMessage.enabled")?this._subscription=this.scmGit.registerCommitMessageProvider(this):(this._subscription?.dispose(),this._subscription=void 0))}dispose(){this._subscription?.dispose(),this._disposable.dispose()}async provideCommitMessage(e,t,i){let r=(0,eb.dQ)(),s=e.inputBox.value;try{let e=await this.container.ai.generateCommitMessage(t,{source:"scm-input"},{cancellation:i,context:s,progress:{location:w.ProgressLocation.Notification,title:"Generating commit message..."}});if(null==e)return;return`${s?`${s}

`:""}${e.parsed.summary}

${e.parsed.body}`}catch(e){ev.Vy.error(e,r),e instanceof Error&&e.message.startsWith("No changes")&&w.window.showInformationMessage("No changes to generate a commit message from.");return}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tv(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tw(t,i,o)})([(0,ew.Rm)({args:!1})],AICommitMessageProvider.prototype,"provideCommitMessage",1);let UnableToFindGitError=class UnableToFindGitError extends Error{constructor(e){super("Unable to find git"),this.original=e,Error.captureStackTrace?.(this,UnableToFindGitError)}};let InvalidGitConfigError=class InvalidGitConfigError extends Error{constructor(e){super("Invalid Git configuration"),this.original=e,Error.captureStackTrace?.(this,InvalidGitConfigError)}};async function ty(e){let t,i=(0,E.u)(`findSpecificGit(${e})`,{logLevel:"debug"});try{t=await eE(e,["--version"],"utf8")}catch(e){if(i?.stop({message:` ${R.EO.Dot} Unable to find git: ${e}`}),/bad config/i.test(e.message))throw new InvalidGitConfigError(e);throw e}if(!e||"git"===e){let r=function e(t,i){if(!eS)return{cmd:eD(t),args:i};if(!(0,b.existsSync)(t))for(let r of[".exe",".bat",".cmd",".ps1"]){let s=eD(`${t}${r}`);if((0,b.existsSync)(s))return e(s,i)}return eP.test(t)?{cmd:(0,C.join)(k.env.SYSTEMROOT??"C:\\WINDOWS","System32","WindowsPowerShell","v1.0","PowerShell.exe"),args:["-ExecutionPolicy","Unrestricted","-NoLogo","-NonInteractive","-File",t].concat(i)}:eA.test(t)?{cmd:(0,C.join)(k.env.SYSTEMROOT??"C:\\WINDOWS","System32","cmd.exe"),args:["/C",t,...i]}:eI.test(t)?{cmd:k.execPath,args:[t].concat(i)}:{cmd:t,args:i}}(e,["--version"]).cmd;try{t=await eE(r,["--version"],"utf8")}catch(e){if(i?.stop({message:` ${R.EO.Dot} Unable to find git: ${e}`}),/bad config/i.test(e.message))throw new InvalidGitConfigError(e);throw e}e=r}let r=t.trim().replace(/^git version /,"").trim();return i?.stop({message:` ${R.EO.Dot} Found ${r} in ${e}; ${t}`}),{path:e,version:r}}async function tb(){try{let e=(await eE("which",["git"],"utf8")).trim();if("/usr/bin/git"!==e)return await ty(e);try{return await eE("xcode-select",["-p"],"utf8"),await ty(e)}catch(t){if(2===t.code)return await Promise.reject(new UnableToFindGitError(t));return await ty(e)}}catch(e){return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e))}}function tC(e){return null==e||0===e.length?Promise.reject(new UnableToFindGitError):ty((0,C.join)(e,"Git","cmd","git.exe"))}async function tk(e,t=!0){try{if(null==e||"string"==typeof e)return await ty(e??"git");try{return await (0,eC.bz)(...e.map(e=>ty(e)))}catch(e){throw new UnableToFindGitError(e)}}catch(e){if(!t)return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e));try{switch(k.platform){case"darwin":return await tb();case"win32":return await tC(k.env.ProgramW6432).then(null,()=>tC(k.env["ProgramFiles(x86)"])).then(null,()=>tC(k.env.ProgramFiles)).then(null,()=>ty("git"));default:return await Promise.reject(new UnableToFindGitError)}}catch(e){return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e))}}}var tS=i(2995);function tR(e){let t="",i=[];for(let r in e){let s=e[r];s&&(i.push(r),t+=`%00${s}`)}return{arguments:[`--format=${t}`],parse:function*(e){let t,r;if(!e)return;let s={},o=0,n=(0,_.i5)(e,"\0");for(n.next();!(t=n.next()).done;)r=i[o++],o===i.length?(s[r]=t.value.trim(),o=0,yield s,s={}):s[r]=t.value}}}var tP=i(3447),tA=i(1081),tI=i(1125),tD=Object.defineProperty,t$=Object.getOwnPropertyDescriptor,tT=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tE=e=>{throw TypeError(e)},t_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?t$(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tD(t,i,o),o},tO=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&tE("Object expected"),i&&(r=t[tT("asyncDispose")]),void 0===r&&(r=t[tT("dispose")],i&&(s=r)),"function"!=typeof r&&tE("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},tx=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let tF=Object.freeze({values:[]});let BranchesGitSubProvider=class BranchesGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}async getBranch(e,t){if(null!=t){let{values:[i]}=await this.getBranches(e,{filter:e=>e.name===t});return i}let i=this.cache.branch?.get(e);return null==i&&(i=(async function(){let{values:[t]}=await this.getBranches(e,{filter:e=>e.current});return t??this.getCurrentBranch(e)}).call(this),this.cache.branch?.set(e,i)),i}async getCurrentBranch(e){let t=await this.getCurrentBranchReferenceCore(e);if(null==t)return;let i=v.H.get("advanced.commitOrdering"),[r,s,o]=await Promise.allSettled([(0,tl.xM)(t.name)?this.provider.status?.getPausedOperationStatus(e):void 0,this.git.exec({cwd:e,configs:eN,errors:A.Ignore},"log","-n1","--format=%ct",i?`--${i}-order`:void 0,"--").then(e=>e.length?e.trim():void 0),this.provider.config.getDefaultWorktreePath?.(e)]),n=(0,eC.Ro)(s),a=(0,eC.Ro)(r),l=a?.type==="rebase"?a:void 0,c=(0,eC.Ro)(o);return new tS.Z(this.container,e,l?.incoming.name??`refs/heads/${t.name}`,!0,null!=n?new Date(1e3*Number(n)):void 0,t.sha,t.upstream?{...t.upstream,state:{ahead:0,behind:0}}:void 0,{path:e,isDefault:e===c},void 0,null!=l)}async getBranches(e,t){if(null==e)return tF;let i=(0,eb.dQ)(),r=this.cache.branches?.get(e);null==r&&(r=(async function(){try{var t,r=[];try{let s=(t=await this.git.supports("git:for-each-ref:worktreePath"),d??=tR({current:"%(if)%(HEAD)%(then)*%(else) %(end)",name:"%(refname)",upstream:"%(upstream)",upstreamTracking:"%(upstream:track)",sha:"%(objectname)",date:"%(committerdate:iso8601)",worktreePath:t?"%(worktreepath)":void 0})),o=await this.git.exec({cwd:e},"for-each-ref",...s.arguments,"refs/heads/","refs/remotes/");if(!o?.length){let t=await this.getCurrentBranch(e);return null!=t?{values:[t]}:tF}let n=await this.provider.config.getDefaultWorktreePath?.(e),a=tO(r,(0,E.u)(i,{log:!1,logLevel:"debug"})),l=[],c=!1;for(let t of s.parse(o)){if((0,tl.xE)(t.name))continue;let i=(0,tl.xw)(t.upstream,t.upstreamTracking),r="*"===t.current;r&&(c=!0);let s=t.worktreePath?(0,T.Fd)(t.worktreePath):void 0;l.push(new tS.Z(this.container,e,t.name,r,t.date?new Date(t.date):void 0,t.sha,i,s?{path:s,isDefault:s===n}:void 0))}if(a?.stop({suffix:` parsed ${l.length} branches`}),!l.length)return tF;if(!c){let t=await this.getCurrentBranch(e);if(null!=t){let e=l.findIndex(e=>e.id===t.id);-1!==e?l[e]=t:l.unshift(t)}}return{values:l}}catch(e){var s=e,o=!0}finally{tx(r,s,o)}}catch{return this.cache.branches?.delete(e),tF}}).call(this),t?.paging?.cursor==null&&this.cache.branches?.set(e,r));let s=await r;return t?.filter!=null&&(s={...s,values:s.values.filter(t.filter)}),t?.sort&&(0,tA.Xn)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getBranchContributionsOverview(e,t){let i=(0,eb.dQ)();try{let i,r,s=await this.getBaseBranchName(e,t);if((null==s||s.endsWith(`/${t}`))&&(s=await this.getTargetBranchName(e,t),s??=await this.getDefaultBranchName(e),null==s))return;let o=await this.provider.refs.getMergeBase(e,t,s);if(null==o)return;let n=await this.provider.contributors.getContributors(e,(0,em.Xn)(o,t,".."),{stats:!0});(0,tA.tB)(n,{orderBy:"score:desc"});let a=0,l=0,c=0,u=0;for(let e of n){a+=e.commits,l+=e.stats?.files??0,c+=e.stats?.additions??0,u+=e.stats?.deletions??0;let t=e.firstCommitDate?.getTime(),s=e.latestCommitDate?.getTime();(null!=t||null!=s)&&(i=null!=i?Math.min(i,t??1/0,s??1/0):t??s,r=null!=r?Math.max(r,t??-1/0,s??-1/0):s??t)}return{repoPath:e,branch:t,baseOrTargetBranch:s,mergeBase:o,commits:a,files:l,additions:c,deletions:u,latestCommitDate:null!=r?new Date(r):void 0,firstCommitDate:null!=i?new Date(i):void 0,contributors:n}}catch(e){ev.Vy.error(e,i);return}}async getBranchesWithCommits(e,t,i,r){if(null!=i){let r=await this.git.branchOrTag__containsOrPointsAt(e,t,{type:"branch",mode:"contains",name:i});return r?[r?.trim()]:[]}let s=await this.git.branchOrTag__containsOrPointsAt(e,t,{type:"branch",...r});return s?(0,$.x1)(s.split("\n"),e=>e.trim()||void 0):[]}async getCurrentBranchReference(e){let t=await this.getCurrentBranchReferenceCore(e);return null!=t&&(0,tl.xM)(t.name)&&(t=(0,tc.kA)(t.sha,e,{refType:"branch",name:(0,tl.n$)(t.sha),id:(0,tl.Yk)(e,t.remote,t.sha),remote:t.remote,upstream:t.upstream,sha:t.sha})),t}async getCurrentBranchReferenceCore(e){let t=v.H.get("advanced.commitOrdering"),i=await this.git.rev_parse__currentBranch(e,t);if(null==i)return;let[r,s]=i[0].split("\n");return(0,tc.kA)(r,e,{refType:"branch",name:r,id:(0,tl.Yk)(e,!1,r),remote:!1,upstream:s?{name:s,missing:!1}:void 0,sha:i[1]})}async getDefaultBranchName(e,t){if(null==e)return;t??="origin";let i=this.cache.defaultBranchName?.get(e),r=i?.get(t);return null==r&&(r=(async function(){return this.git.symbolic_ref__HEAD(e,t)}).call(this),null==i?this.cache.defaultBranchName?.set(e,new Map([[t,r]])):i.set(t,r)),r}async createBranch(e,t,i){await this.git.exec({cwd:e},"branch",t,i)}async getBranchMergedStatus(e,t,i){if(t.name===i.name||t.upstream?.name===i.name)return{merged:!1};let r=await this.getBranchMergedStatusCore(e,t,i);if(r.merged)return r;if(i.remote){let r=await this.getLocalBranchByUpstream(e,i.name);if(null!=r&&r.name!==t.name){let i=await this.getBranchMergedStatusCore(e,t,r);if(i.merged)return{...i,localBranchOnly:(0,tP.iw)(r)}}}return{merged:!1}}async getBranchMergedStatusCore(e,t,i){let r=(0,eb.dQ)();try{try{return await this.git.exec({cwd:e,errors:A.Throw},"merge-base","--is-ancestor",t.name,i.name),{merged:!0,confidence:"highest"}}catch{}let r=await this.git.exec({cwd:e},"cherry","--abbrev","-v",i.name,t.name);if(!r||r.trim().split("\n").every(e=>e.startsWith("-")))return{merged:!0,confidence:"high"};let l=await this.provider.refs.getMergeBase(e,i.name,t.name);if(r=await this.git.exec({cwd:e},"diff",l,t.name),r?.length){var s=[];try{let{env:t}=tO(s,await this.provider.staging.createTemporaryIndex(e,i.name),!0);if(r=await this.git.exec({cwd:e,env:t,stdin:r},"apply","--cached","--reverse","--check","-"),!r?.trim().length)return{merged:!0,confidence:"medium"}}catch(e){var o=e,n=!0}finally{var a=tx(s,o,n);a&&await a}}return{merged:!1}}catch(e){return ev.Vy.error(e,r),{merged:!1}}}async getLocalBranchByUpstream(e,t){let i=new tI.t(t=>this.getBranches(e,null!=t?{paging:t}:void 0));return(0,tl.kY)(t,i)}async getPotentialMergeOrRebaseConflict(e,t,i){let r=(0,eb.dQ)();try{let s;if(!await this.git.supports("git:merge-tree"))return;try{s=await this.git.exec({cwd:e,errors:A.Throw},"merge-tree","-z","--name-only","--no-messages",t,i)}catch(o){let e=o?.toString()??"";eH.notAValidObjectName.test(e)?ev.Vy.error(o,r,`'${i}' or '${t}' not found - ensure the branches exist and are fully qualified (e.g. 'refs/heads/main')`):eH.badRevision.test(e)?ev.Vy.error(o,r,`Invalid branch name: ${e.slice(e.indexOf("'"))}`):eH.noMergeBase.test(e)?ev.Vy.error(o,r,`Unable to merge '${t}' and '${i}' as they have no common ancestor`):o instanceof RunError?s=o.stdout:ev.Vy.error(o,r)}if(!s)return;let o=function(e){let t=(0,_.HX)(e,"\0"),i=t.next();if(i.done)return{treeOid:i.value,conflicts:[]};let r=[...(0,tm.Tj)(t,e=>({path:e}))];return{treeOid:i.value,conflicts:r}}(s);if(!o.conflicts.length)return;return{repoPath:e,branch:t,target:i,files:o.conflicts}}catch(e){throw ev.Vy.error(e,r),e}}async getBaseBranchName(e,t){try{let i=`^branch\\.${t}\\.`,r=await this.git.config__get_regex(i,e);if(r){let s,o=RegExp(`${i}(.+) (.+)$`,"gm"),n=!1;for(;;){let e=o.exec(r);if(null==e)break;let[,t,i]=e;if("gk-merge-base"===t){s=i,n=!1;break}if("vscode-merge-base"===t){s=i,n=!0;continue}}if(null!=s){let i=await this.provider.refs.getSymbolicReferenceName(e,s);if(null!=i)return n&&this.setBaseBranchName(e,t,i),i}}}catch{}let i=await this.getBaseBranchFromReflog(e,t,{upstream:!0});if(null!=i)return this.setBaseBranchName(e,t,i),i}async setBaseBranchName(e,t,i){let r=`branch.${t}.gk-merge-base`;await this.provider.config.setConfig(e,r,i)}async getBaseBranchFromReflog(e,t,i){try{let r=await this.git.exec({cwd:e},"reflog",t,"--grep-reflog=branch: Created from *."),s=r.split("\n").filter(e=>!!e);if(1!==s.length)return;let o=s[0].match(/branch: Created from (.*)$/);if(null!=o&&2===o.length){let t=o[1];if("HEAD"!==t){if(i?.upstream){let i=await this.provider.refs.getSymbolicReferenceName(e,`${t}@{u}`);if(i)return i}if(t=await this.provider.refs.getSymbolicReferenceName(e,t))return t}}if(!(s=(r=await this.git.exec({cwd:e},"reflog","HEAD",`--grep-reflog=checkout: moving from .* to ${t.replace("refs/heads/","")}`)).split("\n").filter(e=>!!e)).length)return;if(o=s[s.length-1].match(/checkout: moving from ([^\s]+)\s/),null!=o&&2===o.length){let t=o[1];if(i?.upstream){let i=await this.provider.refs.getSymbolicReferenceName(e,`${t}@{u}`);if(i)return i}if(t=await this.provider.refs.getSymbolicReferenceName(e,t))return t}}catch{}}async getTargetBranchName(e,t){let i=`branch.${t}.gk-target-base`,r=await this.provider.config.getConfig(e,i);return null!=r&&(r=await this.provider.refs.getSymbolicReferenceName(e,r)),r?.trim()||void 0}async setTargetBranchName(e,t,i){let r=`branch.${t}.gk-target-base`;await this.provider.config.setConfig(e,r,i)}async renameBranch(e,t,i){await this.git.exec({cwd:e},"branch","-m",t,i)}};t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"getBranch",1),t_([(0,ew.Rm)({args:{1:!1}})],BranchesGitSubProvider.prototype,"getBranches",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"getBranchContributionsOverview",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"getBranchesWithCommits",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"getCurrentBranchReference",1),t_([(0,ew.Rm)({exit:!0})],BranchesGitSubProvider.prototype,"getDefaultBranchName",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"createBranch",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"getBranchMergedStatus",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"getLocalBranchByUpstream",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"getPotentialMergeOrRebaseConflict",1),t_([(0,ew.Rm)({exit:!0})],BranchesGitSubProvider.prototype,"getBaseBranchName",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"setBaseBranchName",1),t_([(0,ew.Rm)({exit:!0})],BranchesGitSubProvider.prototype,"getTargetBranchName",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"setTargetBranchName",1),t_([(0,ew.Rm)()],BranchesGitSubProvider.prototype,"renameBranch",1);var tL=i(4941),tB=i(4499),tU=Object.defineProperty,tN=Object.getOwnPropertyDescriptor,tq=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tN(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tU(t,i,o),o};let GitReflogRecord=class GitReflogRecord{constructor(e,t,i,r,s,o,n,a){this.container=e,this.repoPath=t,this.sha=i,this._selector=r,this.date=s,this.command=o,this.commandArgs=n,this.details=a}_previousSha;formatDate(e){return(0,tL.Yq)(this.date,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,tL.PI)(this.date)}get formattedDate(){return"absolute"===this.container.CommitDateFormatting.dateStyle?this.formatDate(this.container.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get HEAD(){return null==this._selector||0===this._selector.length?"":this._selector.startsWith("refs/heads")?this._selector.substring(11):this._selector.startsWith("refs/remotes")?this._selector.substring(13):this._selector}get previousSha(){return this._previousSha}get previousShortSha(){return(0,em.pV)(this._previousSha)}get selector(){return this._selector}get shortSha(){return(0,em.pV)(this.sha)}update(e,t){void 0!==e&&(this._previousSha=e),void 0!==t&&(this._selector=t)}};tq([(0,tB.B)(e=>e??"MMMM Do, YYYY h:mma")],GitReflogRecord.prototype,"formatDate",1),tq([(0,tB.B)()],GitReflogRecord.prototype,"HEAD",1),tq([(0,tB.B)()],GitReflogRecord.prototype,"previousShortSha",1),tq([(0,tB.B)()],GitReflogRecord.prototype,"shortSha",1);var tW=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tM=e=>{throw TypeError(e)},tG=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&tM("Object expected"),i&&(r=t[tW("asyncDispose")]),void 0===r&&(r=t[tW("dispose")],i&&(s=r)),"function"!=typeof r&&tM("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},tH=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let tV=/^<r>(.+)<d>(.+?)@{(.+)}<s>(\w*)(.*?)(?::(.*))?$/gm,tj=/.*?\/?HEAD$/,tQ="%x3c",tz="%x3e",tY=`${tQ}r${tz}%H${tQ}d${tz}%gD${tQ}s${tz}%gs`;var tK=i(450),tZ=i(8255),tJ=Object.defineProperty,tX=Object.getOwnPropertyDescriptor,t0=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tJ(t,i,o),o};let t1=Promise.resolve(void 0),t2=["merge","pull"];let CommitsGitSubProvider=class CommitsGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}get useCaching(){return v.H.get("advanced.caching.enabled")}async getCommit(e,t){if((0,em._k)(t,!0))return(0,tZ.O)(this.container,e,t,new Date,await this.provider.config.getCurrentUser(e));let i=await this.getLog(e,t,{limit:2});if(null!=i)return i.commits.get(t)??(0,tm.$1)(i.commits.values())}async getCommitCount(e,t){let i=(await this.git.exec({cwd:e,errors:A.Ignore},"rev-list","--count",t,"--"))?.trim();if(!i?.length)return;let r=parseInt(i,10);return isNaN(r)?void 0:r}async getCommitFilesStats(e,t){let i,r=en({sha:"%H"}),s=await this.git.log(e,t,void 0,"--max-count=1",...r.arguments);if(null!=s){for(let t of r.parse(s)){i=t.files.map(t=>new x.l(this.container,e,t.path,t.status,t.originalPath,void 0,{additions:t.additions,deletions:t.deletions,changes:0}));break}return i}}async getCommitFileStatus(e,t,i){if(i===L.nB||(0,em._k)(i))return;let[r,s]=(0,D.Uf)(t,e),o=await this.git.exec({cwd:s,configs:eN},"show","--name-status","--format=","-z",i,"--");if(!o)return;let n=ta(o,e);if(null!=n&&0!==n.length)return n.find(e=>e.path===r||e.originalPath===r)}async getCommitForFile(e,t,i,r){let s=(0,eb.dQ)(),[o,n]=(0,D.Uf)(t,e);try{let e,t=await this.getLogForPath(n,o,i,{limit:2});if(null==t)return;if(i){let e=t.commits.get(i);if(null==e&&!r?.firstIfNotFound&&((0,em.HH)(i)||(0,em._k)(i)))return}return e??(0,tm.$1)(t.commits.values())}catch(e){ev.Vy.error(e,s);return}}async getIncomingActivity(e,t){let i=(0,eb.dQ)(),r=["--walk-reflogs",`--format=${tY}`,"--date=iso8601"],s=t?.ordering??v.H.get("advanced.commitOrdering");s&&r.push(`--${s}-order`),t?.all&&r.push("--all");let o=(t?.limit??v.H.get("advanced.maxListItems")??0)*100;o&&r.push(`-n${o}`),t?.skip&&r.push(`--skip=${t.skip}`);try{let i=await this.git.log(e,void 0,void 0,...r);if(null==i)return;let s=function(e,t,i,r,s,o){var n=[];try{let a,l,c,u,h,d,p,g,m,f,w,v,y=tG(n,(0,E.u)(`Git.parseRefLog(${i})`,{log:!1,logLevel:"debug"}));if(!t)return;let b=[],C=0,k=0;for(;v=tV.exec(t),null!=v;){if([,a,l,c,u,h,d]=v,k++,void 0!==w){if(a===w.sha&&(c!==f||!tj.test(w.selector)||tj.test(l)))continue;if(a!==w.sha&&(null!=p&&g===f&&m===w.sha&&tj.test(w.selector)?w.update(a,p):w.update(a),b.push(w),w=void 0,f=void 0,C++,0!==s&&C>=s))break}if("HEAD"===u){p=l,g=c,m=a;continue}r.includes(u)&&(w=new GitReflogRecord(e,i,` ${a}`.substring(1),` ${l}`.substring(1),new Date(c),` ${u}`.substring(1),null==h||0===h.length?void 0:h.substring(1),null==d||0===d.length?void 0:d.substring(1)),f=c)}return tV.lastIndex=0,y?.stop({suffix:` parsed ${b.length} records`}),{repoPath:i,records:b,count:C,total:k,limit:s,hasMore:0!==s&&C>=s||0!==o&&k>=o}}catch(e){var a=e,l=!0}finally{tH(n,a,l)}}(this.container,i,e,t2,o,100*o);return s?.hasMore&&(s.more=this.getReflogMoreFn(s,t)),s}catch(e){ev.Vy.error(e,i);return}}getReflogMoreFn(e,t){return async i=>{i=i??v.H.get("advanced.maxSearchItems")??0;let r=await this.getIncomingActivity(e.repoPath,{...t,limit:i,skip:e.total});if(null==r)return{...e,hasMore:!1,more:void 0};let s={repoPath:e.repoPath,records:[...e.records,...r.records],count:e.count+r.count,total:e.total+r.total,limit:(e.limit??0)+i,hasMore:r.hasMore};return s.hasMore&&(s.more=this.getReflogMoreFn(s,t)),s}}async getInitialCommitSha(e){try{let t=await this.git.exec({cwd:e,errors:A.Ignore},"rev-list","--max-parents=0","HEAD","--");return t?.trim().split("\n")?.[0]}catch{return}}async getLeftRightCommitCount(e,t,i){let r=i?.authors?.length?i.authors.map(e=>`--author=^${e.name} <${e.email}>$`):[],s=await this.git.exec({cwd:e,errors:A.Ignore},"rev-list","--left-right","--count",...r,i?.excludeMerges?"--no-merges":void 0,t,"--");if(!s?.length)return;let o=s.split("	");if(2!==o.length)return;let[n,a]=o,l={left:parseInt(n,10),right:parseInt(a,10)};if(!(isNaN(l.left)||isNaN(l.right)))return l}async getLog(e,t,i){let r=(0,eb.dQ)();try{let r,s,o,n=i?.limit??v.H.get("advanced.maxListItems")??0,a=v.H.get("advanced.similarityThreshold"),l=[`--format=${i?.all?el:ec}`,`-M${null==a?"":`${a}%`}`];i?.status!==!1&&l.push("--name-status"),i?.all&&l.push("--all");let c=i?.merges??!0;c?(n<=2&&l.push("-m"),l.push("first-parent"===c?"--first-parent":"--no-min-parents")):l.push("--no-merges");let u=i?.ordering??v.H.get("advanced.commitOrdering");if(u&&l.push(`--${u}-order`),i?.authors?.length&&l.push("--use-mailmap",...i.authors.map(e=>`--author=^${e.name} <${e.email}>$`)),i?.since&&(r=!0,l.push(`--since="${i.since}"`)),i?.until&&(r=!0,l.push(`--until="${i.until}"`)),i?.extraArgs?.length&&(i.extraArgs.some(e=>e.startsWith("-n")||e.startsWith("--until=")||e.startsWith("--since="))&&(r=!0),l.push(...i.extraArgs)),n&&(r=void 0,l.push(`-n${n+1}`)),i?.stashes)if("boolean"==typeof i.stashes){let i=await this.provider.stash?.getStash(e,{reachableFrom:t});if(s=new Map(i?.stashes),i?.stashes.size)for(let e of(o="",i.stashes.values()))for(let t of(o+=`${e.sha.substring(0,9)}
`,(0,tm.R9)(e.parents,1)))s.set(t,e),o+=`${t.substring(0,9)}
`;t??="HEAD"}else s=i.stashes,o=(0,tm.fj)((0,tm.Tj)(s.values(),e=>e.sha.substring(0,9)),"\n"),t??="HEAD";let h=await this.git.log(e,t,{configs:eq,stdin:o},...l),d=eh(this.container,h,ei.Log,e,void 0,t,await this.provider.config.getCurrentUser(e),n,!1,void 0,s,void 0,r);if(null!=d&&(d.query=r=>this.getLog(e,t,{...i,limit:r}),d.hasMore)){let e;if(null!=i){let t;({extraArgs:t,...e}=i)}d.more=this.getLogMoreFn(d,t,e)}return d}catch(e){ev.Vy.error(e,r);return}}async getLogShasOnly(e,t,i){let r=(0,eb.dQ)(),s=i?.limit??v.H.get("advanced.maxListItems")??0;try{let r=es("%H"),o=[...r.arguments],n=i?.ordering??v.H.get("advanced.commitOrdering");n&&o.push(`--${n}-order`),s&&o.push(`-n${s+1}`),i?.since&&o.push(`--since="${i.since}"`);let a=i?.merges??!0;a?o.push("first-parent"===a?"--first-parent":"--no-min-parents"):o.push("--no-merges"),i?.authors?.length&&(o.includes("--use-mailmap")||o.push("--use-mailmap"),o.push(...i.authors.map(e=>`--author=^${e.name} <${e.email}>$`)));let l=await this.git.log(e,t,void 0,...o);return new Set(r.parse(l))}catch(e){ev.Vy.error(e,r);return}}getLogMoreFn(e,t,i){return async r=>{let s,o,n=null!=r&&"object"==typeof r?r.until:void 0,a="number"==typeof r?r:void 0;if(n&&(0,tm.zN)(e.commits.values(),e=>e.ref===n))return e;if(a=a??v.H.get("advanced.maxSearchItems")??0,(0,em.p8)(e.sha)){let r=await this.getLog(e.repoPath,t,{...i,limit:0===a?0:(i?.limit??0)+a});return null==r?{...e,hasMore:!1,more:void 0}:r}let l=(0,tm.HV)(e.commits.values()),c=l?.ref;if(i?.all){let e=l?.committer.date;s=null!=e?Math.ceil(e.getTime()/1e3)+1:void 0}let u=null==n?a:0;for(;;){let r=await this.getLog(e.repoPath,s?t:null==n?`${c}^`:`${n}^..${c}^`,{...i,limit:u,...s?{until:s,extraArgs:["--boundary"]}:void 0});if(null==r)return{...e,hasMore:!1,more:void 0};let l=e.commits.size,h=new Map([...e.commits,...r.commits]);if(l===h.size&&0!==u){if(o===r.commits.size)return{...e,hasMore:!1,more:void 0};o=r.commits.size,u*=2;continue}null!=s&&null!=c&&r.commits.has(c);let d={repoPath:e.repoPath,commits:h,sha:e.sha,range:void 0,count:h.size,limit:null==n?(e.limit??0)+a:void 0,hasMore:null!=n||r.hasMore,startingCursor:(0,tm.HV)(e.commits)?.[0],endingCursor:r.endingCursor,pagedCommits:()=>{for(let t of e.commits.keys())r.commits.delete(t);return r.commits},query:r=>this.getLog(e.repoPath,t,{...i,limit:r})};return d.hasMore&&(d.more=this.getLogMoreFn(d,t,i)),d}}}async getLogForPath(e,t,i,r){if(null==e)return;let s=(0,eb.dQ)(),o=this.provider.getRelativePath(t,e);if(null!=e&&e===o)throw Error(`Path cannot match the repository path; path=${o}`);let n={reverse:!1,...r};null==n.renames&&(n.renames=v.H.get("advanced.fileHistoryFollowsRenames")),null==n.merges&&(n.merges=v.H.get("advanced.fileHistoryShowMergeCommits"));let a="log";null!=i&&(a+=`:${i}`),null==n.all&&(n.all=v.H.get("advanced.fileHistoryShowAllBranches")),n.all&&(a+=":all"),n.limit=n.limit??v.H.get("advanced.maxListItems")??0,n.limit&&(a+=`:n${n.limit}`),n.merges&&(a+=":merges"),n.ordering&&(a+=`:ordering=${n.ordering}`),n.renames&&(a+=":follow"),n.reverse&&(a+=":reverse"),n.since&&(a+=`:since=${n.since}`),n.skip&&(a+=`:skip${n.skip}`);let l=this.useCaching&&null==n.cursor&&null==n.range,c=await this.container.documentTracker.getOrAdd(e1.nk.fromFile(o,e,i));if(l){if(null!=c.state){let r=c.state.getLog(a);if(null!=r)return ev.Vy.debug(s,`Cache hit: '${a}'`),r.item;if(null!=i||null!=n.limit&&0!==n.limit){let r=c.state.getLog(`log${n.renames?":follow":""}${n.reverse?":reverse":""}`);if(null!=r){if(null==i)return ev.Vy.debug(s,`Cache hit: ~'${a}'`),r.item;ev.Vy.debug(s,`Cache ?: '${a}'`);let o=await r.item;if(null!=o&&!o.hasMore&&o.commits.has(i)){ev.Vy.debug(s,`Cache hit: '${a}'`);let r=!0,l=0,c=new Map((0,tm.x1)(o.commits.entries(),([e,t])=>{if(r){if(e!==i)return;r=!1}if(l++,n?.limit==null||!(l>n.limit))return[e,t]})),u={...n};return{...o,limit:u.limit,count:c.size,commits:c,query:r=>this.getLogForPath(e,t,i,{...u,limit:r})}}}}}ev.Vy.debug(s,`Cache miss: '${a}'`),c.state??=new tf.VV}let u=this.getLogForPathCore(e,o,i,c,a,s,n);return l&&null!=c.state&&(ev.Vy.debug(s,`Cache add: '${a}'`),c.state.setLog(a,{item:u})),u}async getLogForPathCore(e,t,i,r,s,o,{range:n,...a}){let l=await this.provider.isTrackedWithDetails(t,e,i);if(null==l)return ev.Vy.log(o,`Skipping log; '${t}' is not tracked`),t1;let[c,u]=l;try{null!=n&&n.start.line>n.end.line&&(n=new w.Range(n.end,n.start));let r=await this.git.log__file(u,c,i,{ordering:v.H.get("advanced.commitOrdering"),...a,startLine:null==n?void 0:n.start.line+1,endLine:null==n?void 0:n.end.line+1});if(!r&&null==i){let e=await this.provider.status?.getStatusForFile(u,c);e?.originalPath!=null&&(r=await this.git.log__file(u,e.originalPath,i,{ordering:v.H.get("advanced.commitOrdering"),...a,startLine:null==n?void 0:n.start.line+1,endLine:null==n?void 0:n.end.line+1}))}let s=eh(this.container,r,(0,T.Np)(c)?ei.Log:ei.LogFile,u,c,i,await this.provider.config.getCurrentUser(u),a.limit,a.reverse??!1,n);if(null!=s){let r={...a,range:n};s.query=s=>this.getLogForPath(e,t,i,{...r,limit:s}),s.hasMore&&(s.more=this.getLogForPathMoreFn(s,t,i,r))}return s}catch(e){if(null!=r.state&&null==n&&!a.reverse){let t=e?.toString()??"";return ev.Vy.debug(o,`Cache replace (with empty promise): '${s}'`),r.state.setLog(s,{item:t1,errorMessage:t}),t1}return}}getLogForPathMoreFn(e,t,i,r){return async s=>{let o,n=null!=s&&"object"==typeof s?s.until:void 0,a="number"==typeof s?s:void 0;if(n&&(0,tm.zN)(e.commits.values(),e=>e.ref===n))return e;a=a??v.H.get("advanced.maxSearchItems")??0;let l=(0,tm.HV)(e.commits.values());if(null!=l&&(o=l.ref,null!=l.file)){let e=l.file.originalPath??l.file.path;e!==t&&(t=e)}let c=await this.getLogForPath(e.repoPath,t,r.all?void 0:null==n?`${o}^`:`${n}^..${o}^`,{...r,limit:null==n?a:0,skip:r.all?e.count:void 0});if(null==c)return{...e,hasMore:!1,more:void 0};let u=new Map([...e.commits,...c.commits]),h={repoPath:e.repoPath,commits:u,sha:e.sha,range:e.range,count:u.size,limit:null==n?(e.limit??0)+a:void 0,hasMore:null!=n||c.hasMore,query:s=>this.getLogForPath(e.repoPath,t,i,{...r,limit:s})};if(r.renames){let e=(0,tm.I6)(c.commits.values(),e=>!!e.file?.originalPath&&e.file?.originalPath!==t);t=e?.file?.originalPath??t}return h.hasMore&&(h.more=this.getLogForPathMoreFn(h,t,i,r)),h}}async getOldestUnpushedShaForPath(e,t){let i=this.provider.getRelativePath(t,e),r=await this.git.log__file(e,i,"@{u}..",{argsOrFormat:["-z","--format=%H"],fileMode:"none",ordering:v.H.get("advanced.commitOrdering"),renames:!0});if(!r)return;let s=r.lastIndexOf("\0",r.length-2);return -1===s?void 0:r.slice(s+1,r.length-2)}async hasCommitBeenPushed(e,t){return null!=e&&this.isAncestorOf(e,t,"@{u}")}async isAncestorOf(e,t,i){return null!=e&&0===await this.git.exec({cwd:e,exitCodeOnly:!0},"merge-base","--is-ancestor",t,i)}async searchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};try{let r,s,o,n=i?.limit??v.H.get("advanced.maxSearchItems")??0,a=v.H.get("advanced.similarityThreshold"),l=await this.provider.config.getCurrentUser(e),{args:c,files:u,shas:h}=(0,tK.wj)(t,l),d=c.includes("--no-walk");if(null==h){let t=await this.provider.stash?.getStash(e);if(t?.stashes.size)for(let e of(s="",r=new Map(t.stashes),t.stashes.values()))for(let t of(s+=`${e.sha.substring(0,9)}
`,(0,tm.R9)(e.parents,1)))r.set(t,e),s+=`${t.substring(0,9)}
`}o=h?.size?await this.git.exec({cwd:e,stdin:(0,tm.fj)(h,"\n")},"show","--stdin","--name-status",`--format=${ec}`,"--use-mailmap"):await this.git.exec({cwd:e,configs:["-C",e,...eN],stdin:s},"log",s?"--stdin":void 0,"--name-status",`--format=${ec}`,"--use-mailmap",`-M${null==a?"":`${a}%`}`,...c,i?.ordering?`--${i.ordering}-order`:void 0,i?.limit?`-n${i.limit+1}`:void 0,i?.skip?`--skip=${i.skip}`:void 0,"--",...u);let p=eh(this.container,o,ei.Log,e,void 0,void 0,l,n,!1,void 0,r,d);if(null!=p){let r=function(e){return async s=>{s=s??v.H.get("advanced.maxSearchItems")??0;let o=await this.searchCommits(e.repoPath,t,{...i,limit:s,skip:e.count});if(null==o)return{...e,hasMore:!1,more:void 0};let n=new Map([...e.commits,...o.commits]),a={repoPath:e.repoPath,commits:n,sha:e.sha,range:e.range,count:n.size,limit:(e.limit??0)+s,hasMore:o.hasMore,query:r=>this.searchCommits(e.repoPath,t,{...i,limit:r})};return a.hasMore&&(a.more=r.call(this,a)),a}};p.query=r=>this.searchCommits(e,t,{...i,limit:r}),p.hasMore&&(p.more=r.call(this,p))}return p}catch{return}}};t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getCommit",1),t0([(0,ew.Rm)({exit:!0})],CommitsGitSubProvider.prototype,"getCommitCount",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getCommitFilesStats",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getCommitFileStatus",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getCommitForFile",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getIncomingActivity",1),t0([(0,ew.Rm)({exit:!0})],CommitsGitSubProvider.prototype,"getInitialCommitSha",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getLeftRightCommitCount",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getLog",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getLogShasOnly",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getLogForPath",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"getOldestUnpushedShaForPath",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"hasCommitBeenPushed",1),t0([(0,ew.Rm)()],CommitsGitSubProvider.prototype,"isAncestorOf",1),t0([(0,ew.Rm)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],CommitsGitSubProvider.prototype,"searchCommits",1);var t5=i(857),t4=Object.defineProperty,t7=Object.getOwnPropertyDescriptor,t3=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?t7(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t4(t,i,o),o};let t6=/^user\.(name|email) (.*)$/gm,t9=/(.+)\s<(.+)>/;let ConfigGitSubProvider=class ConfigGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}getConfig(e,t){return this.git.config__get(t,e)}async setConfig(e,t,i){await this.git.exec({cwd:e??"",local:!0},"config","--local",...null==i?["--unset",t]:[t,i])}async getCurrentUser(e){if(!e)return;let t=(0,eb.dQ)(),i=this.cache.repoInfo?.get(e),r=i?.user;if(null!=r)return r;if(null!==r){r={name:void 0,email:void 0};try{let t=await this.git.config__get_regex("^user\\.",e,{local:!0});if(t){let e,i,s;for(;s=t6.exec(t),null!=s;)[,e,i]=s,r[e]=` ${i}`.substring(1)}else{if(r.name=k.env.GIT_AUTHOR_NAME||k.env.GIT_COMMITTER_NAME||(0,t5.userInfo)()?.username||void 0,!r.name){this.cache.repoInfo?.set(e,{...i,user:null});return}r.email=k.env.GIT_AUTHOR_EMAIL||k.env.GIT_COMMITTER_EMAIL||k.env.EMAIL||`${r.name}@${(0,t5.hostname)()}`}let s=`${r.name} <${r.email}>`,o=await this.git.exec({cwd:e,errors:A.Ignore},"check-mailmap",s);if(null!=o&&0!==o.length&&s!==o){let e=t9.exec(o);null!=e&&([,r.name,r.email]=e)}return this.cache.repoInfo?.set(e,{...i,user:r}),r}catch(r){ev.Vy.error(r,t),this.cache.repoInfo?.set(e,{...i,user:null});return}}}async getDefaultWorktreePath(e){let t=await this.getGitDir(e);return(0,D.Sp)(w.Uri.joinPath(t.commonUri??t.uri,".."))}async getGitDir(e){let t,i=this.cache.repoInfo?.get(e);if(i?.gitDir!=null)return i.gitDir;let r=await this.git.rev_parse__git_dir(e);return t=null!=r?{uri:w.Uri.file(r.path),commonUri:null!=r.commonPath?w.Uri.file(r.commonPath):void 0}:{uri:this.provider.getAbsoluteUri(".git",e)},this.cache.repoInfo?.set(e,{...i,gitDir:t}),t}};t3([(0,tp.G)(),(0,ew.Rm)()],ConfigGitSubProvider.prototype,"getCurrentUser",1),t3([(0,tp.G)(),(0,ew.Yz)({exit:e=>`returned ${e}`})],ConfigGitSubProvider.prototype,"getDefaultWorktreePath",1),t3([(0,tp.G)(),(0,ew.Yz)({exit:e=>`returned ${e.uri.toString(!0)}, commonUri=${e.commonUri?.toString(!0)}`})],ConfigGitSubProvider.prototype,"getGitDir",1);var t8=i(458);let ie={recentThresholdInDays:30,recentWeight:1.5,additionsWeight:.8,deletionsWeight:1.2,maxScoreNormalization:1e3};function it(e,t,i=ie){if(null==e)return 0;let r=Math.exp(-((Date.now()-t)/864e5)/i.recentThresholdInDays);return Math.min((e.additions*i.additionsWeight+e.deletions*i.deletionsWeight)*(1+r*i.recentWeight),i.maxScoreNormalization)}function ii(e,t){return e.name===t.name&&e.email===t.email&&e.username===t.username}var ir=Object.defineProperty,is=Object.getOwnPropertyDescriptor,io=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?is(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ir(t,i,o),o};let ContributorsGitSubProvider=class ContributorsGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}async getContributors(e,t,i){if(null==e)return[];let o=t??"";i?.all&&(o+=":all"),i?.merges&&(o+=`:merges:${i.merges}`),i?.stats&&(o+=":stats");let n=this.cache.contributors?.get(e),a=n?.get(o);return null==a&&(a=(async function(){try{e=(0,T.Fd)(e);let o=await this.provider.config.getCurrentUser(e),n=i?.stats?s??=ea({sha:"%H",author:"%aN",email:"%aE",date:"%at"}):r??=er({sha:"%H",author:"%aN",email:"%aE",date:"%at"}),a=[...n.arguments,"--use-mailmap"],l=i?.merges??!0;l?a.push("first-parent"===l?"--first-parent":"--no-min-parents"):a.push("--no-merges"),i?.all&&a.push("--all","--single-worktree");let c=await this.git.log(e,t,void 0,...a),u=new Map;for(let t of n.parse(c)){let r=`${t.author}|${t.email}`,s=1e3*Number(t.date),n=u.get(r);if(null==n)n=new t8.s(e,t.author,t.email,(0,B.h)(o,t.author,t.email),1,new Date(s),new Date(s),t.stats?{...t.stats,contributionScore:it(t.stats,s)}:void 0),u.set(r,n);else{n.commits++;let e=new Date(s);e>n.latestCommitDate&&(n.latestCommitDate=e),e<n.firstCommitDate&&(n.firstCommitDate=e),i?.stats&&null!=t.stats&&(null==n.stats?n.stats={...t.stats,contributionScore:it(t.stats,s)}:n.stats={additions:n.stats.additions+t.stats.additions,deletions:n.stats.deletions+t.stats.deletions,files:n.stats.files+t.stats.files,contributionScore:n.stats.contributionScore+it(t.stats,s)})}}return[...u.values()]}catch{return n?.delete(o),[]}}).call(this),null==n?this.cache.contributors?.set(e,new Map([[o,a]])):n.set(o,a)),a}async getContributorsStats(e,t){if(null==e)return;let i=(0,eb.dQ)();try{let i=await this.git.exec({cwd:e},"shortlog","-s","--all",!t?.merges?"--no-merges":void 0,t?.since?`--since=${t.since}`:void 0);if(!i)return;let r=i.split("\n").map(e=>parseInt(e.trim().split("	",1)[0],10)).filter(e=>!isNaN(e)).sort((e,t)=>t-e);return{count:r.length,contributions:r}}catch(e){ev.Vy.error(e,i);return}}};io([(0,tp.G)(),(0,ew.Rm)()],ContributorsGitSubProvider.prototype,"getContributors",1),io([(0,ew.Rm)()],ContributorsGitSubProvider.prototype,"getContributorsStats",1);var ia=Object.defineProperty,il=Object.getOwnPropertyDescriptor,ic=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?il(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ia(t,i,o),o};let DiffGitSubProvider=class DiffGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}async getChangedFilesCount(e,t,i,r){let s=(0,eb.dQ)(),o=[];null!=t&&((0,em.p8)(t)&&null==i?o.push(t):iu(t,i,o));try{let t=await this.git.exec({cwd:e,configs:eU},"diff","--shortstat","--no-ext-diff",...o,"--",r?.uris?.map(t=>this.provider.getRelativePath(t,e))??void 0);if(!t)return;return function(e){var t=[];try{let i=ti(t,(0,E.u)("Git.parseDiffShortStat",{log:!1,logLevel:"debug"}));if(!e)return;let r=ts.exec(e);if(null==r)return;let[,s,o,n]=r,a={files:null==s?0:parseInt(s,10),additions:null==o?0:parseInt(o,10),deletions:null==n?0:parseInt(n,10)};return i?.stop({suffix:` parsed ${a.files} files, +${a.additions} -${a.deletions}`}),a}catch(e){var i=e,r=!0}finally{tr(t,i,r)}}(t)}catch(t){let e=t?.toString()??"";if(eH.noMergeBase.test(e))return;throw ev.Vy.error(s,t),t}}async getDiff(e,t,i,r){let s,o,n,a=(0,eb.dQ)(),l=[`-U${r?.context??3}`];if(null!=t&&(0,em.p8)(t)){let e=(0,em.jY)(t);null!=e&&(t=e.right??"",i=e.left,r={...r,notation:e.notation})}if(i=iu(t,i,l,r?.notation),r?.uris&&(s=new Set(r.uris.map(t=>this.provider.getRelativePath(t,e))),l.push("--",...s)),r?.includeUntracked&&t===L.SU){let t=await this.provider.status?.getStatus(e);o=t?.untrackedChanges.map(e=>e.path),o?.length&&(s?.size&&(o=o.filter(e=>s.has(e))),o.length&&await this.provider.staging?.stageFiles(e,o,{intentToAdd:!0}))}try{n=await this.git.exec({cwd:e,configs:eN,errors:A.Throw},"diff",...l,l.includes("--")?void 0:"--")}catch(e){ev.Vy.error(e,a);return}finally{o?.length&&await this.provider.staging?.unstageFiles(e,o)}return{contents:n,from:i,to:t,notation:r?.notation}}async getDiffFiles(e,t){let i=await this.git.exec({cwd:e,configs:eN,stdin:t},"apply","--numstat","--summary","-z","-");if(i)return{files:function(e,t,i){var r=[];try{let s=ti(r,(0,E.u)("Git.parseApplyFiles",{log:!1,logLevel:"debug"}));if(!t)return[];let o=new Map,n=t.split("\0"),a=n.pop();for(let t of n){if(!(t=t.trim()))continue;let[r,s,n]=t.split("	");o.set((0,T.Fd)(n),new x.l(e,i,n,"M",void 0,void 0,{changes:0,additions:parseInt(r,10),deletions:parseInt(s,10)}))}for(let t of a.split("\n")){if(!(t=t.trim()))continue;let r=/(rename) (.*?)\{?([^{]+?)\s+=>\s+(.+?)\}?(?: \(\d+%\))|(create|delete) mode \d+ (.+)/.exec(t);if(null==r)continue;let[,s,n,a,l,c,u]=r;if(null!=s){l=(0,T.Fd)((0,T.HS)(n,l)),a=(0,T.Fd)((0,T.HS)(n,a));let t=o.get(l);o.set(l,new x.l(e,i,l,"R",a,void 0,t.stats))}else{let t=o.get((0,T.Fd)(u));o.set(u,new x.l(e,i,t.path,"create"===c?"A":"D",void 0,void 0,t.stats))}}return s?.stop({suffix:` parsed ${o.size} files`}),[...o.values()]}catch(e){var s=e,o=!0}finally{tr(r,s,o)}}(this.container,i,e)}}async getDiffStatus(e,t,i,r){try{let s=r?.similarityThreshold??v.H.get("advanced.similarityThreshold")??void 0,o=await this.git.exec({cwd:e,configs:eU},"diff","--name-status",`-M${null==s?"":`${s}%`}`,"--no-ext-diff","-z",r?.filters?.length?`--diff-filter=${r.filters.join("")}`:void 0,t||void 0,i||void 0,"--",r?.path?r.path:void 0);if(!o)return;let n=ta(o,e);return null==n||0===n.length?void 0:n}catch{return}}async getDiffTool(e){return await this.git.config__get("diff.guitool",e,{local:!0})??this.git.config__get("diff.tool",e,{local:!0})}async getNextComparisonUris(e,t,i,r=0){if(!i)return;let s=this.provider.getRelativePath(t,e);if((0,em.KH)(i))return{current:e1.nk.fromFile(s,e,i),next:e1.nk.fromFile(s,e,void 0)};let o=await this.getNextUri(e,t,i,r);if(null==o){let r=await this.provider.status?.getStatusForFile(e,t);return null!=r&&null!=r.indexStatus?{current:e1.nk.fromFile(s,e,i),next:e1.nk.fromFile(s,e,L.id)}:{current:e1.nk.fromFile(s,e,i),next:e1.nk.fromFile(s,e,void 0)}}return{current:0===r?e1.nk.fromFile(s,e,i):await this.getNextUri(e,t,i,r-1),next:o}}async getNextUri(e,t,i,r=0){let s;if(!i||(0,em.KH)(i))return;i===L.nB&&(i=void 0,s=["A"]);let o=this.provider.getRelativePath(t,e),n=await this.git.log__file(e,o,i,{argsOrFormat:eu,fileMode:"simple",filters:s,limit:r+1,ordering:v.H.get("advanced.commitOrdering"),reverse:!0});if(null==n||0===n.length)return;let[a,l,c]=ed(n,r);if("D"===c){if(null==(n=await this.git.log__file(e,".",a,{argsOrFormat:eu,fileMode:"simple",filters:["R","C"],limit:1,ordering:v.H.get("advanced.commitOrdering")}))||0===n.length)return e1.nk.fromFile(l??o,e,a);let[t,i]=ep(n,l??o);return e1.nk.fromFile(i??l??o,e,t??a??L.nB)}return e1.nk.fromFile(l??o,e,a)}async getPreviousComparisonUris(e,t,i,r=0){if(i===L.nB)return;let s=this.provider.getRelativePath(t,e);if(i){if((0,em.KH)(i)){let o=0===r?e1.nk.fromFile(s,e,i):await this.getPreviousUri(e,t,void 0,r-1);if(null==o||o.sha===L.nB)return;return{current:o,previous:await this.getPreviousUri(e,t,void 0,r)}}}else{let o=await this.provider.status?.getStatusForFile(e,t);if(null!=o){if(null!=o.indexStatus)return(null==o.workingTreeStatus&&r++,0===r)?{current:e1.nk.fromFile(s,e,void 0),previous:e1.nk.fromFile(s,e,L.id)}:{current:e1.nk.fromFile(s,e,L.id),previous:await this.getPreviousUri(e,t,i,r-1)};else if(null!=o.workingTreeStatus&&0===r)return{current:e1.nk.fromFile(s,e,void 0),previous:await this.getPreviousUri(e,t,void 0,r)}}else 0===r&&r++}let o=0===r?e1.nk.fromFile(s,e,i):await this.getPreviousUri(e,t,i,r-1);if(null!=o&&o.sha!==L.nB)return{current:o,previous:await this.getPreviousUri(e,t,i,r)}}async getPreviousComparisonUrisForLine(e,t,i,r,s=0){let o;if(r===L.nB)return;let n=this.provider.getRelativePath(t,e);if(r){if((0,em.KH)(r)){let o=0===s?e1.nk.fromFile(n,e,r):await this.getPreviousUri(e,t,void 0,s-1,i);if(o.sha===L.nB)return;return{current:o,previous:await this.getPreviousUri(e,t,void 0,s,i),line:i}}let a=new e1.nk(t,{repoPath:e,sha:r}),l=await this.provider.getBlameForLine(a,i);if(null==l)return;r=l.commit.sha,n=l.commit.file?.path??l.commit.file?.originalPath??n,t=this.provider.getAbsoluteUri(n,e),i=l.line.originalLine-1,0===s&&l.commit.file?.previousSha&&(o=e1.nk.fromFile(n,e,l.commit.file.previousSha))}else{let a=new e1.nk(t,e),l=await w.workspace.openTextDocument(t),c=l.isDirty?await this.provider.getBlameForLineContents(a,i,l.getText()):await this.provider.getBlameForLine(a,i);if(null==c)return;if(c.commit.isUncommitted){let r=await this.provider.status?.getStatusForFile(e,t);return null!=r&&null!=r.indexStatus?{current:e1.nk.fromFile(n,e,void 0),previous:e1.nk.fromFile(n,e,L.id),line:i}:{current:e1.nk.fromFile(n,e,void 0),previous:await this.getPreviousUri(e,t,void 0,s,i),line:i}}r=c.commit.sha,n=c.commit.file?.path??c.commit.file?.originalPath??n,t=this.provider.getAbsoluteUri(n,e),i=c.line.originalLine-1,0===s&&c.commit.file?.previousSha&&(o=e1.nk.fromFile(n,e,c.commit.file.previousSha))}let a=0===s?e1.nk.fromFile(n,e,r):await this.getPreviousUri(e,t,r,s-1,i);if(a.sha!==L.nB)return{current:a,previous:o??await this.getPreviousUri(e,t,r,s,i),line:i}}async getPreviousUri(e,t,i,r=0,s){let o;if(i===L.nB)return;let n=(0,eb.dQ)();i===L.SU&&(i=void 0);let a=this.provider.getRelativePath(t,e);try{o=await this.git.log__file(e,a,i,{argsOrFormat:eu,fileMode:"simple",limit:r+2,ordering:v.H.get("advanced.commitOrdering"),startLine:null!=s?s+1:void 0})}catch(s){let r=s?.toString()??"";if((null==i||(0,em.KH)(i))&&eH.invalidLineCount.test(r)){if(null==i){let i=await this.provider.status?.getStatusForFile(e,t);if(i?.indexStatus!=null)return e1.nk.fromFile(a,e,L.id)}return i=await this.git.log__file_recent(e,a,{ordering:v.H.get("advanced.commitOrdering")}),e1.nk.fromFile(a,e,i??L.nB)}throw ev.Vy.error(s,n),s}if(null==o||0===o.length)return;let[l,c]=ed(o,r,i);if(null==i||i!==l)return e1.nk.fromFile(c??a,e,l??L.nB)}async openDiffTool(e,t,i){let r=(0,eb.dQ)(),[s,o]=(0,D.Uf)(t,e);try{let e=i?.tool;if(!e){let t=(0,eb.dQ)();if(e=v.H.get("advanced.externalDiffTool")||await this.getDiffTool(o),null==e)throw Error("No diff tool found");ev.Vy.log(t,`Using tool=${e}`)}await this.git.exec({cwd:o},"difftool","--no-prompt",`--tool=${e}`,i?.staged?"--staged":void 0,i?.ref1?i.ref1:void 0,i?.ref2?i.ref2:void 0,"--",s)}catch(t){let e=t?.toString()??"";if("No diff tool found"===e||/Unknown .+? tool/.test(e)){let e="View Git Docs";await w.window.showWarningMessage("Unable to open changes because the specified diff tool cannot be found or no Git diff tool is configured",e)===e&&w.env.openExternal(w.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool"));return}ev.Vy.error(t,r),(0,th.qQ)("Unable to open compare")}}async openDirectoryCompare(e,t,i,r){let s=(0,eb.dQ)();try{if(!r){let t=(0,eb.dQ)();if(r=v.H.get("advanced.externalDirectoryDiffTool")||await this.getDiffTool(e),null==r)throw Error("No diff tool found");ev.Vy.log(t,`Using tool=${r}`)}await this.git.exec({cwd:e},"difftool","--dir-diff",`--tool=${r}`,t,i)}catch(t){let e=t?.toString()??"";if("No diff tool found"===e||/Unknown .+? tool/.test(e)){let e="View Git Docs";await w.window.showWarningMessage("Unable to open directory compare because the specified diff tool cannot be found or no Git diff tool is configured",e)===e&&w.env.openExternal(w.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool"));return}ev.Vy.error(t,s),(0,th.qQ)("Unable to open directory compare")}}};function iu(e,t,i,r){return e===L.SU?null!=t?i.push(t):t="HEAD":e===L.id?(i.push("--staged"),null!=t?i.push(t):t="HEAD"):null==t?""===e||"HEAD"===e.toUpperCase()?(t="HEAD",i.push(t)):(t=`${e}^`,i.push(t,e)):""===e?i.push(t):null!=r?i.push(`${t}${r}${e}`):i.push(t,e),t}ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getChangedFilesCount",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getDiff",1),ic([(0,ew.Rm)({args:{1:!1}})],DiffGitSubProvider.prototype,"getDiffFiles",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getDiffStatus",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getDiffTool",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getNextComparisonUris",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getNextUri",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getPreviousComparisonUris",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getPreviousComparisonUrisForLine",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"getPreviousUri",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"openDiffTool",1),ic([(0,ew.Rm)()],DiffGitSubProvider.prototype,"openDirectoryCompare",1);var ih=i(6525),id=i(6796),ip=i(8811),ig=i(311),im=i(8573),iw=i(710),iv=Object.defineProperty,iy=Object.getOwnPropertyDescriptor,ib=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iy(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iv(t,i,o),o};let iC=Object.freeze([]);let GraphGitSubProvider=class GraphGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}async getGraph(e,t,i,r){let s,c,u,h=r?.limit??v.H.get("graph.defaultItemLimit")??5e3,d=v.H.get("graph.pageItemLimit")??1e3,p=v.H.get("graph.commitOrdering",void 0,"date"),g=v.H.get("graph.onlyFollowFirstParent",void 0,!1),m=r?.include?.stats,f=r?.include?.stats&&!m?n??=ea({sha:"%H",author:"%aN",authorEmail:"%aE",authorDate:"%at",committerDate:"%ct",parents:"%P",tips:"%D",message:"%B"}):o??=er({sha:"%H",author:"%aN",authorEmail:"%aE",authorDate:"%at",committerDate:"%ct",parents:"%P",tips:"%D",message:"%B"}),w=l??=es("%H"),y=a??=ea({sha:"%H"}),[b,C,k,S,R,P]=await Promise.allSettled([this.git.log(e,void 0,void 0,...w.arguments,"-n1",t??"HEAD"),this.provider.stash?.getStash(e),this.provider.branches.getBranches(e),this.provider.remotes.getRemotes(e),this.provider.config.getCurrentUser(e),this.provider.worktrees?.getWorktrees(e).then(e=>[e,(0,ig.PU)(e,{includeDefault:!0})])]),A=(0,eC.Ro)(k)?.values,I=null!=A?new Map(A.map(e=>[e.name,e])):new Map,D=A?.find(e=>e.current),$=D?.upstream?.name,[T,E]=(0,eC.Ro)(P)??[[],new Map];null!=E&&null!=(s=(0,tm.I6)(E,([,e])=>e.isDefault)?.[0])&&E.delete(s);let _=(0,eC.Ro)(R),O=(0,eC.Ro)(S),x=null!=O?new Map(O.map(e=>[e.name,e])):new Map,F=(0,tm.$1)(w.parse((0,eC.Ro)(b)??"")),L=new Map,U=(0,eC.Ro)(C);U?.stashes.size&&(c=new Map(U.stashes),u=(0,tm.fj)((0,tm.Tj)(c.values(),e=>e.sha.substring(0,9)),"\n"));let N=v.H.get("graph.avatars",void 0,!0),q=new Map,W=new Set,M=new Set,G=new Map,H=new Map,V=0,j=0,Q=0;async function z(t,o,n){let a,l,h,w,v,b,C,k,S,R,P,A,D,O,F,Y,K,Z,J,X,ee,et,ei,er,es,eo,en,ea=V;j++;let el=t;for(;;){let i,s=[...f.arguments,`--${p}-order`,"--all"];if(g&&s.push("--first-parent"),n?.skip&&s.push(`--skip=${n.skip}`),o)[i,t]=await this.git.logStreamTo(e,o,t,u?{stdin:u}:void 0,...s);else if(s.push(`-n${el+1}`),i=await this.git.log(e,void 0,u?{stdin:u}:void 0,...s),n&&!eK(n.sha).test(i)){if(l===i.length)return{repoPath:e,avatars:q,ids:W,includes:r?.include,branches:I,remotes:x,downstreams:L,stashes:c,worktrees:T,worktreesByBranch:E,rows:[]};l=i.length,el=(0===el?d:el)*2,n.skip-=Math.floor(.1*n.skip);continue}if(!i)return{repoPath:e,avatars:q,ids:W,includes:r?.include,branches:I,remotes:x,downstreams:L,stashes:c,worktrees:T,worktreesByBranch:E,rows:[]};a=i,0!==t&&(t=el);break}let ec=[],eu=new Map,eh=!1,ed=!1,ep=0;for(let t of f.parse(a))if(ep++,!W.has(t.sha)&&(V++,!G.has(t.sha))){if(W.add(t.sha),D=[],F=[],K=[],S={},t.tips){for(eo of(eu.clear(),t.tips.split(", "))){var eg;if(eh=!1,"refs/stash"===eo)continue;if(eo.startsWith("tag: ")){es=eo.substring(5),er=(0,im.gt)(e,es),k={webviewItem:"gitlens:tag",webviewItemValue:{type:"tag",ref:(0,tc.kA)(es,e,{id:er,refType:"tag",name:es})}},Y={id:er,name:es,annotated:!0,context:(0,iw.C9)(k)},K.push(Y);continue}if(eo.startsWith("HEAD")&&(eh=!0,M.add(t.sha),"HEAD"!==eo&&(eo=eo.substring(8))),(et=(0,tl.Zq)(eo))&&null!=(X=x.get(et))){if("HEAD"===(C=(0,tl.km)(eo)))continue;ee=(0,tl.Yk)(e,!0,eo),w=((N?X.provider?.avatarUri:void 0)??(0,ip.Wf)(this.container,X,i))?.toString(!0),k={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,tc.kA)(eo,e,{id:ee,refType:"branch",name:eo,remote:!0,upstream:{name:X.name,missing:!1}})}},O={id:ee,name:C,owner:X.name,url:X.url,avatarUrl:w,context:(0,iw.C9)(k),current:eo===$,hostingServiceType:X.provider?.gkProviderId},F.push(O),null==(R=eu.get(C))&&(R={remotes:[]},eu.set(C,R)),null==R.remotes&&(R.remotes=[]),R.remotes.push(k.webviewItemValue.ref);continue}v=I.get(eo),b=v?.id??(0,tl.Yk)(e,!1,eo),k={webviewItem:`gitlens:branch${eh?"+current":""}${v?.upstream!=null?"+tracking":""}${E?.has(b)?"+worktree":s===b?"+checkedout":""}`,webviewItemValue:{type:"branch",ref:(0,tc.kA)(eo,e,{id:b,refType:"branch",name:eo,remote:!1,upstream:v?.upstream})}};let r=E?.get(b);if(A={id:b,name:eo,isCurrentHead:eh,context:(0,iw.C9)(k),upstream:v?.upstream!=null?{name:v.upstream.name,id:(0,tl.Yk)(e,!0,v.upstream.name)}:void 0,worktreeId:null!=r?(eg=r.name,`${e}|worktrees/${eg}`):void 0},D.push(A),v?.upstream?.name!=null){let e=L.get(v.upstream.name);null==e&&(e=[],L.set(v.upstream.name,e)),e.push(eo)}null==(R=eu.get(eo))&&(R={},eu.set(eo,R)),eh&&(R.head=!0),R.local=k.webviewItemValue.ref}for([P,R]of eu)null!=R.remotes&&(null!=R.local&&R.remotes.length>0||R.remotes.length>1)&&(null==S.refGroups&&(S.refGroups={}),S.refGroups[P]=(0,iw.C9)({webviewItemGroup:`gitlens:refGroup${R.head?"+current":""}`,webviewItemGroupValue:{type:"refGroup",refs:null!=R.local?[R.local,...R.remotes]:R.remotes}}))}if(ei=U?.stashes.get(t.sha),J=t.parents?t.parents.split(" "):[],M.has(t.sha))for(Z of J)M.add(Z);null!=ei&&J.length>1&&(G.set(J[1],t.sha),G.set(J[2],t.sha),J.splice(1,2)),null!=ei||q.has(t.authorEmail)||null!=(h=(0,ih.qJ)(t.authorEmail))&&q.set(t.authorEmail,h.toString(!0)),ed=(0,B.h)(_,t.author,t.authorEmail),null!=ei?S.row=(0,iw.C9)({webviewItem:"gitlens:stash",webviewItemValue:{type:"stash",ref:(0,tc.kA)(t.sha,e,{refType:"stash",name:ei.name,message:ei.message,number:ei.number})}}):(S.row=(0,iw.C9)({webviewItem:`gitlens:commit${eh?"+HEAD":""}${M.has(t.sha)?"+current":""}`,webviewItemValue:{type:"commit",ref:(0,tc.kA)(t.sha,e,{refType:"revision",message:t.message})}}),S.avatar=(0,iw.C9)({webviewItem:`gitlens:contributor${ed?"+current":""}`,webviewItemValue:{type:"contributor",repoPath:e,name:t.author,email:t.authorEmail,current:ed}})),ec.push({sha:t.sha,parents:g?[J[0]]:J,author:ed?"You":t.author,email:t.authorEmail,date:1e3*Number("author-date"===p?t.authorDate:t.committerDate),message:(0,id.E)(t.message.trim()),type:null!=ei?"stash-node":J.length>1?"merge-node":"commit-node",heads:D,remotes:F,tags:K,contexts:S}),null!=t.stats&&H.set(t.sha,t.stats)}let em=n?.sha,ef=(0,tm.HV)(W);return n=null!=ef?{sha:ef,skip:V-j}:void 0,m&&(Q++,en={isLoaded:()=>0===Q,promise:new Promise(async t=>{try{let t=[...y.arguments];0===ea?t.push(`-n${V}`):t.push(`-n${V-ea}`,`--skip=${ea}`),t.push(`--${p}-order`,"--all");let i=await this.git.log(e,void 0,u?{stdin:u}:void 0,...t);if(i)for(let e of y.parse(i))H.set(e.sha,e.stats)}finally{Q--,t()}})}),{repoPath:e,avatars:q,ids:W,includes:r?.include,remappedIds:G,branches:I,remotes:x,downstreams:L,stashes:c,worktrees:T,worktreesByBranch:E,rows:ec,id:o,rowsStats:H,rowsStatsDeferred:en,paging:{limit:0===t?ep:t,startingCursor:em,hasMore:0!==t&&ep>t},more:async(e,t)=>z.call(this,e,t,n)}}return z.call(this,h,F)}async searchGraph(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};let r=(0,tK.b4)(t);try{let o,n,a=c??=er({sha:"%H",authorDate:"%at",committerDate:"%ct"}),l=t.query.includes("@me")?await this.provider.config.getCurrentUser(e):void 0,{args:u,files:h,shas:d}=(0,tK.wj)(t,l);if(d?.size){let s=await this.git.exec({cwd:e,cancellation:i?.cancellation,configs:eN},"show","-s",...a.arguments,...d.values(),...u,"--"),o=0,n=new Map((0,tm.Tj)(a.parse(s),e=>[e.sha,{i:o++,date:1e3*Number(i?.ordering==="author-date"?e.authorDate:e.committerDate)}]));return{repoPath:e,query:t,comparisonKey:r,results:n}}let p=i?.limit??v.H.get("advanced.maxSearchItems")??0,g=v.H.get("advanced.similarityThreshold"),m=u.includes("--no-walk"),f=await this.provider.stash?.getStash(e);if(f?.stashes.size)for(let e of(n="",o=new Map(f.stashes),f.stashes.values()))for(let t of(n+=`${e.sha.substring(0,9)}
`,(0,tm.R9)(e.parents,1)))o.set(t,e),n+=`${t.substring(0,9)}
`;let w=[...a.arguments,`-M${null==g?"":`${g}%`}`,"--use-mailmap"],y=new Map,b=0;async function s(l,c){let d;if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:y};try{d=await this.git.log(e,void 0,{cancellation:i?.cancellation,configs:["-C",e,...eN],errors:A.Throw,stdin:n},...w,...u,...i?.ordering?[`--${i.ordering}-order`]:iC,...l?[`-n${l+1}`]:iC,...c?.skip?[`--skip=${c.skip}`]:iC,"--",...h)}catch(s){if(s instanceof CancelledRunError||i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:y};throw new I.Do(s)}if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:y};let p=b;for(let e of a.parse(d))if(!m||o?.has(e.sha)){if(y.has(e.sha)){l--;continue}y.set(e.sha,{i:b++,date:1e3*Number(i?.ordering==="author-date"?e.authorDate:e.committerDate)})}p=b-p;let g=(0,tm.HV)(y)?.[0];return c=null!=g?{sha:g,skip:b}:void 0,{repoPath:e,query:t,comparisonKey:r,results:y,paging:0!==l&&p>l?{limit:l,hasMore:!0}:void 0,more:async e=>s.call(this,e,c)}}return await s.call(this,p)}catch(e){if(e instanceof I.Do)throw e;throw new I.Do(e)}}};ib([(0,ew.Rm)()],GraphGitSubProvider.prototype,"getGraph",1),ib([(0,ew.Rm)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`,2:e=>`limit=${e?.limit}, ordering=${e?.ordering}`}})],GraphGitSubProvider.prototype,"searchGraph",1);var ik=i(8336),iS=Object.defineProperty,iR=Object.getOwnPropertyDescriptor,iP=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),iA=e=>{throw TypeError(e)},iI=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iR(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iS(t,i,o),o},iD=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&iA("Object expected"),i&&(r=t[iP("asyncDispose")]),void 0===r&&(r=t[iP("dispose")],i&&(s=r)),"function"!=typeof r&&iA("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},i$=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let PatchGitSubProvider=class PatchGitSubProvider{constructor(e,t,i){this.container=e,this.git=t,this.provider=i}async applyUnreachableCommitForPatch(e,t,i){let r=(0,eb.dQ)();if(i?.stash){let t=await this.provider.status?.getStatus(e);if(t?.files?.length){if("prompt"===i.stash){let e={title:"Stash Changes"};if(await w.window.showWarningMessage("You have changes in your working tree.\nDo you want to stash them before applying the patch?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)throw new ik.AL}try{await this.git.stash__push(e,void 0,{includeUntracked:!0})}catch(e){throw ev.Vy.error(e,r),new I.ol(I.a_.StashFailed,`Unable to apply patch; failed stashing working changes changes${e instanceof I.Oo?`: ${e.message}`:""}`,e)}}}let s=e,o=await this.provider.branches.getBranch(e),n=i?.branchName==null||o?.name===i.branchName||(await this.provider.branches.getBranches(e,{filter:e=>e.name===i.branchName}))?.values?.length>0,a=i?.branchName!=null&&!n&&i.createBranchIfNeeded;if(i?.createWorktreePath!=null){if(i?.branchName===null||i.branchName===o?.name)throw new I.ol(I.a_.CreateWorktreeFailed,"Unable to apply patch; failed creating worktree");try{let t=await this.provider.worktrees.createWorktreeWithResult(e,i.createWorktreePath,{commitish:i?.branchName!=null&&n?i.branchName:o?.name,createBranch:a?i.branchName:void 0});if(null==t)throw new I.ol(I.a_.CreateWorktreeFailed,"Unable to apply patch; failed creating worktree");s=t.uri.fsPath}catch(e){throw ev.Vy.error(e,r),new I.ol(I.a_.CreateWorktreeFailed,`Unable to apply patch; failed creating worktree${e instanceof I.iX?`: ${e.message}`:""}`,e)}}if(i?.branchName!=null&&o?.name!==i.branchName){let e=a?o?.ref??"HEAD":i.branchName;await this.provider.checkout(s,e,{createBranch:a?i.branchName:void 0})}try{await this.git.cherrypick(s,t,{noCommit:!0,errors:A.Throw})}catch(e){if(ev.Vy.error(e,r),e instanceof I.HT){if(e.reason===I.$j.Conflicts)throw new I.ol(I.a_.AppliedWithConflicts,"Patch applied with conflicts",e);if(e.reason===I.$j.AbortedWouldOverwrite)throw new I.ol(I.a_.ApplyAbortedWouldOverwrite,"Unable to apply patch as some local changes would be overwritten",e)}throw new I.ol(I.a_.ApplyFailed,`Unable to apply patch${e instanceof I.HT?`: ${e.message}`:""}`,e)}}async createUnreachableCommitForPatch(e,t,i,r){var s=[];try{let o=(0,eb.dQ)();t.endsWith("\n")||(t+="\n");let{env:n}=iD(s,await this.provider.staging.createTemporaryIndex(e,i),!0);try{await this.git.exec({cwd:e,configs:eN,env:n,stdin:t},"apply","--cached","-");let s=(await this.git.exec({cwd:e,env:n},"write-tree"))?.trim(),o=(await this.git.exec({cwd:e,env:n},"commit-tree",s,"-p",i,"-m",r))?.trim();return await this.provider.commits.getCommit(e,o)}catch(e){throw ev.Vy.error(e,o),e}}catch(e){var o=e,n=!0}finally{var a=i$(s,o,n);a&&await a}}async validatePatch(e,t){try{return await this.git.exec({cwd:e,configs:eN,stdin:t},"apply","--check","-"),!0}catch(e){if(e instanceof Error&&e.message){if(e.message.includes("No valid patches in input"))return!1;return!0}return!1}}};iI([(0,ew.Rm)()],PatchGitSubProvider.prototype,"applyUnreachableCommitForPatch",1),iI([(0,ew.Rm)({args:{1:"<contents>",3:"<message>"}})],PatchGitSubProvider.prototype,"createUnreachableCommitForPatch",1),iI([(0,ew.Rm)({args:{1:!1}})],PatchGitSubProvider.prototype,"validatePatch",1);let TimedCancellationSource=class TimedCancellationSource{cancellation=new w.CancellationTokenSource;timer;constructor(e){this.timer=setTimeout(()=>this.cancellation.cancel(),e)}dispose(){clearTimeout(this.timer),this.cancellation.dispose()}cancel(){clearTimeout(this.timer),this.cancellation.cancel()}get token(){return this.cancellation.token}};var iT=Object.defineProperty,iE=Object.getOwnPropertyDescriptor,i_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iE(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iT(t,i,o),o};let RefsGitSubProvider=class RefsGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}async checkIfCouldBeValidBranchOrTagName(e,t){try{return!!(await this.git.exec({cwd:e,errors:A.Throw},"check-ref-format","--branch",t)).trim()}catch{return!1}}async getMergeBase(e,t,i,r){let s=(0,eb.dQ)();try{let s=await this.git.exec({cwd:e},"merge-base",r?.forkPoint?"--fork-point":void 0,t,i);if(!s)return;return s.split("\n")[0].trim()||void 0}catch(e){ev.Vy.error(e,s);return}}async getReference(e,t){if(t&&t!==L.nB&&await this.isValidReference(e,t)){if("HEAD"!==t&&!(0,em.a$)(t)){let i=await this.provider.branches.getBranch(e,t);if(null!=i)return(0,tc.kA)(i.ref,e,{id:i.id,refType:"branch",name:i.name,remote:i.remote,upstream:i.upstream});let r=await this.provider.tags.getTag(e,t);if(null!=r)return(0,tc.kA)(r.ref,e,{id:r.id,refType:"tag",name:r.name})}return(0,tc.kA)(t,e,{refType:"revision"})}}async getSymbolicReferenceName(e,t){let i=await this.git.supports("git:rev-parse:end-of-options"),r=await this.git.exec({cwd:e,errors:A.Ignore},"rev-parse","--verify","--quiet","--symbolic-full-name","--abbrev-ref",i?"--end-of-options":void 0,t);return r?.trim()||void 0}async hasBranchOrTag(e,t){if(null==e)return!1;let[{values:i},{values:r}]=await Promise.all([this.provider.branches.getBranches(e,{filter:t?.filter?.branches,sort:!1}),this.provider.tags.getTags(e,{filter:t?.filter?.tags,sort:!1})]);return 0!==i.length||0!==r.length}async isValidReference(e,t,i){let r=i?this.provider.getRelativePath(i,e):void 0;return!!(await this.validateReference(e,t,r))?.length}async resolveReference(e,t,i,r){let s;if(null!=i&&(0,em.i8)(t)&&(t="HEAD"),!t||t===L.nB||null==i&&(0,em.HH)(t)||null!=i&&(0,em._k)(t))return t;if(null==i)return!r?.force&&!(0,em.a$)(t)||t.endsWith("^3")?t:await this.validateReference(e,t)??t;let o=this.provider.getRelativePath(i,e);r?.timeout!=null&&(s=new TimedCancellationSource(r.timeout));let[n,a]=await Promise.allSettled([this.validateReference(e,t,o),this.git.log__file_recent(e,o,{ref:t,cancellation:s?.token})]);if(!(0,eC.Ro)(n))return L.nB;let l=(0,eC.Ro)(a),c=s?.token.isCancellationRequested;return s?.dispose(),c?t:l??t}async validateReference(e,t,i){if(!t)return;if(t===L.nB||(0,em._k)(t))return t;let r=await this.git.supports("git:rev-parse:end-of-options"),s=await this.git.exec({cwd:e,errors:A.Ignore},"rev-parse","--verify",r?"--end-of-options":void 0,i?`${t}:./${i}`:`${t}^{commit}`);return s?.trim()||void 0}};i_([(0,ew.Rm)()],RefsGitSubProvider.prototype,"checkIfCouldBeValidBranchOrTagName",1),i_([(0,ew.Rm)()],RefsGitSubProvider.prototype,"getMergeBase",1),i_([(0,ew.Rm)()],RefsGitSubProvider.prototype,"getReference",1),i_([(0,ew.Rm)()],RefsGitSubProvider.prototype,"getSymbolicReferenceName",1),i_([(0,ew.Rm)({args:{1:!1}})],RefsGitSubProvider.prototype,"hasBranchOrTag",1),i_([(0,ew.Rm)()],RefsGitSubProvider.prototype,"isValidReference",1),i_([(0,ew.Rm)()],RefsGitSubProvider.prototype,"resolveReference",1);var iO=i(8094),ix=i(5585),iF=Object.defineProperty,iL=Object.getOwnPropertyDescriptor,iB=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iL(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iF(t,i,o),o};let RemotesGitSubProvider=class RemotesGitSubProvider extends ix.G{constructor(e,t,i,r){super(e,i,r),this.git=t}async getRemotes(e,t,i){if(null==e)return[];let r=(0,eb.dQ)(),s=this.cache.remotes?.get(e);null==s&&(s=(async function(){let t=(0,iO.P)(v.H.get("remotes",this.container.git.getRepository(e)?.folder?.uri??null),await this.container.integrations.getConfigured());try{let i=await this.git.exec({cwd:e},"remote","-v");return(0,eg.Hu)(this.container,i,e,await (0,iO.m)(this.container,t))}catch(t){return this.cache.remotes?.delete(e),ev.Vy.error(t,r),[]}}).call(this),this.cache.remotes?.set(e,s));let o=await s;return t?.filter!=null&&(o=o.filter(t.filter)),t?.sort&&(0,tA.KW)(o),o}async addRemote(e,t,i,r){await this.git.exec({cwd:e},"remote","add",r?.fetch?"-f":void 0,t,i),this.container.events.fire("git:cache:reset",{repoPath:e,types:["remotes"]})}async addRemoteWithResult(e,t,i,r){await this.addRemote(e,t,i,r);let[s]=await this.getRemotes(e,{filter:e=>e.url===i});return s}async pruneRemote(e,t){await this.git.exec({cwd:e},"remote","prune",t),this.container.events.fire("git:cache:reset",{repoPath:e,types:["remotes"]})}async removeRemote(e,t){await this.git.exec({cwd:e},"remote","remove",t),this.container.events.fire("git:cache:reset",{repoPath:e,types:["remotes"]})}};iB([(0,ew.Rm)({args:{1:!1}})],RemotesGitSubProvider.prototype,"getRemotes",1),iB([(0,tp.G)(),(0,ew.Rm)()],RemotesGitSubProvider.prototype,"addRemote",1),iB([(0,tp.G)(),(0,ew.Rm)()],RemotesGitSubProvider.prototype,"addRemoteWithResult",1),iB([(0,tp.G)(),(0,ew.Rm)()],RemotesGitSubProvider.prototype,"pruneRemote",1),iB([(0,tp.G)(),(0,ew.Rm)()],RemotesGitSubProvider.prototype,"removeRemote",1);var iU=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),iN=e=>{throw TypeError(e)},iq=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&iN("Object expected"),i&&(r=t[iU("asyncDispose")]),void 0===r&&(r=t[iU("dispose")],i&&(s=r)),"function"!=typeof r&&iN("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},iW=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let iM=/(?:.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+)/gm,iG=/^(\S+)\s+(\S+)\s+(\S+)\s+(.*)$/gm;var iH=Object.defineProperty,iV=Object.getOwnPropertyDescriptor,ij=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iV(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iH(t,i,o),o};let RevisionGitSubProvider=class RevisionGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}getRevisionContent(e,t,i){let[r,s]=(0,D.Uf)(i,e);return this.git.show__content(s,r,t,{encoding:"buffer"})}async getTreeEntryForRevision(e,t,i){if(null==e||!i)return;let[r,s]=(0,D.Uf)(i,e);if((0,em.KH)(t)){let i=await this.git.ls_files(s,r,{rev:t}),[o]=function(e){var t=[];try{let i,r,s,o,n,a=iq(t,(0,E.u)("Git.parseLsFiles",{log:!1,logLevel:"debug"})),l=[];if(!e)return l;for(;n=iG.exec(e),null!=n;)[,r,s,o,i]=n,l.push({mode:null==r||0===r.length?"":` ${r}`.substring(1),oid:null==s||0===s.length?"":` ${s}`.substring(1),path:null==i||0===i.length?"":` ${i}`.substring(1),stage:parseInt(o,10)});return a?.stop({suffix:` parsed ${l.length} files`}),l}catch(e){var i=e,r=!0}finally{iW(t,i,r)}}(i);if(null==o)return;let n=(i=(await this.git.exec({cwd:e},"cat-file","-s",o.oid))?.trim()).length?parseInt(i,10):0;return{ref:t,oid:o.oid,path:r,size:n,type:"blob"}}return(await this.getTreeForRevisionCore(e,t,i))[0]}async getTreeForRevision(e,t){return null==e?[]:this.getTreeForRevisionCore(e,t)}async getTreeForRevisionCore(e,t,i){let r=(await this.git.exec({cwd:e,errors:A.Ignore},"ls-tree",...i?["-l",t,"--",i]:["-lrt",t,"--"]))?.trim();return r?function(e,t){var i=[];try{let r,s,o,n,a,l=iq(i,(0,E.u)("Git.parseTree",{log:!1,logLevel:"debug"})),c=[];if(!e)return c;for(;a=iM.exec(e),null!=a;)[,r,s,o,n]=a,c.push({ref:t,oid:null==s||0===s.length?"":` ${s}`.substring(1),path:null==n||0===n.length?"":` ${n}`.substring(1),size:Number(o)||0,type:null==r||0===r.length?"":` ${r}`.substring(1)});return l?.stop({suffix:` parsed ${c.length} trees`}),c}catch(e){var r=e,s=!0}finally{iW(i,r,s)}}(r,t):[]}};ij([(0,tp.G)(),(0,ew.Rm)()],RevisionGitSubProvider.prototype,"getRevisionContent",1),ij([(0,tp.G)(),(0,ew.Rm)()],RevisionGitSubProvider.prototype,"getTreeEntryForRevision",1),ij([(0,tp.G)(),(0,ew.Rm)()],RevisionGitSubProvider.prototype,"getTreeForRevision",1),ij([(0,tp.G)()],RevisionGitSubProvider.prototype,"getTreeForRevisionCore",1);var iQ=i(9565),iz=i(1316),iY=Object.defineProperty,iK=Object.getOwnPropertyDescriptor,iZ=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iK(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iY(t,i,o),o};let StagingGitSubProvider=class StagingGitSubProvider{constructor(e,t){this.container=e,this.git=t}async createTemporaryIndex(e,t){let i=await b.promises.mkdtemp((0,T.HS)((0,t5.tmpdir)(),"gl-")),r=(0,T.HS)(i,"index");async function s(){try{await b.promises.rm(i,{recursive:!0})}catch{}}try{let i={GIT_INDEX_FILE:r},o=await this.git.exec({cwd:e,env:i},"ls-tree","-z","-r","--full-name",t);return await this.git.exec({cwd:e,env:i,stdin:o},"update-index","-z","--index-info"),(0,iQ.sP)({path:r,env:{GIT_INDEX_FILE:r}},s)}catch(e){throw ev.Vy.error(e,iz.z8),s(),e}}async stageFile(e,t,i){await this.git.exec({cwd:e},"add",i?.intentToAdd?"-N":"-A","--",["string"==typeof t?t:(0,D.Uf)(t,e)[0]])}async stageFiles(e,t,i){await this.git.exec({cwd:e},"add",i?.intentToAdd?"-N":"-A","--",...t.map(t=>"string"==typeof t?t:(0,D.Uf)(t,e)[0]))}async stageDirectory(e,t,i){await this.git.exec({cwd:e},"add",i?.intentToAdd?"-N":"-A","--",["string"==typeof t?t:(0,D.Uf)(t,e)[0]])}async unstageFile(e,t){await this.git.reset(e,["string"==typeof t?t:(0,D.Uf)(t,e)[0]])}async unstageFiles(e,t){await this.git.reset(e,t.map(t=>"string"==typeof t?t:(0,D.Uf)(t,e)[0]))}async unstageDirectory(e,t){await this.git.reset(e,["string"==typeof t?t:(0,D.Uf)(t,e)[0]])}};iZ([(0,ew.Rm)()],StagingGitSubProvider.prototype,"createTemporaryIndex",1),iZ([(0,ew.Rm)()],StagingGitSubProvider.prototype,"stageFile",1),iZ([(0,ew.Rm)()],StagingGitSubProvider.prototype,"stageFiles",1),iZ([(0,ew.Rm)()],StagingGitSubProvider.prototype,"stageDirectory",1),iZ([(0,ew.Rm)()],StagingGitSubProvider.prototype,"unstageFile",1),iZ([(0,ew.Rm)()],StagingGitSubProvider.prototype,"unstageFiles",1),iZ([(0,ew.Rm)()],StagingGitSubProvider.prototype,"unstageDirectory",1);var iJ=i(8860),iX=Object.defineProperty,i0=Object.getOwnPropertyDescriptor,i1=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?i0(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iX(t,i,o),o};let i2=/(?:(?:(?<wip>WIP) on|On) (?<onref>[^/](?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\x00-\x1F\x7F ~^:?*[\\]+[^./]):\s*)?(?<summary>.*)$/s;let StashGitSubProvider=class StashGitSubProvider{constructor(e,t,i){this.container=e,this.git=t,this.cache=i}async applyStash(e,t,i){if(t)try{await this.git.exec({cwd:e},"stash",i?.deleteAfter?"pop":"apply",t),this.container.events.fire("git:repo:change",{repoPath:e,changes:[e4.Z_.Stash]})}catch(e){if(e instanceof Error){let t=e.message??"";if(t.includes("Your local changes to the following files would be overwritten by merge"))throw new I.Uz(I.W.WorkingChanges,e);if(t.includes("Auto-merging")&&t.includes("CONFLICT")||e instanceof RunError&&(e.stdout.includes("Auto-merging")&&e.stdout.includes("CONFLICT")||e.stdout.includes("needs merge"))){w.window.showInformationMessage("Stash applied with conflicts");return}throw new I.Uz(`Unable to apply stash \u2014 ${t.trim().replace(/\n+?/g,"; ")}`,e)}throw new I.Uz(`Unable to apply stash \u2014 ${String(e)}`,e)}}async getStash(e,t){if(null==e)return;let i=this.cache.stashes?.get(e);if(void 0===i){let t=eo({sha:"%H",date:"%at",committedDate:"%ct",parents:"%P",stashName:"%gd",summary:"%gs"}),r=v.H.get("advanced.similarityThreshold"),s=await this.git.exec({cwd:e},"stash","list",...t.arguments??["--name-status"],`-M${null==r?"":`${r}%`}`),o=new Map;for(let i of t.parse(s)){let t,r,s,n=i2.exec(i.summary);n?.groups!=null?(t=n.groups.onref,s=0===(r=n.groups.summary.trim()).length?"WIP":n.groups.wip?`WIP: ${r}`:r):s=i.summary.trim(),o.set(i.sha,new O.Yg(this.container,e,i.sha,new O.M7("You",void 0,new Date(1e3*i.date)),new O.M7("You",void 0,new Date(1e3*i.committedDate)),s.split("\n",1)[0]??"",i.parents.split(" "),s,i.files?.map(t=>new x.l(this.container,e,t.path,t.status,t.originalPath))??[],void 0,[],void 0,i.stashName,t))}i={repoPath:e,stashes:o},this.cache.stashes?.set(e,i??null)}if(t?.reachableFrom&&i?.stashes.size){i={...i,stashes:new Map(i.stashes)};let r=new Date((0,tm.jk)(i.stashes.values(),e=>e.date.getTime())).toISOString(),s=await this.git.exec({cwd:e,errors:A.Ignore},"rev-list",`--since="${r}"`,"--date-order",t.reachableFrom,"--"),o=s?.trim().split("\n");if(o?.length&&(1!==o.length||o[0])){let e=new Set(o);if(e.size){let r,s=new Set;for(let[r,o]of i.stashes)o.parents.some(i=>i===t.reachableFrom||e.has(i))&&s.add(r);do for(let[e,t]of(r=!1,i.stashes))!s.has(e)&&t.parents.some(e=>s.has(e))&&(s.add(e),r=!0);while(r)for(let[e]of i.stashes)s.has(e)||i.stashes.delete(e)}else i.stashes.clear()}}return i??void 0}async getStashCommitFiles(e,t,i){let[r,s,o]=await Promise.allSettled([this.getStashCommitFilesCore(e,t,{untracked:!1}),this.getStashCommitFilesCore(e,t,{untracked:"only"}),i?.include?.stats?this.getStashCommitFilesCore(e,t,{untracked:!0,stats:!0}):void 0]),n=(0,eC.Ro)(r),a=(0,eC.Ro)(s);return n?.length&&a?.length?n.push(...a):n=n??a,n??=[],"fulfilled"===o.status&&null!=o.value&&(n=(0,iJ.h)(this.container,n,o.value)),n}async getStashCommitFilesCore(e,t,i){let r=[];i?.untracked&&r.push(i?.untracked==="only"?"--only-untracked":"--include-untracked");let s=v.H.get("advanced.similarityThreshold");null!=s&&r.push(`-M${s}%`);let o=i?.stats?en():eo(),n=await this.git.exec({cwd:e},"stash","show",...r,...o.arguments,t);for(let t of o.parse(n))return t.files?.map(t=>new x.l(this.container,e,t.path,i?.untracked==="only"?F.KZ.Untracked:t.status,t.originalPath,void 0,t.additions||t.deletions?{additions:t.additions??0,deletions:t.deletions??0,changes:0}:void 0))??[]}async deleteStash(e,t,i){await this.deleteStashCore(e,t,i),this.container.events.fire("git:repo:change",{repoPath:e,changes:[e4.Z_.Stash]}),this.container.events.fire("git:cache:reset",{repoPath:e,types:["stashes"]})}async deleteStashCore(e,t,i){if(t){if(i){let r=await this.git.exec({cwd:e,errors:A.Ignore},"show","--format=%H","--no-patch",t);if(r?.trim()!==i)throw Error("Unable to delete stash; mismatch with stash number")}return this.git.exec({cwd:e},"stash","drop",t)}}async renameStash(e,t,i,r,s){await this.deleteStashCore(e,t,i),await this.git.exec({cwd:e},"stash","store","-m",s?`On ${s}: ${r}`:r,i),this.container.events.fire("git:repo:change",{repoPath:e,changes:[e4.Z_.Stash]}),this.container.events.fire("git:cache:reset",{repoPath:e,types:["stashes"]})}async saveStash(e,t,i,r){if(!i?.length){await this.git.stash__push(e,t,r),this.container.events.fire("git:repo:change",{repoPath:e,changes:[e4.Z_.Stash]}),this.container.events.fire("git:cache:reset",{repoPath:e,types:["stashes","status"]});return}await this.git.ensureSupports("git:stash:push:pathspecs","Stashing individual files"," Please retry by stashing everything or install a more recent version of Git and try again.");let s=i.map(t=>`./${(0,D.Uf)(t,e)[0]}`),o=await this.git.supports("git:stash:push:stdin");o&&r?.onlyStaged&&i.length&&(o=!1),!o&&(0,$.pW)(s)>3e4&&await this.git.ensureSupports("git:stash:push:stdin",`Stashing so many files (${s.length}) at once`," Please retry by stashing fewer files or install a more recent version of Git and try again."),await this.git.stash__push(e,t,{...r,pathspecs:s,stdin:o}),this.container.events.fire("git:cache:reset",{repoPath:e,types:["stashes","status"]})}async saveSnapshot(e,t){let i=await this.git.exec({cwd:e},"stash","create"),r=i?.trim()||void 0;if(null==r)return;let s=[];t&&s.push("-m",t),await this.git.exec({cwd:e},"stash","store",...s,r),this.container.events.fire("git:repo:change",{repoPath:e,changes:[e4.Z_.Stash]}),this.container.events.fire("git:cache:reset",{repoPath:e,types:["stashes"]})}};i1([(0,tp.G)(),(0,ew.Rm)()],StashGitSubProvider.prototype,"applyStash",1),i1([(0,tp.G)(),(0,ew.Rm)()],StashGitSubProvider.prototype,"getStash",1),i1([(0,tp.G)(),(0,ew.Rm)()],StashGitSubProvider.prototype,"getStashCommitFiles",1),i1([(0,tp.G)(),(0,ew.Rm)()],StashGitSubProvider.prototype,"deleteStash",1),i1([(0,tp.G)(),(0,ew.Rm)()],StashGitSubProvider.prototype,"renameStash",1),i1([(0,ew.Rm)({args:{2:e=>e?.length}})],StashGitSubProvider.prototype,"saveStash",1),i1([(0,tp.G)(),(0,ew.Rm)()],StashGitSubProvider.prototype,"saveSnapshot",1);var i5=i(861),i4=i(3112),i7=i(2775),i3=Object.defineProperty,i6=Object.getOwnPropertyDescriptor,i9=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?i6(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i3(t,i,o),o};let GitStatusFile=class GitStatusFile{constructor(e,t,i,r,s,o){if(this.container=e,this.repoPath=t,this.path=s,this.originalPath=o,null!=i&&null!=r)switch(i+r){case"??":this.workingTreeStatus=F.KZ.Untracked;break;case"!!":this.workingTreeStatus=F.KZ.Ignored;break;case"AA":this.conflictStatus=F.Vk.AddedByBoth;break;case"AU":this.conflictStatus=F.Vk.AddedByUs;break;case"UA":this.conflictStatus=F.Vk.AddedByThem;break;case"DD":this.conflictStatus=F.Vk.DeletedByBoth;break;case"DU":this.conflictStatus=F.Vk.DeletedByUs;break;case"UD":this.conflictStatus=F.Vk.DeletedByThem;break;case"UU":this.conflictStatus=F.Vk.ModifiedByBoth}if(null==this.conflictStatus){switch(i){case"A":this.indexStatus=F.NO.Added;break;case"D":this.indexStatus=F.NO.Deleted;break;case"M":this.indexStatus=F.NO.Modified;break;case"R":this.indexStatus=F.NO.Renamed;break;case"C":this.indexStatus=F.NO.Copied}switch(r){case"A":this.workingTreeStatus=F.KZ.Added;break;case"D":this.workingTreeStatus=F.KZ.Deleted;break;case"M":this.workingTreeStatus=F.KZ.Modified}}}conflictStatus;indexStatus;workingTreeStatus;get conflicted(){return null!=this.conflictStatus}get staged(){return null!=this.indexStatus}get status(){return this.conflictStatus??this.indexStatus??this.workingTreeStatus}get uri(){return this.container.git.getAbsoluteUri(this.path,this.repoPath)}get wip(){return null!=this.workingTreeStatus}getFormattedDirectory(e=!1){return(0,i4.C0)(this,e)}getFormattedPath(e={}){return(0,i4.CB)(this,e)}getStatusText(){return(0,i7.m)(this.status)}getPseudoCommits(e,t){return function(e,t,i){let r,s,o;if(!t?.length)return[];let n=new Date,a=t[0].repoPath;for(let i of t)i.conflicted?(r??=[]).push(new x.l(e,a,i.path,i.status,i.originalPath,"HEAD",void 0,!1)):(i.wip&&(o??=[]).push(new x.l(e,a,i.path,i.workingTreeStatus??i.status,i.originalPath,i.staged?L.id:"HEAD",void 0,!1)),i.staged&&(s??=[]).push(new x.l(e,a,i.path,i.indexStatus??i.status,i.originalPath,"HEAD",void 0,!0)));let l=[];if(r?.length||o?.length){let t=[...r??[],...o??[]];l.push((0,tZ.O)(e,a,L.SU,n,i,{files:{file:1===t.length?t[0]:void 0,files:t},parents:[s?.length?L.id:"HEAD"]})),n=new Date(n.getTime()-6e4)}return s?.length&&l.push((0,tZ.O)(e,a,L.id,n,i,{files:{file:1===s.length?s[0]:void 0,files:s},parents:["HEAD"]})),l}(e,[this],t)}getPseudoFileChanges(){if(this.conflicted)return[new x.l(this.container,this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!1)];let e=[],t=this.staged;return this.wip&&e.push(new x.l(this.container,this.repoPath,this.path,this.status,this.originalPath,t?L.id:"HEAD",void 0,!1)),t&&e.push(new x.l(this.container,this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!0)),e}};i9([(0,tB.B)()],GitStatusFile.prototype,"status",1),i9([(0,tB.B)()],GitStatusFile.prototype,"uri",1);var i8=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),re=e=>{throw TypeError(e)},rt=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&re("Object expected"),i&&(r=t[i8("asyncDispose")]),void 0===r&&(r=t[i8("dispose")],i&&(s=r)),"function"!=typeof r&&re("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},ri=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let rr=/(?:ahead ([0-9]+))/,rs=/(?:behind ([0-9]+))/;function ro(e,t,i,r){var s=[];try{let o=rt(s,(0,E.u)(`Git.parseStatus(${i}, v=${r})`,{log:!1,logLevel:"debug"}));if(!t)return;let n=t.split("\n").filter(e=>!!e);if(0===n.length)return;let a=r<2?function(e,t,i){let r,s,o=[],n={ahead:0,behind:0},a=!1,l=-1;for(;++l<t.length;){let c=t[l];if(c.startsWith("##")){let e=c.split(" ");if([r,s]=e[1].split("..."),e.length>2){let t=e.slice(2).join(" ");if("[gone]"===t)a=!0,n.ahead=0,n.behind=0;else{let e=rr.exec(t);n.ahead=null==e?0:Number(e[1])||0;let i=rs.exec(t);n.behind=null==i?0:Number(i[1])||0}}}else{let t=c.substring(0,2),r=c.substring(3);if(t.startsWith("R")||t.startsWith("C")){let[s,n]=r.replace(/"/g,"").split("->");o.push(rn(e,i,t,n.trim(),s.trim()))}else o.push(rn(e,i,t,r))}}return new i5.l(e,(0,T.Fd)(i),r??"","",o,s?{name:s,missing:a,state:n}:void 0)}(e,n,i):function(e,t,i){let r,s,o,n=[],a={ahead:0,behind:0},l=!0,c=-1;for(;++c<t.length;){let u=t[c];if(u.startsWith("#")){let e=u.split(" ");switch(e[1]){case"branch.oid":s=e[2];break;case"branch.head":r=e[2];break;case"branch.upstream":o=e[2];break;case"branch.ab":l=!1,a.ahead=Number(e[2].substring(1)),a.behind=Number(e[3].substring(1))}}else{let t=u.split(" ");switch(t[0][0]){case"1":n.push(rn(e,i,t[1],t.slice(8).join(" ")));break;case"2":{let r=t.slice(9).join(" ").split("	");n.push(rn(e,i,t[1],r[0],r[1]));break}case"u":n.push(rn(e,i,t[1],t.slice(10).join(" ")));break;case"?":n.push(rn(e,i,"??",t.slice(1).join(" ")))}}}return new i5.l(e,(0,T.Fd)(i),r??"",s??"",n,o?{name:o,missing:l,state:a}:void 0)}(e,n,i);return o?.stop({suffix:` parsed ${a.files.length} files`}),a}catch(e){var o=e,n=!0}finally{ri(s,o,n)}}function rn(e,t,i,r,s){let o,n=i.startsWith(".")?void 0:i[0].trim();return(null==n||0===n.length)&&(n=void 0),i.length>1&&(null==(o="."!==i[1]?i[1].trim():void 0)||0===o.length)&&(o=void 0),new GitStatusFile(e,t,n,o,r,s)}var ra=Object.defineProperty,rl=Object.getOwnPropertyDescriptor,rc=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rl(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ra(t,i,o),o};let ru=["rebase-apply","rebase-merge","merge","cherry-pick","revert"];let StatusGitSubProvider=class StatusGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}async getPausedOperationStatus(e){let t=(0,eb.dQ)(),i=this.cache.pausedOperationStatus?.get(e);return null==i&&(i=(async function(){let i=await this.provider.config.getGitDir(e),r=await new Promise((e,t)=>{(0,b.readdir)(i.uri.fsPath,{withFileTypes:!0},(t,i)=>{let r,s=new Set;if(null!=t||0===i.length){e(s);return}for(r of i)if(r.isFile())switch(r.name){case"CHERRY_PICK_HEAD":s.add("cherry-pick");break;case"MERGE_HEAD":s.add("merge");break;case"REVERT_HEAD":s.add("revert")}else if(r.isDirectory())switch(r.name){case"rebase-apply":s.add("rebase-apply");break;case"rebase-merge":s.add("rebase-merge")}e(s)})});if(!r.size)return;let s=[...r].sort((e,t)=>ru.indexOf(e)-ru.indexOf(t));ev.Vy.log(`Detected paused operations: ${s.join(", ")}`);let o=s[0];switch(o){case"cherry-pick":{let i=(await this.git.exec({cwd:e,errors:A.Ignore},"rev-parse","--quiet","--verify","CHERRY_PICK_HEAD"))?.trim();if(!i){(0,eb.TT)(t,"No CHERRY_PICK_HEAD found");return}let r=await this.provider.branches.getCurrentBranchReference(e);return{type:"cherry-pick",repoPath:e,HEAD:(0,tc.kA)(i,e,{refType:"revision"}),current:r,incoming:(0,tc.kA)(i,e,{refType:"revision"})}}case"merge":{let i=(await this.git.exec({cwd:e,errors:A.Ignore},"rev-parse","--quiet","--verify","MERGE_HEAD"))?.trim();if(!i){(0,eb.TT)(t,"No MERGE_HEAD found");return}let[r,s,o]=await Promise.allSettled([this.provider.branches.getCurrentBranchReference(e),this.provider.refs.getMergeBase(e,"MERGE_HEAD","HEAD"),this.provider.branches.getBranchesWithCommits(e,["MERGE_HEAD"],void 0,{all:!0,mode:"pointsAt"})]),n=(0,eC.Ro)(r),a=(0,eC.Ro)(s),l=(0,eC.Ro)(o);return{type:"merge",repoPath:e,mergeBase:a,HEAD:(0,tc.kA)(i,e,{refType:"revision"}),current:n,incoming:l?.length===1?(0,tc.kA)(l[0],e,{refType:"branch",name:l[0],remote:!1}):(0,tc.kA)(i,e,{refType:"revision"})}}case"revert":{let i=(await this.git.exec({cwd:e,errors:A.Ignore},"rev-parse","--quiet","--verify","REVERT_HEAD"))?.trim();if(!i){(0,eb.TT)(t,"No REVERT_HEAD found");return}let r=await this.provider.branches.getCurrentBranchReference(e);return{type:"revert",repoPath:e,HEAD:(0,tc.kA)(i,e,{refType:"revision"}),current:r,incoming:(0,tc.kA)(i,e,{refType:"revision"})}}case"rebase-apply":case"rebase-merge":{let r,s=await this.git.readDotGitFile(i,[o,"head-name"]);if(!s){(0,eb.TT)(t,`No '${o}/head-name' found`);return}let[n,a,l,c,u,h]=await Promise.allSettled([this.git.exec({cwd:e,errors:A.Ignore},"rev-parse","--quiet","--verify","REBASE_HEAD"),this.git.readDotGitFile(i,[o,"orig-head"]),this.git.readDotGitFile(i,[o,"onto"]),this.git.readDotGitFile(i,[o,"msgnum"],{numeric:!0}),this.git.readDotGitFile(i,[o,"end"],{numeric:!0}),this.git.readDotGitFile(i,[o,"message"],{throw:!0}).catch(()=>this.git.readDotGitFile(i,[o,"message-squashed"]))]),d=(0,eC.Ro)(a),p=(0,eC.Ro)(l);if(null==d||null==p){(0,eb.TT)(t,`Neither '${o}/orig-head' nor '${o}/onto' found`);return}let g=(0,eC.Ro)(n)?.trim();s.startsWith("refs/heads/")&&(s=s.substring(11).trim());let[m,f,w]=await Promise.allSettled([null!=g?this.provider.refs.getMergeBase(e,g,"HEAD"):this.provider.refs.getMergeBase(e,p,d),this.provider.branches.getBranchesWithCommits(e,[p],void 0,{all:!0,mode:"pointsAt"}),this.provider.tags.getTagsWithCommit(e,p,{mode:"pointsAt"})]),v=(0,eC.Ro)(m),y=(0,eC.Ro)(f),b=(0,eC.Ro)(w);if(null!=y){for(let t of y)if(!t.startsWith("(no branch, rebasing")){r=(0,tc.kA)(t,e,{refType:"branch",name:t,remote:!1});break}}if(null==r&&null!=b){for(let t of b)if(!t.startsWith("(no branch, rebasing")){r=(0,tc.kA)(t,e,{refType:"tag",name:t});break}}return{type:"rebase",repoPath:e,mergeBase:v,HEAD:(0,tc.kA)(g??d,e,{refType:"revision"}),onto:(0,tc.kA)(p,e,{refType:"revision"}),current:r,incoming:(0,tc.kA)(s,e,{refType:"branch",name:s,remote:!1}),steps:{current:{number:(0,eC.Ro)(c)??0,commit:null!=g?(0,tc.kA)(g,e,{refType:"revision",message:(0,eC.Ro)(h)}):void 0},total:(0,eC.Ro)(u)??0}}}}}).call(this),this.cache.pausedOperationStatus?.set(e,i)),i}async abortPausedOperation(e,t){let i=await this.getPausedOperationStatus(e);if(null!=i)try{switch(i.type){case"cherry-pick":await this.git.exec({cwd:e,errors:A.Throw},"cherry-pick",t?.quit?"--quit":"--abort");break;case"merge":await this.git.exec({cwd:e,errors:A.Throw},"merge",t?.quit?"--quit":"--abort");break;case"rebase":await this.git.exec({cwd:e,errors:A.Throw},"rebase",t?.quit?"--quit":"--abort");break;case"revert":await this.git.exec({cwd:e,errors:A.Throw},"revert",t?.quit?"--quit":"--abort")}}catch(t){ev.Vy.error(t);let e=t?.toString()??"";if(eH.noPausedOperation.test(e))throw new I.ys(I.Qb.NothingToAbort,i.type,`Cannot abort as there is no ${i.type} operation in progress`,t);throw new I.ys(void 0,i.type,`Cannot abort ${i.type}; ${e}`,t)}}async continuePausedOperation(e,t){let i=await this.getPausedOperationStatus(e);if(null!=i)try{switch(i.type){case"cherry-pick":await this.git.exec({cwd:e,errors:A.Throw},"cherry-pick",t?.skip?"--skip":"--continue");break;case"merge":if(t?.skip)throw Error("Skipping a merge is not supported");await this.git.exec({cwd:e,errors:A.Throw},"merge","--continue");break;case"rebase":await this.git.exec({cwd:e,errors:A.Throw},"rebase",t?.skip?"--skip":"--continue");break;case"revert":await this.git.exec({cwd:e,errors:A.Throw},"revert",t?.skip?"--skip":"--abort")}}catch(r){ev.Vy.error(r);let e=r?.toString()??"";if(eH.noPausedOperation.test(e))throw new I.Vu(I.JW.NothingToContinue,i.type,`Cannot ${t?.skip?"skip":"continue"} as there is no ${i.type} operation in progress`,r);if(eH.uncommittedChanges.test(e))throw new I.Vu(I.JW.UncommittedChanges,i.type,`Cannot ${t?.skip?"skip":`continue ${i.type}`} as there are uncommitted changes`,r);if(eH.unmergedFiles.test(e))throw new I.Vu(I.JW.UnmergedFiles,i.type,`Cannot ${t?.skip?"skip":`continue ${i.type}`} as there are unmerged files`,r);if(eH.unresolvedConflicts.test(e))throw new I.Vu(I.JW.UnresolvedConflicts,i.type,`Cannot ${t?.skip?"skip":`continue ${i.type}`} as there are unresolved conflicts`,r);if(eH.unstagedChanges.test(e))throw new I.Vu(I.JW.UnstagedChanges,i.type,`Cannot ${t?.skip?"skip":`continue ${i.type}`} as there are unstaged changes`,r);if(eH.changesWouldBeOverwritten.test(e))throw new I.Vu(I.JW.WouldOverwrite,i.type,`Cannot ${t?.skip?"skip":`continue ${i.type}`} as local changes would be overwritten`,r);throw new I.Vu(void 0,i.type,`Cannot ${t?.skip?"skip":`continue ${i.type}`}; ${e}`,r)}}async getStatus(e){if(null==e)return;let t=await this.git.supports("git:status:porcelain-v2")?2:1,i=await this.git.status(e,t,{similarityThreshold:v.H.get("advanced.similarityThreshold")??void 0}),r=ro(this.container,i,e,t);if(r?.detached){let t=await this.getPausedOperationStatus(e);if(t?.type==="rebase")return new i5.l(this.container,e,t.incoming.name,r.sha,r.files,r.upstream,!0)}return r}async getStatusForFile(e,t){let i=await this.getStatusForPath(e,t);return i?.[0]}async getStatusForPath(e,t){let[i]=(0,D.Uf)(t,e),r=await this.git.supports("git:status:porcelain-v2")?2:1,s=await this.git.status(e,r,{similarityThreshold:v.H.get("advanced.similarityThreshold")??void 0},i),o=ro(this.container,s,e,r);return o?.files}};rc([(0,tp.G)(),(0,ew.Rm)()],StatusGitSubProvider.prototype,"getPausedOperationStatus",1),rc([(0,tp.G)(),(0,ew.Rm)()],StatusGitSubProvider.prototype,"abortPausedOperation",1),rc([(0,tp.G)(),(0,ew.Rm)()],StatusGitSubProvider.prototype,"continuePausedOperation",1),rc([(0,tp.G)(),(0,ew.Rm)()],StatusGitSubProvider.prototype,"getStatus",1),rc([(0,tp.G)(),(0,ew.Rm)()],StatusGitSubProvider.prototype,"getStatusForFile",1),rc([(0,tp.G)(),(0,ew.Rm)()],StatusGitSubProvider.prototype,"getStatusForPath",1);var rh=i(9123),rd=Object.defineProperty,rp=Object.getOwnPropertyDescriptor,rg=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),rm=e=>{throw TypeError(e)},rf=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rp(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rd(t,i,o),o},rw=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&rm("Object expected"),i&&(r=t[rg("asyncDispose")]),void 0===r&&(r=t[rg("dispose")],i&&(s=r)),"function"!=typeof r&&rm("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},rv=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let ry=Object.freeze({values:[]});let TagsGitSubProvider=class TagsGitSubProvider{constructor(e,t,i){this.container=e,this.git=t,this.cache=i}async getTag(e,t){let{values:[i]}=await this.getTags(e,{filter:e=>e.name===t});return i}async getTags(e,t){if(null==e)return ry;let i=(0,eb.dQ)(),r=this.cache.tags?.get(e);null==r&&(r=(async function(){try{var t=[];try{let r=p??=tR({name:"%(refname)",sha:"%(if)%(*objectname)%(then)%(*objectname)%(else)%(objectname)%(end)",date:"%(creatordate:iso8601)",commitDate:"%(authordate:iso8601)",message:"%(subject)"}),s=await this.git.exec({cwd:e},"for-each-ref",...r.arguments,"refs/tags/");if(!s?.length)return ry;let o=rw(t,(0,E.u)(i,{log:!1,logLevel:"debug"})),n=[];for(let t of r.parse(s))n.push(new rh.r(this.container,e,t.name,t.sha,t.message,t.date?new Date(t.date):void 0,t.commitDate?new Date(t.commitDate):void 0));return o?.stop({suffix:` parsed ${n.length} tags`}),{values:n}}catch(e){var r=e,s=!0}finally{rv(t,r,s)}}catch{return this.cache.tags?.delete(e),ry}}).call(this),t?.paging?.cursor==null&&this.cache.tags?.set(e,r));let s=await r;return t?.filter!=null&&(s={...s,values:s.values.filter(t.filter)}),t?.sort&&(0,tA.uO)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getTagsWithCommit(e,t,i){let r=await this.git.branchOrTag__containsOrPointsAt(e,[t],{type:"tag",...i});return r?(0,$.x1)(r.split("\n"),e=>e.trim()||void 0):[]}async createTag(e,t,i,r){try{await this.git.tag(e,t,i,...null!=r&&r.length>0?["-m",r]:[])}catch(e){if(e instanceof I.PC)throw e.withTag(t).withAction("create");throw e}}async deleteTag(e,t){try{await this.git.tag(e,"-d",t)}catch(e){if(e instanceof I.PC)throw e.withTag(t).withAction("delete");throw e}}};rf([(0,ew.Rm)()],TagsGitSubProvider.prototype,"getTag",1),rf([(0,ew.Rm)({args:{1:!1}})],TagsGitSubProvider.prototype,"getTags",1),rf([(0,ew.Rm)()],TagsGitSubProvider.prototype,"getTagsWithCommit",1),rf([(0,ew.Rm)()],TagsGitSubProvider.prototype,"createTag",1),rf([(0,ew.Rm)()],TagsGitSubProvider.prototype,"deleteTag",1);var rb=i(5186),rC=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),rk=e=>{throw TypeError(e)},rS=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&rk("Object expected"),i&&(r=t[rC("asyncDispose")]),void 0===r&&(r=t[rC("dispose")],i&&(s=r)),"function"!=typeof r&&rk("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},rR=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()},rP=Object.defineProperty,rA=Object.getOwnPropertyDescriptor,rI=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rA(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rP(t,i,o),o};let WorktreesGitSubProvider=class WorktreesGitSubProvider{constructor(e,t,i,r){this.container=e,this.git=t,this.cache=i,this.provider=r}async createWorktree(e,t,i){let r=(0,eb.dQ)();try{await this.git.exec({cwd:e},"worktree","add",i?.force?"--force":void 0,...i?.createBranch?["-b",i.createBranch]:[],i?.detach?"--detach":void 0,t,i?.commitish||void 0),this.container.events.fire("git:cache:reset",{repoPath:e,types:i?.createBranch?["branches","worktrees"]:["worktrees"]})}catch(t){ev.Vy.error(t,r);let e=String(t);if(eH.alreadyCheckedOut.test(e))throw new I.iX(I.O7.AlreadyCheckedOut,t);if(eH.alreadyExists.test(e))throw new I.iX(I.O7.AlreadyExists,t);throw new I.iX(void 0,t)}}async createWorktreeWithResult(e,t,i){await this.createWorktree(e,t,i);let r=(0,T.Fd)(t);return this.getWorktree(e,e=>(0,T.Fd)(e.uri.fsPath)===r)}async getWorktree(e,t){return(await this.getWorktrees(e)).find(t)}async getWorktrees(e){await this.git.ensureSupports("git:worktrees:list","Displaying worktrees"," Please install a more recent version of Git and try again.");let t=this.cache.worktrees?.get(e);return null==t&&(t=(async function(){try{let[t,i]=await Promise.all([this.git.exec({cwd:e},"worktree","list","--porcelain"),this.provider.branches.getBranches(e)]);return function(e,t,i,r){var s=[];try{let o,n,a,l,c,u,h,d=rS(s,(0,E.u)(`Git.parseWorktrees(${i})`,{log:!1,logLevel:"debug"})),p=[];if(!t)return p;null!=i&&(i=(0,T.Fd)(i));let g=!0;for(o of(0,_.HX)(t)){if(n=o.indexOf(" "),-1===n?(a=o,l=""):(a=o.substring(0,n),l=o.substring(n+1)),0===a.length&&null!=h){let t=h.branch?r?.find(e=>e.name===h.branch):void 0;p.push(new rb.y(e,g,h.bare?"bare":h.detached?"detached":"branch",i,w.Uri.file(h.path),h.locked??!1,h.prunable??!1,h.sha,t)),h=void 0,g=!1;continue}switch(null==h&&(h={}),a){case"worktree":h.path=l;break;case"bare":h.bare=!0;break;case"HEAD":h.sha=l;break;case"branch":h.branch=l.substring(11);break;case"detached":h.detached=!0;break;case"locked":[,c]=l.split(" ",2),h.locked=c?.trim()||!0;break;case"prunable":[,u]=l.split(" ",2),h.prunable=u?.trim()||!0}}return d?.stop({suffix:` parsed ${p.length} worktrees`}),p}catch(e){var o=e,n=!0}finally{rR(s,o,n)}}(this.container,t,e,i.values)}catch(t){throw this.cache.worktrees?.delete(e),t}}).call(this),this.cache.worktrees?.set(e,t)),t}async getWorktreesDefaultUri(e){let t=this.getWorktreesDefaultUriCore(e);if(null!=t)return t;let i=this.container.git.getRepository(e);return null!=(t=await i?.getCommonRepositoryUri()??i?.uri)&&(t=w.Uri.joinPath(t,"..")),t}getWorktreesDefaultUriCore(e){let t=v.H.get("worktrees.defaultLocation");if(null==t)return;t.startsWith("~")&&(t=(0,T.HS)((0,t5.homedir)(),t.slice(1)));let i=this.container.git.getRepository(e)?.folder;return t=(0,_.GW)(t,{userHome:(0,t5.homedir)(),workspaceFolder:i?.uri.fsPath,workspaceFolderBasename:i?.name}),this.provider.getAbsoluteUri(t,e)}async deleteWorktree(e,t,i){let r=(0,eb.dQ)();await this.git.ensureSupports("git:worktrees:delete","Deleting worktrees"," Please install a more recent version of Git and try again."),t=(0,T.Fd)("string"==typeof t?t:t.fsPath);try{await this.git.exec({cwd:e,errors:A.Throw},"worktree","remove",i?.force?"--force":void 0,t)}catch(i){ev.Vy.error(i,r);let e=String(i);if(eH.mainWorkingTree.test(e))throw new I.N$(I.z2.DefaultWorkingTree,i);if(eH.uncommittedChanges.test(e))throw new I.N$(I.z2.HasChanges,i);if(eH.failedToDeleteDirectoryNotEmpty.test(e)){ev.Vy.warn(r,`Failed to fully delete worktree '${t}' because it is not empty. Attempting to delete it manually.`,r);try{await b.promises.rm(t,{force:!0,recursive:!0});return}catch(e){if(eS){let i=/EPERM: operation not permitted, unlink '(.*?)'/i.exec(e.message);if(null!=i){ev.Vy.warn(r,`Failed to manually delete '${t}' because it is in use. Attempting to forcefully delete it.`,r);let[,e]=i;try{await new Promise((t,i)=>{(0,y.exec)(`del "${e}"`,(e,r,s)=>{e?i(e instanceof Error?e:Error(e)):s?i(Error(s)):t(r)})}),await b.promises.rm(t,{force:!0,recursive:!0,maxRetries:1,retryDelay:1});return}catch(e){ev.Vy.error(e,r,`Failed to forcefully delete '${t}' because it is in use.`,r)}}}throw new I.N$(I.z2.DirectoryNotEmpty,e)}}throw new I.N$(void 0,i)}finally{this.container.events.fire("git:cache:reset",{repoPath:e,types:["worktrees"]})}}};rI([(0,ew.Rm)()],WorktreesGitSubProvider.prototype,"createWorktree",1),rI([(0,ew.Rm)()],WorktreesGitSubProvider.prototype,"getWorktree",1),rI([(0,ew.Rm)()],WorktreesGitSubProvider.prototype,"getWorktrees",1),rI([(0,ew.Rm)()],WorktreesGitSubProvider.prototype,"getWorktreesDefaultUri",1),rI([(0,ew.Rm)()],WorktreesGitSubProvider.prototype,"deleteWorktree",1);var rD=Object.defineProperty,r$=Object.getOwnPropertyDescriptor,rT=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?r$(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rD(t,i,o),o};let rE=Promise.resolve(void 0),r_={doesNotExist:/no such file or directory/i},rO=/(?<=^\/?)([a-zA-Z])(?=:\/)/;let LocalGitProvider=class LocalGitProvider{constructor(e,t){this.container=e,this.git=t,this._cache=new e0.V(this.container),this._disposables.push(this._onDidChange,this._onWillChangeRepository,this._onDidChangeRepository,this._onDidCloseRepository,this._onDidOpenRepository,this._cache),this.git.setLocator(this.ensureGit.bind(this))}descriptor={id:"git",name:"Git",virtual:!1};supportedSchemes=new Set([R.xB.File,R.xB.Git,R.xB.GitLens,R.xB.PRs]);_onDidChange=new w.EventEmitter;get onDidChange(){return this._onDidChange.event}_onWillChangeRepository=new w.EventEmitter;get onWillChangeRepository(){return this._onWillChangeRepository.event}_onDidChangeRepository=new w.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}_onDidCloseRepository=new w.EventEmitter;get onDidCloseRepository(){return this._onDidCloseRepository.event}_onDidOpenRepository=new w.EventEmitter;get onDidOpenRepository(){return this._onDidOpenRepository.event}_cache;_disposables=[];dispose(){this._disposables.forEach(e=>void e.dispose())}get useCaching(){return v.H.get("advanced.caching.enabled")}onRepositoryChanged(e,t){t.changed(e4.Z_.Config,e4.Ti.Any)&&this._cache.repoInfo?.delete(e.path),t.changed(e4.Z_.Heads,e4.Z_.Remotes,e4.Ti.Any)&&(this._cache.branch?.delete(e.path),this._cache.branches?.delete(e.path),this._cache.contributors?.delete(e.path),this._cache.worktrees?.delete(e.path)),t.changed(e4.Z_.Remotes,e4.Z_.RemoteProviders,e4.Ti.Any)&&(this._cache.remotes?.delete(e.path),this._cache.bestRemotes?.delete(e.path)),t.changed(e4.Z_.Index,e4.Z_.Unknown,e4.Ti.Any)&&this._cache.trackedPaths.clear(),t.changed(e4.Z_.CherryPick,e4.Z_.Merge,e4.Z_.Rebase,e4.Z_.Revert,e4.Ti.Any)&&(this._cache.branch?.delete(e.path),this._cache.pausedOperationStatus?.delete(e.path)),t.changed(e4.Z_.Stash,e4.Ti.Any)&&this._cache.stashes?.delete(e.path),t.changed(e4.Z_.Tags,e4.Ti.Any)&&this._cache.tags?.delete(e.path),t.changed(e4.Z_.Worktrees,e4.Ti.Any)&&this._cache.worktrees?.delete(e.path),this._onWillChangeRepository.fire(t)}_gitLocator;async ensureGit(){return null==this._gitLocator&&(this._gitLocator=this.findGit()),this._gitLocator}async findGit(){let e=(0,eb.dQ)();if(!v.H.getCore("git.enabled",null,!0))throw ev.Vy.log(e,'Built-in Git is disabled ("git.enabled": false)'),(0,th.D5)(),new UnableToFindGitError;let t=this.getScmGitApi();(async function(){var i;let r=await t;if(null==r)return;if(i=this.container,"function"==typeof r.registerCommitMessageProvider&&new AICommitMessageProvider(i,r),"env"in r.git)ev.Vy.debug(e,"Found built-in Git env"),this.git.setEnv(r.git.env);else for(let t of Object.values(r.git))if(null!=t&&"object"==typeof t&&"git"in t){for(let i of Object.values(t.git))if(null!=i&&"object"==typeof i&&"GIT_ASKPASS"in i){ev.Vy.debug(e,"Found built-in Git env"),this.git.setEnv(i);break}}let s=new Set,o=(0,tg.s)(()=>{if(!this.container.deactivating){for(let e of s)this._onDidCloseRepository.fire({uri:e});s.clear()}},1e3);for(let e of(this._disposables.push(r.onDidCloseRepository(e=>{this.container.deactivating||(s.add(e.rootUri),o())}),r.onDidOpenRepository(e=>this._onDidOpenRepository.fire({uri:e.rootUri}))),r.repositories))this._onDidOpenRepository.fire({uri:e.rootUri})}).call(this);let i=v.H.get("advanced.caching.gitPath"),r=v.H.getCore("git.path")??(i?this.container.storage.getWorkspace("gitPath"):void 0),s=(0,S.k)(),o=tk(r),n=t.then(e=>{let t=e?.git.path;if(!t)return o;if(null!=r){if("string"==typeof r){if(t===r)return o}else if(r.includes(t))return o}return tk(t,!1)}),a=await (0,eC.bz)(o,n);return setTimeout(()=>void this.container.storage.storeWorkspace("gitPath",i?a.path:void 0).catch(),1e3),null!=e?(0,eb.TT)(e,` ${R.EO.Dot} Git (${a.version}) found in ${"git"===a.path?"PATH":a.path}`):ev.Vy.log(e,`Git (${a.version}) found in ${"git"===a.path?"PATH":a.path} [${(0,_.$l)(s)}ms]`),-1===(0,ek.UD)((0,ek.sH)(a.version),(0,ek.sH)("2.7.2"))&&(ev.Vy.log(e,`Git version (${a.version}) is outdated`),(0,th.o2)(a.version,"2.7.2")),a}async discoverRepositories(e,t){if(e.scheme!==R.xB.File)return[];try{let i=v.H.getCore("git.autoRepositoryDetection")??!0,r=w.workspace.getWorkspaceFolder(e);if(null==r&&!t?.silent||(await this.ensureGit(),t?.cancellation?.isCancellationRequested))return[];let s=await this.repositorySearch(r??e,t?.depth??(!1===i||"openEditors"===i?0:void 0),t?.cancellation,t?.silent);if(!t?.silent&&(!0===i||"subFolders"===i))for(let e of s)this.getOrOpenScmRepository(e.uri);return!t?.silent&&s.length>0&&this._cache.trackedPaths.clear(),s}catch(e){if(e instanceof InvalidGitConfigError)(0,th._o)();else if(e instanceof UnableToFindGitError)(0,th.JS)();else{let i=e?.message??"";i&&!t?.silent&&w.window.showErrorMessage(`Unable to initialize Git; ${i}`)}throw e}}openRepository(e,t,i,r,s){s||this.getOrOpenScmRepository(t);let o=[new e4.LN(this.container,{onDidRepositoryChange:this._onDidChangeRepository,onRepositoryChanged:this.onRepositoryChanged.bind(this)},this.descriptor,e??w.workspace.getWorkspaceFolder(t),t,i,r??!w.window.state.focused,s)],n=this.toCanonicalMap.get((0,D.Sp)(t));return null!=n&&null==this.container.git.getRepository(n)&&o.push(new e4.LN(this.container,{onDidRepositoryChange:this._onDidChangeRepository,onRepositoryChanged:this.onRepositoryChanged.bind(this)},this.descriptor,e??w.workspace.getWorkspaceFolder(n),n,i,r??!w.window.state.focused,!0)),o}openRepositoryInitWatcher(){let e=w.workspace.createFileSystemWatcher("**/.git",!1,!0,!0);return{onDidCreate:e.onDidCreate,dispose:e.dispose}}_supportedFeatures=new Map;async supports(e){let t=this._supportedFeatures.get(e);if(null!=t)return t;switch(e){case"stashes":case"timeline":t=!0;break;default:t=!e.startsWith("git:")||await this.git.supports(e)}return this._supportedFeatures.set(e,t),t}async visibility(e){let t=await this.remotes.getRemotes(e,{sort:!0});if(0===t.length)return["local",void 0];let i=!0;for await(let e of(0,eC.w)(t.map(e=>this.getRemoteVisibility(e))))if("fulfilled"===e.status){if("public"===e.value[0])return["public",(0,tu.U6)(e.value[1])];"local"!==e.value[0]&&(i=!1)}return i?["local",void 0]:["private",(0,tu.U6)(t)]}_pendingRemoteVisibility=new Map;async getRemoteVisibility(e){let t,i=(0,eb.dQ)();switch(e.provider?.id){case"github":case"gitlab":case"bitbucket":case"azure-devops":case"gitea":case"gerrit":case"google-source":if(null==(t=await e.provider.url({type:e5.J.Repo})))return["private",e];break;default:{if(!(t=e.url).includes("git@"))return(0,T.bm)(t)?["private",e]:["local",e];let[i,r]=t.split("@")[1].split(":");if(!i||!r)return["private",e];t=`https://${i}/${r}`}}let r=this._pendingRemoteVisibility.get(t);if(null==r){let e=new AbortController,i=setTimeout(()=>e.abort(),3e4);(r=(0,eJ.hd)(t,{method:"HEAD",agent:(0,eJ.cQ)(),signal:e.signal})).finally(()=>clearTimeout(i)),this._pendingRemoteVisibility.set(t,r)}try{let t=await r;if(t.ok)return["public",e];ev.Vy.debug(i,`Response=${t.status}`)}catch(e){ev.Vy.error(e,i)}finally{this._pendingRemoteVisibility.delete(t)}return["private",e]}async repositorySearch(e,t,i,r){let s,o,n,a,l,c=(0,eb.dQ)();e instanceof w.Uri?(o=e,s=w.workspace.getWorkspaceFolder(o)):o=e.uri,t=t??v.H.get("advanced.repositorySearchDepth",o)??v.H.getCore("git.repositoryScanMaxDepth",o,1),ev.Vy.log(c,`searching (depth=${t})...`);let u=[];function h(e,t,i){let s=(0,td.dX)(e);if(u.some(e=>e.id===s)){ev.Vy.log(c,`found ${i?"root ":""}repository in '${e.fsPath}'; skipping - duplicate`);return}let o=this.container.git.getRepository(e);if(null!=o){o.closed&&!1===r&&(o.closed=!1),ev.Vy.log(c,`found ${i?"root ":""}repository in '${e.fsPath}'; skipping - already open`);return}ev.Vy.log(c,`found ${i?"root ":""}repository in '${e.fsPath}'`),u.push(...this.openRepository(t,e,i,void 0,r))}let d=await this.findRepositoryUri(o,!0);if(null!=d){n=(0,T.Fd)(d.fsPath);let e=this.toCanonicalMap.get((0,D.Sp)(d));null!=e&&(a=(0,T.Fd)(e.fsPath)),h.call(this,d,s,!0)}if(t<=0||i?.isCancellationRequested)return u;let p=new Set(v.H.getCore("git.repositoryScanIgnoredFolders",o,[]));for(let[e,t]of Object.entries({...v.H.getCore("files.exclude",o,{}),...v.H.getCore("search.exclude",o,{})}))t&&(e.includes("*.")||(e.startsWith("**/")&&(e=e.substring(3)),p.add(e)));try{l=await this.repositorySearchCore(o.fsPath,t,p,i)}catch(t){let e=t?.toString()??"";return r_.doesNotExist.test(e)?ev.Vy.log(c,`FAILED${e?` Error: ${e}`:""}`):ev.Vy.error(t,c,"FAILED"),u}for(let e of l){e=(0,T.pD)(e);let t=(0,T.Fd)(e);if(eX.j9&&(t===n||null!=a&&t===a)||(0,_.Q_)(t,n)||null!=a&&(0,_.Q_)(t,a))continue;ev.Vy.log(c,`searching in '${e}'...`),ev.Vy.debug(c,`normalizedRepoPath=${t}, rootPath=${n}, canonicalRootPath=${a}`);let i=await this.findRepositoryUri(w.Uri.file(e),!0);null!=i&&h.call(this,i,s,!1)}return u}repositorySearchCore(e,t,i,r,s=[]){let o=(0,eb.dQ)();return r?.isCancellationRequested?Promise.resolve(s):new Promise((n,a)=>{(0,b.readdir)(e,{withFileTypes:!0},async(l,c)=>{let u;if(null!=l){a(l);return}if(0===c.length){n(s);return}for(u of(t--,c)){if(r?.isCancellationRequested)break;if(".git"===u.name)s.push((0,C.resolve)(e,u.name));else if(t>=0&&u.isDirectory()&&!i.has(u.name))try{await this.repositorySearchCore((0,C.resolve)(e,u.name),t,i,r,s)}catch(e){ev.Vy.error(e,o,"FAILED")}}n(s)})})}canHandlePathOrUri(e,t){if(this.supportedSchemes.has(e))return(0,D.Sp)(t)}getAbsoluteUri(e,t){if("string"==typeof t)if((0,T.bm)(t))t=w.Uri.parse(t,!0);else{if(!(0,T.oP)(t))throw w.window.showErrorMessage(`Unable to get absolute uri between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be an absolute path`),Error(`Base path '${t}' must be an absolute path`);t=w.Uri.file(t)}if("string"==typeof e){let i=(0,T.Fd)(e);if(!(0,T.oP)(i))return w.Uri.joinPath(t,i)}let i=this.getRelativePath(e,t);return w.Uri.joinPath(t,i)}async getBestRevisionUri(e,t,i){if(i!==L.nB){if(!i||(0,em._k)(i)&&!(0,em.KH)(i)){let i=await this.git.ls_files(e,t);return null!=i||null!=(i=await this.git.ls_files(e,t,{untracked:!0}))?this.getAbsoluteUri(t,e):void 0}if((0,em.KH)(i)){let i=await this.getScmRepository(e);if(null==i){let t=this.fromCanonicalMap.get(e);null!=t&&(i=await this.getScmRepository(t.fsPath))}if(null!=i)return this.getScmGitUri(t,e)}return this.getRevisionUri(e,t,i)}}getRelativePath(e,t){if("string"==typeof t)if((0,T.bm)(t))t=w.Uri.parse(t,!0);else{if(!(0,T.oP)(t))throw w.window.showErrorMessage(`Unable to get relative path between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be an absolute path`),Error(`Base path '${t}' must be an absolute path`);t=w.Uri.file(t)}if("string"==typeof e)if((0,T.bm)(e))e=w.Uri.parse(e,!0);else{if(!(0,T.oP)(e))return(0,T.Fd)(e);e=w.Uri.file(e)}let i=(0,D.V8)(t.fsPath,e.fsPath);return(0,T.Fd)(i)}getRevisionUri(e,t,i){let r;if((0,em._k)(i)&&!(0,em.KH)(i))return this.getAbsoluteUri(t,e);if((t=(0,T.Fd)(this.getAbsoluteUri(t,e).fsPath)).startsWith("//")){let e=t.indexOf("/",2);r=t.substring(0,e),t=t.substring(e)}47!==t.charCodeAt(0)&&(t=`/${t}`);let s={ref:i,repoPath:(0,T.Fd)(e),uncPath:r};return w.Uri.from({scheme:R.xB.GitLens,authority:(0,e2.Vl)(s),path:t,query:i?JSON.stringify({ref:(0,em.pV)(i).replaceAll("/"," ∕ ")}):void 0})}async getWorkingUri(e,t){let i,r,s=this.getRelativePath(t,e);for(;;){if(null!=(i=await this.git.ls_files(e,s))){s=(0,_.Br)(i,"\n")[0];break}let t=v.H.get("advanced");if(null==(r=await this.git.log__file_recent(e,s,{ordering:t.commitOrdering,similarityThreshold:t.similarityThreshold})))return;if(null==(i=await this.git.log__file(e,".",r,{argsOrFormat:eu,fileMode:"simple",filters:["R","C","D"],limit:1,ordering:t.commitOrdering}))||0===i.length)break;let[o,n,a]=ep(i,s);if("D"===a&&null!=n)return;if(null==o||null==n)break;s=n}return t=this.getAbsoluteUri(s,e),await e_(t.fsPath)?t:void 0}async applyChangesToWorkingFile(e,t,i){let r,s=(0,eb.dQ)();if(null==(t=t??e.sha)||null==e.repoPath)return;null==i&&(i=t,t=`${t}^`);let[o,n]=(0,D.Uf)(e,e.repoPath);try{r=await this.git.diff(n,o,t,i),await this.git.exec({cwd:n,stdin:r},"apply","--whitespace=warn")}catch(t){let e=t?.toString()??"";if(r&&/patch does not apply/i.test(e)){let e=await w.window.showWarningMessage("Unable to apply changes cleanly. Retry and allow conflicts?",{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"Yes"!==e.title)return;if("Yes"===e.title)try{await this.git.exec({cwd:n,stdin:r},"apply","--whitespace=warn","--3way");return}catch(e){t=e}}ev.Vy.error(t,s),(0,th.qQ)("Unable to apply changes")}}async checkout(e,t,i){let r=(0,eb.dQ)();try{await this.git.checkout(e,t,i),this.container.events.fire("git:cache:reset",{repoPath:e,types:["branches","status"]})}catch(i){let e=i?.toString()??"";if(/overwritten by checkout/i.test(e)){(0,th.qQ)(`Unable to checkout '${t}'. Please commit or stash your changes before switching branches`);return}ev.Vy.error(i,r),(0,th.qQ)(`Unable to checkout '${t}'`)}}async clone(e,t){let i=(0,eb.dQ)();try{return await this.git.clone(e,t)}catch(t){ev.Vy.error(t,i),(0,th.qQ)(`Unable to clone '${e}'`)}}async excludeIgnoredUris(e,t){let i=new Map(t.map(e=>[(0,T.Fd)(e.fsPath),e])),r=await this.git.exec({cwd:e,errors:A.Ignore,stdin:(0,tm.fj)(i.keys(),"\0")},"check-ignore","-z","--stdin");if(null==r)return t;let s=r.split("\0").filter(e=>!!e);if(0===s.length)return t;for(let e of s)i.delete(e);return[...i.values()]}async fetch(e,t){let i=(0,eb.dQ)(),{branch:r,...s}=t??{};try{if((0,tc.gC)(r)){let[i,s]=(0,tl.He)(r);if(null==s)return;await this.git.fetch(e,{branch:i,remote:s,upstream:(0,tl.UJ)(r),pull:t?.pull})}else await this.git.fetch(e,s);this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(ev.Vy.error(e,i),!I.fk.is(e))throw e;w.window.showErrorMessage(e.message)}}async push(e,t){let i,r,s,o,n,a=(0,eb.dQ)();if((0,tc.gC)(t?.reference))null!=t.publish?(i=t.reference.name,r=t.publish.remote):[i,r]=(0,tl.He)(t.reference),s=(0,tl.UJ)(t.reference);else{let n=await this.branches.getBranch(e);if(null==n)return;i=t?.reference!=null?`${t.reference.ref}:${t?.publish!=null?"refs/heads/":""}${n.getNameWithoutRemote()}`:n.name,r=n.getRemoteName()??t?.publish?.remote,s=t?.reference==null&&t?.publish!=null?n.name:void 0,t?.publish?.remote!=null&&t?.reference!=null&&(o={branch:n.getNameWithoutRemote(),remote:r,remoteBranch:n.getNameWithoutRemote()})}if(t?.publish==null&&null==r&&null==s)throw new I.Vc(I.b9.Other);if(t?.force){let e=v.H.getCore("git.useForcePushWithLease")??!0;n=e?{withLease:e,ifIncludes:v.H.getCore("git.useForcePushIfIncludes")??!0}:{withLease:e}}try{await this.git.push(e,{branch:i,remote:r,upstream:s,force:n,publish:t?.publish!=null}),null!=o&&await this.git.exec({cwd:e},"branch","--set-upstream-to",`${o.remote}/${o.remoteBranch}`,o.branch),this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(ev.Vy.error(e,a),!I.Vc.is(e))throw e;w.window.showErrorMessage(e.message)}}async pull(e,t){let i=(0,eb.dQ)();try{await this.git.pull(e,{rebase:t?.rebase,tags:t?.tags}),this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(ev.Vy.error(e,i),!I.YX.is(e))throw e;w.window.showErrorMessage(e.message)}}toCanonicalMap=new Map;fromCanonicalMap=new Map;unsafePaths=new Set;async findRepositoryUri(e,t){let i,r=(0,eb.dQ)();try{let s;if(null==t&&(t=await (0,D.ZA)(e)),t||(e=w.Uri.joinPath(e,"..")),[s,i]=await this.git.rev_parse__show_toplevel(e.fsPath),s?this.unsafePaths.delete(e.fsPath):!1===s&&this.unsafePaths.add(e.fsPath),!i)return;let o=w.Uri.file(i);if(eX.uF&&0!==o.authority.length&&0===e.authority.length){let t=rO.exec(e.path);if(null!=t){let[,e]=t;try{let t=await new Promise(t=>b.realpath.native(`${e}:\\`,{encoding:"utf8"},(e,i)=>t(null!=e?void 0:i)));if(null!=t){let r=(0,T.vc)(o.fsPath,t);return i=(0,T.Fd)(o.fsPath.replace(t,`${e.toLowerCase()}:${r||t.endsWith("\\")?"\\":""}`)),w.Uri.file(i)}}catch{}}return w.Uri.file((0,T.Fd)(e.fsPath))}let n=this.toCanonicalMap.get(i);if(null==n){let t;[i,t]=await new Promise(t=>{(0,b.realpath)(e.fsPath,{encoding:"utf8"},(s,o)=>{if(null!=s){ev.Vy.debug(r,`fs.realpath failed; repoPath=${i}`),t([i,void 0]);return}if((0,T.vc)(e.fsPath,o)){ev.Vy.debug(r,`No symlink detected; repoPath=${i}`),t([i,void 0]);return}let n=(0,T.Fd)(o),a=(0,T.vO)(`${i}/`,`${n}/`,"/"),l=(0,T.Fd)(e.fsPath);n=a<n.length-1?l.substring(0,l.length-(n.length-a)):l,ev.Vy.debug(r,`Symlink detected; repoPath=${i}, path=${e.fsPath}, resolvedPath=${o}`),t([i,n])})}),null!=t&&(this.toCanonicalMap.set(i,w.Uri.file(t)),this.fromCanonicalMap.set(t,w.Uri.file(i)))}return i?w.Uri.file(i):void 0}catch(e){ev.Vy.error(e,r);return}}async getBlame(e,t){let i=(0,eb.dQ)();if(t?.isDirty)return this.getBlameContents(e,t.getText());let r="blame";null!=e.sha&&(r+=`:${e.sha}`);let s=await this.container.documentTracker.getOrAdd(t??e);if(this.useCaching){if(null!=s.state){let e=s.state.getBlame(r);if(null!=e)return ev.Vy.debug(i,`Cache hit: '${r}'`),e.item}ev.Vy.debug(i,`Cache miss: '${r}'`),s.state??=new tf.VV}let o=this.getBlameCore(e,s,r,i);return null!=s.state&&(ev.Vy.debug(i,`Cache add: '${r}'`),s.state.setBlame(r,{item:o})),o}async getBlameCore(e,t,i,r){let s=await this.isTrackedWithDetails(e);if(null==s)return ev.Vy.log(r,`Skipping blame; '${e.fsPath}' is not tracked`),rE;let[o,n]=s;try{let[t,i,r]=await Promise.allSettled([this.git.blame(n,o,{ref:e.sha,args:v.H.get("advanced.blame.customArguments"),ignoreWhitespace:v.H.get("blame.ignoreWhitespace")}),this.config.getCurrentUser(n),w.workspace.fs.stat(e)]);return e8(this.container,n,(0,eC.Ro)(t),(0,eC.Ro)(i),(0,eC.Ro)(r)?.mtime)}catch(e){if(ev.Vy.error(e,r),null!=t.state){let s=e?.toString()??"";return ev.Vy.debug(r,`Cache replace (with empty promise): '${i}'; reason=${s}`),t.state.setBlame(i,{item:rE,errorMessage:s}),t.setBlameFailure(e),(e instanceof I.S0||e instanceof I.UM)&&(0,th.Dg)(e),rE}return}}async getBlameContents(e,t){let i=(0,eb.dQ)(),r=`blame:${(0,eZ.Fx)(t)}`,s=await this.container.documentTracker.getOrAdd(e);if(this.useCaching){if(null!=s.state){let e=s.state.getBlame(r);if(null!=e)return ev.Vy.debug(i,`Cache hit: ${r}`),e.item}ev.Vy.debug(i,`Cache miss: ${r}`),s.state??=new tf.VV}let o=this.getBlameContentsCore(e,t,s,r,i);return null!=s.state&&(ev.Vy.debug(i,`Cache add: '${r}'`),s.state.setBlame(r,{item:o})),o}async getBlameContentsCore(e,t,i,r,s){let o=await this.isTrackedWithDetails(e);if(null==o)return ev.Vy.log(s,`Skipping blame; '${e.fsPath}' is not tracked`),rE;let[n,a]=o;try{let[i,s,o]=await Promise.allSettled([this.git.blame(a,n,{contents:t,args:v.H.get("advanced.blame.customArguments"),correlationKey:`:${r}`,ignoreWhitespace:v.H.get("blame.ignoreWhitespace")}),this.config.getCurrentUser(a),w.workspace.fs.stat(e)]);return e8(this.container,a,(0,eC.Ro)(i),(0,eC.Ro)(s),(0,eC.Ro)(o)?.mtime)}catch(e){if(ev.Vy.error(e,s),null!=i.state){let t=e?.toString()??"";return ev.Vy.debug(s,`Cache replace (with empty promise): '${r}'; reason=${t}`),i.state.setBlame(r,{item:rE,errorMessage:t}),i.setBlameFailure(e),(e instanceof I.S0||e instanceof I.UM)&&(0,th.Dg)(e),rE}return}}async getBlameForLine(e,t,i,r){if(i?.isDirty)return this.getBlameForLineContents(e,t,i.getText(),r);let s=(0,eb.dQ)();if(!r?.forceSingleLine&&this.useCaching){let r=await this.getBlame(e,i);if(null==r)return;let s=r.lines[t];if(null==s){if(r.lines.length!==t)return;s=r.lines[t-1]}let o=r.commits.get(s.sha);if(null==o)return;return{author:{...r.authors.get(o.author.name),lineCount:o.lines.length},commit:o,line:s}}let o=t+1,[n,a]=(0,D.Uf)(e,e.repoPath);try{let[i,r,s]=await Promise.allSettled([this.git.blame(a,n,{ref:e.sha,args:v.H.get("advanced.blame.customArguments"),ignoreWhitespace:v.H.get("blame.ignoreWhitespace"),startLine:o,endLine:o}),this.config.getCurrentUser(a),w.workspace.fs.stat(e)]),l=e8(this.container,a,(0,eC.Ro)(i),(0,eC.Ro)(r),(0,eC.Ro)(s)?.mtime);if(null==l)return;return{author:(0,tm.$1)(l.authors.values()),commit:(0,tm.$1)(l.commits.values()),line:l.lines[t]}}catch(e){ev.Vy.error(e,s),(e instanceof I.S0||e instanceof I.UM)&&(0,th.Dg)(e);return}}async getBlameForLineContents(e,t,i,r){if(!r?.forceSingleLine&&this.useCaching){let r=await this.getBlameContents(e,i);if(null==r)return;let s=r.lines[t];if(null==s){if(r.lines.length!==t)return;s=r.lines[t-1]}let o=r.commits.get(s.sha);if(null==o)return;return{author:{...r.authors.get(o.author.name),lineCount:o.lines.length},commit:o,line:s}}let s=t+1,[o,n]=(0,D.Uf)(e,e.repoPath);try{let[r,a,l]=await Promise.allSettled([this.git.blame(n,o,{contents:i,args:v.H.get("advanced.blame.customArguments"),ignoreWhitespace:v.H.get("blame.ignoreWhitespace"),startLine:s,endLine:s}),this.config.getCurrentUser(n),w.workspace.fs.stat(e)]),c=e8(this.container,n,(0,eC.Ro)(r),(0,eC.Ro)(a),(0,eC.Ro)(l)?.mtime);if(null==c)return;return{author:(0,tm.$1)(c.authors.values()),commit:(0,tm.$1)(c.commits.values()),line:c.lines[t]}}catch{return}}async getBlameForRange(e,t){let i=await this.getBlame(e);if(null!=i)return this.getBlameRange(i,e,t)}async getBlameForRangeContents(e,t,i){let r=await this.getBlameContents(e,i);if(null!=r)return this.getBlameRange(r,e,t)}getBlameRange(e,t,i){if(0===e.lines.length||0===i.start.line&&i.end.line===e.lines.length-1)return e;let r=e.lines.slice(i.start.line,i.end.line+1),s=new Set(r.map(e=>e.sha)),o=i.start.line+1,n=i.end.line+1,a=new Map,l=new Map;for(let t of e.commits.values()){if(!s.has(t.sha))continue;let e=t.with({lines:t.lines.filter(e=>e.line>=o&&e.line<=n)});l.set(t.sha,e);let i=a.get(e.author.name);null==i&&(i={name:e.author.name,lineCount:0},a.set(i.name,i)),i.lineCount+=e.lines.length}let c=new Map([...a.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return{repoPath:t.repoPath,authors:c,commits:l,lines:r}}async getDiffForFile(e,t,i){let r=(0,eb.dQ)(),s="diff";null!=t&&(s+=`:${t}`),null!=i&&(s+=`:${i}`);let o=await this.container.documentTracker.getOrAdd(e);if(this.useCaching){if(null!=o.state){let e=o.state.getDiff(s);if(null!=e)return ev.Vy.debug(r,`Cache hit: '${s}'`),e.item}ev.Vy.debug(r,`Cache miss: '${s}'`),o.state??=new tf.VV}let n=await rx(e),a=this.getDiffForFileCore(e.repoPath,e.fsPath,t,i,{encoding:n},o,s,r);return null!=o.state&&(ev.Vy.debug(r,`Cache add: '${s}'`),o.state.setDiff(s,{item:a})),a}async getDiffForFileCore(e,t,i,r,s,o,n,a){let[l,c]=(0,D.Uf)(t,e);try{let e=await this.git.diff(c,l,i,r,{...s,filters:["M"],linesOfContext:0,renames:!0,similarityThreshold:v.H.get("advanced.similarityThreshold")});return tn(e)}catch(e){if(null!=o.state){let t=e?.toString()??"";return ev.Vy.debug(a,`Cache replace (with empty promise): '${n}'`),o.state.setDiff(n,{item:rE,errorMessage:t}),rE}return}}async getDiffForFileContents(e,t,i){let r=(0,eb.dQ)(),s=`diff:${(0,eZ.Fx)(i)}`,o=await this.container.documentTracker.getOrAdd(e);if(this.useCaching){if(null!=o.state){let e=o.state.getDiff(s);if(null!=e)return ev.Vy.debug(r,`Cache hit: ${s}`),e.item}ev.Vy.debug(r,`Cache miss: ${s}`),o.state??=new tf.VV}let n=await rx(e),a=this.getDiffForFileContentsCore(e.repoPath,e.fsPath,t,i,{encoding:n},o,s,r);return null!=o.state&&(ev.Vy.debug(r,`Cache add: '${s}'`),o.state.setDiff(s,{item:a})),a}async getDiffForFileContentsCore(e,t,i,r,s,o,n,a){let[l,c]=(0,D.Uf)(t,e);try{let e=await this.git.diff__contents(c,l,i,r,{...s,filters:["M"],similarityThreshold:v.H.get("advanced.similarityThreshold")});return tn(e)}catch(e){if(null!=o.state){let t=e?.toString()??"";return ev.Vy.debug(a,`Cache replace (with empty promise): '${n}'`),o.state.setDiff(n,{item:rE,errorMessage:t}),rE}return}}async getDiffForLine(e,t,i,r){try{let s=await this.getDiffForFile(e,i,r);if(null==s)return;let o=t+1,n=s.hunks.find(e=>e.current.position.start<=o&&e.current.position.end>=o);if(null==n)return;let a=n.lines.get(o);if(null==a)return;return{hunk:n,line:a}}catch{return}}async getLastFetchedTimestamp(e){try{let t=await this.config.getGitDir(e),i=await w.workspace.fs.stat(w.Uri.joinPath(t.uri,"FETCH_HEAD"));if(i.size>0)return i.mtime}catch{}}hasUnsafeRepositories(){return 0!==this.unsafePaths.size}isTrackable(e){return this.supportedSchemes.has(e.scheme)}async isTracked(e){return await this.isTrackedWithDetails(e)!=null}async isTrackedWithDetails(e,t,i){let r,s;if("string"==typeof e){if(i===L.nB)return;s=this.container.git.getRepository(w.Uri.file(e)),t||=s?.path,[r,t]=(0,D.Uf)(e,t)}else{if(!this.isTrackable(e)||(0,e1.t5)(e)&&(i=e.sha)===L.nB)return;s=this.container.git.getRepository(e),t=t||s?.path,[r,t]=(0,D.Uf)(e,t)}let o=t?`${t}/${r}`:r,n=o;n=`${i??""}:${n.startsWith("/")?n:`/${n}`}`;let a=this._cache.trackedPaths.get(n);return null!=a||(a=this.isTrackedCore(o,r,t??"",i,s),this._cache.trackedPaths.set(n,a),a=await a,this._cache.trackedPaths.set(n,a)),a}async isTrackedCore(e,t,i,r,s){if(r===L.nB)return;let o=(0,eb.dQ)();try{for(;;){i||([t,i]=(0,D.Uf)(e,"",!0));let o=!!await this.git.ls_files(i,t);if(o)return[t,i];if(i){let[i,r]=(0,D.Uf)(e,"",!0);if(i!==t&&(o=!!await this.git.ls_files(r,i))){if(s=await this.container.git.getOrOpenRepository(w.Uri.file(e),{detectNested:!0}),null!=s)return(0,D.Uf)(e,s.path);return[i,r]}}if(!o&&r&&!(0,em._k)(r)&&((o=!!await this.git.ls_files(i,t,{rev:r}))||(o=!!await this.git.ls_files(i,t,{rev:`${r}^`}))),!o){if(null!=s){let r=t.indexOf("/");if(r<0||r===t.length-1)return;let o=await this.container.git.getOrOpenRepository(w.Uri.file(e),{detectNested:!0});if(null!=o&&o!==s){[t,i]=(0,D.Uf)(e,s.path),s=void 0;continue}}return}return[t,i]}}catch(e){ev.Vy.error(e,o);return}}async reset(e,t,i){await this.git.reset(e,[],{...i,ref:t})}async runGitCommandViaTerminal(e,t,i,r){await this.git.runGitCommandViaTerminal(e,t,i,r)}_branches;get branches(){return this._branches??=new BranchesGitSubProvider(this.container,this.git,this._cache,this)}_commits;get commits(){return this._commits??=new CommitsGitSubProvider(this.container,this.git,this._cache,this)}_config;get config(){return this._config??=new ConfigGitSubProvider(this.container,this.git,this._cache,this)}_contributors;get contributors(){return this._contributors??=new ContributorsGitSubProvider(this.container,this.git,this._cache,this)}_diff;get diff(){return this._diff??=new DiffGitSubProvider(this.container,this.git,this._cache,this)}_graph;get graph(){return this._graph??=new GraphGitSubProvider(this.container,this.git,this._cache,this)}_patch;get patch(){return this._patch??=new PatchGitSubProvider(this.container,this.git,this)}_refs;get refs(){return this._refs??=new RefsGitSubProvider(this.container,this.git,this._cache,this)}_remotes;get remotes(){return this._remotes??=new RemotesGitSubProvider(this.container,this.git,this._cache,this)}_revision;get revision(){return this._revision??=new RevisionGitSubProvider(this.container,this.git,this._cache,this)}_staging;get staging(){return this._staging??=new StagingGitSubProvider(this.container,this.git)}_stash;get stash(){return this._stash??=new StashGitSubProvider(this.container,this.git,this._cache)}_status;get status(){return this._status??=new StatusGitSubProvider(this.container,this.git,this._cache,this)}_tags;get tags(){return this._tags??=new TagsGitSubProvider(this.container,this.git,this._cache)}_worktrees;get worktrees(){return this._worktrees??=new WorktreesGitSubProvider(this.container,this.git,this._cache,this)}_scmGitApi;async getScmGitApi(){return this._scmGitApi??(this._scmGitApi=this.getScmGitApiCore())}async getScmGitApiCore(){try{let e=w.extensions.getExtension("vscode.git");if(null==e)return;let t=e.isActive?e.exports:await e.activate();return t?.getAPI(1)}catch{return}}getScmGitUri(e,t){let i=this.fromCanonicalMap.get(t),r=this.getAbsoluteUri(e,i??t);return w.Uri.from({scheme:R.xB.Git,path:r.path,query:JSON.stringify({path:r.fsPath,ref:"~"})})}async getOpenScmRepositories(){let e=(0,eb.dQ)();try{let e=await this.getScmGitApi();return e?.repositories??[]}catch(t){return ev.Vy.error(t,e),[]}}async getScmRepository(e){let t=(0,eb.dQ)();try{let t=await this.getScmGitApi();return t?.getRepository(w.Uri.file(e))??void 0}catch(e){ev.Vy.error(e,t);return}}async getOrOpenScmRepository(e){let t=(0,eb.dQ)();try{let i=e instanceof w.Uri?e:w.Uri.file(e),r=await this.getScmGitApi();if(null==r)return;let s=r.getRepository(i);return(null==s||null!=s&&s.rootUri.toString()!==i.toString())&&(ev.Vy.debug(t,null==s?"• no existing repository found, opening repository...":`\u2022 existing, non-matching repository '${s.rootUri.toString(!0)}' found, opening repository...`),s=await r.openRepository?.(i)),s??void 0}catch(e){ev.Vy.error(e,t);return}}};async function rx(e){let t=v.H.getCore("files.encoding",e);return null==t||"utf8"===t?"utf8":(0,(await i.e(590).then(i.t.bind(i,4854,23))).encodingExists)(t)?t:"utf8"}rT([(0,ew.Rm)()],LocalGitProvider.prototype,"findGit",1),rT([(0,ew.Yz)({exit:!0})],LocalGitProvider.prototype,"discoverRepositories",1),rT([(0,ew.Yz)({exit:!0})],LocalGitProvider.prototype,"openRepository",1),rT([(0,ew.Yz)({singleLine:!0})],LocalGitProvider.prototype,"openRepositoryInitWatcher",1),rT([(0,ew.Yz)({exit:e=>`returned ${e[0]}`})],LocalGitProvider.prototype,"visibility",1),rT([(0,ew.Yz)({args:{0:e=>e.url},exit:e=>`returned ${e[0]}`})],LocalGitProvider.prototype,"getRemoteVisibility",1),rT([(0,ew.Rm)({args:!1,singleLine:!0,prefix:(e,t)=>`${e.prefix}(${(t instanceof w.Uri?t:t.uri).fsPath})`,exit:e=>`returned ${e.length} repositories ${0!==e.length?ev.Vy.toLoggable(e):""}`})],LocalGitProvider.prototype,"repositorySearch",1),rT([(0,ew.Yz)({args:{2:!1,3:!1},exit:!0})],LocalGitProvider.prototype,"repositorySearchCore",1),rT([(0,ew.Rm)({exit:!0})],LocalGitProvider.prototype,"getBestRevisionUri",1),rT([(0,ew.Rm)({exit:!0})],LocalGitProvider.prototype,"getWorkingUri",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"applyChangesToWorkingFile",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"checkout",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"clone",1),rT([(0,ew.Rm)({args:{1:e=>e.length}})],LocalGitProvider.prototype,"excludeIgnoredUris",1),rT([(0,tp.G)(),(0,ew.Rm)()],LocalGitProvider.prototype,"fetch",1),rT([(0,tp.G)(),(0,ew.Rm)()],LocalGitProvider.prototype,"push",1),rT([(0,tp.G)(),(0,ew.Rm)()],LocalGitProvider.prototype,"pull",1),rT([(0,tp.G)(),(0,ew.Yz)({exit:!0})],LocalGitProvider.prototype,"findRepositoryUri",1),rT([(0,tp.G)((e,t)=>`${e.toString()}|${t?.isDirty}`),(0,ew.Rm)({args:{1:e=>e?.isDirty}})],LocalGitProvider.prototype,"getBlame",1),rT([(0,ew.Rm)({args:{1:"<contents>"}})],LocalGitProvider.prototype,"getBlameContents",1),rT([(0,tp.G)((e,t,i,r)=>`${e.toString()}|${t}|${i?.isDirty}|${r?.forceSingleLine}`),(0,ew.Rm)({args:{2:e=>e?.isDirty}})],LocalGitProvider.prototype,"getBlameForLine",1),rT([(0,ew.Rm)({args:{2:"<contents>"}})],LocalGitProvider.prototype,"getBlameForLineContents",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"getBlameForRange",1),rT([(0,ew.Rm)({args:{2:"<contents>"}})],LocalGitProvider.prototype,"getBlameForRangeContents",1),rT([(0,ew.Rm)({args:{0:"<blame>"}})],LocalGitProvider.prototype,"getBlameRange",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"getDiffForFile",1),rT([(0,ew.Rm)({args:{1:"<contents>"}})],LocalGitProvider.prototype,"getDiffForFileContents",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"getDiffForLine",1),rT([(0,ew.Yz)()],LocalGitProvider.prototype,"getLastFetchedTimestamp",1),rT([(0,ew.Rm)({exit:e=>`returned ${null!=e?`[${e[0]},[${e[1]}]`:"false"}`})],LocalGitProvider.prototype,"isTrackedWithDetails",1),rT([(0,ew.Yz)()],LocalGitProvider.prototype,"isTrackedCore",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"reset",1),rT([(0,ew.Rm)({args:{2:!1}})],LocalGitProvider.prototype,"runGitCommandViaTerminal",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"getScmGitApiCore",1),rT([(0,ew.Rm)()],LocalGitProvider.prototype,"getOpenScmRepositories",1),rT([(0,ew.Rm)({exit:!0})],LocalGitProvider.prototype,"getScmRepository",1),rT([(0,ew.Rm)({exit:!0})],LocalGitProvider.prototype,"getOrOpenScmRepository",1);var rF=i(8929);let VslsGit=class VslsGit extends Git{constructor(e){super(),this.localGit=e}async exec(e,...t){if(e.local)return e.cwd="",this.localGit.exec(e,...t);let i=await uC.instance.vsls.guest();if(null==i)throw Error("No guest");return i.git(e,...t)}spawn(e,...t){throw Error("Git spawn not supported in Live Share")}async logStreamTo(e,t,i,r,...s){let o=await uC.instance.vsls.guest();if(null==o)throw Error("No guest");return o.gitLogStreamTo(e,t,i,r,...s)}};let VslsGitProvider=class VslsGitProvider extends LocalGitProvider{descriptor={id:"vsls",name:"Live Share",virtual:!1};supportedSchemes=new Set([R.xB.Vsls,R.xB.VslsScc]);async discoverRepositories(e){if(!this.supportedSchemes.has(e.scheme))return[];let t=(0,eb.dQ)();try{let t=await this.container.vsls.guest(),i=await t?.getRepositoriesForUri(e);if(null==i||0===i.length)return[];return i.flatMap(e=>this.openRepository(void 0,w.Uri.parse(e.folderUri,!0),e.root,void 0,e.closed))}catch(e){return ev.Vy.error(e,t),[]}}canHandlePathOrUri(e,t){let i=super.canHandlePathOrUri(e,t);return null!=i?`${e}:${i}`:void 0}getAbsoluteUri(e,t){e=(0,rF.EL)(e);let i=("string"!=typeof t?t.scheme:void 0)??("string"!=typeof e?e.scheme:void 0)??R.xB.Vsls;return super.getAbsoluteUri(e,t).with({scheme:i})}async findRepositoryUri(e,t){let i,r=(0,eb.dQ)();try{let r;if(null==t&&(t=await (0,D.ZA)(e)),t||(e=w.Uri.joinPath(e,"..")),[r,i]=await this.git.rev_parse__show_toplevel(e.fsPath),r?this.unsafePaths.delete(e.fsPath):this.unsafePaths.add(e.fsPath),!i)return;return i?w.Uri.parse(i,!0):void 0}catch(e){ev.Vy.error(e,r);return}}getLastFetchedTimestamp(e){return Promise.resolve(void 0)}};var rL=i(7222),rB=i(4301);function rU(){let e=new Map;return{command:function(t,i){return function(r,s,o){if(e.has(t))throw Error(`@command decorator has already been applied to the command: ${t}`);if(s&&"object"==typeof s&&"kind"in s){if("method"!==s.kind)throw Error(`@command can only be used on methods, not on ${s.kind}`);e.set(t,{command:t,handler:r,options:i});return}if(o){if("function"!=typeof o.value)throw Error(`@command can only be used on methods, not on ${typeof o.value}`);return e.set(t,{command:t,handler:o.value,options:i}),o}throw Error("Invalid decorator usage")}},getCommands:()=>e.values()}}var rN=Object.defineProperty,rq=Object.getOwnPropertyDescriptor,rW=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rN(t,i,o),o};let{command:rM,getCommands:rG}=rU();let CliCommandHandlers=class CliCommandHandlers{constructor(e,t){for(let{command:i,handler:r}of(this.container=e,this.server=t,rG()))this.server.registerHandler(i,e=>this.wrapHandler(e,r))}dispose(){}wrapHandler(e,t){let i;return e?.cwd&&(i=this.container.git.getRepository(e.cwd)),t(e,i)}async handleCherryPickCommand(e,t){(0,rL.$T)(t)}async handleCompareCommand(e,t){if(!t||!e.args?.length){(0,rB.RS)("gitlens.compareWith");return}let[i,r]=e.args;if(!i||!r){(0,rB.RS)("gitlens.compareWith");return}return i&&!await t.git.refs().isValidReference(i)?((0,rB.RS)("gitlens.compareWith"),{stderr:`'${i}' is an invalid reference`}):r&&!await t.git.refs().isValidReference(r)?((0,rB.RS)("gitlens.compareWith",{ref1:i}),{stderr:`'${r}' is an invalid reference`}):void(0,rB.RS)("gitlens.compareWith",{ref1:i,ref2:r})}async handleGraphCommand(e,t){if(!t||!e.args?.length){(0,rB.RS)("gitlens.showGraphView");return}let[i]=e.args,r=await t.git.refs().getReference(i);if(i&&!r)return(0,rB.RS)("gitlens.showInCommitGraph",t),{stderr:`'${i}' is an invalid reference`};(0,rB.RS)("gitlens.showInCommitGraph",{ref:r})}async handleMergeCommand(e,t){if(!t||!e.args?.length)return(0,rL.h1)(t);let[i]=e.args,r=await t.git.refs().getReference(i);if((0,rL.h1)(t,r),i&&!r)return{stderr:`'${i}' is an invalid reference`}}async handleRebaseCommand(e,t){if(!t||!e.args?.length)return(0,rL.RU)(t);let[i]=e.args,r=await t.git.refs().getReference(i);if((0,rL.RU)(t,r),i&&!r)return{stderr:`'${i}' is an invalid reference`}}};rW([rM("cherry-pick")],CliCommandHandlers.prototype,"handleCherryPickCommand",1),rW([rM("compare")],CliCommandHandlers.prototype,"handleCompareCommand",1),rW([rM("graph")],CliCommandHandlers.prototype,"handleGraphCommand",1),rW([rM("merge")],CliCommandHandlers.prototype,"handleMergeCommand",1),rW([rM("rebase")],CliCommandHandlers.prototype,"handleRebaseCommand",1);var rH=i(8611),rV=Object.defineProperty,rj=Object.getOwnPropertyDescriptor;async function rQ(){let e=(0,rH.createServer)();return new Promise((t,i)=>{try{e.on("error",e=>{ev.Vy.error(e,"Cli Integration IPC server error"),i(e)}),e.listen(0,"127.0.0.1",()=>{let r=e.address();if(null==r||"string"==typeof r){i(Error("Failed to get server address"));return}let s=`http://127.0.0.1:${r.port}`;t(new IpcServer(s,e))})}catch(e){i(e)}})}let IpcServer=class IpcServer{constructor(e,t){this.ipcAddress=e,this.server=t,t.on("listening",()=>{ev.Vy.debug(`Cli Integration IPC server listening on ${this.ipcAddress}`)}).on("request",this.onRequest.bind(this))}handlers=new Map;dispose(){this.handlers.clear(),this.server.close()}registerHandler(e,t){return this.handlers.set(`/${e}`,t),(0,iQ.Nx)(()=>this.handlers.delete(`/${e}`))}onRequest(e,t){let i=(0,eb.dQ)(),r=this.handlers.get(e.url);if(null==r){ev.Vy.warn(i,`IPC handler for ${e.url} not found`),t.writeHead(404),t.end();return}let s=[];e.on("data",e=>s.push(e)),e.on("end",async()=>{let e=JSON.parse(Buffer.concat(s).toString("utf8"));try{let i=await r(e);if(null==i){t.writeHead(200),t.end();return}"string"==typeof i?(t.writeHead(200),t.end(i)):(t.writeHead(200),t.end(JSON.stringify(i)))}catch(i){ev.Vy.error(i,"IPC handler error",e),t.writeHead(500),t.end()}})}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rj(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rV(t,i,o)})([(0,ew.Rm)({args:!1})],IpcServer.prototype,"onRequest",1);let GkCliIntegrationProvider=class GkCliIntegrationProvider{constructor(e){this.container=e,this._disposable=v.H.onDidChange(e=>this.onConfigurationChanged(e)),this.onConfigurationChanged()}_disposable;_runningDisposable;dispose(){this.stop(),this._disposable?.dispose()}onConfigurationChanged(e){(null==e||v.H.changed(e,"gitkraken.cli.integration.enabled"))&&(v.H.get("gitkraken.cli.integration.enabled")?this.start():this.stop())}async start(){let e=await rQ(),{environmentVariableCollection:t}=this.container.context;t.clear(),t.persistent=!1,t.replace("GK_GL_ADDR",e.ipcAddress),t.description="Enables GK CLI integration",this._runningDisposable=w.Disposable.from(new CliCommandHandlers(this.container,e),e)}stop(){this.container.context.environmentVariableCollection.clear(),this._runningDisposable?.dispose(),this._runningDisposable=void 0}};var rz=Object.defineProperty,rY=Object.getOwnPropertyDescriptor,rK=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),rZ=e=>{throw TypeError(e)},rJ=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rY(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rz(t,i,o),o},rX=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&rZ("Object expected"),i&&(r=t[rK("asyncDispose")]),void 0===r&&(r=t[rK("dispose")],i&&(s=r)),"function"!=typeof r&&rZ("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},r0=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let LocalRepositoryLocationProvider=class LocalRepositoryLocationProvider{constructor(e,t){this.container=e,this.sharedStorage=t}dispose(){}_localRepoDataMap=void 0;async ensureLocalRepoDataMap(){null==this._localRepoDataMap&&await this.loadLocalRepoDataMap()}async getLocalRepoDataMap(){return await this.ensureLocalRepoDataMap(),this._localRepoDataMap??{}}async getLocation(e,t){let i=[];if(null!=e){let t=await this._getLocalRepoPaths(e);null!=t&&i.push(...t)}if(null!=t){let{provider:e,owner:r,repoName:s}=t;if(null!=e&&null!=r&&null!=s){let t=await this._getLocalRepoPaths(`${e}/${r}/${s}`);null!=t&&i.push(...t)}}return i}async _getLocalRepoPaths(e){let t=await this.getLocalRepoDataMap();return t[e]?.paths}async loadLocalRepoDataMap(){let e=(0,eb.dQ)(),t=await this.sharedStorage.getSharedRepositoryLocationFileUri();try{let e=await w.workspace.fs.readFile(t);this._localRepoDataMap=JSON.parse(e.toString())??{}}catch(t){ev.Vy.error(t,e)}}async storeLocation(e,t,i){if(null!=t&&await this.storeLocationCore(t,e),i?.provider!=null&&i?.owner!=null&&i?.repoName!=null){let{provider:t,owner:r,repoName:s}=i,o=`${t}/${r}/${s}`;await this.storeLocationCore(o,e)}}async storeLocationCore(e,t){var i=[];try{if(!e||!t)return;let r=(0,eb.dQ)(),s=rX(i,await this.sharedStorage.acquireSharedStorageWriteLock(),!0);if(null==s)return;await this.loadLocalRepoDataMap(),null==this._localRepoDataMap&&(this._localRepoDataMap={}),null==this._localRepoDataMap[e]?this._localRepoDataMap[e]={paths:[t]}:null==this._localRepoDataMap[e].paths?this._localRepoDataMap[e].paths=[t]:this._localRepoDataMap[e].paths.includes(t)||this._localRepoDataMap[e].paths.push(t);let o=await this.sharedStorage.getSharedRepositoryLocationFileUri(),n=new Uint8Array(Buffer.from(JSON.stringify(this._localRepoDataMap)));try{await w.workspace.fs.writeFile(o,n)}catch(e){ev.Vy.error(e,r)}}catch(e){var r=e,s=!0}finally{var o=r0(i,r,s);o&&await o}}};rJ([(0,ew.Rm)()],LocalRepositoryLocationProvider.prototype,"getLocation",1),rJ([(0,ew.Yz)()],LocalRepositoryLocationProvider.prototype,"loadLocalRepoDataMap",1),rJ([(0,ew.Rm)()],LocalRepositoryLocationProvider.prototype,"storeLocation",1),rJ([(0,ew.Yz)()],LocalRepositoryLocationProvider.prototype,"storeLocationCore",1);var r1=i(7251),r2=Object.defineProperty,r5=Object.getOwnPropertyDescriptor,r4=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),r7=e=>{throw TypeError(e)},r3=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?r5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r2(t,i,o),o},r6=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&r7("Object expected"),i&&(r=t[r4("asyncDispose")]),void 0===r&&(r=t[r4("dispose")],i&&(s=r)),"function"!=typeof r&&r7("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},r9=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let LocalSharedGkStorageLocationProvider=class LocalSharedGkStorageLocationProvider{constructor(e){this.container=e,this._lazySharedGKUri=(0,r1.R)(async()=>{var e=[];try{let t,i=r6(e,(0,eb.bP)(`${(0,ev.zu)(this)}.load`,!1)),r=(0,C.join)((0,t5.homedir)(),".gk"),s=w.Uri.file(r);try{await w.workspace.fs.stat(s)}catch{if(!(t=k.env.XDG_DATA_HOME))switch((0,eX.uo)()){case"windows":t=k.env.LOCALAPPDATA||(0,C.join)((0,t5.homedir)(),"AppData","Local");break;case"macOS":t=(0,C.join)((0,t5.homedir)(),"Library","Application Support");break;case"linux":t=(0,C.join)((0,t5.homedir)(),".local","share")}t&&(t=(0,C.join)(t,"gk"),ev.Vy.log(i,`Using shared GK path: ${t}`))}if(t)return w.Uri.file(t);return ev.Vy.log(i,`Using legacy shared GK path: ${r}`),s}catch(e){var t=e,i=!0}finally{r9(e,t,i)}})}_lazySharedGKUri;async getUri(e){return w.Uri.joinPath(await this._lazySharedGKUri.value,e)}async acquireSharedStorageWriteLock(){let e,t=(0,eb.dQ)(),i=await this.getUri("lockfile");for(;;){try{e=await w.workspace.fs.stat(i)}catch{break}if(new Date().getTime()-e.ctime>3e4)break;await (0,eC.uk)(100)}try{await w.workspace.fs.writeFile(i,new Uint8Array(0))}catch(e){ev.Vy.error(e,t,`Failed to acquire lock: ${i.toString(!0)}`);return}return(0,iQ.t2)(()=>this.releaseSharedStorageWriteLock())}async releaseSharedStorageWriteLock(){let e=(0,eb.dQ)(),t=await this.getUri("lockfile");try{await w.workspace.fs.delete(t)}catch(i){return ev.Vy.error(i,e,`Failed to release lock: ${t.toString(!0)}`),!1}return!0}async getSharedRepositoryLocationFileUri(){return this.getUri("repoMapping.json")}async getSharedCloudWorkspaceMappingFileUri(){return this.getUri("cloudWorkspaces.json")}async getSharedLocalWorkspaceMappingFileUri(){return this.getUri("localWorkspaces.json")}};r3([(0,ew.Rm)()],LocalSharedGkStorageLocationProvider.prototype,"acquireSharedStorageWriteLock",1),r3([(0,ew.Rm)()],LocalSharedGkStorageLocationProvider.prototype,"releaseSharedStorageWriteLock",1);var r8=Object.defineProperty,se=Object.getOwnPropertyDescriptor,st=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),si=e=>{throw TypeError(e)},sr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?se(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r8(t,i,o),o},ss=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&si("Object expected"),i&&(r=t[st("asyncDispose")]),void 0===r&&(r=t[st("dispose")],i&&(s=r)),"function"!=typeof r&&si("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},so=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let LocalGkWorkspacesSharedStorageProvider=class LocalGkWorkspacesSharedStorageProvider{constructor(e,t){this.container=e,this.sharedStorage=t}_cloudWorkspacePathMap=void 0;async ensureCloudWorkspacePathMap(){null==this._cloudWorkspacePathMap&&await this.loadCloudWorkspacePathMap()}async getCloudWorkspacePathMap(){return await this.ensureCloudWorkspacePathMap(),this._cloudWorkspacePathMap??{}}async loadCloudWorkspacePathMap(){let e=await this.sharedStorage.getSharedCloudWorkspaceMappingFileUri();try{let t=await w.workspace.fs.readFile(e);this._cloudWorkspacePathMap=JSON.parse(t.toString())?.workspaces??{}}catch(e){ev.Vy.error(e,"loadCloudWorkspacePathMap")}}async getCloudWorkspaceRepositoryLocation(e,t){let i=await this.getCloudWorkspacePathMap();return i[e]?.repoPaths?.[t]}async getCloudWorkspaceCodeWorkspaceFileLocation(e){let t=await this.getCloudWorkspacePathMap();return t[e]?.externalLinks?.[".code-workspace"]}async removeCloudWorkspaceCodeWorkspaceFile(e){var t=[];try{let i=(0,eb.dQ)(),r=ss(t,await this.sharedStorage.acquireSharedStorageWriteLock(),!0);if(null==r||(await this.loadCloudWorkspacePathMap(),this._cloudWorkspacePathMap?.[e]?.externalLinks?.[".code-workspace"]==null))return;delete this._cloudWorkspacePathMap[e].externalLinks[".code-workspace"];let s=await this.sharedStorage.getSharedCloudWorkspaceMappingFileUri(),o=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await w.workspace.fs.writeFile(s,o)}catch(e){ev.Vy.error(e,i)}}catch(e){var i=e,r=!0}finally{var s=so(t,i,r);s&&await s}}async confirmCloudWorkspaceCodeWorkspaceFilePath(e){let t=await this.getCloudWorkspaceCodeWorkspaceFileLocation(e);if(null==t)return!1;try{return await w.workspace.fs.stat(w.Uri.file(t)),!0}catch{return!1}}async storeCloudWorkspaceRepositoryLocation(e,t,i){var r=[];try{let s=(0,eb.dQ)(),o=ss(r,await this.sharedStorage.acquireSharedStorageWriteLock(),!0);if(null==o)return;await this.loadCloudWorkspacePathMap(),null==this._cloudWorkspacePathMap&&(this._cloudWorkspacePathMap={}),null==this._cloudWorkspacePathMap[e]&&(this._cloudWorkspacePathMap[e]={repoPaths:{},externalLinks:{}}),null==this._cloudWorkspacePathMap[e].repoPaths&&(this._cloudWorkspacePathMap[e].repoPaths={}),this._cloudWorkspacePathMap[e].repoPaths[t]=i;let n=await this.sharedStorage.getSharedCloudWorkspaceMappingFileUri(),a=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await w.workspace.fs.writeFile(n,a)}catch(e){ev.Vy.error(e,s)}}catch(e){var s=e,o=!0}finally{var n=so(r,s,o);n&&await n}}async storeCloudWorkspaceCodeWorkspaceFileLocation(e,t){var i=[];try{let r=(0,eb.dQ)(),s=ss(i,await this.sharedStorage.acquireSharedStorageWriteLock(),!0);if(null==s)return;await this.loadCloudWorkspacePathMap(),null==this._cloudWorkspacePathMap&&(this._cloudWorkspacePathMap={}),null==this._cloudWorkspacePathMap[e]&&(this._cloudWorkspacePathMap[e]={repoPaths:{},externalLinks:{}}),null==this._cloudWorkspacePathMap[e].externalLinks&&(this._cloudWorkspacePathMap[e].externalLinks={}),this._cloudWorkspacePathMap[e].externalLinks[".code-workspace"]=t;let o=await this.sharedStorage.getSharedCloudWorkspaceMappingFileUri(),n=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await w.workspace.fs.writeFile(o,n)}catch(e){ev.Vy.error(e,r)}}catch(e){var r=e,s=!0}finally{var o=so(i,r,s);o&&await o}}async getLocalWorkspaceData(){let e,t;try{if(e=await this.sharedStorage.getSharedLocalWorkspaceMappingFileUri(),t=await w.workspace.fs.readFile(e),t?.length)return JSON.parse(t.toString())}catch{try{if(e=w.Uri.file((0,C.join)((0,t5.homedir)(),`${"windows"===(0,eX.uo)()?"/AppData/Roaming/":""}.gitkraken`,"workspaces","workspaces.json")),t=await w.workspace.fs.readFile(e),t?.length)return JSON.parse(t.toString())}catch(e){ev.Vy.error(e,"getLocalWorkspaceData")}}return{workspaces:{}}}async createOrUpdateCodeWorkspaceFile(e,t,i){let r,s;try{s=await w.workspace.fs.readFile(e),r=JSON.parse(s.toString())}catch{r={folders:[],settings:{}}}r.folders=t.map(e=>({path:e})),i?.workspaceId!=null&&(r.settings["gitkraken.workspaceId"]=i.workspaceId),i?.workspaceAutoAddSetting!=null&&(r.settings["gitkraken.workspaceAutoAddSetting"]=i.workspaceAutoAddSetting);let o=new Uint8Array(Buffer.from(JSON.stringify(r)));try{await w.workspace.fs.writeFile(e,o),i?.workspaceId!=null&&await this.storeCloudWorkspaceCodeWorkspaceFileLocation(i.workspaceId,e.fsPath)}catch(e){return ev.Vy.error(e,"writeCodeWorkspaceFile"),!1}return!0}async updateCodeWorkspaceFileSettings(e,t){let i,r;try{r=await w.workspace.fs.readFile(e),i=JSON.parse(r.toString())}catch{return!1}null!=t.workspaceAutoAddSetting&&(i.settings["gitkraken.workspaceAutoAddSetting"]=t.workspaceAutoAddSetting);let s=new Uint8Array(Buffer.from(JSON.stringify(i)));try{await w.workspace.fs.writeFile(e,s)}catch(e){return ev.Vy.error(e,"updateCodeWorkspaceFileSettings"),!1}return!0}};function sn(){return null==g&&(g=new Git),g}async function sa(e){let t=sn(),r=[new LocalGitProvider(e,t),new VslsGitProvider(e,new VslsGit(t))];return v.H.get("virtualRepositories.enabled")&&r.push(new(await i.e(758).then(i.bind(i,3555))).GitHubGitProvider(e)),r}sr([(0,ew.Rm)()],LocalGkWorkspacesSharedStorageProvider.prototype,"getCloudWorkspaceRepositoryLocation",1),sr([(0,ew.Rm)()],LocalGkWorkspacesSharedStorageProvider.prototype,"getCloudWorkspaceCodeWorkspaceFileLocation",1),sr([(0,ew.Rm)()],LocalGkWorkspacesSharedStorageProvider.prototype,"removeCloudWorkspaceCodeWorkspaceFile",1),sr([(0,ew.Rm)()],LocalGkWorkspacesSharedStorageProvider.prototype,"confirmCloudWorkspaceCodeWorkspaceFilePath",1),sr([(0,ew.Rm)()],LocalGkWorkspacesSharedStorageProvider.prototype,"storeCloudWorkspaceRepositoryLocation",1),sr([(0,ew.Rm)()],LocalGkWorkspacesSharedStorageProvider.prototype,"storeCloudWorkspaceCodeWorkspaceFileLocation",1);var sl=i(9903),sc=i(4199),su=i(6980),sh=i(3489),sd=i(5782),sp=Object.defineProperty,sg=Object.getOwnPropertyDescriptor,sm=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sg(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sp(t,i,o),o};let sf=w.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:w.DecorationRangeBehavior.OpenOpen}),sw=0x40000000-1;let LineAnnotationController=class LineAnnotationController{constructor(e){this.container=e,this._disposable=w.Disposable.from((0,sh.Oo)(e.onReady)(this.onReady,this),v.H.onDidChange(this.onConfigurationChanged,this),e.fileAnnotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),e.integrations.onDidChangeConnectionState((0,tg.s)(()=>void this.refresh(w.window.activeTextEditor),250)))}_cancellation;_disposable;_editor;_enabled=!1;dispose(){this.clearAnnotations(this._editor),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){v.H.changed(e,"currentLine")&&(v.H.changed(e,"currentLine.enabled")&&(v.H.get("currentLine.enabled")?(this._enabled=!0,this.resume()):(this._enabled=!1,this.setLineTracker(!1))),this.refresh(w.window.activeTextEditor))}_suspended=!1;get suspended(){return!this._enabled||this._suspended}resume(){return this.setLineTracker(!0),!!this._suspended&&(this._suspended=!1,!0)}suspend(){return this.setLineTracker(!1),!this._suspended&&(this._suspended=!0,!0)}onActiveLinesChanged(e){if(!e.pending&&void 0!==e.selections){this.refresh(e.editor);return}this.clear(e.editor)}onFileAnnotationsToggled(){this.refresh(w.window.activeTextEditor)}clear(e){this._cancellation?.cancel(),this._editor!==e&&null!=this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e)}async toggle(e){this._enabled=!(this._enabled&&!this.suspended),this._enabled?this.resume()&&await this.refresh(e):this.suspend()&&await this.refresh(e)}clearAnnotations(e){void 0!==e&&!0!==e._disposed&&e.setDecorations(sf,[])}getPullRequestsForLines(e,t){let i=new Map;if(0===t.size)return i;let r=this.container.git.remotes(e).getBestRemoteWithIntegration();for(let[,e]of t){if(e.commit.isUncommitted)continue;let t=i.get(e.commit.ref);null==t&&(t=r.then(t=>e.commit.getAssociatedPullRequest(t)),i.set(e.commit.ref,t))}return i}async refresh(e){let t;if(null==e&&null==this._editor)return;let i=(0,eb.dQ)(),r=this.container.lineTracker.selections;if(null==e||null==r||!(0,ef.oU)(e)){(0,eb.TT)(i,` ${R.EO.Dot} Skipped because there is no valid editor or no valid selections`),this.clear(this._editor);return}this._editor!==e&&(this.clear(this._editor),this._editor=e);let s=v.H.get("currentLine");if(this.suspended){(0,eb.TT)(i,` ${R.EO.Dot} Skipped because the controller is suspended`),this.clear(e);return}let o=await this.container.documentTracker.getOrAdd(e.document),n=await o?.getStatus();if(!n?.blameable&&this.suspended){(0,eb.TT)(i,` ${R.EO.Dot} Skipped because the ${this.suspended?"controller is suspended":"document is not blameable"}`),this.clear(e);return}if(null==e.document||!this.container.lineTracker.includes(r)){(0,eb.TT)(i,` ${R.EO.Dot} Skipped because the ${null==e.document?"editor is gone":`selection=${r.map(e=>`[${e.anchor}-${e.active}]`).join()} are no longer current`}`);return}(0,eb.TT)(i,` ${R.EO.Dot} selection=${r.map(e=>`[${e.anchor}-${e.active}]`).join()}`);let a=!0;if(e.document.uri.scheme===R.xB.Vsls||e.document.uri.scheme===R.xB.VslsScc){let e=v.H.get("hovers");t={autolinks:e.autolinks.enabled,dateFormat:v.H.get("defaultDateFormat"),format:e.detailsMarkdownFormat,pullRequests:e.pullRequests.enabled}}let l=new Map,c=new Map;for(let e of r){let r=this.container.lineTracker.getState(e.active);if(r?.commit==null){ev.Vy.debug(i,`Line ${e.active} returned no commit`);continue}null==t||null!=r.commit.message||l.has(r.commit.ref)||l.set(r.commit.ref,r.commit.ensureFullDetails()),c.set(e.active,r),r.commit.isUncommitted||(a=!1)}let u=o.uri.repoPath,h=!a&&null!=u&&s.pullRequests.enabled&&sc.c.has(s.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState");this._cancellation?.cancel(),this._cancellation=new w.CancellationTokenSource;let d=this._cancellation.token,p=sc.c.has(s.format,"tips")?this.container.git.getBranchesAndTagsTipsLookup(u):void 0;async function g(e,i,r,n,a){let l={family:s.fontFamily,size:s.fontSize,style:s.fontStyle,weight:s.fontWeight},u=[];for(let[h,d]of c){let c=d.commit;if(null==c||c.isUncommitted&&""===s.uncommittedChangesFormat)continue;let p=n?.get(c.ref),g=(0,sd.iS)(c,c.isUncommitted?s.uncommittedChangesFormat??s.format:s.format,{dateFormat:null===s.dateFormat?v.H.get("defaultDateFormat"):s.dateFormat,getBranchAndTagTips:r,pullRequest:p?.value,pullRequestPendingMessage:`PR ${R.EO.Ellipsis}`},l,s.scrollable);g.range=i.document.validateRange(new w.Range(h,sw,h,sw)),null!=t&&(g.hoverMessage=await (0,su.MX)(e,c,o.uri,h,{...t,pullRequest:p?.value,timeout:a})),u.push(g)}i.setDecorations(sf,u)}let m=h?await (0,eC.wD)(this.getPullRequestsForLines(u,c),!0,d,100,async t=>{if("timedout"!==t.reason||d.isCancellationRequested||e!==this._editor)return;ev.Vy.debug(i,`${R.EO.Dot} pull request queries took too long (over 100 ms)`);let[r,s]=await Promise.allSettled([p,t.value]);if(d.isCancellationRequested||e!==this._editor)return;let o=(0,eC.Ro)(s),n=(0,eC.Ro)(r);ev.Vy.debug(i,`${R.EO.Dot} pull request queries completed; updating...`),g(this.container,e,n,o)}):void 0,[f]=await Promise.allSettled([p,...l.values()]);d.isCancellationRequested||await g(this.container,e,(0,eC.Ro)(f),m,100)}setLineTracker(e){if(e){this.container.lineTracker.subscribed(this)||this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this));return}this.container.lineTracker.unsubscribe(this)}};sm([(0,ew.Rm)()],LineAnnotationController.prototype,"resume",1),sm([(0,ew.Rm)()],LineAnnotationController.prototype,"suspend",1),sm([(0,ew.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineAnnotationController.prototype,"onActiveLinesChanged",1),sm([(0,ew.Yz)({args:!1,singleLine:!0})],LineAnnotationController.prototype,"clear",1),sm([(0,ew.Rm)({args:!1})],LineAnnotationController.prototype,"toggle",1),sm([(0,ew.Yz)()],LineAnnotationController.prototype,"refresh",1);var sv=i(5425),sy=i(457),sb=i(5952),sC=i(3915),sk=i(1212),sS=i(4704);let PromiseCache=class PromiseCache{constructor(e){this.options=e}cache=new Map;async get(e,t){let i=Date.now(),r=this.cache.get(e);if(null!=r&&!this.expired(r,i))return r.accessed=i,r.promise;let s=t();return r={promise:s,created:i,accessed:i},this.cache.set(e,r),(this.options?.createTTL!=null||this.options?.accessTTL!=null)&&this.cache.size>1&&queueMicrotask(()=>this.cleanupExpired()),this.options?.expireOnError&&s.catch(()=>this.cache.delete(e)),s}cleanupExpired(){let e=Date.now();for(let[t,i]of this.cache.entries())this.expired(i,e)&&this.cache.delete(t)}expired(e,t){return this.options?.createTTL!=null&&t-e.created>=this.options?.createTTL||this.options?.accessTTL!=null&&t-e.accessed>=this.options?.accessTTL}clear(){this.cache.clear()}delete(e){this.cache.delete(e)}};var sR=i(2678),sP=Object.defineProperty,sA=Object.getOwnPropertyDescriptor,sI=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sA(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sP(t,i,o),o};let sD=Object.freeze(new Map);let AutolinksProvider=class AutolinksProvider{constructor(e){this.container=e,this._disposable=w.Disposable.from(v.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConfiguredIntegrations(this.onConfiguredIntegrationsChanged,this)),this.setAutolinksFromConfig()}_disposable;_references=[];_refsetCache=new PromiseCache({accessTTL:36e5});dispose(){this._disposable?.dispose()}onConfigurationChanged(e){v.H.changed(e,"autolinks")&&(this.setAutolinksFromConfig(),this._refsetCache.clear())}onConfiguredIntegrationsChanged(e){this._refsetCache.clear()}setAutolinksFromConfig(){let e=v.H.get("autolinks");this._references=e?.filter(e=>e.prefix&&e.url)?.map(e=>({prefix:e.prefix,url:e.url,alphanumeric:e.alphanumeric??!1,ignoreCase:e.ignoreCase??!1,title:e.title??void 0}))??[]}async collectIntegrationAutolinks(e,t){let i=sR.jn.map(async e=>this.container.integrations.get(e));e?.provider!=null&&i.push(e.getIntegration());let r=new Set,s=[];for(let e of(await Promise.allSettled(i))){let i=(0,eC.Ro)(e);if(null!=i&&!1!==i.maybeConnected&&!r.has(i)){r.add(i);let e=i.autolinks();(0,eC.yL)(e)?s.push(e.then(e=>{e.length&&t.push([i,e])})):e.length&&t.push([i,e])}}0!==s.length&&await Promise.allSettled(s)}collectRemoteAutolinks(e,t){e?.provider?.autolinks.length&&t.push([e.provider,e.provider.autolinks])}collectCustomAutolinks(e){this._references.length&&e.push([void 0,this._references])}async getRefSets(e){return this._refsetCache.get(e?.remoteKey,async()=>{let t=[];return await this.collectIntegrationAutolinks(e,t),this.collectRemoteAutolinks(e,t),this.collectCustomAutolinks(t),t})}async getBranchAutolinks(e,t){let i=await this.getRefSets(t);return 0===i.length?sD:(0,sR.Xn)(e,i)}async getAutolinks(e,t){let i=await this.getRefSets(t);return 0===i.length?sD:(0,sR.b9)(e,i)}getAutolinkEnrichableId(e){return e.provider?.id===sy.tp.Jira?`${e.prefix}${e.id}`:e.id}async getEnrichedAutolinks(e,t){if("string"==typeof e&&(e=await this.getAutolinks(e,t)),0===e.size)return;let i=await t?.getIntegration();null!=i&&((i.maybeConnected??await i.isConnected())&&await i.access()||(i=void 0));let r=new Map;for(let[s,o]of e){let e,n;if(null!=o.provider){null==(e=o.provider instanceof sb.sT?o.provider.id:(0,sC.p)(o.provider.id))&&(e=o.provider.id);try{n=await this.container.integrations.get(e)}catch(e){ev.Vy.error(e,`Failed to get integration for ${o.provider.id}`),n=void 0}}null!=n&&((n.maybeConnected??await n.isConnected())&&await n.access()||(n=void 0));let a=t?.provider!=null&&null!=i&&e===i.id&&o.provider?.domain===i.domain?i.getIssueOrPullRequest(o.descriptor??t.provider.repoDesc,this.getAutolinkEnrichableId(o),{type:o.type}):null!=o.descriptor?n?.getIssueOrPullRequest(o.descriptor,this.getAutolinkEnrichableId(o),{type:o.type}):void 0;r.set(s,[a,o])}return r}linkify(e,t,i,r,s,o){let n="plaintext"===t&&null==o;n&&(o=new Map);let a=new Map;if(r?.size)for(let[,[,i]]of r)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,a,r,s,o));else{for(let i of this._references)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,a,r,s,o));if(i?.length){for(let n of i=[...i].sort((e,t)=>{let i=e.maybeIntegrationConnected,r=t.maybeIntegrationConnected;return i!==r?i?-1:+!!r:0}))if(null!=n.provider)for(let i of n.provider.autolinks)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,a,r,s,o))}}return 0!==a.size&&(e=e.replace(/(\x00\d+\x00)/g,(e,t)=>a.get(t)??t)),n&&o?.size&&(e+=`
${R.EO.Dash.repeat(2)}
${(0,tm.fj)((0,tm.Tj)(o,([e,t])=>`${(0,_.VU)(e)} ${t}`),"\n")}`),e}ensureAutolinkCached(e){if((0,sR.Q)(e))return!0;if(!e.prefix||!e.url)return!1;if(void 0!==e.tokenize||null===e.tokenize)return!0;try{e.tokenize=(t,i,r,s,o,n)=>{let a;switch(i){case"markdown":return(0,sR.IT)(e,i),t.replace(e.messageMarkdownRegex,(t,i,l,c)=>{let u=(0,sk.W)(e.url.replace(sR.eB,c)),h="";if(e.title){h=` "${e.title.replace(sR.eB,c)}`;let t=s?.get(c)?.[0];if(t?.value!=null)if(t.paused){if(null!=n&&!o?.has(c)){let t=e.description?.replace(sR.eB,c);null==t&&(t=`Custom Autolink ${e.prefix}${c}`),a=n.size+1,n.set(a,`[${(0,ip.xu)()} ${t} $(loading~spin)](${u}${h}")`)}h+=`
${R.EO.Dash.repeat(2)}
Loading...`}else{let e=t.value,i=(0,sS.FV)(e.title.trim()),r=i.replace(/"/g,'\\"');null==n||o?.has(c)||(a=n.size+1,n.set(a,`[${(0,ip.xu)(e)} **${i}**](${u}${h}")\\
${R.EO.Space.repeat(5)}${l} ${e.state} ${(0,tL.PI)(e.closedDate??e.createdDate)}`)),h+=`
${R.EO.Dash.repeat(2)}
${r}
${(0,_.ZH)(e.state)}, ${(0,tL.PI)(e.closedDate??e.createdDate)}`}else if(null!=n&&!o?.has(c)){let t=e.description?.replace(sR.eB,c);null==t&&(t=`Custom Autolink ${e.prefix}${c}`),a=n.size+1,n.set(a,`[${(0,ip.xu)()} ${t}](${u}${h}")`)}h+='"'}let d=`\0${r.size}\0`;return r.set(d,`[${l}](${u}${h})`),`${i}${d}`});case"html":return(0,sR.IT)(e,i),t.replace(e.messageHtmlRegex,(t,i,l,c)=>{let u=(0,sk.W)(e.url.replace(sR.eB,c)),h="";if(e.title){h=`"${(0,_.yz)(e.title.replace(sR.eB,c))}`;let t=s?.get(c)?.[0];if(t?.value!=null)if(t.paused){if(null!=n&&!o?.has(c)){let t=e.description?.replace(sR.eB,c);null==t&&(t=`Custom Autolink ${e.prefix}${c}`),a=n.size+1,n.set(a,`<a href="${u}" title=${h}>${(0,ip.nL)()} ${t}</a>`)}h+=`
${R.EO.Dash.repeat(2)}
Loading...`}else{let e=t.value,i=(0,_.yz)(e.title.trim()),r=i.replace(/"/g,"&quot;");null==n||o?.has(c)||(a=n.size+1,n.set(a,`<a href="${u}" title=${h}>${(0,ip.nL)(e)} <b>${i}</b></a><br /><span>${R.EO.Space.repeat(5)}${l} ${e.state} ${(0,tL.PI)(e.closedDate??e.createdDate)}</span>`)),h+=`
${R.EO.Dash.repeat(2)}
${r}
${(0,_.ZH)(e.state)}, ${(0,tL.PI)(e.closedDate??e.createdDate)}`}else if(null!=n&&!o?.has(c)){let t=e.description?.replace(sR.eB,c);null==t&&(t=`Custom Autolink ${e.prefix}${c}`),a=n.size+1,n.set(a,`<a href="${u}" title=${h}>${(0,ip.nL)()} ${t}</a>`)}h+='"'}let d=`\0${r.size}\0`;return r.set(d,`<a href="${u}" title=${h}>${l}</a>`),`${i}${d}`});default:return(0,sR.IT)(e,i),t.replace(e.messageRegex,(e,t,i,l)=>{let c=s?.get(l)?.[0];if(c?.value==null)return i;null==n||o?.has(l)||(a=n.size+1,n.set(a,`${i}: ${c.paused?"Loading...":`${c.value.title}  ${R.EO.Dot}  ${(0,_.ZH)(c.value.state)}, ${(0,tL.PI)(c.value.closedDate??c.value.createdDate)}`}`));let u=`\0${r.size}\0`;return r.set(u,`${i}${(0,_.VU)(a)}`),`${t}${u}`})}}}catch(t){ev.Vy.error(t,`Failed to create autolink generator: prefix=${e.prefix}, url=${e.url}, title=${e.title}`),e.tokenize=null}return!0}};sI([(0,ew.Yz)({args:{0:"<message>",1:!1}})],AutolinksProvider.prototype,"getAutolinks",1),sI([(0,ew.Yz)({args:{0:e=>"string"==typeof e?"<message>":`autolinks=${e.size}`,1:e=>e?.remoteKey}})],AutolinksProvider.prototype,"getEnrichedAutolinks",1),sI([(0,ew.Yz)({args:{0:"<text>",2:e=>e?.length,3:e=>e?.size,4:e=>e?.size}})],AutolinksProvider.prototype,"linkify",1);let CacheProvider=class CacheProvider{_cache=new Map;constructor(e){}dispose(){this._cache.clear()}delete(e,t){this._cache.delete(`${e}:${t}`)}get(e,t,i,r,s){let o,n=this._cache.get(`${e}:${t}`);if(null!=n&&(o="number"==typeof s?.expiryOverride&&s.expiryOverride>0?n.cachedAt+s.expiryOverride:n.expiresAt),null==n||s?.expiryOverride===!0||null!=o&&o>0&&o<Date.now()||null!=n.etag&&n.etag!==i){let{value:s,expiresAt:o}=r();return this.set(e,t,s,i,o)?.value}return n.value}getCurrentAccount(e,t,i){var r;let{key:s,etag:o}={key:(r=e).id,etag:`${r.id}:${r.maybeConnected??!1}`};return this.get("currentAccount",`id:${s}`,o,t,i)}getIssueOrPullRequest(e,t,i,r,s){let{key:o,etag:n}=s$(t,i);return null==t?this.get("issuesOrPrsById",`id:${e}:${o}`,n,r,s):this.get("issuesOrPrsByIdAndRepo",`id:${e}:${o}:${JSON.stringify(t)}}`,n,r,s)}getIssue(e,t,i,r,s){let{key:o,etag:n}=s$(t,i);return null==t?this.get("issuesById",`id:${e}:${o}`,n,r,s):this.get("issuesByIdAndResource",`id:${e}:${o}:${JSON.stringify(t)}}`,n,r,s)}getPullRequest(e,t,i,r,s){let{key:o,etag:n}=s$(t,i);return null==t?this.get("prsById",`id:${e}:${o}`,n,r,s):this.get("prsById",`id:${e}:${o}:${JSON.stringify(t)}}`,n,r,s)}getPullRequestForBranch(e,t,i,r,s){let{key:o,etag:n}=s$(t,i);return this.get("prByBranch",`branch:${e}:${o}`,n,this.wrapPullRequestCacheable(r,o,n),s)}getPullRequestForSha(e,t,i,r,s){let{key:o,etag:n}=s$(t,i);return this.get("prsBySha",`sha:${e}:${o}`,n,this.wrapPullRequestCacheable(r,o,n),s)}getRepositoryDefaultBranch(e,t,i,r){let{key:s,etag:o}=s$(e,t);return this.get("defaultBranch",`repo:${s}`,o,i,r)}getRepositoryMetadata(e,t,i,r){let{key:s,etag:o}=s$(e,t);return this.get("repoMetadata",`repo:${s}`,o,i,r)}set(e,t,i,r,s){let o;return(0,eC.yL)(i)?(i.then(i=>{this.set(e,t,i,r,s)},()=>{this.delete(e,t)}),o={value:i,etag:r,cachedAt:Date.now()}):o={value:i,etag:r,cachedAt:Date.now(),expiresAt:s??function(e,t){let i=Date.now(),r=i+36e5;switch(e){case"defaultBranch":case"repoMetadata":case"currentAccount":return 0;case"issuesById":case"issuesByIdAndResource":{if(null==t)return 0;if(!t.closed)return r;let e=i-(t.closedDate??t.updatedDate).getTime();return i+(e>12096e5?12:1)*36e5}case"issuesOrPrsById":case"issuesOrPrsByIdAndRepo":{if(null==t)return 0;if(!t.closed)return r;let e=i-(t.closedDate??t.updatedDate).getTime();return i+(e>12096e5?12:1)*36e5}case"prByBranch":case"prsById":case"prsBySha":{if(null==t)return"prByBranch"===e?r:0;if("opened"===t.state)return r;let s=i-(t.closedDate??t.mergedDate??t.updatedDate).getTime();return i+(s>12096e5?12:1)*36e5}default:return null==t?0:r}}(e,i)},this._cache.set(`${e}:${t}`,o),o}wrapPullRequestCacheable(e,t,i){return()=>{let r=e();return(0,eC.yL)(r.value)&&r.value.then(e=>{null!=e&&this.set("issuesOrPrsById",`id:${e.id}:${t}`,e,i)}),r}}};function s$(e,t){return{key:e.key,etag:`${e.key}:${t?.maybeConnected??!1}`}}var sT=i(655),sE=Object.defineProperty,s_=Object.getOwnPropertyDescriptor,sO=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),sx=e=>{throw TypeError(e)},sF=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&sx("Object expected"),i&&(r=t[sO("asyncDispose")]),void 0===r&&(r=t[sO("dispose")],i&&(s=r)),"function"!=typeof r&&sx("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},sL=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let GitCodeLensController=class GitCodeLensController{constructor(e){this.container=e,this._disposable=w.Disposable.from((0,sh.Oo)(e.onReady)(this.onReady,this),v.H.onDidChange(this.onConfigurationChanged,this))}_canToggle=!1;_disposable;_provider;_providerDisposable;dispose(){this._providerDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){var t=[];try{let i=sF(t,(0,eb.bP)(`${(0,ev.zu)(this)}.onConfigurationChanged`,!1));if(v.H.changed(e,["codeLens","defaultDateFormat","defaultDateSource","defaultDateStyle"])){null!=e&&ev.Vy.log(i,"resetting CodeLens provider");let t=v.H.get("codeLens");t.enabled&&(t.recentChange.enabled||t.authors.enabled)?this.ensureProvider():(this._providerDisposable?.dispose(),this._provider=void 0),this._canToggle=t.recentChange.enabled||t.authors.enabled,(0,sT.o)("gitlens:disabledToggleCodeLens",!this._canToggle)}}catch(e){var i=e,r=!0}finally{sL(t,i,r)}}onBlameStateChanged(e){var t=[];try{if(null==this._provider||!e.blameable)return;let i=sF(t,(0,eb.bP)(`${(0,ev.zu)(this)}.onBlameStateChanged`,!1));ev.Vy.log(i,"resetting CodeLens provider"),this._provider.reset()}catch(e){var i=e,r=!0}finally{sL(t,i,r)}}async onDirtyIdleTriggered(e){var t=[];try{if(null==this._provider)return;let i=sF(t,(0,eb.bP)(`${(0,ev.zu)(this)}.onDirtyIdleTriggered`,!1));if(!(await e.document.getStatus()).blameable)return;ev.Vy.log(i,"resetting CodeLens provider"),this._provider.reset()}catch(e){var i=e,r=!0}finally{sL(t,i,r)}}toggleCodeLens(){let e=(0,eb.dQ)();if(!this._canToggle){null!=e&&(0,eb.TT)(e," • skipped, disabled");return}if(null!=this._provider){this._providerDisposable?.dispose(),this._provider=void 0;return}this.ensureProvider()}async ensureProvider(){if(null!=this._provider){this._provider.reset();return}this._providerDisposable?.dispose();let{GitCodeLensProvider:e}=await i.e(624).then(i.bind(i,641));this._provider=new e(this.container),this._providerDisposable=w.Disposable.from(this._provider,w.languages.registerCodeLensProvider(e.selector,this._provider),this.container.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?s_(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sE(t,i,o)})([(0,ew.Rm)()],GitCodeLensController.prototype,"toggleCodeLens",1);var sB=i(1681);let sU=new Set(["commit:selected","draft:selected","file:selected"]),sN=new Map;let EventBus=class EventBus{_emitter=new w.EventEmitter;dispose(){this._emitter.dispose()}fire(e,t,i){var r;r=e,sU.has(r)&&sN.set(e,t),this._emitter.fire({name:e,data:t,source:i?.source})}fireAsync(e,t,i){queueMicrotask(()=>this.fire(e,t,i))}getCachedEventArgs(e){return sN.get(e)}on(e,t,i){return this._emitter.event(function(r){e===r.name&&t.call(i,r)},i)}};let sq={done:!0,value:void 0};let StringIterator=class StringIterator{_value="";_pos=0;reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}};let PathIterator=class PathIterator{constructor(e=!0,t=!0){this._splitOnBackslash=e,this._caseSensitive=t}_value;_from;_to;reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){let t=this._value.charCodeAt(this._to);if(t===R.s7.Slash||this._splitOnBackslash&&t===R.s7.Backslash)if(e)this._from++;else break;else e=!1}return this}cmp(e){return this._caseSensitive?(0,_.lF)(e,this._value,0,e.length,this._from,this._to):(0,_.zd)(e,this._value,0,e.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}};let TernarySearchTreeNode=class TernarySearchTreeNode{segment;value;key;left;mid;right;isEmpty(){return!this.left&&!this.mid&&!this.right&&!this.value}};let TernarySearchTree=class TernarySearchTree{static forPaths(){return new TernarySearchTree(new PathIterator)}static forStrings(){return new TernarySearchTree(new StringIterator)}_iter;_root;constructor(e){this._iter=e}clear(){this._root=void 0}set(e,t){let i,r=this._iter.reset(e);for(this._root||(this._root=new TernarySearchTreeNode,this._root.segment=r.value()),i=this._root;;){let e=r.cmp(i.segment);if(e>0)i.left||(i.left=new TernarySearchTreeNode,i.left.segment=r.value()),i=i.left;else if(e<0)i.right||(i.right=new TernarySearchTreeNode,i.right.segment=r.value()),i=i.right;else if(r.hasNext())r.next(),i.mid||(i.mid=new TernarySearchTreeNode,i.mid.segment=r.value()),i=i.mid;else break}let s=i.value;return i.value=t,i.key=e,s}get(e){return this._getNode(e)?.value}_getNode(e){let t=this._iter.reset(e),i=this._root;for(;i;){let e=t.cmp(i.segment);if(e>0)i=i.left;else if(e<0)i=i.right;else if(t.hasNext())t.next(),i=i.mid;else break}return i}has(e){let t=this._getNode(e);return t?.value!==void 0||t?.mid!==void 0}delete(e){this._delete(e,!1)}deleteSuperstr(e){this._delete(e,!0)}_delete(e,t){let i=this._iter.reset(e),r=[],s=this._root;for(;s;){let e=i.cmp(s.segment);if(e>0)r.push([1,s]),s=s.left;else if(e<0)r.push([-1,s]),s=s.right;else if(i.hasNext())i.next(),r.push([0,s]),s=s.mid;else{for(t?(s.left=void 0,s.mid=void 0,s.right=void 0):s.value=void 0;r.length>0&&s.isEmpty();){let[e,t]=r.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case -1:t.right=void 0}s=t}break}}}findSubstr(e){let t,i=this._iter.reset(e),r=this._root;for(;r;){let e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else if(i.hasNext())i.next(),t=r.value||t,r=r.mid;else break}return r?.value||t}findSuperstr(e,t=!1){let i=this._iter.reset(e),r=this._root;for(;r;){let e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else if(i.hasNext())i.next(),r=r.mid;else{if(!r.mid)return;return r=r.mid,{[Symbol.iterator]:()=>this._nodeIterator(r,t)}}}}_nodeIterator(e,t=!1){let i,r,s;return{next:()=>(s||(s=[],r=0,this._forEach(e,e=>s.push(e),t)),r>=s.length)?sq:(i?i.value=s[r++]:i={done:!1,value:s[r++]},i)}}forEach(e){this._forEach(this._root,e)}_forEach(e,t,i=!1){void 0!==e&&(this._forEach(e.left,t,i),e.value&&t(e.value,e.key),i||this._forEach(e.mid,t,i),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(e){return void 0===this._root||this._root.isEmpty()?0:(0,tm.U9)(this.entries(),void 0===e?void 0:([,t])=>e(t))}entries(){return this._iterator(this._root)}values(){return(0,tm.Tj)(this.entries(),([,e])=>e)}highlander(){let e,t;if(void 0===this._root||this._root.isEmpty())return;let i=this.entries(),r=0;for(;!(e=i.next()).done;)if(t=e.value,++r>1)return;return t}some(e){return!(void 0===this._root||this._root.isEmpty())&&(0,tm.zN)(this.entries(),([,t])=>e(t))}*[Symbol.iterator](){yield*this._iterator(this._root)}*_iterator(e){e&&(yield*this._iterator(e.left),e.value&&(yield[e.key,e.value]),yield*this._iterator(e.mid),yield*this._iterator(e.right))}};var sW=Object.defineProperty,sM=Object.getOwnPropertyDescriptor,sG=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sM(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sW(t,i,o),o};let sH=new Uint8Array(0);function sV(e){let t=(0,e1.t5)(e)?e:e1.nk.fromRevisionUri(e);return{path:t.relativePath,ref:t.sha,repoPath:t.repoPath}}let GitFileSystemProvider=class GitFileSystemProvider{constructor(e){this.container=e,this._disposable=w.Disposable.from(this._onDidChangeFile,w.workspace.registerFileSystemProvider(R.xB.GitLens,this,{isCaseSensitive:eX.j9,isReadonly:!0}))}_onDidChangeFile=new w.EventEmitter;get onDidChangeFile(){return this._onDidChangeFile.event}_disposable;_searchTreeMap=new Map;dispose(){this._disposable.dispose()}copy(e,t,i){throw w.FileSystemError.NoPermissions(e)}createDirectory(e){throw w.FileSystemError.NoPermissions(e)}delete(e,t){throw w.FileSystemError.NoPermissions(e)}async readDirectory(e){let{path:t,ref:i,repoPath:r}=sV(e),s=await this.getTree(t,i,r);if(void 0===s)throw w.FileSystemError.FileNotFound(e);return[...(0,tm.Tj)(s,e=>[null!=t&&0!==t.length?(0,T.Fd)((0,D.V8)(t,e.path)):e.path,sj(e.type)])]}async readFile(e){let{path:t,ref:i,repoPath:r}=sV(e);if(i===L.nB)return sH;let s=await this.container.git.revision(r).getRevisionContent(i,t);return null!=s?s:sH}rename(e,t,i){throw w.FileSystemError.NoPermissions(e)}async stat(e){let t,{path:i,ref:r,repoPath:s}=sV(e);if(r===L.nB)return{type:w.FileType.File,size:0,ctime:0,mtime:0};let o=this._searchTreeMap.get(r);if(null!=o)t=(await o).get(`/~/${i}`);else{if(null==i||0===i.length){if(null==await this.getTree(i,r,s))throw w.FileSystemError.FileNotFound(e);return{type:w.FileType.Directory,size:0,ctime:0,mtime:0}}t=await this.container.git.revision(s).getTreeEntryForRevision(r,i)}if(null==t)throw w.FileSystemError.FileNotFound(e);return{type:sj(t.type),size:t.size,ctime:0,mtime:0}}watch(){return{dispose:()=>{}}}writeFile(e){throw w.FileSystemError.NoPermissions(e)}async createSearchTree(e,t){let i=TernarySearchTree.forPaths(),r=await this.container.git.revision(t).getTreeForRevision(e);for(let e of(i.set("~",{ref:"",oid:"",path:"~",size:0,type:"tree"}),r))i.set(`~/${e.path}`,e);return i}getOrCreateSearchTree(e,t){let i=this._searchTreeMap.get(e);return void 0===i&&(i=this.createSearchTree(e,t),this._searchTreeMap.set(e,i)),i}async getTree(e,t,i){return(await this.getOrCreateSearchTree(t,i)).findSuperstr(`/~/${e}`,!0)}};function sj(e){switch(e){case"blob":return w.FileType.File;case"tree":return w.FileType.Directory;default:return w.FileType.Unknown}}sG([(0,ew.Yz)()],GitFileSystemProvider.prototype,"readDirectory",1),sG([(0,ew.Yz)()],GitFileSystemProvider.prototype,"readFile",1),sG([(0,ew.Yz)()],GitFileSystemProvider.prototype,"stat",1);var sQ=i(4135),sz=i(6599),sY=i(4429),sK=Object.defineProperty,sZ=Object.getOwnPropertyDescriptor,sJ=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),sX=e=>{throw TypeError(e)},s0=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sZ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sK(t,i,o),o},s1=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&sX("Object expected"),i&&(r=t[sJ("asyncDispose")]),void 0===r&&(r=t[sJ("dispose")],i&&(s=r)),"function"!=typeof r&&sX("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},s2=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let s5=Object.freeze([]),s4=Object.freeze({dispose:()=>{}}),s7=new Map([["master",100],["main",15],["default",10],["develop",5],["development",1]]);let GitProviderService=class GitProviderService{constructor(e){this.container=e,this._initializing=(0,eC.v6)(),this._disposable=w.Disposable.from(this._onDidChangeProviders,this._onDidChangeRepositories,e.subscription.onDidChange(this.onSubscriptionChanged,this),w.window.onDidChangeWindowState(this.onWindowStateChanged,this),w.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),v.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(e=>{"connected"===e.reason&&(0,ih.H3)("failed"),this.resetCaches("providers"),this.updateContext()}),w.workspace.isTrusted?s4:w.workspace.onDidGrantWorkspaceTrust(()=>{w.workspace.isTrusted&&w.workspace.workspaceFolders?.length&&this.discoverRepositories(w.workspace.workspaceFolders,{force:!0})}),...this.registerCommands()),this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.CommitShaFormatting.reset(),this.container.PullRequestDateFormatting.reset(),this.updateContext()}_onDidChangeProviders=new w.EventEmitter;get onDidChangeProviders(){return this._onDidChangeProviders.event}fireProvidersChanged(e,t){this.container.telemetry.enabled&&this.container.telemetry.setGlobalAttributes({"providers.count":this._providers.size,"providers.ids":(0,tm.fj)(this._providers.keys(),",")}),this._onDidChangeProviders.fire({added:e??[],removed:t??[],etag:this._etag})}_onDidChangeRepositories=new w.EventEmitter;get onDidChangeRepositories(){return this._onDidChangeRepositories.event}fireRepositoriesChanged(e,t){if(this.container.telemetry.enabled){let i=this.openRepositories.map(e=>e.uri.scheme);this.container.telemetry.setGlobalAttributes({"repositories.count":i.length,"repositories.schemes":(0,$.EG)(i,",")}),this.container.telemetry.sendEvent("repositories/changed",{"repositories.added":e?.length??0,"repositories.removed":t?.length??0})}this.clearAccessCache(),this._reposVisibilityCache=void 0,this._onDidChangeRepositories.fire({added:e??[],removed:t??[],etag:this._etag}),e?.length&&this.container.telemetry.enabled&&setTimeout(()=>{Promise.allSettled(e.map(async e=>{let t,i,r="1.year.ago",[s,o]=await Promise.allSettled([e.git.remotes().getRemotes(),e.git.contributors().getContributorsStats({since:r})]),n=(0,eC.Ro)(s)??[],a=new Set;for(let e of n)a.add(e.provider?.id??"unknown");let l=(0,eC.Ro)(o);null!=l&&(i=Math.round((t=(0,tm.cz)(l.contributions))/l.count));let c=function(e,t){if(null==e)return{};let i={[`${t}[1]`]:0,[`${t}[2-5]`]:0,[`${t}[6-10]`]:0,[`${t}[11-50]`]:0,[`${t}[51-100]`]:0,[`${t}[101+]`]:0};for(let r of e.contributions)1===r?i[`${t}[1]`]++:r<=5?i[`${t}[2-5]`]++:r<=10?i[`${t}[6-10]`]++:r<=50?i[`${t}[11-50]`]++:r<=100?i[`${t}[51-100]`]++:i[`${t}[101+]`]++;return i}(l,"repository.contributors.distribution.");this.container.telemetry.sendEvent("repository/opened",{"repository.id":e.idHash,"repository.scheme":e.uri.scheme,"repository.closed":e.closed,"repository.folder.scheme":e.folder?.uri.scheme,"repository.provider.id":e.provider.id,"repository.remoteProviders":(0,tm.fj)(a,","),"repository.contributors.commits.count":t,"repository.contributors.commits.avgPerContributor":i,"repository.contributors.count":l?.count,"repository.contributors.since":r,...c})}))},0)}_onDidChangeRepository=new w.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}supportedSchemes=new Set;_disposable;_initializing;_pendingRepositories=new Map;_providers=new Map;_repositories=new td.PB;_visitedPaths=new sY.ZZ;dispose(){this._disposable.dispose(),this._providers.clear(),this._repositories.forEach(e=>e.dispose()),this._repositories.clear()}_etag=0;get etag(){return this._etag}onConfigurationChanged(e){(v.H.changed(e,"defaultDateFormat")||v.H.changed(e,"defaultDateSource")||v.H.changed(e,"defaultDateStyle"))&&(this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.PullRequestDateFormatting.reset()),v.H.changed(e,"advanced.abbreviatedShaLength")&&this.container.CommitShaFormatting.reset(),v.H.changed(e,"views.contributors.showAllBranches")&&this.resetCaches("contributors"),null!=e&&v.H.changed(e,"integrations.enabled")&&this.updateContext()}registerCommands(){return[(0,rB.Lb)("gitlens.plus.refreshRepositoryAccess",()=>this.clearAllOpenRepoVisibilityCaches())]}onSubscriptionChanged(e){this.clearAccessCache(),this._subscription=e.current}onWindowStateChanged(e){e.focused?this._repositories.forEach(e=>e.resume()):this._repositories.forEach(e=>e.suspend())}onWorkspaceFoldersChanged(e){if(this.container.telemetry.enabled){let e=w.workspace.workspaceFolders?.map(e=>e.uri.scheme);this.container.telemetry.setGlobalAttributes({"folders.count":e?.length??0,"folders.schemes":null!=e?(0,$.EG)(e,", "):""})}if(e.added.length&&(this._etag=Date.now(),this.discoverRepositories(e.added)),e.removed.length){this._etag=Date.now();let t=[];for(let i of e.removed){let e=this._repositories.getClosest(i.uri);null!=e&&(this._repositories.remove(e.uri,!1),t.push(e))}t.length&&(this.updateContext(),queueMicrotask(()=>{this.fireRepositoriesChanged([],t),t.forEach(e=>e.dispose())}))}}get hasProviders(){return 0!==this._providers.size}get registeredProviders(){return[...(0,tm.Tj)(this._providers.values(),e=>({...e.descriptor}))]}get openRepositories(){if(0===this.repositoryCount)return s5;let e=[...(0,tm.pb)(this.repositories,e=>!e.closed)];return 0===e.length?e:(0,tA.ZE)(e)}get openRepositoryCount(){return 0===this.repositoryCount?0:(0,tm.U9)(this.repositories,e=>!e.closed)}get repositories(){return this._repositories.values()}get repositoryCount(){return this._repositories.count}get highlander(){return 1===this.repositoryCount||1===this.openRepositoryCount?(0,tm.$1)(this._repositories.values()):void 0}register(e,t){if(e!==t.descriptor.id)throw Error(`Id '${e}' must match provider id '${t.descriptor.id}'`);if(this._providers.has(e))throw Error(`Provider '${e}' has already been registered`);for(let i of(this._providers.set(e,t),t.supportedSchemes))this.supportedSchemes.add(i);let i=[],r=t.openRepositoryInitWatcher?.();null!=r&&i.push(r,r.onDidCreate(e=>{let t=w.workspace.getWorkspaceFolder(e);null!=t&&this.discoverRepositories([t],{force:!0})}));let s=w.Disposable.from(t,...i,t.onDidChange(()=>{var e=[];try{this._etag=Date.now();let i=s1(e,(0,eb.bP)(`${(0,ev.zu)(t)}.onDidChange`,!1));ev.Vy.debug(i,"");let{workspaceFolders:r}=w.workspace;r?.length&&this.discoverRepositories(r,{force:!0})}catch(e){var i=e,r=!0}finally{s2(e,i,r)}}),t.onDidChangeRepository(async e=>{var i=[];try{this._etag=Date.now();let r=s1(i,(0,eb.bP)(`${(0,ev.zu)(t)}.onDidChangeRepository(e=${e.repository.toString()})`,!1));if(ev.Vy.debug(r,""),e.changed(e4.Z_.Closed,e4.Ti.Any)?(this.updateContext(),queueMicrotask(()=>this.fireRepositoriesChanged([],[e.repository]))):e.changed(e4.Z_.Opened,e4.Ti.Any)&&(this.updateContext(),queueMicrotask(()=>this.fireRepositoriesChanged([e.repository],[]))),e.changed(e4.Z_.Remotes,e4.Ti.Any)){let i=this.getVisibilityInfoFromCache(e.repository.path);null!=i&&await this.checkVisibilityCachedRemotes(e.repository.path,i,()=>t.remotes.getRemotes(e.repository.path))}this._onDidChangeRepository.fire(e)}catch(e){var r=e,s=!0}finally{s2(i,r,s)}}),t.onDidCloseRepository(e=>{var i=[];try{this._etag=Date.now();let r=this._repositories.get(e.uri),s=s1(i,(0,eb.bP)(`${(0,ev.zu)(t)}.onDidCloseRepository(e=${e.uri.toString()})`,!1));ev.Vy.debug(s,`repository=${r?.toString()}`),null!=r&&(r.closed=!0)}catch(e){var r=e,s=!0}finally{s2(i,r,s)}}),t.onDidOpenRepository(e=>{var i=[];try{this._etag=Date.now();let r=this._repositories.get(e.uri),s=s1(i,(0,eb.bP)(`${(0,ev.zu)(t)}.onDidOpenRepository(e=${e.uri.toString()})`,!1));ev.Vy.debug(s,`repository=${r?.toString()}`),null!=r?r.closed=!1:this.getOrOpenRepository(e.uri)}catch(e){var r=e,s=!0}finally{s2(i,r,s)}}));return this._etag=Date.now(),this.fireProvidersChanged([t]),null==this._initializing&&this.onWorkspaceFoldersChanged({added:w.workspace.workspaceFolders??[],removed:[]}),{dispose:()=>{this._etag=Date.now(),s.dispose(),this._providers.delete(e);let i=[];for(let t of[...this._repositories.values()])t?.provider.id===e&&(this._repositories.remove(t.uri,!1),i.push(t));let{deactivating:r}=this.container;r||this.updateContext(),i.length&&queueMicrotask(()=>{r||this.fireRepositoriesChanged([],i),i.forEach(e=>e.dispose())}),r||this.fireProvidersChanged([],[t])}}}async registrationComplete(){let e=(0,eb.dQ)(),{workspaceFolders:t}=w.workspace;t?.length?(await this.discoverRepositories(t),0===this.repositoryCount&&eX.HZ&&setTimeout(()=>{({workspaceFolders:t}=w.workspace),t?.length&&this.discoverRepositories(t,{force:!0})},1e3)):(this._initializing?.fulfill(this._etag),this._initializing=void 0,this.updateContext());let i=v.H.getCore("git.autoRepositoryDetection");this.container.telemetry.enabled&&setTimeout(()=>this.container.telemetry.sendEvent("providers/registrationComplete",{"config.git.autoRepositoryDetection":i}),0),(0,eb.TT)(e,` ${R.EO.Dot} repositories=${this.repositoryCount}, workspaceFolders=${t?.length}, git.autoRepositoryDetection=${i}`)}getOpenProviders(){return[...this.getOpenRepositoriesByProvider().keys()].map(e=>this._providers.get(e))}getOpenRepositories(e){return(0,tm.pb)(this.repositories,t=>!t.closed&&(null==e||e===t.provider.id))}getOpenRepositoriesByProvider(){let e=[...(0,tm.pb)(this.repositories,e=>!e.closed)];return 0===e.length?new Map:(0,tm.Fi)(e,e=>e.provider.id)}hasOpenRepositories(e){return(0,tm.zN)(this.repositories,t=>!t.closed&&(null==e||e===t.provider.id))}_discoveredWorkspaceFolders=new Map;_discoveringRepositories;get isDiscoveringRepositories(){return(0,eC.FO)(this._discoveringRepositories)??(0,eC.FO)(this._initializing)}async discoverRepositories(e,t){this._discoveringRepositories?.pending&&(await this._discoveringRepositories.promise,this._discoveringRepositories=void 0);let i=this._initializing??(0,eC.v6)();this._discoveringRepositories=i,this._initializing=void 0;try{let i=[];for(let r of e){if(!t?.force&&this._discoveredWorkspaceFolders.has(r))continue;let e=this.discoverRepositoriesCore(r);i.push(e),this._discoveredWorkspaceFolders.set(r,e)}if(0===i.length)return;let r=await Promise.allSettled(i),s=(0,tm.qI)((0,tm.pb)(r,e=>"fulfilled"===e.status),e=>e.value),o=[];for(let e of s)this._repositories.add(e),e.closed||o.push(e);this.updateContext(),o.length&&(this._etag=Date.now(),queueMicrotask(()=>{this.storeRepositoriesLocation(o),this.fireRepositoriesChanged(o)}))}finally{queueMicrotask(()=>{i.fulfill(this._etag)})}}async discoverRepositoriesCore(e){let{provider:t}=this.getProvider(e.uri);try{return await t.discoverRepositories(e.uri)}catch(i){return this._discoveredWorkspaceFolders.delete(e),ev.Vy.error(i,`${t.descriptor.name} Provider(${t.descriptor.id}) failed discovering repositories in ${e.uri.toString(!0)}`),[]}}async findRepositories(e,t){let{provider:i}=this.getProvider(e);return i.discoverRepositories(e,t)}_subscription;async getSubscription(){return this._subscription??(this._subscription=await this.container.subscription.getSubscription())}_accessCache=new Map;_accessCacheByRepo=new Map;clearAccessCache(){this._accessCache.clear(),this._accessCacheByRepo.clear()}async access(e,t){if(null==t){let t=this._accessCache.get(e);return null==t&&(t=this.accessCore(e),this._accessCache.set(e,t)),t}let{path:i}=this.getProvider(t),r=this._accessCacheByRepo.get(i);return null==r&&(r=this.accessCore(e,t),this._accessCacheByRepo.set(i,r)),r}async accessCore(e,t){let i=await this.getSubscription();this.container.telemetry.enabled&&queueMicrotask(()=>void this.visibility());let r=i.plan.effective.id;if((0,sz.zx)(r))return{allowed:i.account?.verified!==!1,subscription:{current:i}};if(null!=e&&((0,P.dJ)(e)||(0,P.f0)(e)))return{allowed:!1,subscription:{current:i,required:sQ.qn.Pro}};function s(e,t=!1){let{path:r}=this.getProvider(e),o=t?void 0:this._accessCacheByRepo.get(r);return null==o&&(o=this.visibility(e).then(e=>"private"===e?{allowed:!1,subscription:{current:i,required:sQ.qn.Pro},visibility:e}:{allowed:!0,subscription:{current:i},visibility:e},()=>({allowed:!0,subscription:{current:i}})),this._accessCacheByRepo.set(r,o)),o}if(null==t){let e=this.openRepositories;if(0===e.length)return{allowed:!1,subscription:{current:i}};if(1===e.length)return s.call(this,e[0].path);switch(await this.visibility()){case"private":return{allowed:!1,subscription:{current:i,required:sQ.qn.Pro},visibility:"private"};case"mixed":return{allowed:"mixed",subscription:{current:i,required:sQ.qn.Pro}};default:return{allowed:!0,subscription:{current:i},visibility:"public"}}}return s.call(this,t,!0)}async ensureAccess(e,t){let{allowed:i,subscription:r}=await this.access(e,t);if(!1===i)throw new ik.Uk(r.current,r.required)}supports(e,t){let{provider:i}=this.getProvider(e);return i.supports(t)}_reposVisibilityCache;_repoVisibilityCache;ensureRepoVisibilityCache(){if(null==this._repoVisibilityCache){let e=this.container.storage.get("repoVisibility")?.map(([e,t])=>[e,{visibility:t.visibility,timestamp:t.timestamp,remotesHash:t.remotesHash}]);this._repoVisibilityCache=new Map(e)}}async clearRepoVisibilityCache(e){if(null==e)this._repoVisibilityCache=void 0,this.container.storage.delete("repoVisibility");else{e?.forEach(e=>this._repoVisibilityCache?.delete(e));let t=Array.from(this._repoVisibilityCache?.entries()??[]);0===t.length?await this.container.storage.delete("repoVisibility"):await this.container.storage.store("repoVisibility",t)}}getVisibilityInfoFromCache(e){this.ensureRepoVisibilityCache();let t=this._repoVisibilityCache?.get(e);if(null!=t){if(Date.now()-t.timestamp>2592e6){this.clearRepoVisibilityCache([e]);return}return t}}async checkVisibilityCachedRemotes(e,t,i){if(null==t)return!0;if("public"===t.visibility){let r=await i();if(0===r.length||!r.some(e=>e.remoteKey===t.remotesHash))return this.clearRepoVisibilityCache([e]),!1}else if("private"===t.visibility&&(0,tu.U6)(await i())!==t.remotesHash)return this.clearRepoVisibilityCache([e]),!1;return!0}updateVisibilityCache(e,t){this.ensureRepoVisibilityCache(),this._repoVisibilityCache?.set(e,t),this.container.storage.store("repoVisibility",Array.from(this._repoVisibilityCache.entries())).catch()}clearAllRepoVisibilityCaches(){return this.clearRepoVisibilityCache()}clearAllOpenRepoVisibilityCaches(){let e=this.openRepositories.map(e=>this.getProvider(e.path).path);return this.clearRepoVisibilityCache(e)}async visibility(e){if(null==e){let e=this._reposVisibilityCache;return null==e&&(e=await this.visibilityCore(),this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttribute("repositories.visibility",e),this.container.telemetry.sendEvent("repositories/visibility",{"repositories.visibility":e})),this._reposVisibilityCache=e),e}let{path:t}=this.getProvider(e),i=this.getVisibilityInfoFromCache(t)?.visibility;return null==i&&(i=await this.visibilityCore(e),this.container.telemetry.enabled&&setTimeout(()=>{let t=this.getRepository(e);this.container.telemetry.sendEvent("repository/visibility",{"repository.visibility":i,"repository.id":t?.idHash,"repository.scheme":t?.uri.scheme,"repository.closed":t?.closed,"repository.folder.scheme":t?.folder?.uri.scheme,"repository.provider.id":t?.provider.id})},0)),i}async visibilityCore(e){async function t(e){let{provider:t,path:i}=this.getProvider(e),r=this.getVisibilityInfoFromCache(i);if(null==r||!await this.checkVisibilityCachedRemotes(i,r,()=>t.remotes.getRemotes(i,{sort:!0}))){let[e,r]=await t.visibility(i);return"local"!==e&&this.updateVisibilityCache(i,{visibility:e,timestamp:Date.now(),remotesHash:r}),e}return r.visibility}if(null==e){let e=this.openRepositories;if(0===e.length)return"private";if(1===e.length)return t.call(this,e[0].path);let i=!1,r=!1,s=!1;for await(let o of(0,eC.w)(e.map(e=>t.call(this,e.path))))if("fulfilled"===o.status){if("public"===o.value){if(s||r)return"mixed";i=!0}else if("local"===o.value){if(i||r)return"mixed";s=!0}else if("private"===o.value){if(i||s)return"mixed";r=!0}}return i?"public":s?"local":"private"}return t.call(this,e)}_context={enabled:!1,disabled:!1};async setEnabledContext(e){let t=!e;if(e||null==this._initializing||(t=!this.container.storage.getWorkspace("assumeRepositoriesOnStartup")),this.container.telemetry.setGlobalAttribute("enabled",e),this._context.enabled===e&&this._context.disabled===t)return;let i=[];this._context.enabled!==e&&(this._context.enabled=e,i.push((0,sT.o)("gitlens:enabled",e))),this._context.disabled!==t&&(this._context.disabled=t,i.push((0,sT.o)("gitlens:disabled",t))),await Promise.allSettled(i),null==this._initializing&&this.container.storage.storeWorkspace("assumeRepositoriesOnStartup",e).catch()}_sendProviderContextTelemetryDebounced;updateContext(){if(this.container.deactivating)return;let e=this.openRepositoryCount,t=0!==e;async function i(){let e=v.H.get("integrations.enabled"),i=new Set,r=new Set,s=new Set,o=new Set;async function n(t){let n=!1,a=!1,l=await t.git.remotes().getRemotes();for(let c of l)if(i.add(c.provider?.id??"unknown"),r.add(t.uri.toString()),r.add(t.path),e&&(!n||!a)&&c.hasIntegration()){n=!0,s.add(t.uri.toString()),s.add(t.path);let e=c.maybeIntegrationConnected;if(null==e&&(c.default||1===l.length)){let t=await c.getIntegration();e=await t?.isConnected()}e&&(a=!0,o.add(t.uri.toString()),o.add(t.path))}}t&&await Promise.allSettled((0,tm.Tj)(this._repositories.values(),n)),this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttributes({"repositories.hasRemotes":0!==r.size,"repositories.hasRichRemotes":0!==s.size,"repositories.hasConnectedRemotes":0!==o.size,"repositories.withRemotes":r.size/2,"repositories.withHostingIntegrations":s.size/2,"repositories.withHostingIntegrationsConnected":o.size/2,"repositories.remoteProviders":(0,tm.fj)(i,",")}),null==this._sendProviderContextTelemetryDebounced&&(this._sendProviderContextTelemetryDebounced=(0,tg.s)(()=>this.container.telemetry.sendEvent("providers/context"),2500)),this._sendProviderContextTelemetryDebounced()),await Promise.allSettled([(0,sT.o)("gitlens:repos:withRemotes",r.size?[...r]:void 0),(0,sT.o)("gitlens:repos:withHostingIntegrations",s.size?[...s]:void 0),(0,sT.o)("gitlens:repos:withHostingIntegrationsConnected",o.size?[...o]:void 0)])}this.setEnabledContext(t),null==this._initializing&&(this.container.telemetry.setGlobalAttributes({enabled:t,"repositories.count":e}),t&&(i.call(this),this._providers.forEach(e=>e.updateContext?.())))}getProvider(e){let t;if(null==e||"string"!=typeof e&&!this.supportedSchemes.has(e.scheme))throw new ik.ND(e);"string"==typeof e?t=(0,T.my)(e)??R.xB.File:{scheme:t}=e;let i=new Set;for(let r of this._providers.values()){let s=r.canHandlePathOrUri(t,e);null!=s&&i.add({provider:r,path:s})}if(0===i.size)throw new ik.ND(e);if(i.size>1){for(let e of i)if(this.hasOpenRepositories(e.provider.descriptor.id))return e}return(0,tm.$1)(i)}getAbsoluteUri(e,t){if(null==t)return"string"==typeof e?(0,T.bm)(e)?w.Uri.parse(e,!0):w.Uri.file(e):e;if("string"!=typeof t&&"string"==typeof e){let i=(0,T.Fd)(e);if(!(0,T.oP)(i))return w.Uri.joinPath(t,i)}let{provider:i}=this.getProvider(t);return i.getAbsoluteUri(e,t)}async getBestRevisionUri(e,t,i){if(null==e||i===L.nB)return;let{provider:r,path:s}=this.getProvider(e);return r.getBestRevisionUri(s,r.getRelativePath(t,s),i)}getRelativePath(e,t){let{provider:i}=this.getProvider(e instanceof w.Uri?e:t);return i.getRelativePath(e,t)}getRevisionUri(e,t,i){let r,s;"string"==typeof e?(s=e,r="string"==typeof t?t:t?.originalPath??t?.path??""):(s=e.sha,i=e.repoPath,r=(0,D.Sp)(e));let{provider:o,path:n}=this.getProvider(i);return o.getRevisionUri(n,o.getRelativePath(r,n),s)}getWorkingUri(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getWorkingUri(r,t)}async reset(e,t={},i){let{provider:r,path:s}=this.getProvider(e);if(null==r.reset)throw new ik.Vq(r.descriptor.name);return r.reset(s,i,t)}applyChangesToWorkingFile(e,t,i){let{provider:r}=this.getProvider(e);if(null==r.applyChangesToWorkingFile)throw new ik.Vq(r.descriptor.name);return r.applyChangesToWorkingFile(e,t,i)}checkout(e,t,i){let{provider:r,path:s}=this.getProvider(e);if(null==r.checkout)throw new ik.Vq(r.descriptor.name);return r.checkout(s,t,i)}async clone(e,t){let{provider:i}=this.getProvider(t);return i.clone?.(e,t)}resetCaches(...e){this.container.events.fire("git:cache:reset",{types:e})}excludeIgnoredUris(e,t){let{provider:i,path:r}=this.getProvider(e);return i.excludeIgnoredUris(r,t)}fetch(e,t){let{provider:i,path:r}=this.getProvider(e);if(null==i.fetch)throw new ik.Vq(i.descriptor.name);return i.fetch(r,t)}async fetchAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].fetch(t);return}await w.window.withProgress({location:w.ProgressLocation.Notification,title:`Fetching ${e.length} repositories`},()=>Promise.allSettled(e.map(e=>e.fetch({progress:!1,...t}))))}}pull(e,t){let{provider:i,path:r}=this.getProvider(e);if(null==i.pull)throw new ik.Vq(i.descriptor.name);return i.pull(r,t)}async pullAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].pull(t);return}await w.window.withProgress({location:w.ProgressLocation.Notification,title:`Pulling ${e.length} repositories`},()=>Promise.allSettled(e.map(e=>e.pull({progress:!1,...t}))))}}push(e,t){let{provider:i,path:r}=this.getProvider(e);if(null==i.push)throw new ik.Vq(i.descriptor.name);return i.push(r,t)}async pushAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].push(t);return}await w.window.withProgress({location:w.ProgressLocation.Notification,title:`Pushing ${e.length} repositories`},()=>Promise.allSettled(e.map(e=>e.push({progress:!1,...t}))))}}async getBlame(e,t){let{provider:i}=this.getProvider(e);return i.getBlame(e,t)}async getBlameContents(e,t){let{provider:i}=this.getProvider(e);return i.getBlameContents(e,t)}async getBlameForLine(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getBlameForLine(e,t,i,r)}async getBlameForLineContents(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getBlameForLineContents(e,t,i,r)}async getBlameForRange(e,t){let{provider:i}=this.getProvider(e);return i.getBlameForRange(e,t)}async getBlameForRangeContents(e,t,i){let{provider:r}=this.getProvider(e);return r.getBlameForRangeContents(e,t,i)}getBlameRange(e,t,i){let{provider:r}=this.getProvider(t);return r.getBlameRange(e,t,i)}async getBranchAheadRange(e){if(e.upstream?.state.ahead)return(0,em.Xn)(e.upstream?.name,e.ref,"..");if(null==e.upstream){let{values:t}=await this.branches(e.repoPath).getBranches({filter:e=>s7.has(e.name)});if(t.length>0){let i;for(let e of t){let t=s7.get(e.name);if((null==i||i.weight<t)&&(i={weight:t,branch:e}),100===i.weight)break}let r=i.branch.upstream?.name??i.branch.ref;if(r!==e.ref)return(0,em.Xn)(r,e.ref,"..")}}}async getBranchesAndTagsTipsLookup(e,t){if(null==e)return()=>void 0;let[i,r,s]=await Promise.allSettled([this.branches(e).getBranches(),this.tags(e).getTags(),this.remotes(e).getRemotes()]),o=(0,eC.Ro)(i)?.values??[],n=(0,eC.Ro)(r)?.values??[],a=(0,eC.Ro)(s)??[],l=(0,tm.fA)(o.concat(n),e=>e.sha,e=>{let i;if("branch"===e.refType)if(e.remote){let t=a.find(t=>t.name===e.getRemoteName());i=`$(${(0,tu.O5)(t)}) `}else i=e.current?"$(target) ":"$(git-branch) ";else i="$(tag) ";return{name:e.name,icon:i,compactName:t&&"branch"===e.refType&&e.getNameWithoutRemote()===t?e.getRemoteName():void 0,type:e.refType}});return(e,i)=>{let r,s=l.get(e);if(!s?.length)return;let o=t&&i?.compact?s.filter(e=>e.name!==t):s;function n(e){let t=(i?.compact?e.compactName:void 0)??e.name;return`${i?.icons?`${e.icon}${i?.pills?"&nbsp;":" "}`:""}${t}`}if(i?.compact){if(!o.length)return;let[e]=o;r=[`${n(e)}${o.length>1?`, ${R.EO.Ellipsis}`:""}`]}else r=o.map(n);return i?.pills?r.map(e=>`<span style="color:#ffffff;background-color:#1d76db;border-radius:3px;"${"object"==typeof i.pills?` class="${i.pills.cssClass}"`:""}>&nbsp;${e}&nbsp;&nbsp;</span>`).join("&nbsp;&nbsp;"):r.join(", ")}}getDiffForFile(e,t,i){let{provider:r}=this.getProvider(e);return r.getDiffForFile(e,t,i)}getDiffForFileContents(e,t,i){let{provider:r}=this.getProvider(e);return r.getDiffForFileContents(e,t,i)}getDiffForLine(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getDiffForLine(e,t,i,r)}getLastFetchedTimestamp(e){let{provider:t,path:i}=this.getProvider(e);return t.getLastFetchedTimestamp(i)}getBestRepository(e,t){let i=this.repositoryCount;if(0!==i){if(1===i)return this.highlander;if(null!=e&&e instanceof w.Uri){let t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??w.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??this.highlander}}getBestRepositoryOrFirst(e,t){let i=this.repositoryCount;if(0!==i){if(1===i)return(0,tm.$1)(this._repositories.values());if(null!=e&&e instanceof w.Uri){let t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??w.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??(0,tm.$1)(this._repositories.values())}}async getOrOpenRepository(e,t){let i,r,s;if(null==e)return;let o=(0,eb.dQ)();if("string"==typeof e){if(!e)return;i=this.getAbsoluteUri(e)}else i=e;let n=(0,D.Sp)(i);if(null==(r=this.getRepository(i))&&this._discoveringRepositories?.pending&&(await this._discoveringRepositories.promise,r=this.getRepository(i)),t?.detectNested??v.H.get("detectNestedRepositories",i)){if(!t?.force&&this._visitedPaths.has(n))return r;let e=await w.workspace.fs.stat(i),a=(0,D.Sp)(i);if(ev.Vy.debug(o,`Ensuring URI is a folder; repository=${r?.toString()}, uri=${i.toString(!0)} stats.type=${e.type}, bestPath=${a}, visitedPaths.has=${this._visitedPaths.has(a)}`),(e.type&w.FileType.Directory)!==w.FileType.Directory&&(i=w.Uri.joinPath(i,".."),!t?.force&&this._visitedPaths.has(a)))return r;s=!0}else if(null!=r)return r;let a=(0,td.dX)(i),l=this._pendingRepositories.get(a);return null==l&&(l=(async function(){let e,{provider:l}=this.getProvider(i),c=await l.findRepositoryUri(i,s);if(this._visitedPaths.set(n),null==c)return;if(0!==this._repositories.count){if(null!=(r=this._repositories.get(c)))return r;e=this._repositories.getClosest(l.getAbsoluteUri(i,c))}let u=v.H.getCore("git.autoRepositoryDetection")??!0,h=t?.closeOnOpen??(!0!==u&&"openEditors"!==u);!h&&t?.closeOnOpen!==!1&&!s&&i.path.includes("/.git/")&&(h=!0),ev.Vy.log(o,`Repository found in '${c.toString(!0)}'`);let d=l.openRepository(e?.folder,c,!1,void 0,h),p=[];for(let e of d)this._repositories.add(e),e.closed||p.push(e);return this._pendingRepositories.delete(a),this.updateContext(),p.length&&(this._etag=Date.now(),queueMicrotask(()=>{this.storeRepositoriesLocation(p),this.fireRepositoriesChanged(p)})),r=1===d.length?d[0]:this.getRepository(i)}).call(this),this._pendingRepositories.set(a,l)),l}async storeRepositoriesLocation(e){let t=(0,eb.dQ)();for(let i of e)try{await this.container.repositoryIdentity.storeRepositoryLocation(i)}catch(e){ev.Vy.error(e,t)}}async getOrOpenRepositoryForEditor(e){return null==(e=e??w.window.activeTextEditor)?this.highlander:this.getOrOpenRepository(e.document.uri)}getRepository(e){if(0!==this.repositoryCount&&null!=e){if("string"==typeof e){if(!e)return;return this._repositories.getClosest(this.getAbsoluteUri(e))}return this._repositories.getClosest(e)}}async getLocalInfoFromRemoteUri(e,t){for(let i of this.openRepositories)for(let r of(await i.git.remotes().getRemotes())){let s=await r?.provider?.getLocalInfoFromRemoteUri(i,e,t);if(null!=s)return s}}async getUniqueRepositoryId(e){return this.commits(e).getInitialCommitSha?.()}hasUnsafeRepositories(){for(let e of this._providers.values())if(e.hasUnsafeRepositories?.())return!0;return!1}isRepositoryForEditor(e,t){return null!=(t=t??w.window.activeTextEditor)&&e===this.getRepository(t.document.uri)}isTrackable(e){if(!this.supportedSchemes.has(e.scheme))return!1;let{provider:t}=this.getProvider(e);return t.isTrackable(e)}async isTracked(e){if(!this.supportedSchemes.has(e.scheme))return!1;let{provider:t}=this.getProvider(e);return t.isTracked(e)}async runGitCommandViaTerminal(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.runGitCommandViaTerminal?.(o,t,i,r)}_subProviderProxies=new Map;getSubProviderProxy(e,t){let{provider:i,path:r}=this.getProvider(e),s=this._subProviderProxies.get(i);null==s&&(s=new Map,this._subProviderProxies.set(i,s));let o=`${t}|${r}`,n=s.get(o);if(null==n){let e=i[t];if(null==e)return;n=new Proxy(e,{get:(e,t)=>{let i=e[t];return"function"==typeof i?(...t)=>i.call(e,r,...t):i}}),s.set(o,n)}return n}branches(e){return this.getSubProviderProxy(e,"branches")}commits(e){return this.getSubProviderProxy(e,"commits")}config(e){return this.getSubProviderProxy(e,"config")}contributors(e){return this.getSubProviderProxy(e,"contributors")}diff(e){return this.getSubProviderProxy(e,"diff")}graph(e){return this.getSubProviderProxy(e,"graph")}patch(e){return this.getSubProviderProxy(e,"patch")}refs(e){return this.getSubProviderProxy(e,"refs")}remotes(e){return this.getSubProviderProxy(e,"remotes")}revision(e){return this.getSubProviderProxy(e,"revision")}staging(e){return this.getSubProviderProxy(e,"staging")}stash(e){return this.getSubProviderProxy(e,"stash")}status(e){return this.getSubProviderProxy(e,"status")}tags(e){return this.getSubProviderProxy(e,"tags")}worktrees(e){return this.getSubProviderProxy(e,"worktrees")}async getOpenScmRepositories(){let e=await Promise.allSettled([...this._providers.values()].map(e=>e.getOpenScmRepositories()));return[...(0,tm.qI)((0,tm.pb)(e,e=>"fulfilled"===e.status),e=>e.value)]}getScmRepository(e){let{provider:t,path:i}=this.getProvider(e);return t.getScmRepository(i)}getOrOpenScmRepository(e){let{provider:t,path:i}=this.getProvider(e);return t.getOrOpenScmRepository(i)}};s0([(0,ew.Yz)({args:{0:e=>`(${e?.length??0}) ${e?.map(e=>e.descriptor.id).join(", ")}`,1:e=>`(${e?.length??0}) ${e?.map(e=>e.descriptor.id).join(", ")}`}})],GitProviderService.prototype,"fireProvidersChanged",1),s0([(0,ew.Yz)({args:{0:e=>`(${e?.length??0}) ${e?.map(e=>e.id).join(", ")}`,1:e=>`(${e?.length??0}) ${e?.map(e=>e.id).join(", ")}`}})],GitProviderService.prototype,"fireRepositoriesChanged",1),s0([(0,ew.Yz)()],GitProviderService.prototype,"onSubscriptionChanged",1),s0([(0,ew.Yz)({args:{0:e=>`focused=${e.focused}`}})],GitProviderService.prototype,"onWindowStateChanged",1),s0([(0,ew.Yz)({args:{0:e=>`added=${e.added.length}, removed=${e.removed.length}`},singleLine:!0})],GitProviderService.prototype,"onWorkspaceFoldersChanged",1),s0([(0,ew.Rm)({args:{1:!1},singleLine:!0})],GitProviderService.prototype,"register",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"registrationComplete",1),s0([(0,ew.Rm)({args:{0:e=>e.length}})],GitProviderService.prototype,"discoverRepositories",1),s0([(0,ew.Yz)({exit:!0})],GitProviderService.prototype,"discoverRepositoriesCore",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"findRepositories",1),s0([(0,ew.Yz)({exit:!0})],GitProviderService.prototype,"access",1),s0([(0,ew.Yz)({exit:!0})],GitProviderService.prototype,"accessCore",1),s0([(0,ew.Yz)({exit:!0})],GitProviderService.prototype,"supports",1),s0([(0,ew.Yz)({exit:e=>`returned ${e?.visibility}`})],GitProviderService.prototype,"getVisibilityInfoFromCache",1),s0([(0,ew.Yz)()],GitProviderService.prototype,"clearAllRepoVisibilityCaches",1),s0([(0,ew.Yz)()],GitProviderService.prototype,"clearAllOpenRepoVisibilityCaches",1),s0([(0,ew.Yz)({exit:!0})],GitProviderService.prototype,"visibility",1),s0([(0,ew.Yz)({exit:!0})],GitProviderService.prototype,"visibilityCore",1),s0([(0,ew.Yz)()],GitProviderService.prototype,"setEnabledContext",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getBestRevisionUri",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getRevisionUri",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getWorkingUri",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"reset",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"applyChangesToWorkingFile",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"checkout",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"clone",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"resetCaches",1),s0([(0,ew.Rm)({args:{1:e=>e.length}})],GitProviderService.prototype,"excludeIgnoredUris",1),s0([(0,tp.G)(),(0,ew.Rm)()],GitProviderService.prototype,"fetch",1),s0([(0,tp.G)((e,t)=>`${null==e?"":e.map(e=>e.id).join(",")}|${JSON.stringify(t)}`),(0,ew.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"fetchAll",1),s0([(0,tp.G)(),(0,ew.Rm)()],GitProviderService.prototype,"pull",1),s0([(0,tp.G)((e,t)=>`${null==e?"":e.map(e=>e.id).join(",")}|${JSON.stringify(t)}`),(0,ew.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"pullAll",1),s0([(0,tp.G)(),(0,ew.Rm)()],GitProviderService.prototype,"push",1),s0([(0,tp.G)(e=>null==e?"":e.map(e=>e.id).join(",")),(0,ew.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"pushAll",1),s0([(0,ew.Rm)({args:{1:e=>e?.isDirty}})],GitProviderService.prototype,"getBlame",1),s0([(0,ew.Rm)({args:{1:"<contents>"}})],GitProviderService.prototype,"getBlameContents",1),s0([(0,ew.Rm)({args:{2:e=>e?.isDirty}})],GitProviderService.prototype,"getBlameForLine",1),s0([(0,ew.Rm)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForLineContents",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getBlameForRange",1),s0([(0,ew.Rm)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForRangeContents",1),s0([(0,ew.Rm)({args:{0:"<blame>"}})],GitProviderService.prototype,"getBlameRange",1),s0([(0,ew.Rm)({args:{0:e=>e.name}})],GitProviderService.prototype,"getBranchAheadRange",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getBranchesAndTagsTipsLookup",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getDiffForFile",1),s0([(0,ew.Rm)({args:{1:"<contents>"}})],GitProviderService.prototype,"getDiffForFileContents",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getDiffForLine",1),s0([(0,ew.Yz)()],GitProviderService.prototype,"getLastFetchedTimestamp",1),s0([(0,ew.Rm)({exit:!0})],GitProviderService.prototype,"getBestRepository",1),s0([(0,ew.Rm)({exit:!0})],GitProviderService.prototype,"getBestRepositoryOrFirst",1),s0([(0,ew.Rm)({exit:!0})],GitProviderService.prototype,"getOrOpenRepository",1),s0([(0,tp.G)(),(0,ew.Rm)()],GitProviderService.prototype,"storeRepositoriesLocation",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getOrOpenRepositoryForEditor",1),s0([(0,ew.Rm)({exit:!0})],GitProviderService.prototype,"getRepository",1),s0([(0,ew.Rm)({exit:!0})],GitProviderService.prototype,"getUniqueRepositoryId",1),s0([(0,ew.Rm)({exit:!0})],GitProviderService.prototype,"hasUnsafeRepositories",1),s0([(0,ew.Rm)({exit:!0})],GitProviderService.prototype,"isRepositoryForEditor",1),s0([(0,ew.Rm)({args:!1})],GitProviderService.prototype,"runGitCommandViaTerminal",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"branches",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"commits",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"config",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"contributors",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"diff",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"graph",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"patch",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"refs",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"remotes",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"revision",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"staging",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"stash",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"status",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"tags",1),s0([(0,ew.Rm)({singleLine:!0})],GitProviderService.prototype,"worktrees",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getOpenScmRepositories",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getScmRepository",1),s0([(0,ew.Rm)()],GitProviderService.prototype,"getOrOpenScmRepository",1);var s3=i(6363),s6=Object.defineProperty,s9=Object.getOwnPropertyDescriptor,s8=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?s9(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&s6(t,i,o),o};let oe=0x40000000-1;let LineHoverController=class LineHoverController{constructor(e){this.container=e,this._disposable=w.Disposable.from((0,sh.Oo)(e.onReady)(this.onReady,this),v.H.onDidChange(this.onConfigurationChanged,this))}_disposable;_hoverProviderDisposable;_uri;dispose(){this.unregister(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(!v.H.changed(e,"hovers.enabled")&&!v.H.changed(e,"hovers.currentLine.enabled"))return;let t=v.H.get("hovers");t.enabled&&t.currentLine.enabled?(this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)),this.register(w.window.activeTextEditor)):(this.container.lineTracker.unsubscribe(this),this.unregister())}onActiveLinesChanged(e){if(!e.pending){if(null==e.editor||null==e.selections){this.unregister();return}this.isRegistered(e.editor?.document.uri)||this.register(e.editor)}}async provideDetailsHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;let r=this.container.lineTracker.getState(t.line),s=r?.commit;if(null==s)return;let o=v.H.get("hovers");if(o.annotations.details&&"blame"===await this.container.fileAnnotations.getAnnotationType(w.window.activeTextEditor))return;let n="line"===o.currentLine.over;if(!n&&this.container.lineAnnotations.suspended)return;let a=e.validateRange(new w.Range(t.line,n?t.character:oe,t.line,oe));if(!n&&a.start.character!==t.character)return;let l=t.line,c=l+1;l=(s.lines.find(e=>e.line===c)??s.lines[0]).originalLine-1;let u=await this.container.documentTracker.get(e);if(null==u||i.isCancellationRequested)return;let h=await (0,su.MX)(this.container,s,u.uri,l,{autolinks:o.autolinks.enabled,cancellation:i,dateFormat:v.H.get("defaultDateFormat"),format:o.detailsMarkdownFormat,pullRequests:o.pullRequests.enabled,timeout:250})??"Cancelled";return new w.Hover(h,a)}async provideChangesHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;let r=this.container.lineTracker.getState(t.line),s=r?.commit;if(null==s)return;let o=v.H.get("hovers");if(o.annotations.changes&&"blame"===await this.container.fileAnnotations.getAnnotationType(w.window.activeTextEditor))return;let n="line"===o.currentLine.over;if(!n&&this.container.lineAnnotations.suspended)return;let a=e.validateRange(new w.Range(t.line,n?t.character:oe,t.line,oe));if(!n&&a.start.character!==t.character)return;let l=await this.container.documentTracker.get(e);if(null==l)return;let c=await (0,su.PV)(this.container,s,l.uri,t.line,l.document);if(null!=c)return new w.Hover(c,a)}isRegistered(e){return null!=this._hoverProviderDisposable&&(0,s3.k)(this._uri,e)}register(e){if(this.unregister(),null==e)return;let t=v.H.get("hovers");if(!t.enabled||!t.currentLine.enabled||!t.currentLine.details&&!t.currentLine.changes)return;this._uri=e.document.uri;let i=[];t.currentLine.changes&&i.push(w.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.currentLine.details&&i.push(w.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=w.Disposable.from(...i)}unregister(){this._uri=void 0,null!=this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}};s8([(0,ew.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineHoverController.prototype,"onActiveLinesChanged",1),s8([(0,ew.Yz)({args:{0:e=>ev.Vy.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideDetailsHover",1),s8([(0,ew.Yz)({args:{0:e=>ev.Vy.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideChangesHover",1);var ot=i(5580),oi=i(5662),or=i(7079),os=i(6613);let oo={iconPath:new w.ThemeIcon("trash"),tooltip:"Clear AI Key"},on={iconPath:new w.ThemeIcon("key"),tooltip:"Configure AI Key..."};async function oa(e,t){if(!(0,sT.SD)("gitlens:gk:organization:ai:enabled",!0)){await w.window.showQuickPick([{label:"OK"}],{title:"AI is Disabled",placeHolder:"GitLens AI features have been disabled by your GitKraken admin",canPickMany:!1});return}let[i,r,s]=await Promise.allSettled([e.ai.getProvidersConfiguration(),e.ai.getModel({silent:!0},{source:"ai:picker"}),e.subscription.getSubscription()]),o=(0,eC.Ro)(i)??new Map,n=(0,eC.Ro)(r)?.name,a=(0,eC.Ro)(s),l=(0,sz.zx)(a.plan.effective.id)&&a.account?.verified,c=w.window.createQuickPick();c.ignoreFocusOut=(0,ef.dW)(),c.title="Select AI Provider",c.placeholder="Choose an AI provider to use";let u=[];try{let i=t?.provider??o.get("vscode")?.configured?"vscode":o.get("gitkraken")?.configured?"gitkraken":void 0,r=!1;for(;;){let s=[];for(let e of o.values())e.primary||r||(r=!0,s.push((0,or.uK)("Requires API Key"))),s.push({label:e.name,iconPath:new w.ThemeIcon(e.id===t?.provider?"check":"blank"),provider:e.id,picked:e.id===i,detail:e.id===t?.provider&&n?`      ${n}`:"gitkraken"===e.id?"      Models provided by GitKraken":void 0,buttons:e.primary?void 0:e.configured?[oo]:[on],description:"gitkraken"===e.id?l?"  included in your plan":"  included in GitLens Pro":void 0});let a=await new Promise(t=>{u.push(c.onDidHide(()=>t(void 0)),c.onDidAccept(()=>{0!==c.activeItems.length&&t(c.activeItems[0])}),c.onDidTriggerItemButton(i=>{i.button===oo?(e.ai.resetProviderKey(i.item.provider),o.set(i.item.provider,{...o.get(i.item.provider),configured:!1}),t("refresh")):i.button===on&&t(i.item)})),c.items=s,c.activeItems=s.filter(e=>e.picked),c.show()});if("refresh"!==a)return a}}finally{c.dispose(),u.forEach(e=>void e.dispose())}}async function ol(e,t,i){if(!(0,sT.SD)("gitlens:gk:organization:ai:enabled",!0)){await w.window.showQuickPick([{label:"OK"}],{title:"AI is Disabled",placeHolder:"GitLens AI features have been disabled by your GitKraken admin",canPickMany:!1});return}let r=await e.ai.getModels(t)??[],s=[];for(let e of r){if(e.hidden)continue;let t=e.provider.id===i?.provider&&e.id===i?.model;s.push({label:e.name,description:e.default?"  recommended":void 0,iconPath:new w.ThemeIcon(t?"check":"blank"),model:e,picked:t})}let o=w.window.createQuickPick();o.ignoreFocusOut=(0,ef.dW)();let n=[];try{return await new Promise(e=>{n.push(o.onDidHide(()=>e(void 0)),o.onDidAccept(()=>{0!==o.activeItems.length&&e(o.activeItems[0])}),o.onDidTriggerButton(t=>{t===w.QuickInputButtons.Back&&e(os.WL.Back)})),o.title="Select AI Model",o.placeholder="Choose an AI model to use",o.matchOnDescription=!0,o.matchOnDetail=!0,o.items=s,o.activeItems=s.filter(e=>e.picked),o.buttons=[w.QuickInputButtons.Back],o.show()})}finally{o.dispose(),n.forEach(e=>void e.dispose())}}var oc=i(6103);let ou=`You are an advanced AI programming assistant and are tasked with summarizing code changes into a concise but meaningful commit message. You will be provided with a code diff and optional additional context. Your goal is to analyze the changes and create a clear, informative commit message that accurately represents the modifications made to the code.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Now, if provided, use this context to understand the motivation behind the changes and any relevant background information:
<~~additional-context~~>
\${context}
</~~additional-context~~>

To create an effective commit message, follow these steps:

1. Carefully analyze the diff and context, focusing on:
   - The purpose and rationale of the changes
   - Any problems addressed or benefits introduced
   - Any significant logic changes or algorithmic improvements
2. Ensure the following when composing the commit message:
   - Emphasize the 'why' of the change, its benefits, or the problem it addresses
   - Use an informal yet professional tone
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')
   - Be clear and concise
   - Synthesize only meaningful information from the diff and context
   - Avoid outputting code, specific code identifiers, names, or file names unless crucial for understanding
   - Avoid repeating information, broad generalities, and unnecessary phrases like "this", "this commit", or "this change"
3. Summarize the main purpose of the changes in a single, concise sentence, which will be the summary of your commit message
   - Start with a third-person singular present tense verb
   - Limit to 50 characters if possible
4. If necessary, provide a brief explanation of the changes, which will be the body of your commit message
   - Add line breaks for readability and to separate independent ideas
   - Focus on the "why" rather than the "what" of the changes.
5. If the changes are related to a specific issue or ticket, include the reference (e.g., "Fixes #123" or "Relates to JIRA-456") at the end of the commit message.

Don't over explain and write your commit message summary inside <summary> tags and your commit message body inside <body> tags and include no other text:

<summary>
Implements user authentication feature
</summary>
<body>
Adds login and registration endpoints
Updates user model to include password hashing
Integrates JWT for secure token generation

Fixes #789
</body>

\${instructions}

Based on the provided code diff and any additional context, create a concise but meaningful commit message following the instructions above.`,oh=`You are an advanced AI programming assistant and are tasked with summarizing code changes into a concise but meaningful pull request title and description. You will be provided with a code diff and a list of commits. Your goal is to analyze the changes and create a clear, informative title and description that accurately represents the modifications made to the code.
First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Then, review the list of commits to help understand the motivation behind the changes and any relevant background information:
<~~data~~>
\${data}
</~~data~~>

Now, if provided, use this context to understand the motivation behind the changes and any relevant background information:
<~~additional-context~~>
\${context}
</~~additional-context~~>

To create an effective pull request title and description, follow these steps:

1. Carefully analyze the diff, commit messages, context, focusing on:
   - The purpose and rationale of the changes
   - Any problems addressed or benefits introduced
   - Any significant logic changes or algorithmic improvements
2. Ensure the following when composing the pull request title and description:
   - Emphasize the 'why' of the change, its benefits, or the problem it addresses
   - Use an informal yet professional tone
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')
   - Be clear and concise
   - Synthesize only meaningful information from the diff and context
   - Avoid outputting code, specific code identifiers, names, or file names unless crucial for understanding
   - Avoid repeating information, broad generalities, and unnecessary phrases like "this", "this commit", or "this change"
3. Summarize the main purpose of the changes in a single, concise sentence, which will be the title of your pull request message
   - Start with a third-person singular present tense verb
   - Limit to 50 characters if possible
4. If necessary, provide a brief explanation of the changes, which will be the body of your pull request message
   - Add line breaks for readability and to separate independent ideas
   - Focus on the "why" rather than the "what" of the changes.
   - Structure the body with markdown bullets and headings for clarity
5. If the changes are related to a specific issue or ticket, include the reference (e.g., "Fixes #123" or "Relates to JIRA-456") at the end of the pull request message.

Write your title inside <summary> tags and your description inside <body> tags and include no other text:

<summary>
Implements user authentication feature
</summary>
<body>
Adds login and registration endpoints:
- Updates user model to include password hashing
- Integrates JWT for secure token generation

Fixes #789
</body>
\${instructions}

Based on the provided code diff, commit list, and any additional context, create a concise but meaningful pull request title and body following the instructions above.`,od=`You are an advanced AI programming assistant and are tasked with creating a concise but descriptive stash message. You will be provided with a code diff of uncommitted changes. Your goal is to analyze the changes and create a clear, single-line stash message that accurately represents the work in progress being stashed.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

To create an effective stash message, follow these steps:

1. Analyze the changes and focus on:
   - The primary feature or bug fix was being worked on
   - The overall intent of the changes
   - Any notable file or areas being modified
2. Create a single-line message that:
   - Briefly describes the changes being stashed but must be descriptive enough to identify later
   - Prioritizes the most significant change if multiple changes are present. If multiple related changes are significant, try to summarize them concisely
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')

Write your stash message inside <summary> tags and include no other text:

<summary>
Adds new awesome feature
</summary>

\${instructions}

Based on the provided code diff, create a concise but descriptive stash message following the instructions above.`,op=`You are an advanced AI programming assistant and are tasked with summarizing code changes into a concise and meaningful title and description. You will be provided with a code diff and optional additional context. Your goal is to analyze the changes and create a clear, informative title and description that accurately represents the modifications made to the code.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Now, if provided, use this context to understand the motivation behind the changes and any relevant background information:
<~~additional-context~~>
\${context}
</~~additional-context~~>

To create an effective title and description, follow these steps:

1. Carefully analyze the diff and context, focusing on:
   - The purpose and rationale of the changes
   - Any problems addressed or benefits introduced
   - Any significant logic changes or algorithmic improvements
2. Ensure the following when composing the title and description:
   - Emphasize the 'why' of the change, its benefits, or the problem it addresses
   - Use an informal yet professional tone
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')
   - Be clear and concise
   - Synthesize only meaningful information from the diff and context
   - Avoid outputting code, specific code identifiers, names, or file names unless crucial for understanding
   - Avoid repeating information, broad generalities, and unnecessary phrases like "this", "this commit", or "this change"
3. Summarize the main purpose of the changes in a single, concise sentence, which will be the title.
4. If necessary, provide a brief explanation of the changes, which will be the description.
   - Add line breaks for readability and to separate independent ideas
   - Focus on the "why" rather than the "what" of the changes.

Write your title inside <summary> tags and your description inside <body> tags and include no other text:

<summary>
Implements user authentication feature
</summary>
<body>
Adds login and registration endpoints
Updates user model to include password hashing
Integrates JWT for secure token generation
</body>

\${instructions}

Based on the provided code diff and any additional context, create a concise but meaningful title and description following the instructions above.`,og=`You are an advanced AI programming assistant and are tasked with summarizing code changes into a concise and meaningful code review title and description. You will be provided with a code diff and optional additional context. Your goal is to analyze the changes and create a clear, informative code review title and description that accurately represents the modifications made to the code.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Now, if provided, use this context to understand the motivation behind the changes and any relevant background information:
<~~additional-context~~>
\${context}
</~~additional-context~~>

To create an effective title and description, follow these steps:

1. Carefully analyze the diff and context, focusing on:
   - The purpose and rationale of the changes
   - Any problems addressed or benefits introduced
   - Any significant logic changes or algorithmic improvements
2. Ensure the following when composing the title and description:
   - Emphasize the 'why' of the change, its benefits, or the problem it addresses
   - Use an informal yet professional tone
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')
   - Be clear and concise
   - Synthesize only meaningful information from the diff and context
   - Avoid outputting code, specific code identifiers, names, or file names unless crucial for understanding
   - Avoid repeating information, broad generalities, and unnecessary phrases like "this", "this commit", or "this change"
3. Summarize the main purpose of the changes in a single, concise sentence, which will be the title.
4. If necessary, provide a brief explanation of the changes, which will be the description.
   - Add line breaks for readability and to separate independent ideas
   - Focus on the "why" rather than the "what" of the changes.

Write your title inside <summary> tags and your description inside <body> tags and include no other text:

<summary>
Implements user authentication feature
</summary>
<body>
Adds login and registration endpoints
Updates user model to include password hashing
Integrates JWT for secure token generation
</body>

\${instructions}

Based on the provided code diff and any additional context, create a concise but meaningful code review title and description following the instructions above.`,om=`You are an advanced AI programming assistant and are tasked with creating clear, technical summaries of code changes that help reviewers understand the modifications and their implications. You will analyze a code diff and the author-provided message to produce a structured summary that captures the essential aspects of the changes.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Now, review the author-provided message to help understand the motivation behind the changes and any relevant background information:
<~~message~~>
\${message}
</~~message~~>

Analysis Instructions:
1. Examine the technical changes and their direct implications
2. Consider the scope of changes (small fix vs. major modification)
3. Identify any structural or behavioral changes
4. Look for potential side effects or dependencies
5. Note any obvious testing implications

Write your summary inside <summary> and <body> tags in the following structured markdown format, text in [] brackets should be replaced with your own text, if applicable, not including the brackets:

<summary>
[Concise, one-line description of the change]

[2-3 sentences explaining the core changes and their purpose]
</summary>
<body>
### Changes
- [Key technical modifications]
- [Important structural changes]
- [Modified components/files]

### Impact
- [Behavioral changes]
- [Dependencies affected]
- [Breaking changes, if any]
- [Performance implications, if apparent]
</body>

Guidelines:
- Keep the initial description under 80 characters
- Use clear, technical language
- Focus on observable changes from the diff
- Highlight significant code structure changes
- Base conclusions only on the code diff and message
- Avoid assumptions about business context
- Include specific file/component names only when relevant

\${instructions}

Based on the provided code diff and message, create a focused technical summary following the format above.`,of=`You are an expert at creating changelogs in the "Keep a Changelog" format (https://keepachangelog.com). Your task is to create a set of clear, informative changelog entries.

First, carefully examine the following JSON data containing commit messages and associated issues. The data is structured as an array of "change" objects. Each "change" contains a \`message\` (the commit message) and an \`issues\` array. The \`issues\` array contains objects representing associated issues, each with an \`id\`, \`url\`, and optional \`title\`.

<~~data~~>
\${data}
</~~data~~>

Guidelines for creating the changelog:

1. Analyze the commit messages and associated issue titles (if available) to understand the changes made. Be sure to read every commit message and associated issue titles to understand the purpose of each change.
2. Group changes into these categories (only include categories with actual changes):
   - Added: New features or capabilities
   - Changed: Changes to existing functionality
   - Deprecated: Features that will be removed in upcoming releases
   - Removed: Features that were removed
   - Fixed: Bug fixes
   - Security: Security-related changes
3. Order entries by importance within each category
4. Write a clear, concise, user-friendly descriptions for each change that focuses on the impact to users
   - Follow the example structure below of the Keep a Changelog format for each entry
   - Start with a third-person singular present tense verb (e.g., "Adds", "Changes", "Improves", "Removes", "Deprecates", "Fixes", etc.)
   - Avoid technical implementation details unless directly relevant to users
   - Combine related changes into single entries when appropriate, grouping the associated issues together as well
   - Focus on the what and why, not the how. One sentence is often sufficient, though bullets can be used for multiple related points
5. Prioritize user-facing changes. If a commit message describes internal refactoring or implementation details, try to infer the user-facing impact (if any) from the issue titles or other commits. If there's no user-facing impact, and no clear external benefit, omit the change
6. Use Markdown headings, links, and bullet points, adhering to Keep a Changelog structure
7. Provide only the changelog entry\u2014no additional text or commentary outside of the changelog

Example output structure:

### Added
- Adds brief description of the added feature ([#Issue-ID](Issue-URL))

### Changed
- Changes brief description of how something changed ([#Issue-ID](Issue-URL))
- Improves brief description of how something improved ([#Issue-ID](Issue-URL))

### Fixed
- Fixes Issue Title or brief description if no title ([#Issue-ID](Issue-URL))

\${instructions}

Based on the provided commit messages and associated issues, create a set of markdown changelog entries following the instructions above. Do not include any explanatory text or metadata`;var ow=i(5167);let ov=["diff"];async function oy(e,t,i,r,s,o){i.instructions&&(o["config.usedCustomInstructions"]=!0);let n=(0,$.x1)(Object.entries(i),([e,i])=>{if(t.variables.includes(e)&&(null==i||"string"==typeof i))return[e,i??""]}),a=t.template.length+(0,tm.cz)(n,([,e])=>e.length),l=!1,c=r*ow.PR;for(let i of(a>c&&(l=!0,n=n.map(([t,i])=>{if(!ov.includes(t))return[t,i];let r=c-(a-i.length);if(r>i.length)throw new ik.V9(ik.zK.RequestTooLarge,Error(`Unable to truncate context to fit within the ${(0,_.Lu)(e.provider.name)} limits`));return[t,i.substring(0,r)]})),t.variables))n.some(([e])=>e===i)||n.push([i,""]);let u=(0,_.GW)(t.template,Object.fromEntries(n)),h=Math.ceil(u.length/ow.PR),d=v.H.get("ai.largePromptWarningThreshold",void 0,1e4);if(o["retry.count"]=s,o["input.length"]=u.length,o["config.largePromptThreshold"]=d,0===s&&(o["warning.promptTruncated"]=l,l&&(0,ow.Xs)(e),h>d&&(o["warning.exceededLargePromptThreshold"]=!0,!await (0,ow.Vt)(100*Math.ceil(h/100),d))))throw o["failed.reason"]="user-cancelled",o["failed.cancelled.reason"]="large-prompt",new ik.AL;return{prompt:u,truncated:l}}let ob=new Map([["gitkraken",{...ot.jh,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,884))).GitKrakenProvider)}],["vscode",{...ot.jI,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,6560))).VSCodeAIProvider)}],["openai",{...ot.lh,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,6940))).OpenAIProvider)}],["anthropic",{...ot.FH,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,4254))).AnthropicProvider)}],["gemini",{...ot.mJ,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,2241))).GeminiProvider)}],["deepseek",{...ot.Fv,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,2012))).DeepSeekProvider)}],["xai",{...ot.zJ,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,4912))).XAIProvider)}],["github",{...ot.ej,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,3215))).GitHubModelsProvider)}],["huggingface",{...ot.xS,type:(0,r1.R)(async()=>(await i.e(53).then(i.bind(i,2724))).HuggingFaceProvider)}]]);let AIProviderService=class AIProviderService{constructor(e,t){this.container=e,this.connection=t,this._disposable=this.container.subscription.onDidChange(()=>this._promptTemplates.clear())}_onDidChangeModel=new w.EventEmitter;get onDidChangeModel(){return this._onDidChangeModel.event}_disposable;_model;_promptTemplates=new PromiseCache({createTTL:432e5,expireOnError:!0});_provider;_providerDisposable;dispose(){this._disposable.dispose(),this._onDidChangeModel.dispose(),this._providerDisposable?.dispose(),this._provider?.dispose()}getConfiguredModel(){let e=v.H.get("ai.model")??void 0;if(null==e)return;let t=e.indexOf(":"),i=-1===t?e:e.substring(0,t),r=-1===t?void 0:e.substring(t+1);if(null!=i&&this.supports(i)){if(null!=r)return{provider:i,model:r};else if(oR(i)&&null!=(r=v.H.get(`ai.${i}.model`)??void 0)&&/^(.+):(.+)$/.test(r))return{provider:i,model:r}}}async getModels(e){let t=async e=>e.value.then(async e=>{let t=new e(this.container,this.connection);try{return await t.getModels()}finally{t.dispose()}});if(null!=e&&this.supports(e)){let i=ob.get(e)?.type;return null==i?[]:t(i)}return(await Promise.allSettled((0,tm.Tj)(ob.values(),e=>t(e.type)))).flatMap(e=>(0,eC.Ro)(e,[]))}async getModel(e,t){let i,r,s=this.getConfiguredModel();if(!e?.force&&s?.provider!=null&&s?.model!=null){let e=await this.getOrUpdateModel(s.provider,s.model);if(null!=e)return e}if(e?.silent)return;for(!e?.force&&(0!==(await this.getModels("vscode")).length?i="vscode":(await this.container.subscription.getSubscription()).account?.verified&&(i="gitkraken",r=(await this.getModels("gitkraken")).find(e=>e.default)));;){if(null==(i??=(await oa(this.container,s))?.provider))return;let e=ob.get(i);if(null==e||!await this.ensureProviderConfigured(e,!1))return;if(null==r){let e=await ol(this.container,i,s);if(null==e||(0,os.qT)(e)&&e!==os.WL.Back)return;if(e===os.WL.Back){i=void 0;continue}r=e.model}break}let o=await this.getOrUpdateModel(r);return this.container.telemetry.sendEvent("ai/switchModel",null!=o?{"model.id":o.id,"model.provider.id":o.provider.id,"model.provider.name":o.provider.name}:{failed:!0},t),await oC(this.container.storage),o}async getProvidersConfiguration(){let e=await Promise.allSettled((0,tm.Tj)(ob.values(),async e=>[e.id,{...e,type:void 0,configured:await this.ensureProviderConfigured(e,!0)}]));return new Map((0,eC.aj)(e))}async ensureProviderConfigured(e,t){if(e.id===this._provider?.id)return this._provider.configured(t);let i=await e.type.value;if(null==i)return!1;let r=new i(this.container,this.connection);try{return await r.configured(t)}finally{r.dispose()}}async getOrUpdateModel(e,t){let i,r;i="string"==typeof e?e:(r=e).provider.id;let s=!1;if(i!==this._provider?.id){s=!0,this._providerDisposable?.dispose(),this._provider?.dispose();let e=await ob.get(i)?.type.value;if(null==e){this._provider=void 0,this._model=void 0;return}this._provider=new e(this.container,this.connection),this._providerDisposable=this._provider?.onDidChange?.((0,tg.s)(async()=>{null==this._model&&null!=await this.getModel({silent:!0})&&this._onDidChangeModel.fire({model:this._model})},250),this)}if(null==r)if(null!=t&&t===this._model?.id)r=this._model;else{s=!0;let e=await this._provider.getModels();if(null==(r=e?.find(e=>e.id===t))){this._model=void 0;return}}else r.id!==this._model?.id&&(s=!0);return this._model=r,s&&(oR(r.provider.id)?(await v.H.updateEffective("ai.model",r.provider.id),await v.H.updateEffective(`ai.${r.provider.id}.model`,r.id)):await v.H.updateEffective("ai.model",`${r.provider.id}:${r.id}`),this._onDidChangeModel.fire({model:r})),r}async ensureOrgAccess(){return!1!==(0,sT.SD)("gitlens:gk:organization:ai:enabled")||(await w.window.showErrorMessage("AI features have been disabled for your organization."),!1)}async ensureFeatureAccess(e,t){return!!await this.ensureOrgAccess()&&("generate-commitMessage"===e||!!await (0,oc.L9)(this.container,(0,P.f0)(e)?"Advanced AI features require a trial or GitLens Advanced.":"Pro AI features require a trial or GitLens Pro.",e,t))}async explainCommit(e,t,i){let{type:r,...s}=t,o=await this.sendRequest("explain-changes",async(t,i,r,s,o)=>{let n=await this.container.git.diff(e.repoPath).getDiff?.(e.ref);if(!n?.contents)throw new ik.d0("No changes found to explain.");if(r.isCancellationRequested)throw new ik.AL;let a=(0,O.WM)(e)?e:await this.container.git.commits(e.repoPath).getCommit(e.ref);if(null==a)throw new ik.d0("Unable to find commit");if(r.isCancellationRequested||!a.hasFullDetails()&&(await a.ensureFullDetails(),(0,oi.aQ)(a),r.isCancellationRequested))throw new ik.AL;let{prompt:l}=await this.getPrompt("explain-changes",t,{diff:n.contents,message:a.message,instructions:v.H.get("ai.explainChanges.customInstructions")},s,o,i);if(r.isCancellationRequested)throw new ik.AL;return[{role:"user",content:l}]},e=>`Explaining changes with ${e.name}...`,s,e=>({key:"ai/explain",data:{type:"change",changeType:r,"model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),i);return null!=o?{...o,parsed:ok(o.content)}:void 0}async generateCommitMessage(e,t,i){let r=await this.sendRequest("generate-commitMessage",async(t,r,s,o,n)=>{let a=await this.getChanges(e);if(null==a)throw new ik.d0("No changes to generate a commit message from.");if(s.isCancellationRequested)throw new ik.AL;let{prompt:l}=await this.getPrompt("generate-commitMessage",t,{diff:a,context:i?.context,instructions:v.H.get("ai.generateCommitMessage.customInstructions")},o,n,r);if(s.isCancellationRequested)throw new ik.AL;return[{role:"user",content:l}]},e=>`Generating commit message with ${e.name}...`,t,e=>({key:"ai/generate",data:{type:"commitMessage","model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),{...i,modelOptions:{outputTokens:4096}});return null!=r?{...r,parsed:ok(r.content)}:void 0}async generateCreatePullRequest(e,t,i,r,s){let o=await this.sendRequest("generate-create-pullRequest",async(r,o,n,a,l)=>{let[c,u]=await Promise.allSettled([e.git.diff().getDiff?.(i,t,{notation:"..."}),e.git.commits().getLog(`${t}..${i}`)]),h=(0,eC.Ro)(c),d=(0,eC.Ro)(u);if(!h?.contents||!d?.commits?.size)throw new ik.d0("No changes to generate a pull request from.");if(n.isCancellationRequested)throw new ik.AL;let p=[];for(let e of[...d.commits.values()].sort((e,t)=>e.date.getTime()-t.date.getTime()))p.push(e.message??e.summary);let{prompt:g}=await this.getPrompt("generate-create-pullRequest",r,{diff:h.contents,data:p.join("\n"),context:s?.context,instructions:v.H.get("ai.generateCreatePullRequest.customInstructions")},a,l,o);if(n.isCancellationRequested)throw new ik.AL;return[{role:"user",content:g}]},e=>`Generating pull request details with ${e.name}...`,r,e=>({key:"ai/generate",data:{type:"createPullRequest","model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),s);return null!=o?{...o,parsed:ok(o.content)}:void 0}async generateCreateDraft(e,t,i){let{type:r,...s}=t,o=await this.sendRequest(i?.codeSuggestion?"generate-create-codeSuggestion":"generate-create-cloudPatch",async(t,r,s,o,n)=>{let a=await this.getChanges(e);if(null==a)throw new ik.d0(`No changes to generate a ${i?.codeSuggestion?"code suggestion":"cloud patch"} from.`);if(s.isCancellationRequested)throw new ik.AL;let{prompt:l}=await this.getPrompt(i?.codeSuggestion?"generate-create-codeSuggestion":"generate-create-cloudPatch",t,{diff:a,context:i?.context,instructions:i?.codeSuggestion?v.H.get("ai.generateCreateCodeSuggest.customInstructions"):v.H.get("ai.generateCreateCloudPatch.customInstructions")},o,n,r);if(s.isCancellationRequested)throw new ik.AL;return[{role:"user",content:l}]},e=>`Generating ${i?.codeSuggestion?"code suggestion":"cloud patch"} description with ${e.name}...`,s,e=>({key:"ai/generate",data:{type:"draftMessage",draftType:r,"model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),i);return null!=o?{...o,parsed:ok(o.content)}:void 0}async generateStashMessage(e,t,i){let r=await this.sendRequest("generate-stashMessage",async(t,r,s,o,n)=>{let a=await this.getChanges(e);if(null==a)throw new ik.d0("No changes to generate a stash message from.");if(s.isCancellationRequested)throw new ik.AL;let{prompt:l}=await this.getPrompt("generate-stashMessage",t,{diff:a,context:i?.context,instructions:v.H.get("ai.generateStashMessage.customInstructions")},o,n,r);if(s.isCancellationRequested)throw new ik.AL;return[{role:"user",content:l}]},e=>`Generating stash message with ${e.name}...`,t,e=>({key:"ai/generate",data:{type:"stashMessage","model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),{...i,modelOptions:{outputTokens:1024}});return null!=r?{...r,parsed:ok(r.content)}:void 0}async generateChangelog(e,t,i){let r=await this.sendRequest("generate-changelog",async(t,i,r,s,o)=>{let{changes:n}=await e.value;if(!n.length)throw new ik.d0("No changes to generate a changelog from.");if(r.isCancellationRequested)throw new ik.AL;let{prompt:a}=await this.getPrompt("generate-changelog",t,{data:JSON.stringify(n),instructions:v.H.get("ai.generateChangelog.customInstructions")},s,o,i);if(r.isCancellationRequested)throw new ik.AL;return[{role:"user",content:a}]},e=>`Generating changelog with ${e.name}...`,t,e=>({key:"ai/generate",data:{type:"changelog","model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),i);return null!=r?{...r}:void 0}async sendRequest(e,t,i,r,s,o){if(!await this.ensureFeatureAccess(e,r))return;let n=await this.getModel(void 0,r);if(null==n||o?.cancellation?.isCancellationRequested){o?.generating?.cancel();return}let a=s(n),l=new w.CancellationTokenSource;o?.cancellation&&o.cancellation.onCancellationRequested(()=>l.cancel());let c=l.token;if(!await oC(this.container.storage)||c.isCancellationRequested){this.container.telemetry.sendEvent(a.key,{...a.data,"failed.reason":c.isCancellationRequested?"user-cancelled":"user-declined"},r),o?.generating?.cancel();return}let u=await this._provider.getApiKey(!1);if(null==u||c.isCancellationRequested){this.container.telemetry.sendEvent(a.key,c.isCancellationRequested?{...a.data,"failed.reason":"user-cancelled"}:{...a.data,"failed.reason":"error","failed.error":"Not authorized"},r),o?.generating?.cancel();return}let h=this._provider.sendRequest(e,n,u,t.bind(this,n,a.data,c),{cancellation:c,modelOptions:o?.modelOptions});o?.generating?.fulfill(n);let d=Date.now();try{let e=await (o?.progress!=null?w.window.withProgress({...o.progress,cancellable:!0,title:i(n)},(e,t)=>(t.onCancellationRequested(()=>l.cancel()),h)):h);return a.data["output.length"]=e?.content?.length,a.data["usage.promptTokens"]=e?.usage?.promptTokens,a.data["usage.completionTokens"]=e?.usage?.completionTokens,a.data["usage.totalTokens"]=e?.usage?.totalTokens,a.data["usage.limits.used"]=e?.usage?.limits?.used,a.data["usage.limits.limit"]=e?.usage?.limits?.limit,a.data["usage.limits.resetsOn"]=e?.usage?.limits?.resetsOn?.toISOString(),this.container.telemetry.sendEvent(a.key,{...a.data,duration:Date.now()-d},r),e}catch(e){if(e instanceof ik.AL){this.container.telemetry.sendEvent(a.key,{...a.data,duration:Date.now()-d,"failed.reason":"user-cancelled"},r);return}if(e instanceof ik.V9){switch(this.container.telemetry.sendEvent(a.key,{...a.data,duration:Date.now()-d,"failed.error":String(e),"failed.error.detail":String(e.original)},r),e.reason){case ik.zK.NoRequestData:w.window.showErrorMessage(e.message);break;case ik.zK.NoEntitlement:{let e=await this.container.subscription.getSubscription();if((0,sz.A_)(e)){let t=0>=(0,sz.x3)(e.plan.actual.id,sQ.qn.Advanced)?sQ.qn.Business:sQ.qn.Advanced,i={title:`Upgrade to ${(0,sz.pG)(t)}`};await w.window.showErrorMessage("This AI feature isn't included in your current plan. Please upgrade and try again.",i)===i&&this.container.subscription.manageSubscription(r)}else{let e={title:"Upgrade to Pro"};await w.window.showErrorMessage("Please upgrade to GitLens Pro to access this AI feature and try again.",e)===e&&this.container.subscription.upgrade(sQ.qn.Pro,r)}break}case ik.zK.RequestTooLarge:{let e={title:"Switch Model"};await w.window.showErrorMessage("Your request is too large. Please reduce the size of your request or switch to a different model, and then try again.",e)===e&&this.switchModel(r);break}case ik.zK.UserQuotaExceeded:{let e={title:"Increase Limit"};await w.window.showErrorMessage("Your request could not be completed because you've reached the weekly Al usage limit for your current plan. Upgrade to unlock more Al-powered actions.",e)===e&&this.container.subscription.manageSubscription(r);break}case ik.zK.RateLimitExceeded:{let e={title:"Switch Model"};await w.window.showErrorMessage("Rate limit exceeded. Please wait a few moments or switch to a different model, and then try again.",e)===e&&this.switchModel(r);break}case ik.zK.RateLimitOrFundsExceeded:{let e={title:"Switch Model"};await w.window.showErrorMessage("Rate limit exceeded, or your account is out of funds. Please wait a few moments, check your account balance, or switch to a different model, and then try again.",e)===e&&this.switchModel(r);break}case ik.zK.ServiceCapacityExceeded:w.window.showErrorMessage("GitKraken AI is temporarily unable to process your request due to high volume. Please wait a few moments and try again. If this issue persists, please contact support.","OK");break;case ik.zK.ModelNotSupported:{let e={title:"Switch Model"};await w.window.showErrorMessage("The selected model is not supported for this request. Please select a different model and try again.",e)===e&&this.switchModel(r);break}case ik.zK.Unauthorized:{let e={title:"Switch Model"};await w.window.showErrorMessage("You do not have access to the selected model. Please select a different model and try again.",e)===e&&this.switchModel(r);break}case ik.zK.DeniedByUser:{let e={title:"Switch Model"};await w.window.showErrorMessage("You have denied access to the selected model. Please provide access or select a different model, and then try again.",e)===e&&this.switchModel(r)}}return}throw this.container.telemetry.sendEvent(a.key,{...a.data,duration:Date.now()-d,"failed.error":String(e),"failed.error.detail":e.original?String(e.original):void 0},r),e}}async getChanges(e,t){let i;if("string"==typeof e)i=e;else if(Array.isArray(e))i=e.join("\n");else{let r=await e.git.diff().getDiff?.(L.id);if(!r?.contents&&(r=await e.git.diff().getDiff?.(L.SU),!r?.contents))throw Error("No changes to generate a commit message from.");if(t?.cancellation?.isCancellationRequested)return;i=r.contents}return i}async getPrompt(e,t,i,r,s,o){let n=await this.getPromptTemplate(e,t);if(null==n)throw Error(`No prompt template found for ${e}`);return await oy(t,n,i,r,s,o)}async getPromptTemplate(e,t){if((await this.container.subscription.getSubscription()).account){let t=(0,eb.dQ)();try{return await this._promptTemplates.get(e,async()=>{let t=this.container.urls.getGkAIApiUrl(`templates/message-prompt/${e}`),i=await fetch(t,{headers:await this.connection.getGkHeaders(void 0,void 0,{Accept:"application/json"})});if(!i.ok)throw Error(`Getting prompt template (${t}) failed: ${i.status} (${i.statusText})`);let r=await i.json();if(null!=r.error)throw Error(`Getting prompt template (${t}) failed: ${String(r.error)}`);return{id:r.data.id,template:r.data.template,variables:r.data.variables}})}catch(i){i instanceof ik.WT||ev.Vy.error(i,t,`Unable to get prompt template for '${e}'`)}}switch(e){case"generate-commitMessage":return{template:ou,variables:["diff","context","instructions"]};case"generate-stashMessage":return{template:od,variables:["diff","context","instructions"]};case"generate-changelog":return{template:of,variables:["data","instructions"]};case"generate-create-cloudPatch":return{template:op,variables:["diff","context","instructions"]};case"generate-create-codeSuggestion":return{template:og,variables:["diff","context","instructions"]};case"generate-create-pullRequest":return{template:oh,variables:["diff","data","context","instructions"]};case"explain-changes":return{template:om,variables:["diff","message","instructions"]}}}async reset(e){let t,{_provider:i}=this;null==i&&(await this.getModel({silent:!0}),i=this._provider);let r={title:"Reset Current"},s={title:"Reset All"},o={title:"Cancel",isCloseAffordance:!0};if(t=e?s:null==i?await w.window.showInformationMessage("Do you want to reset all of the stored AI keys?",{modal:!0},s,o):await w.window.showInformationMessage(`Do you want to reset the stored key for the current provider (${i.name}) or reset all of the stored AI keys?`,{modal:!0},r,s,o),null!=i&&t===r)this.resetProviderKey(i.id),this.resetConfirmations();else if(t===s){let e=[];for(let t of ob.keys())e.push(await this.container.storage.getSecret(`gitlens.${t}.key`)),this.resetProviderKey(t,!0);this.resetConfirmations(),w.env.clipboard.writeText(e.join("\n")),w.window.showInformationMessage("All stored AI keys have been reset. The configured keys were copied to your clipboard.")}}resetConfirmations(){this.container.storage.deleteWithPrefix("confirm:ai:tos"),this.container.storage.deleteWorkspaceWithPrefix("confirm:ai:tos")}resetProviderKey(e,t){t||this.container.storage.getSecret(`gitlens.${e}.key`).then(e=>{e&&(w.env.clipboard.writeText(e),w.window.showInformationMessage("The stored AI key has been reset. The configured key was copied to your clipboard."))}),this.container.storage.deleteSecret(`gitlens.${e}.key`)}supports(e){return ob.has(e)}switchModel(e){return this.getModel({force:!0},e)}};async function oC(e){if(e.get("confirm:ai:tos",!1)||e.getWorkspace("confirm:ai:tos",!1))return!0;let t={title:"Accept"},i={title:"Accept Only for this Workspace"},r=await w.window.showInformationMessage("GitLens AI features can send code snippets, diffs, and other context to your selected AI provider for analysis.",{modal:!0},t,i,{title:"Cancel",isCloseAffordance:!0});return r===i?(e.storeWorkspace("confirm:ai:tos",!0).catch(),!0):r===t&&(e.store("confirm:ai:tos",!0).catch(),!0)}function ok(e){e=e.trim();let t=e.match(/<summary>\s?([\s\S]*?)\s?(<\/summary>|$)/)?.[1]?.trim()??"",i=e.match(/<body>\s?([\s\S]*?)\s?(<\/body>|$)/)?.[1]?.trim()??"";if(!t&&!i)return oS(e);if(t&&!i){if(!(i=e.replace(/<summary>[\s\S]*?<\/summary>/,"")?.trim()??""))return oS(t)}else if(!t&&i&&!(t=e.replace(/<body>[\s\S]*?<\/body>/,"").trim()??""))return oS(i);return{summary:t,body:i}}function oS(e){let t=e.indexOf("\n");return -1===t?{summary:e,body:""}:{summary:e.substring(0,t).trim(),body:e.substring(t+1).trim()}}function oR(e){return ob.get(e)?.primary===!0}var oP=i(1454),oA=Object.defineProperty,oI=Object.getOwnPropertyDescriptor,oD=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oA(t,i,o),o};let o$="login",oT="did-authenticate";let AuthenticationConnection=class AuthenticationConnection{constructor(e,t){this.container=e,this.connection=t}_cancellationSource;_deferredCodeExchanges=new Map;_pendingStates=new Map;_statusBarItem;dispose(){}abort(){return null==this._cancellationSource?Promise.resolve():(this._cancellationSource.cancel(),new Promise(e=>setTimeout(e,50)))}async getAccountInfo(e){let t,i=(0,eb.dQ)();try{t=await this.connection.fetchGkApi("user",void 0,{token:e})}catch(e){throw ev.Vy.error(e,i),e}if(!t.ok)throw ev.Vy.error(void 0,`Getting account info failed: (${t.status}) ${t.statusText}`),Error(t.statusText);let r=await t.json();return{id:r.id,accountName:r.username}}async login(e,t,i=!1,r){let s=(0,eb.dQ)();this.updateStatusBarItem(!0);let o=(0,eZ.uR)(),n=this._pendingStates.get(t)??[];this._pendingStates.set(t,[...n,o]);let a=await w.env.asExternalUri(w.Uri.parse(`${w.env.uriScheme}://${this.container.context.extension.id}/${oT}`)),l=this.container.urls.getGkDevUrl(i?"register":"login",`${e.includes("gitlens")?"source=gitlens&":""}${null!=r?`context=${r}&`:""}state=${encodeURIComponent(o)}&redirect_uri=${encodeURIComponent(a.toString(!0))}`);if(!await (0,ef.CZ)(l))throw ev.Vy.error(void 0,s,"Opening login URL failed"),this._pendingStates.delete(t),this.updateStatusBarItem(!1),Error("Cancelled");let c=this._deferredCodeExchanges.get(t);null==c&&(c=(0,sh.I7)(this.container.uri.onDidReceiveAuthenticationUri,this.getUriHandlerDeferredExecutor()),this._deferredCodeExchanges.set(t,c)),this._cancellationSource?.cancel(),this._cancellationSource=new w.CancellationTokenSource;try{let e=await Promise.race([c.promise,new Promise((e,t)=>this.openCompletionInputFallback(this._cancellationSource.token,e,t)),new Promise((e,t)=>this._cancellationSource?.token.onCancellationRequested(()=>t("Cancelled"))),new Promise((e,t)=>setTimeout(t,12e4,"Cancelled"))]);return await this.getTokenFromCodeAndState(e,o,t)}catch(e){throw ev.Vy.error(e,s),e}finally{this._cancellationSource?.cancel(),this._cancellationSource=void 0,this._pendingStates.delete(t),c?.cancel(),this._deferredCodeExchanges.delete(t),this.updateStatusBarItem(!1)}}async openCompletionInputFallback(e,t,i){let r,s=w.window.createInputBox();s.ignoreFocusOut=!0;let o=[];try{if(e.isCancellationRequested)return;r=await new Promise(t=>{o.push(e.onCancellationRequested(()=>s.hide()),s.onDidHide(()=>t(void 0)),s.onDidChangeValue(e=>{if(!e){s.validationMessage="Please enter a valid code";return}s.validationMessage=void 0}),s.onDidAccept(()=>t(s.value))),s.title="GitLens Sign In",s.placeholder="Please enter the provided authorization code",s.prompt="If the auto-redirect fails, paste the authorization code",s.show()})}finally{s.dispose(),o.forEach(e=>void e.dispose())}null!=r?t(r):i("Cancelled")}async getTokenFromCodeAndState(e,t,i){if(null!=t&&null!=i){let e=this._pendingStates.get(i);if(!e?.includes(t))throw Error("Getting token failed: Invalid state")}let r=await this.connection.fetchGkApi("oauth/access_token",{method:"POST",body:JSON.stringify({grant_type:"authorization_code",client_id:"gitkraken.gitlens",code:e,state:t??""})},{token:!1});if(!r.ok)throw Error(`Getting token failed: (${r.status}) ${r.statusText}`);let s=await r.json();if(null==s.access_token)throw Error("Getting token failed: No access token returned");return s.access_token}getUriHandlerDeferredExecutor(){return(e,t,i)=>{let r=new URLSearchParams(e.query).get("code");if(null==r){i("Code not returned");return}t(r)}}updateStatusBarItem(e){e&&null==this._statusBarItem&&(this._statusBarItem=w.window.createStatusBarItem("gitlens.plus.signIn",w.StatusBarAlignment.Left),this._statusBarItem.name="GitLens Sign in",this._statusBarItem.text="Signing in to GitKraken...",this._statusBarItem.show()),e||null==this._statusBarItem||(this._statusBarItem.dispose(),this._statusBarItem=void 0)}async getExchangeToken(e){let t=null!=e?await w.env.asExternalUri(w.Uri.parse(`${w.env.uriScheme}://${this.container.context.extension.id}/${e}`)):void 0,i=await this.connection.fetchGkApi("v1/login/auth-exchange",{method:"POST",body:JSON.stringify({source:"gitlens",redirectUrl:t?.toString()})});if(!i.ok)throw Error(`Failed to get exchange token: (${i.status}) ${i.statusText}`);return(await i.json()).data.exchangeToken}};oD([(0,ew.Yz)({args:!1,exit:e=>`returned ${e.id}`})],AuthenticationConnection.prototype,"getAccountInfo",1),oD([(0,ew.Yz)()],AuthenticationConnection.prototype,"login",1);var oE=Object.defineProperty,o_=Object.getOwnPropertyDescriptor,oO=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),ox=e=>{throw TypeError(e)},oF=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?o_(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oE(t,i,o),o},oL=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&ox("Object expected"),i&&(r=t[oO("asyncDispose")]),void 0===r&&(r=t[oO("dispose")],i&&(s=r)),"function"!=typeof r&&ox("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},oB=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let oU=["gitlens"];let AccountAuthenticationProvider=class AccountAuthenticationProvider{constructor(e,t){this.container=e,this._authConnection=new AuthenticationConnection(e,t),this._sessionsPromise=this.getSessionsFromStorage(),this._disposable=w.Disposable.from(this._onDidChangeSessions,this._authConnection,this.container.storage.onDidChangeSecrets(()=>this.checkForUpdates()))}_onDidChangeSessions=new w.EventEmitter;get onDidChangeSessions(){return this._onDidChangeSessions.event}_disposable;_authConnection;_sessionsPromise;_optionsByScope;dispose(){this._disposable.dispose()}get secretStorageKey(){return`gitlens.plus.auth:${this.container.env}`}abort(){return this._authConnection.abort()}setOptionsForScopes(e,t){this._optionsByScope??=new Map,this._optionsByScope.set(oN(e),t)}clearOptionsForScopes(e){this._optionsByScope?.delete(oN(e))}async createSession(e){let t=(0,eb.dQ)(),i=this._optionsByScope?.get(oN(e));null!=i&&this._optionsByScope?.delete(oN(e));let r=oN(e=e.sort());try{let t=i?.signIn!=null?await this._authConnection.getTokenFromCodeAndState(i.signIn.code,i.signIn.state):await this._authConnection.login(e,r,i?.signUp,i?.context),s=await this.createSessionForToken(t,e),o=await this._sessionsPromise,n=o.findIndex(e=>e.id===s.id||oN(e.scopes)===r);return n>-1?o.splice(n,1,s):o.push(s),await this.storeSessions(o),this._onDidChangeSessions.fire({added:[s],removed:[],changed:[]}),s}catch(e){if("Cancelled"===e||"Cancelled"===e.message)throw e;throw ev.Vy.error(e,t),w.window.showErrorMessage(`Unable to sign in to GitKraken: ${e instanceof ik.AL?"request timed out":e}. Please try again. If this issue persists, please contact support.`),e}}async getSessions(e){let t=(0,eb.dQ)(),i=oN(e=e?.sort()),r=await this._sessionsPromise,s=null!=e?r.filter(e=>oN(e.scopes)===i):r;return(0,eb.TT)(t,` \u2022 Found ${s.length} sessions`),s}async removeSession(e){let t=(0,eb.dQ)();try{let t=await this._sessionsPromise,i=t.findIndex(t=>t.id===e);if(-1===i){ev.Vy.log(`Unable to remove session ${e}; Not found`);return}let r=t[i];t.splice(i,1),await this.storeSessions(t),this._onDidChangeSessions.fire({added:[],removed:[r],changed:[]})}catch(e){throw ev.Vy.error(e,t),w.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async removeSessionsByScopes(e){let t=(0,eb.dQ)();try{e=e?.sort();let t=oN(e),i=[],r=0,s=await this._sessionsPromise;for(let e of s){if(oN(e.scopes)!==t){r++;continue}s.splice(r,1),i.push(e)}if(0===i.length)return;await this.storeSessions(s),this._onDidChangeSessions.fire({added:[],removed:i,changed:[]})}catch(e){throw ev.Vy.error(e,t),w.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async checkForUpdates(){var e=[];try{let t=oL(e,(0,eb.bP)(`${(0,ev.zu)(this)}.checkForUpdates`,!1)),i=await this._sessionsPromise;this._sessionsPromise=this.getSessionsFromStorage();let r=await this._sessionsPromise,s=[],o=[];for(let e of r)i.some(t=>t.id===e.id)||s.push(e);for(let e of i)r.some(t=>t.id===e.id)||o.push(e);(s.length||o.length)&&(ev.Vy.debug(t,`firing sessions changed event; added=${s.length}, removed=${o.length}`),this._onDidChangeSessions.fire({added:s,removed:o,changed:[]}))}catch(e){var t=e,i=!0}finally{oB(e,t,i)}}async getOrCreateSession(e,t){let i=(await this.getSessions(e))[0];return null!=i?i:t?this.createSession(e):void 0}async createSessionForToken(e,t){let i=await this._authConnection.getAccountInfo(e);return{id:(0,eZ.uR)(),accessToken:e,account:{label:i.accountName,id:i.id},scopes:t}}async getSessionsFromStorage(){var e=[];try{let t,i=oL(e,(0,eb.bP)(`${(0,ev.zu)(this)}.getSessionsFromStorage`,!1));try{let e=await this.container.storage.getSecret(this.secretStorageKey);if(!e||"[]"===e)return[];try{t=JSON.parse(e)}catch(e){try{await this.container.storage.deleteSecret(this.secretStorageKey)}catch{}throw e}}catch(e){return ev.Vy.error(e,i,"Unable to read sessions from storage"),[]}let r=t.map(async e=>{let t,r=oN(e.scopes);if(ev.Vy.debug(i,`read session from storage with scopes=${r}`),null==e.account)try{t=await this._authConnection.getAccountInfo(e.accessToken),ev.Vy.debug(i,`verified session with scopes=${r}`)}catch(e){if("Unauthorized"===e.message)return}return{id:e.id,account:{label:null!=e.account?e.account.label??e.account.displayName??"<unknown>":t?.accountName??"<unknown>",id:e.account?.id??t?.id??"<unknown>"},scopes:e.scopes,accessToken:e.accessToken}}),s=(await Promise.allSettled(r)).filter(e=>"fulfilled"===e.status).map(e=>e.value).filter(e=>!!e);return ev.Vy.debug(i,`found ${s.length} verified sessions`),s.length!==t.length&&await this.storeSessions(s),s}catch(e){var t=e,i=!0}finally{oB(e,t,i)}}async storeSessions(e){try{this._sessionsPromise=Promise.resolve(e),await this.container.storage.storeSecret(this.secretStorageKey,JSON.stringify(e))}catch(t){ev.Vy.error(t,`Unable to store ${e.length} sessions`)}}async getExchangeToken(e){return this._authConnection.getExchangeToken(e)}};function oN(e){return e?.join("|")}oF([(0,ew.Yz)()],AccountAuthenticationProvider.prototype,"createSession",1),oF([(0,ew.Yz)()],AccountAuthenticationProvider.prototype,"getSessions",1),oF([(0,ew.Yz)()],AccountAuthenticationProvider.prototype,"removeSession",1),oF([(0,ew.Yz)()],AccountAuthenticationProvider.prototype,"removeSessionsByScopes",1);var oq=i(4465),oW=Object.defineProperty,oM=Object.getOwnPropertyDescriptor,oG=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oM(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oW(t,i,o),o};let OrganizationService=class OrganizationService{constructor(e,t){this.container=e,this.connection=t,this._disposable=w.Disposable.from((0,oq.Oo)(e.onReady)(async()=>{let e=await this.getActiveOrganizationId();this.updateOrganizationPermissions(e)}),e.subscription.onDidChange(this.onSubscriptionChanged,this))}_disposable;_organizations;_organizationSettings;_organizationMembers;dispose(){this._disposable.dispose()}async getOrganizations(e){let t=(0,eb.dQ)(),i=e?.userId??(await this.container.subscription.getSubscription(!0))?.account?.id;if(null==i)return this.updateOrganizations(void 0),this._organizations;if(void 0===this._organizations||e?.force){let r;if(!e?.force&&(this.loadStoredOrganizations(i),null!=this._organizations))return this._organizations;try{r=await this.connection.fetchGkApi("user/organizations-light",{method:"GET"},{token:e?.accessToken})}catch(e){return ev.Vy.error(e,t),w.window.showErrorMessage(`Unable to get organizations due to error: ${e}`,"OK"),this.updateOrganizations(void 0),this._organizations}if(!r.ok)return ev.Vy.error(void 0,t,`Unable to get organizations; status=(${r.status}): ${r.statusText}`),w.window.showErrorMessage(`Unable to get organizations; Status: ${r.statusText}`,"OK"),this.updateOrganizations(null),this._organizations;let s=(await r.json()).map(e=>({id:e.id,name:e.name,role:e.role}));await this.storeOrganizations(s,i),this.updateOrganizations(s)}return this._organizations}loadStoredOrganizations(e){let t=this.container.storage.get(`gk:${e}:organizations`);if(null==t)return;let{timestamp:i,data:r}=t;null==i||Date.now()-i>864e5||this.updateOrganizations(r)}async storeOrganizations(e,t){return this.container.storage.store(`gk:${t}:organizations`,{v:1,timestamp:Date.now(),data:e})}onSubscriptionChanged(e){e.current?.account?.id==null&&this.updateOrganizations(void 0),this.updateOrganizationPermissions(e.current?.activeOrganization?.id)}updateOrganizations(e){this._organizations=e,(0,sT.o)("gitlens:gk:hasOrganizations",(e??[]).length>1)}async updateOrganizationPermissions(e){let t=null!=e?await this.getOrganizationSettings(e):void 0;(0,sT.o)("gitlens:gk:organization:ai:enabled",t?.aiSettings.enabled??!0),(0,sT.o)("gitlens:gk:organization:drafts:byob",t?.draftsSettings.bucket!=null),(0,sT.o)("gitlens:gk:organization:drafts:enabled",t?.draftsSettings.enabled??!0)}async getMembers(e,t){if(null==e&&null==(e=await this.getActiveOrganizationId()))return[];if(!this._organizationMembers?.has(e)||t?.force===!0){let t=await this.connection.fetchGkApi(`organization/${e}/members`,{method:"GET"});if(!t.ok)return ev.Vy.error("",(0,eb.dQ)(),`Unable to get organization members; status=(${t.status}): ${t.statusText}`),[];let i=(await t.json()).members;(function(e){e.sort((e,t)=>(e.name??e.username).localeCompare(t.name??t.username))})(i),this._organizationMembers??=new Map,this._organizationMembers.set(e,i)}return this._organizationMembers.get(e)??[]}async getMemberById(e,t){return(await this.getMembers(t)).find(t=>t.id===e)}async getMembersByIds(e,t){return(await this.getMembers(t)).filter(t=>e.includes(t.id))}async getActiveOrganizationId(e=!0){let t=await this.container.subscription.getSubscription(e);return t?.activeOrganization?.id}async getOrganizationSettings(e,t){let i=e??await this.getActiveOrganizationId();if(null!=i){if(!this._organizationSettings?.has(i)||t?.force===!0){let e=await this.connection.fetchGkApi("v1/organizations/settings",{method:"GET"},{organizationId:i});if(!e.ok){ev.Vy.error("",(0,eb.dQ)(),`Unable to get organization settings; status=(${e.status}): ${e.statusText}`);return}let t=await e.json();if(null!=t.error){ev.Vy.error("",(0,eb.dQ)(),`Unable to get organization settings; status=(${e.status}): ${t.error}`);return}null==this._organizationSettings&&(this._organizationSettings=new Map),this._organizationSettings.set(i,t.data)}return this._organizationSettings.get(i)}}};oG([(0,tp.G)()],OrganizationService.prototype,"getOrganizations",1),oG([(0,tp.G)()],OrganizationService.prototype,"loadStoredOrganizations",1),oG([(0,tp.G)()],OrganizationService.prototype,"getMembers",1),oG([(0,tp.G)()],OrganizationService.prototype,"getOrganizationSettings",1);let oH=Object.freeze({String:e=>"string"==typeof e,Number:e=>"number"==typeof e,Boolean:e=>"boolean"==typeof e,Object:e=>null!=e&&"object"==typeof e,Array:e=>t=>Array.isArray(t)&&t.every(e),Enum:(...e)=>t=>e.includes(t),Optional:e=>t=>void 0===t||e(t)});function oV(e){return t=>!!oH.Object(t)&&Object.entries(e).every(([e,i])=>i(t[e]))}var oj=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),oQ=e=>{throw TypeError(e)},oz=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&oQ("Object expected"),i&&(r=t[oj("asyncDispose")]),void 0===r&&(r=t[oj("dispose")],i&&(s=r)),"function"!=typeof r&&oQ("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},oY=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let ProductConfigProvider=class ProductConfigProvider{_lazyConfig;constructor(e,t){this._lazyConfig=(0,r1.R)(async()=>{var i=[];try{let r,s=oz(i,(0,eb.bP)(`${(0,ev.zu)(this)}.load`,!1)),o={validation:!1,exception:void 0,statusCode:void 0};try{let i=await t.fetchGkConfig("product.json");if(i.ok){if(r=await i.json(),(function(){let e=oH.Enum("account","badge","gate","home"),t=oH.Enum(sQ.zZ.VerificationRequired,sQ.zZ.Community,sQ.zZ.ProPreview,sQ.zZ.ProPreviewExpired,sQ.zZ.ProTrial,sQ.zZ.ProTrialExpired,sQ.zZ.ProTrialReactivationEligible,sQ.zZ.Paid),i=oV({detail:oH.String}),r=oV({html:oH.Optional(oH.String)}),s=e=>"string"==typeof e&&e.startsWith("gitlens."),o=oV({html:oH.String,title:oH.String,command:oH.Optional(e=>s(e))}),n=oV({info:oH.Optional(r),link:oH.Optional(o)}),a=oV({quickpick:i,webview:oH.Optional(n)}),l=oV({key:oH.String,code:oH.Optional(oH.String),states:oH.Optional(oH.Array(t)),expiresOn:oH.Optional(oH.String),startsOn:oH.Optional(oH.String),locations:oH.Optional(oH.Array(e)),content:oH.Optional(a),percentile:oH.Optional(oH.Number)});return oV({v:oH.Number,promos:oH.Array(l)})})()(r)){let t={promos:r.promos.map(e=>({key:e.key,code:e.code,states:e.states,expiresOn:null==e.expiresOn?void 0:new Date(e.expiresOn).getTime(),startsOn:null==e.startsOn?void 0:new Date(e.startsOn).getTime(),locations:e.locations,content:e.content,percentile:e.percentile}))};return await e.storage.store("product:config",{data:t,v:1,timestamp:Date.now()}),t}o.validation=!0}else o.statusCode=i.status}catch(e){o.exception=e,ev.Vy.error(e,s)}e.telemetry.sendEvent("productConfig/failed",{reason:o.validation?"validation":"fetch",json:JSON.stringify(r),exception:null!=o.exception?String(o.exception):void 0,statusCode:o.statusCode});let n=e.storage.get("product:config");if(n?.data!=null)return n.data;return{promos:[{key:"pro50",states:[sQ.zZ.Community,sQ.zZ.ProPreview,sQ.zZ.ProPreviewExpired,sQ.zZ.ProTrial,sQ.zZ.ProTrialExpired,sQ.zZ.ProTrialReactivationEligible],locations:["home","account","badge","gate"],content:{quickpick:{detail:"$(star-full) Save 50% on GitLens Pro"},webview:{info:{html:"<b>Save 50%</b> on GitLens Pro"},link:{html:"<b>Save 50%</b> on GitLens Pro",title:"Upgrade now and Save 50% on GitLens Pro"}}}}]}}catch(e){var r=e,s=!0}finally{oY(i,r,s)}})}async getApplicablePromo(e,t){if(null!=e){var i=await this.getPromos(),r=e,s=t;if(null!=r){for(let e of i)if(function(e,t){let i=Date.now();return(null==e.states||e.states.includes(t))&&(null==e.expiresOn||e.expiresOn>i)&&(null==e.startsOn||e.startsOn<i)&&(null==e.percentile||ef.r$<=e.percentile)}(e,r)){if(null==s||null==e.locations||e.locations.includes(s))return e;break}}return}}getConfig(){return this._lazyConfig.value}async getPromos(){return(await this.getConfig()).promos}};var oK=Object.defineProperty,oZ=Object.getOwnPropertyDescriptor,oJ=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oZ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oK(t,i,o),o};let ServerConnection=class ServerConnection{constructor(e,t){this.container=e,this.urls=t}dispose(){}get userAgent(){return`${this.container.debugging?"GitLens-Debug":this.container.prerelease?"GitLens-Pre":"GitLens"}/${this.container.version} (${w.env.appName}/${w.version}; ${(0,eX.uo)()})`}get clientName(){return this.container.debugging?"gitlens-vsc-debug":this.container.prerelease?"gitlens-vsc-pre":"gitlens-vsc"}async fetch(e,t,i){let r,s=(0,eb.dQ)();if(i?.cancellation?.isCancellationRequested)throw new ik.AL;let o=new AbortController;i?.cancellation!=null?(r=i.timeout,i.cancellation.onCancellationRequested(()=>o.abort())):r=i?.timeout??6e4;let n=null!=r?setTimeout(()=>o.abort(),r):void 0;try{let i=(0,eJ.hd)(e,{agent:(0,eJ.cQ)(),...t,headers:{"User-Agent":this.userAgent,...t?.headers},signal:o?.signal});return i.finally(()=>clearTimeout(n)),await i}catch(e){if(ev.Vy.error(e,s),"AbortError"===e.name)throw new ik.AL(e);throw e}}async fetchGkApi(e,t,i){return this.gkFetch(this.urls.getGkApiUrl(e),t,i)}async fetchGkConfig(e,t,i){return this.fetch(this.urls.getGkConfigUrl(e),t,i)}async fetchGkApiGraphQL(e,t,i,r){return this.fetchGkApi(e,{method:"POST",...i,body:JSON.stringify(t)},r)}async getGkHeaders(e,t,i){let r={"Content-Type":"application/json","Client-Name":this.clientName,"Client-Version":this.container.version,"User-Agent":this.userAgent,...i};return(e??=await this.getAccessToken())&&(r.Authorization=`Bearer ${e}`),(t??=(await this.container.subscription.getSubscription(!0)).activeOrganization?.id)&&(r["gk-org-id"]=t),r}async gkFetch(e,t,i){if(this.requestsAreBlocked)throw new ik.Vp;let r=(0,eb.dQ)();try{let s=await this.getGkHeaders(i?.token,i?.organizationId,t?.headers?{...t?.headers}:void 0);i?.query!=null&&(e instanceof URL?e.search=i.query:"string"==typeof e&&(e=`${e}?${i.query}`));let o=await this.fetch(e,{...t,headers:s},i);return o.ok?this.resetRequestExceptionCount():await this.handleGkUnsuccessfulResponse(o,r),o}catch(e){throw this.handleGkRequestError("gitkraken",e,r),e}}buildRequestRateLimitError(e,t){let i,r=t.response?.headers?.["x-ratelimit-reset"];return null!=r&&Number.isNaN(i=parseInt(r,10))&&(i=void 0),new ik.HG(t,e,i)}async handleGkUnsuccessfulResponse(e,t){let i;switch(e.status){case 403:e.statusText.includes("rate limit")&&this.trackRequestException();return;case 429:this.trackRequestException();return;case 500:this.trackRequestException(),(0,th.AQ)("GitKraken failed to respond and might be experiencing issues. Please visit the [GitKraken status page](https://cloud.gitkrakenstatus.com) for more information.");return;case 502:i=await e.clone().text(),ev.Vy.error(void 0,t,`GitKraken request failed: ${i} (${e.statusText})`),i.includes("timeout")&&(this.trackRequestException(),(0,th.Ng)());return;case 503:i=await e.clone().text(),ev.Vy.error(void 0,t,`GitKraken request failed: ${i} (${e.statusText})`),this.trackRequestException(),(0,th.AQ)("GitKraken failed to respond and might be experiencing issues. Please visit the [GitKraken status page](https://cloud.gitkrakenstatus.com) for more information.");return}e.status>=400&&e.status<500||ev.Vy.isDebugging&&(i??=await e.clone().text(),w.window.showErrorMessage(`DEBUGGING: GitKraken request failed: ${i} (${e.statusText})`))}handleGkRequestError(e,t,i){if(t instanceof ik.AL)throw t;if("AbortError"===t.name)throw new ik.AL(t);switch(t.status){case 404:throw new ik.LN(t);case 410:throw new ik.ly(t);case 422:throw new ik.ts(t);case 401:throw new ik.v3("gitkraken",ik.R.Unauthorized,t);case 429:throw this.trackRequestException(),this.buildRequestRateLimitError(e,t);case 403:if(t.message.includes("rate limit"))throw this.trackRequestException(),this.buildRequestRateLimitError(e,t);throw new ik.v3("gitkraken",ik.R.Forbidden,t);case 500:ev.Vy.error(t,i),null!=t.response&&(this.trackRequestException(),(0,th.AQ)("GitKraken failed to respond and might be experiencing issues. Please visit the [GitKraken status page](https://cloud.gitkrakenstatus.com) for more information."));return;case 502:ev.Vy.error(t,i),t.message.includes("timeout")&&(this.trackRequestException(),(0,th.Ng)());break;case 503:ev.Vy.error(t,i),this.trackRequestException(),(0,th.AQ)("GitKraken failed to respond and might be experiencing issues. Please visit the [GitKraken status page](https://cloud.gitkrakenstatus.com) for more information.");return;default:if(t.status>=400&&t.status<500)throw new ik.tk(t)}ev.Vy.isDebugging&&w.window.showErrorMessage(`DEBUGGING: GitKraken request failed: ${t.response?.errors?.[0]?.message??t.message}`)}async getAccessToken(){let e=await this.container.subscription.getAuthenticationSession();if(null!=e)return e.accessToken;throw new ik.WT}requestExceptionCount=0;requestsAreBlocked=!1;resetRequestExceptionCount(){this.requestExceptionCount=0,this.requestsAreBlocked=!1}trackRequestException(){this.requestExceptionCount++,this.requestExceptionCount>=5&&!this.requestsAreBlocked&&((0,th.iJ)(),this.requestsAreBlocked=!0,this.requestExceptionCount=0)}};oJ([(0,tB.B)()],ServerConnection.prototype,"userAgent",1),oJ([(0,tB.B)()],ServerConnection.prototype,"clientName",1);var oX=i(9439),o0=i(3958),o1=i(4521);function o2(){return v.H.get("gitkraken.activeOrganizationId")??v.H.getAny("gitlens.gitKraken.activeOrganizationId")??void 0}async function o5(e){await v.H.updateEffective("gitkraken.activeOrganizationId",e)}function o4(e,t,i){let r,s,o,n={id:e.user.id,name:e.user.name,email:e.user.email,verified:"activated"===e.user.status,createdOn:e.user.createdDate},a=Object.entries(e.licenses.effectiveLicenses),l=Object.entries(e.licenses.paidLicenses);(l=l.filter(e=>"expired"!==e[1].latestStatus&&"cancelled"!==e[1].latestStatus)).length>1&&l.sort((e,t)=>(0,sz.Nm)(o7(t[0]))+o6(t[1].latestStatus)-((0,sz.Nm)(o7(e[0]))+o6(e[1].latestStatus))),a.length>1&&a.sort((e,t)=>(0,sz.Nm)(o7(t[0]))+o6(t[1].latestStatus)-((0,sz.Nm)(o7(e[0]))+o6(e[1].latestStatus)));let c=new Map,u=new Map;for(let e of a){let[,t]=e;null!=t.organizationId&&null==c.get(t.organizationId)&&c.set(t.organizationId,e)}for(let e of l){let[,t]=e;null!=t.organizationId&&null==u.get(t.organizationId)&&u.set(t.organizationId,e)}let h=t.filter(e=>!u.has(e.id)&&!c.has(e.id));null!=i&&(l=l.filter(([,e])=>e.organizationId===i||null==e.organizationId),a=a.filter(([,e])=>e.organizationId===i||null==e.organizationId));let d=l.length>0?l[0]:void 0,p=a.length>0?a[0]:void 0,g=null!=i?u.get(i)??d:d;if(null!=g){let[e,t]=g;r=(0,sz.le)(o7(e),o3(e),t.reactivationCount??0,t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate))}null==r&&(r=(0,sz.le)(sQ.qn.CommunityWithAccount,!1,0,void 0,null!=e.user.firstGitLensCheckIn?new Date(e.user.firstGitLensCheckIn):null!=e.user.createdDate?new Date(e.user.createdDate):void 0,void 0,void 0,e.nextOptInDate));let m=null!=i?c.get(i)??p:p;if(null!=m){let[t,i]=m;s=(0,sz.le)(o7(t),o3(t),i.reactivationCount??0,i.organizationId,new Date(i.latestStartDate),new Date(i.latestEndDate),"cancelled"===i.latestStatus,i.nextOptInDate??e.nextOptInDate)}return(null==s||(0,sz.x3)(r.id,s.id)>=0)&&(s={...r}),null!=i?o=t.find(e=>e.id===i):s?.organizationId!=null?o=t.find(e=>e.id===s.organizationId):h.length>0&&(o=h[0]),{plan:{actual:r,effective:s},account:n,activeOrganization:o}}function o7(e){switch(e){case"gitlens-pro":case"bundle-pro":case"gitkraken_v1-pro":case"gitkraken-v1-pro":default:return sQ.qn.Pro;case"gitlens-teams":case"bundle-teams":case"gitkraken_v1-teams":case"gitkraken-v1-teams":return sQ.qn.Business;case"gitlens-advanced":case"bundle-advanced":case"gitkraken_v1-advanced":case"gitkraken-v1-advanced":return sQ.qn.Advanced;case"gitlens-hosted-enterprise":case"gitlens-self-hosted-enterprise":case"gitlens-standalone-enterprise":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":case"gitkraken_v1-hosted-enterprise":case"gitkraken_v1-self-hosted-enterprise":case"gitkraken_v1-standalone-enterprise":case"gitkraken-v1-hosted-enterprise":case"gitkraken-v1-self-hosted-enterprise":case"gitkraken-v1-standalone-enterprise":return sQ.qn.Enterprise}}function o3(e){switch(e){case"bundle-pro":case"bundle-advanced":case"bundle-teams":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return!0;default:return!1}}function o6(e){switch(e){case"active":return 100;case"expired":case"cancelled":return -100;case"in_trial":case"trial":return 1;case"canceled":case"non_renewing":return 0;default:return -200}}var o9=Object.defineProperty,o8=Object.getOwnPropertyDescriptor,ne=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),nt=e=>{throw TypeError(e)},ni=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?o8(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o9(t,i,o),o},nr=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&nt("Object expected"),i&&(r=t[ne("asyncDispose")]),void 0===r&&(r=t[ne("dispose")],i&&(s=r)),"function"!=typeof r&&nt("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},ns=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let SubscriptionService=class SubscriptionService{constructor(e,t,i){this.container=e,this.connection=t,this._disposable=w.Disposable.from(this._onDidChange,this._onDidChangeFeaturePreview,this._onDidCheckIn,(0,oq.Oo)(e.onReady)(this.onReady,this),this.container.accountAuthentication.onDidChangeSessions(e=>setTimeout(()=>this.onAuthenticationChanged(e),0),this),v.H.onDidChange(e=>{v.H.changed(e,"plusFeatures")&&this.updateContext()}),e.uri.onDidReceiveSubscriptionUpdatedUri(()=>this.checkUpdatedSubscription(void 0),this),e.uri.onDidReceiveLoginUri(this.onLoginUri,this));let r=this.getStoredSubscription();this._getCheckInData=()=>Promise.resolve(void 0),null!=r&&((0,ek.ib)(i,"< 14.0")&&(r.previewTrial=void 0),r.account?.id!=null&&(this._getCheckInData=()=>this.loadStoredCheckInData(r.account.id))),this.changeSubscription(r,void 0,{silent:!0}),setTimeout(()=>void this.ensureSession(!1,void 0),1e4)}_onDidChange=new w.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeFeaturePreview=new w.EventEmitter;get onDidChangeFeaturePreview(){return this._onDidChangeFeaturePreview.event}_onDidCheckIn=new w.EventEmitter;get onDidCheckIn(){return this._onDidCheckIn.event}_disposable;_subscription;_getCheckInData;_statusBarSubscription;_validationTimer;dispose(){this._statusBarSubscription?.dispose(),this._disposable.dispose()}async onAuthenticationChanged(e){let t=this._session;if(null==t&&null!=this._sessionPromise&&(t=await this._sessionPromise),null!=t&&e.removed?.some(e=>e.id===t.id)){this._session=void 0,this._sessionPromise=void 0,this.logout(void 0);return}let i=e.added?.[0]??e.changed?.[0];null!=i&&(i.id!==t?.id||i.accessToken!==t?.accessToken)&&(this._session=t,this.validate({force:!0}))}_etag=0;get etag(){return this._etag}onReady(){this._disposable=w.Disposable.from(this._disposable,this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),...this.registerCommands()),this.updateContext()}onRepositoriesChanged(e){this.updateContext()}registerCommands(){return[(0,rB.Lb)("gitlens.plus.login",e=>this.loginOrSignUp(!1,e)),(0,rB.Lb)("gitlens.plus.signUp",e=>this.loginOrSignUp(!0,e)),(0,rB.Lb)("gitlens.plus.logout",e=>this.logout(e)),(0,rB.Lb)("gitlens.plus.referFriend",e=>this.referFriend(e)),(0,rB.Lb)("gitlens.gk.switchOrganization",e=>this.switchOrganization(e)),(0,rB.Lb)("gitlens.plus.manage",e=>this.manageAccount(e)),(0,rB.Lb)("gitlens.plus.showPlans",e=>this.showPlans(e)),(0,rB.Lb)("gitlens.plus.startPreviewTrial",e=>this.startPreviewTrial(e)),(0,rB.Lb)("gitlens.plus.reactivateProTrial",e=>this.reactivateProTrial(e)),(0,rB.Lb)("gitlens.plus.resendVerification",e=>this.resendVerification(e)),(0,rB.Lb)("gitlens.plus.upgrade",e=>this.upgrade(e?.plan,e?{source:e.source,detail:e.detail}:void 0)),(0,rB.Lb)("gitlens.plus.hide",e=>this.setProFeaturesVisibility(!1,e)),(0,rB.Lb)("gitlens.plus.restore",e=>this.setProFeaturesVisibility(!0,e)),(0,rB.Lb)("gitlens.plus.validate",e=>this.validate({force:!0},e)),(0,rB.Lb)("gitlens.plus.continueFeaturePreview",({feature:e})=>this.continueFeaturePreview(e))]}async getAuthenticationSession(e=!1){return this.ensureSession(e,void 0)}async getSubscription(e=!1){let t=this.ensureSession(!1,void 0);return e||await t,this._subscription}async continueFeaturePreview(e){let t=this.getStoredFeaturePreview(e),i=(0,P.Zd)(t);if("active"===i)return;if("expired"===i){w.window.showInformationMessage(`Your ${sQ.Kt}-day preview of the ${(0,P.V)(e)} has expired.`);return}let r=new Date,s=[...t.usages,{startedOn:r.toISOString(),expiresOn:(0,tL.Tl)(r,{days:sQ.tY}).toISOString()}];if(await this.storeFeaturePreview(e,s),this._onDidChangeFeaturePreview.fire({feature:e,usages:s}),this.container.telemetry.enabled){let t={action:`start-preview-trial:${e}`,...no({feature:e,usages:s})};this.container.telemetry.sendEvent("subscription/action",t,{source:e})}}getFeaturePreview(e){return this.getStoredFeaturePreview(e)}getFeaturePreviews(){return P.g5.map(e=>this.getStoredFeaturePreview(e))}async learnAboutPro(e,t){switch(null!=t&&(e.detail={..."string"==typeof e.detail?{action:e.detail}:e.detail,...(0,o0.Bq)(t,"original")}),(await this.getSubscription()).state){case sQ.zZ.VerificationRequired:case sQ.zZ.Community:(0,rB.RS)("gitlens.openWalkthrough",{step:"get-started-community",source:e});break;case sQ.zZ.ProTrial:case sQ.zZ.ProPreview:(0,rB.RS)("gitlens.openWalkthrough",{step:"welcome-in-trial",source:e});break;case sQ.zZ.ProTrialReactivationEligible:case sQ.zZ.ProTrialExpired:case sQ.zZ.ProPreviewExpired:(0,rB.RS)("gitlens.openWalkthrough",{step:"welcome-in-trial-expired",source:e});break;case sQ.zZ.Paid:(0,rB.RS)("gitlens.openWalkthrough",{step:"welcome-paid",source:e})}}async showPlanMessage(e){if(!await this.ensureSession(!1,e))return;let{account:t,plan:{actual:i,effective:r}}=this._subscription;if(t?.verified===!1){let t={title:"Resend Email"};await w.window.showInformationMessage("Welcome to GitLens",{modal:!0,detail:"Verify the email we just sent you to start your Pro trial."},t,{title:"Continue",isCloseAffordance:!0})===t&&this.resendVerification(e)}else if((0,sz.A_)(this._subscription)){let t={title:"Learn More"};await w.window.showInformationMessage(`You are now on ${i.name} and have full access to all GitLens Pro features.`,{modal:!0},{title:"Continue",isCloseAffordance:!0},t)===t&&this.learnAboutPro({source:"prompt",detail:{action:"upgraded"}},e)}else if((0,sz.Mt)(this._subscription)){let t=(0,sz.NK)(this._subscription,"days")??0,i={title:"Learn More"};await w.window.showInformationMessage(`Welcome to your ${r.name} Trial.

You now have full access to all GitLens Pro features for ${t<1?"<1 more day":(0,_.td)("day",t,{infix:" more "})}.`,{modal:!0,detail:"Your trial also includes access to the GitKraken DevEx platform, unleashing powerful Git visualization & productivity capabilities everywhere you work: IDE, desktop, browser, and terminal."},{title:"Continue",isCloseAffordance:!0},i)===i&&this.learnAboutPro({source:"prompt",detail:{action:"trial-started"}},e)}else{let t={title:"Upgrade to Pro"},r={title:"Community vs. Pro"},s=await w.window.showInformationMessage(`You are now on ${i.name}.`,{modal:!0,detail:"You only have access to Pro features on publicly-hosted repos. For full access to all Pro features, please upgrade to GitLens Pro."},t,r,{title:"Continue",isCloseAffordance:!0});s===t?this.upgrade(sQ.qn.Pro,e):s===r&&this.learnAboutPro({source:"prompt",detail:{action:"trial-ended"}},e)}}async loginOrSignUp(e,t){if(!await (0,o1.ZQ)())return!1;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:e?"sign-up":"sign-in"},t);let i=na(t);return this.loginCore({signUp:e,source:t,context:i})}async loginWithCode(e,t){return!!await (0,o1.ZQ)()&&(this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"sign-in"},t),null!=await this.ensureSession(!1,t)&&await this.logout(t),this.loginCore({signIn:e,source:t}))}async loginCore(e){await this.container.accountAuthentication.abort(),this.showAccountView();let t=!!await this.ensureSession(!0,e?.source,{signIn:e?.signIn,signUp:e?.signUp,context:e?.context});return t&&this.showPlanMessage(e?.source),t}async logout(e){return this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"sign-out"},e),this.logoutCore(e)}async logoutCore(e){this.connection.resetRequestExceptionCount(),this._lastValidatedDate=void 0,null!=this._validationTimer&&(clearInterval(this._validationTimer),this._validationTimer=void 0),await this.container.accountAuthentication.abort(),this._sessionPromise=void 0,null!=this._session?(this.container.accountAuthentication.removeSession(this._session.id),this._session=void 0):this.container.accountAuthentication.removeSessionsByScopes(oU),this.changeSubscription((0,sz.RW)(this._subscription),e)}async manageAccount(e){let t=(0,eb.dQ)();this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"manage"},e);try{let e=await this.container.accountAuthentication.getExchangeToken();return await (0,ef.CZ)(this.container.urls.getGkDevUrl("account",`token=${e}`))}catch(e){return ev.Vy.error(e,t),(0,ef.CZ)(this.container.urls.getGkDevUrl("account"))}}async manageSubscription(e){return this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"manage-subscription"},e),(0,ef.CZ)(this.container.urls.getGkDevUrl("subscription/edit"))}async reactivateProTrial(e){let t=(0,eb.dQ)();if(!await (0,o1.ZQ)())return;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"reactivate"},e);let i=await this.ensureSession(!1,e);if(null!=i){try{let e=await this.connection.fetchGkApi("user/reactivate-trial",{method:"POST",body:JSON.stringify({client:"gitlens"})});if(!e.ok){if(409===e.status){w.window.showErrorMessage("You are not eligible to reactivate your Pro trial. If you feel that is an error, please contact support.","OK");return}w.window.showErrorMessage(`Unable to reactivate trial: (${e.status}) ${e.statusText}. Please try again. If this issue persists, please contact support.`,"OK");return}}catch(e){if(e instanceof ik.Vp){w.window.showErrorMessage("Unable to reactivate trial: Too many failed requests. Please reload the window and try again.","OK");return}w.window.showErrorMessage("Unable to reactivate trial. Please try again. If this issue persists, please contact support.","OK"),ev.Vy.error(e,t);return}try{if(await this.checkInAndValidate(i,e,{force:!0}),(0,sz.Mt)(this._subscription)){let e=(0,sz.NK)(this._subscription,"days"),t={title:"See What's New"};await w.window.showInformationMessage(`Your GitLens Pro trial has been reactivated! Experience all the new Pro features for another ${(0,_.td)("day",e??0)}.`,{modal:!0},{title:"OK",isCloseAffordance:!0},t)===t&&(0,ef.CZ)(R.DS.releaseNotes)}}catch(e){ev.Vy.error(e,t)}}}async referFriend(e){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"refer-friend"},e),await (0,ef.CZ)(this.container.urls.getGkDevUrl(void 0,"referral_portal=true&source=gitlens"))}async resendVerification(e){if(this._subscription.account?.verified)return!0;let t=(0,eb.dQ)();this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"resend-verification"},e),this.showAccountView(!0);let i=await this.ensureSession(!1,e);if(null==i)return!1;try{let r=await this.connection.fetchGkApi("resend-email",{method:"POST",body:JSON.stringify({id:i.account.id})},{token:i.accessToken});if(!r.ok)return ev.Vy.error("",t,`Unable to resend verification email; status=(${r.status}): ${r.statusText}`),w.window.showErrorMessage(`Unable to resend verification email; Status: ${r.statusText}`,"OK"),!1;let s={title:"Recheck"};if(await w.window.showInformationMessage("Once you have verified your email address, click 'Recheck'.",s,{title:"Cancel"})===s)return await this.validate({force:!0},e),!0}catch(e){ev.Vy.error(e,t),w.window.showErrorMessage("Unable to resend verification email","OK")}return!1}setProFeaturesVisibility(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"visibility",visible:e},t),v.H.updateEffective("plusFeatures.enabled",e)}async showAccountView(e=!1){(!e||v.H.get("plusFeatures.enabled",void 0,!0))&&(this.container.views.home.visible||await (0,rB.RS)("gitlens.showAccountView"))}showPlans(e){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"pricing"},e),(0,ef.CZ)(R.DS.pricing)}async startPreviewTrial(e){if(!await (0,o1.ZQ)())return;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"start-preview-trial"},e);let{plan:t,previewTrial:i}=this._subscription;if(null!=i){if(this.showAccountView(),t.effective.id===sQ.qn.Community){let t={title:"Try GitLens Pro"},i={title:"Sign In"},r=await w.window.showInformationMessage(`Do you want to start your free ${sQ.kj}-day Pro trial for full access to all GitLens Pro features?`,{modal:!0},t,i,{title:"Cancel",isCloseAffordance:!0});(r===t||r===i)&&this.loginOrSignUp(r===t,e)}return}if((0,sz.yV)(this._subscription))return;let r=sQ.Ep,s=(0,sz.KA)(r,this._subscription);this.changeSubscription(s,e),setTimeout(async()=>{let t={title:"Learn More"};await w.window.showInformationMessage(`You can now preview local Pro features for ${r<1?"1 day":(0,_.td)("day",r)}, or for full access to all GitLens Pro features, [start your free ${sQ.kj}-day Pro trial](${(0,oX.U)("gitlens.plus.signUp",e)} "Try GitLens Pro") \u2014 no credit card required.`,{title:"Continue"},t)===t&&this.learnAboutPro({source:"notification",detail:{action:"preview-started"}},e)},1)}async upgrade(e,t){var i=[];try{let r=(0,eb.dQ)();if(!await (0,o1.ZQ)())return!1;e??=sQ.qn.Pro;let s=!1,o=await this.container.productConfig.getApplicablePromo(this._subscription.state),n=nr(i,this.container.telemetry.enabled?(0,iQ.Nx)(()=>{this.container.telemetry.sendEvent("subscription/action",{action:"upgrade",aborted:s,"promo.key":o?.key,"promo.code":o?.code},t)},{once:!0}):void 0),a=null!=this._subscription.account;if(a)try{let i=await this.ensureSession(!1,t);if(null!=i&&await this.checkUpdatedSubscription(t)===sQ.zZ.Paid&&(0,sz.x3)(this._subscription.plan.effective.id,e)>=0)return!0}catch{}let l=new URLSearchParams;l.set("source","gitlens"),l.set("product","gitlens"),l.set("planType",(0,sz.Ld)(e)),o?.code!=null&&l.set("promoCode",o.code);let c=this._subscription.activeOrganization?.id;null!=c&&l.set("org",c);let u=na(t);null!=u&&l.set("context",u);try{if(a)try{let e=await this.container.accountAuthentication.getExchangeToken(sz.Kg);l.set("token",e)}catch(e){ev.Vy.error(e,r)}if(!l.has("token")){let e=await w.env.asExternalUri(w.Uri.parse(`${w.env.uriScheme}://${this.container.context.extension.id}/${o$}`));l.set("success_uri",e.toString(!0))}}catch(e){ev.Vy.error(e,r)}if(s=!await (0,ef.CZ)(this.container.urls.getGkDevUrl("purchase/checkout",l)))return!1;n?.dispose();let h=[new Promise(e=>setTimeout(()=>e(!1),3e5))];return a?h.push(new Promise(e=>(0,sh.s)(w.window.onDidChangeWindowState,2)(t=>{t.focused&&e(!0)})),new Promise(e=>(0,oq.Oo)(this.container.uri.onDidReceiveSubscriptionUpdatedUri)(()=>e(!1)))):h.push(new Promise(e=>(0,oq.Oo)(this.container.uri.onDidReceiveLoginUri)(()=>e(!1)))),await Promise.race(h)&&this.checkUpdatedSubscription(t),!0}catch(e){var r=e,s=!0}finally{ns(i,r,s)}}async validate(e,t){let i=(0,eb.dQ)(),r=await this.ensureSession(!1,t);if(null==r){this.changeSubscription(this._subscription,t);return}try{await this.checkInAndValidate(r,t,e)}catch(e){ev.Vy.error(e,i)}}_lastValidatedDate;async checkInAndValidate(e,t,i){let r=(0,eb.dQ)();if(!i?.force&&null!=this._lastValidatedDate&&Date.now()-this._lastValidatedDate.getTime()<432e5&&!(0,sz.Jc)(this._subscription)){(0,eb.TT)(r,` (${(0,tL.PI)(this._lastValidatedDate.getTime(),!0)})...`,"skipped");return}let s=this.checkInAndValidateCore(e,t,i?.organizationId);if(!i?.showSlowProgress)return s;let o=await (0,eC.wW)(s,void 0,3e3);return o.paused?w.window.withProgress({location:w.ProgressLocation.Notification,title:"Validating your account..."},()=>o.value):o.value}async checkInAndValidateCore(e,t,i){let r=(0,eb.dQ)();this._lastValidatedDate=void 0;try{let r={id:e.account.id,platform:(0,eX.uo)(),gitlensVersion:this.container.version,machineId:w.env.machineId,sessionId:w.env.sessionId,vscodeEdition:w.env.appName,vscodeHost:w.env.appHost,vscodeVersion:w.version,previewStartedOn:this._subscription.previewTrial?.startedOn,previewExpiresOn:this._subscription.previewTrial?.expiresOn},s=await this.connection.fetchGkApi("gitlens/checkin",{method:"POST",body:JSON.stringify(r)},{token:e.accessToken,organizationId:i});if(!s.ok)throw this._getCheckInData=()=>Promise.resolve(void 0),new ik.pf("Unable to validate account",void 0,s.status,s.statusText);this._onDidCheckIn.fire();let o=await s.json();return this._getCheckInData=()=>Promise.resolve(o),this.storeCheckInData(o),await this.validateAndUpdateSubscriptions(o,e,t),o}catch(e){if(this._getCheckInData=()=>Promise.resolve(void 0),ev.Vy.error(e,r),this.changeSubscription(this._subscription,t),e instanceof ik.pf)throw e;throw new ik.pf("Unable to validate account",e)}finally{this.startDailyValidationTimer()}}startDailyValidationTimer(){null!=this._validationTimer&&clearInterval(this._validationTimer),this._validationTimer=setInterval(()=>{(null==this._lastValidatedDate||this._lastValidatedDate.getDate()!==new Date().getDate())&&this.ensureSession(!1,void 0,{force:!0})},216e5)}storeCheckInData(e){e.user?.id!=null&&this.container.storage.store(`gk:${e.user.id}:checkin`,{v:1,timestamp:Date.now(),data:e}).catch()}async loadStoredCheckInData(e){let t=(0,eb.dQ)(),i=this.container.storage.get(`gk:${e}:checkin`);if(i?.timestamp==null||Date.now()-i.timestamp>864e5){let e=await this.getAuthenticationSession(!1);if(null==e)return;try{return await this.checkInAndValidate(e,void 0,{force:!0})}catch(e){ev.Vy.error(e,t);return}}return i?.data}async validateAndUpdateSubscriptions(e,t,i){let r,s=(0,eb.dQ)();try{r=await this.container.organizations.getOrganizations({force:!0,accessToken:t.accessToken,userId:t.account.id})??[]}catch(e){ev.Vy.error(e,s),r=[]}let o=o2();""===o?o=void 0:null==o||r.some(e=>e.id===o)||(o=void 0,o5(void 0));let n=o4(e,r,o);this._lastValidatedDate=new Date,this.changeSubscription({...this._subscription,...n},i,{store:!0})}_sessionPromise;_session;async ensureSession(e,t,i){return(null!=this._sessionPromise&&await this._sessionPromise,i?.force||null==this._session)?null!==this._session||e?(void 0===this._sessionPromise&&(this._sessionPromise=this.getOrCreateSession(e,t,{signUp:i?.signUp,signIn:i?.signIn,context:i?.context}).then(e=>(this._session=e,this._sessionPromise=void 0,this._session),()=>(this._session=null,this._sessionPromise=void 0,this._session))),await this._sessionPromise??void 0):void 0:this._session}async getOrCreateSession(e,t,i){let r,s=(0,eb.dQ)();try{null!=i&&e&&this.container.accountAuthentication.setOptionsForScopes(oU,i),r=await this.container.accountAuthentication.getOrCreateSession(oU,e)}catch(o){if(r=null,null!=i&&e&&this.container.accountAuthentication.clearOptionsForScopes(oU),o instanceof Error&&o.message.includes("User did not consent"))return(0,eb.TT)(s," • User declined authentication"),await this.logoutCore(t),null;ev.Vy.error(o,s)}if(null==r)return(0,eb.TT)(s," • No valid session was found"),await this.logoutCore(t),r??null;try{await this.checkInAndValidate(r,t,{showSlowProgress:e,force:e})}catch(i){if(ev.Vy.error(i,s),this.container.telemetry.sendEvent("account/validation/failed",{"account.id":r.account.id,exception:String(i),code:i.original?.code,statusCode:i.statusCode}),(0,eb.TT)(s,` \u2022 Account validation failed (${i.statusCode??i.original?.code})`,"FAILED"),i instanceof ik.pf){let s=r.account.label;if(i.original?.code!=="ENOTFOUND"&&null!=i.statusCode&&i.statusCode<500&&i.statusCode>=400){if(r=null,await this.logoutCore(t),e){let e=401===i.statusCode;queueMicrotask(async()=>{let t={title:"Retry Sign In"};await w.window.showErrorMessage(`Unable to sign in to your (${s}) account. Please try again. If this issue persists, please contact support.${e?"":` Error=${i.message}`}`,t)===t&&this.loginOrSignUp(!1,{source:"subscription",detail:{error:"validation-failed","error.message":i.message}})})}}else r=r??null}}return this.connection.resetRequestExceptionCount(),r}changeSubscription(e,t,i){null==e&&(e={plan:{actual:(0,sz.le)(sQ.qn.Community,!1,0,void 0),effective:(0,sz.le)(sQ.qn.Community,!1,0,void 0)},account:void 0,state:sQ.zZ.Community}),(0,sz.Jc)(e)&&(e={...e,plan:{...e.plan,effective:e.plan.actual}}),!(0,sz.A_)(e)&&null!=e.previewTrial&&((0,sz.Cj)(e.previewTrial.expiresOn)??0)>0&&(e={...e,plan:{...e.plan,effective:(0,sz.le)(sQ.qn.Pro,!1,0,void 0,new Date(e.previewTrial.startedOn),new Date(e.previewTrial.expiresOn))}}),e.state=(0,sz.UJ)(e),(0,sz.JP)(e),(0,sT.o)("gitlens:promo",void 0);let r=this.container.productConfig.getApplicablePromo(e.state).catch(()=>void 0);r.then(e=>void(0,sT.o)("gitlens:promo",e?.key));let s=this._subscription,o=null!=s&&JSON.stringify(s)===JSON.stringify(e);if(o){i?.store&&this.storeSubscription(e).catch();return}queueMicrotask(async()=>{let i=nn(e,void 0,this.getFeaturePreviews(),await r);this.container.telemetry.setGlobalAttributes(i),i={...i,...!o?nn(s,"previous"):{}},this.container.telemetry.sendEvent(null==s?"subscription":"subscription/changed",i,t)}),i?.store!==!1&&this.storeSubscription(e).catch(),this._subscription=e,this._etag=Date.now(),i?.silent||(this.updateContext(),null!=s&&this._onDidChange.fire({current:e,previous:s,etag:this._etag}))}getStoredSubscription(){let e,t,i=this.container.storage.get("premium:subscription");return i?.data!=null?({lastValidatedAt:e,...t}=i.data,this._lastValidatedDate=null!=e?new Date(e):void 0):t=void 0,null!=t&&(t.plan.actual.name=(0,sz.SB)(t.plan.actual.id),t.plan.effective.name=(0,sz.SB)(t.plan.effective.id),(t.previewTrial?.expiresOn==null||new Date(t.previewTrial.expiresOn)>=new Date)&&(t.previewTrial={startedOn:t.previewTrial?.startedOn??new Date(0).toISOString(),...t.previewTrial,expiresOn:new Date(0).toISOString()})),t}async storeSubscription(e){return this.container.storage.store("premium:subscription",{v:1,data:{...e,lastValidatedAt:this._lastValidatedDate?.getTime()}})}getStoredFeaturePreview(e){return{feature:e,usages:this.container.storage.get(`plus:preview:${e}:usages`,[])}}storeFeaturePreview(e,t){return this.container.storage.store(`plus:preview:${e}:usages`,t)}_cancellationSource;_updateAccessContextDebounced;updateContext(){this._updateAccessContextDebounced?.cancel(),null==this._updateAccessContextDebounced&&(this._updateAccessContextDebounced=(0,tg.s)(this.updateAccessContext.bind(this),500)),null!=this._cancellationSource&&this._cancellationSource.cancel(),this._cancellationSource=new w.CancellationTokenSource,this._updateAccessContextDebounced(this._cancellationSource.token),this.updateStatusBar();let{plan:{actual:e},state:t}=this._subscription;(0,sT.o)("gitlens:plus",e.id!==sQ.qn.Community?e.id:void 0),(0,sT.o)("gitlens:plus:state",t)}async updateAccessContext(e){let t,i=!1;if(0!==this.container.git.repositoryCount&&({allowed:i}=await this.container.git.access(),e.isCancellationRequested))return;let r=v.H.get("plusFeatures.enabled")??!0;if(!r&&"mixed"===i)for(let i of(t=[],this.container.git.repositories)){if(i.closed)continue;let r=await this.container.git.access(void 0,i.uri);if(e.isCancellationRequested)return;r.allowed||t.push(i.uri.toString())}(0,sT.o)("gitlens:plus:enabled",!!i||r),(0,sT.o)("gitlens:plus:required",!1===i),(0,sT.o)("gitlens:plus:disallowedRepos",t)}updateStatusBar(){let{account:e,plan:{effective:t}}=this._subscription;if(t.id===sQ.qn.Community){this._statusBarSubscription?.dispose(),this._statusBarSubscription=void 0;return}let i=(0,sz.Mt)(this._subscription),r=this._subscription.state===sQ.zZ.ProTrialReactivationEligible;if(!(i||r)&&e?.verified!==!1){this._statusBarSubscription?.dispose(),this._statusBarSubscription=void 0;return}if(null==this._statusBarSubscription&&(this._statusBarSubscription=w.window.createStatusBarItem("gitlens.plus.subscription",w.StatusBarAlignment.Right)),this._statusBarSubscription.name="GitLens Pro",this._statusBarSubscription.text="$(gitlens-gitlens)",this._statusBarSubscription.command="gitlens.showAccountView",this._statusBarSubscription.backgroundColor=void 0,e?.verified===!1)this._statusBarSubscription.text=`$(gitlens-gitlens)\xa0\xA0$(warning)`,this._statusBarSubscription.backgroundColor=new w.ThemeColor("statusBarItem.warningBackground"),this._statusBarSubscription.tooltip=new w.MarkdownString(i?`**GitLens Pro \u2014 verify your email**

You must verify your email before you can start your **${t.name}** trial.`:`**GitLens Pro \u2014 verify your email**

You must verify your email before you can use Pro features on privately-hosted repos.`,!0);else{let e;if(r)e=`**GitLens Pro \u2014 reactivate your Pro trial**

Experience full access to all the [new Pro features](${R.DS.releaseNotes}) \u2014 free for another ${(0,_.td)("day",sQ.kj)}.`;else if(i){let t=(0,sz.NK)(this._subscription,"days")??0;e=`**GitLens Pro \u2014 trial**

You now have full access to all GitLens Pro features for ${(0,_.td)("day",t,{infix:" more "})}.`}this._statusBarSubscription.tooltip=new w.MarkdownString(e,!0)}this._statusBarSubscription.show()}async switchOrganization(e){let t,i=(0,eb.dQ)();if(null==this._session)return;try{t=await this.container.organizations.getOrganizations()}catch(e){ev.Vy.error(e,i);return}if(null==t||0===t.length)return;let r=t.map(e=>({label:e.name,org:e})),s=await w.window.showQuickPick(r,{title:"Switch Organization",placeHolder:"Choose an active organization for your account"}),o=this._subscription?.activeOrganization;if(s?.org==null||null!=o&&s.org.id===o.id)return;await this.checkInAndValidate(this._session,e,{force:!0,organizationId:s.org.id});let n=await this._getCheckInData();if(null==n)return;let a=o4(n,t,s.org.id);o2()!==s.org.id&&await o5(s.org.id),this.changeSubscription({...this._subscription,...a},e,{store:!0})}onLoginUri(e){let t=(0,eb.dQ)(),i=new URLSearchParams(e.query),r=i.get("code"),s=i.get("state"),o=i.get("context"),n="sign in to GitKraken";if("start_trial"===o&&(n="start a Pro trial"),null==r){ev.Vy.error(void 0,t,`No code provided. Link: ${e.toString(!0)}`),w.window.showErrorMessage(`Unable to ${n} with that link. Please try clicking the link again. If this issue persists, please contact support.`);return}this.loginWithCode({code:r,state:s??void 0},{source:"deeplink"})}async checkUpdatedSubscription(e){if(null==this._session)return;let t=this._subscription.state;return await this.checkInAndValidate(this._session,e,{force:!0}),t!==this._subscription.state&&this.showPlanMessage({source:"subscription"}),this._subscription.state}};function no(e){let t=(0,P.Zd)(e);return"eligible"===t?{feature:e.feature,status:t}:{feature:e.feature,status:t,day:e.usages.length,startedOn:e.usages[0].startedOn,...Object.fromEntries(e.usages.map((e,t)=>[`day.${t+1}.startedOn`,e.startedOn]))}}function nn(e,t,i,r){if(null==e)return{};let s=e.state;(s===sQ.zZ.ProPreview||s===sQ.zZ.ProPreviewExpired)&&(s=sQ.zZ.Community);let o=null!=i?function(e){let t=Object.create(null);for(let i of e){let{feature:e,...r}=no(i);Object.assign(t,(0,o0.Bq)(r,`subscription.featurePreviews.${i.feature}`))}return t}(i):{};return{...(0,o0.Bq)(e.account,`${t?`${t}.`:""}account`,{joinArrays:!0,skipPaths:["name","email"]}),...(0,o0.Bq)(e.plan,`${t?`${t}.`:""}subscription`,{skipPaths:["actual.name","effective.name"]}),...(0,o0.Bq)(e.previewTrial,`${t?`${t}.`:""}subscription.previewTrial`,{skipPaths:["actual.name","effective.name"]}),"subscription.promo.key":r?.key,"subscription.promo.code":r?.code,"subscription.state":s,"subscription.stateString":(0,sz.wC)(s),...o}}function na(e){switch(e?.source){case"graph":return"graph";case"launchpad":return"launchpad";case"timeline":return"visual_file_history";case"quick-wizard":if(null!=e.detail&&"string"!=typeof e.detail&&"action"in e.detail)switch(e.detail.action){case"worktree":return"worktrees";case"launchpad":return"launchpad"}break;case"worktrees":return"worktrees"}}ni([(0,tp.G)(),(0,ew.Rm)()],SubscriptionService.prototype,"continueFeaturePreview",1),ni([(0,ew.Yz)()],SubscriptionService.prototype,"learnAboutPro",1),ni([(0,ew.Rm)()],SubscriptionService.prototype,"loginOrSignUp",1),ni([(0,ew.Rm)()],SubscriptionService.prototype,"logout",1),ni([(0,ew.Rm)()],SubscriptionService.prototype,"manageAccount",1),ni([(0,ew.Rm)()],SubscriptionService.prototype,"manageSubscription",1),ni([(0,tp.G)(()=>""),(0,ew.Rm)()],SubscriptionService.prototype,"reactivateProTrial",1),ni([(0,ew.Rm)()],SubscriptionService.prototype,"referFriend",1),ni([(0,tp.G)(()=>""),(0,ew.Rm)()],SubscriptionService.prototype,"resendVerification",1),ni([(0,ew.Rm)()],SubscriptionService.prototype,"showAccountView",1),ni([(0,ew.Rm)()],SubscriptionService.prototype,"showPlans",1),ni([(0,tp.G)(()=>""),(0,ew.Rm)()],SubscriptionService.prototype,"startPreviewTrial",1),ni([(0,ew.Rm)()],SubscriptionService.prototype,"upgrade",1),ni([(0,tp.G)(e=>`${e?.force??!1}`),(0,ew.Rm)()],SubscriptionService.prototype,"validate",1),ni([(0,ew.Yz)({args:{0:e=>e?.account?.label}})],SubscriptionService.prototype,"checkInAndValidate",1),ni([(0,tp.G)(e=>e.account.id),(0,ew.Yz)({args:{0:e=>e?.account?.label}})],SubscriptionService.prototype,"checkInAndValidateCore",1),ni([(0,ew.Yz)()],SubscriptionService.prototype,"validateAndUpdateSubscriptions",1),ni([(0,tp.G)(),(0,ew.Yz)()],SubscriptionService.prototype,"ensureSession",1),ni([(0,ew.Yz)()],SubscriptionService.prototype,"getOrCreateSession",1),ni([(0,ew.Yz)()],SubscriptionService.prototype,"changeSubscription",1);var nl=Object.defineProperty,nc=Object.getOwnPropertyDescriptor,nu=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nc(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nl(t,i,o),o};let UrlsProvider=class UrlsProvider{constructor(e){this.env=e}get baseGkApiUri(){return"staging"===this.env?w.Uri.parse("https://staging-api.gitkraken.dev"):"dev"===this.env?w.Uri.parse("https://dev-api.gitkraken.dev"):w.Uri.parse("https://api.gitkraken.dev")}get baseGkDevUri(){return"staging"===this.env?w.Uri.parse("https://staging.gitkraken.dev"):"dev"===this.env?w.Uri.parse("https://dev.gitkraken.dev"):w.Uri.parse("https://gitkraken.dev")}getGkAIApiUrl(...e){return w.Uri.joinPath(this.baseGkApiUri,"v1","ai-tasks",...e).toString()}getGkApiUrl(...e){return w.Uri.joinPath(this.baseGkApiUri,...e).toString()}getGkConfigUrl(...e){return w.Uri.joinPath(w.Uri.parse("https://configs.gitkraken.dev"),"gitlens",...e).toString()}getGkDevUrl(e,t){"string"==typeof(e??=[])&&(e=[e]);let i=e.length?w.Uri.joinPath(this.baseGkDevUri,...e):this.baseGkDevUri;return"string"==typeof(t??="source=gitlens")?(t.includes("source=gitlens")||(t=`source=gitlens&${t}`),i=i.with({query:t})):(t.has("source")||t.set("source","gitlens"),i=i.with({query:t.toString()})),i.toString(!0)}};nu([(0,tB.B)()],UrlsProvider.prototype,"baseGkApiUri",1),nu([(0,tB.B)()],UrlsProvider.prototype,"baseGkDevUri",1);let GraphStatusBarController=class GraphStatusBarController{_disposable;_statusBarItem;constructor(e){this._disposable=w.Disposable.from(v.H.onDidChange(this.onConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),(0,oq.Oo)(e.onReady)(()=>queueMicrotask(()=>this.updateStatusBar())),(0,sT.wt)(e=>{("gitlens:enabled"===e||"gitlens:plus:enabled"===e)&&this.updateStatusBar()}),{dispose:()=>this._statusBarItem?.dispose()})}dispose(){this._disposable.dispose()}onConfigurationChanged(e){(v.H.changed(e,"graph.statusBar.enabled")||v.H.changed(e,"plusFeatures.enabled"))&&this.updateStatusBar()}onSubscriptionChanged(e){this.updateStatusBar()}updateStatusBar(){v.H.get("graph.statusBar.enabled")&&(0,sT.SD)("gitlens:enabled")&&(0,o1.LK)()?(null==this._statusBarItem&&(this._statusBarItem=w.window.createStatusBarItem("gitlens.graph",w.StatusBarAlignment.Left,9998),this._statusBarItem.name="GitLens Commit Graph",this._statusBarItem.command="gitlens.showGraph",this._statusBarItem.text="$(gitlens-graph)",this._statusBarItem.tooltip=new w.MarkdownString("Visualize commits on the Commit Graph"),this._statusBarItem.accessibilityInformation={label:"Show the GitLens Commit Graph"}),this._statusBarItem.show()):(this._statusBarItem?.dispose(),this._statusBarItem=void 0)}};var nh=i(1881),nd=i(6461);let ConfiguredIntegrationService=class ConfiguredIntegrationService{constructor(e){this.container=e}_onDidChange=new w.EventEmitter;get onDidChange(){return this._onDidChange.event}_configured;dispose(){this._onDidChange.dispose()}get configured(){if(null==this._configured)for(let[e,t]of(this._configured=new Map,Object.entries(this.container.storage.get("integrations:configured")??{}))){if(null==t)continue;let i=t.map(e=>({...e,expiresAt:e.expiresAt?new Date(e.expiresAt):void 0}));this._configured.set(e,i)}return this._configured}async getConfigured(e){let t=[],i=e?.id!=null?this.configured.get(e.id):[...(0,tm.Bq)(this.configured.values())];if(null!=i&&(e?.domain!=null||e?.type!=null))for(let r of i)(e?.domain==null||r.domain===e.domain)&&(e?.type!=="cloud"||r.cloud)&&(e?.type==="local"&&r.cloud||t.push(r));else t.push(...i??[]);if((e?.id==null||e.id===sy.Q7.GitHub)&&e?.type!=="cloud"&&!this.configured.get(sy.Q7.GitHub)){let e=await (0,nh.c)(this.container,sy.Q7.GitHub,{domain:nd.Mt[sy.Q7.GitHub].domain,scopes:nd.Mt[sy.Q7.GitHub].scopes},{silent:!0});null!=e&&t.push({integrationId:sy.Q7.GitHub,domain:void 0,expiresAt:e.expiresAt,scopes:nd.Mt[sy.Q7.GitHub].scopes.join(","),cloud:!1})}return t}getConfiguredLite(e){let t=[],i=e?.id!=null?this.configured.get(e.id):[...(0,tm.Bq)(this.configured.values())];if(null==i)return t;if(e?.domain!=null||e?.type!=null)for(let r of i)(e?.domain==null||r.domain===e.domain)&&(e?.type!=="cloud"||r.cloud)&&(e?.type==="local"&&r.cloud||t.push(r));else t.push(...i);return t}async storeConfigured(){let e={};for(let[t,i]of this.configured)e[t]=i.map(e=>({...e,expiresAt:e.expiresAt?e.expiresAt instanceof Date?e.expiresAt.toISOString():e.expiresAt:void 0}));await this.container.storage.store("integrations:configured",e)}async addConfigured(e){let t=this.configured.get(e.integrationId)??[],i=t.find(t=>t.domain===e.domain&&t.integrationId===e.integrationId&&t.cloud===e.cloud);if(null!=i){if(i.expiresAt===e.expiresAt&&i.scopes===e.scopes)return;let r=t.indexOf(i);t.splice(r,1)}t.push(e),this.configured.set(e.integrationId,t),this.queueDidChange(e.integrationId),await this.storeConfigured()}async removeConfigured(e,t){let i=this.configured.get(e)?.filter(e=>t?.type==="cloud"?!0!==e.cloud||e.domain!==t?.domain:t?.type==="local"&&!1!==e.cloud||e.domain!==t?.domain);null!=i&&0===i.length&&this.configured.delete(e),this.configured.set(e,i??[]),this.queueDidChange(e),await this.storeConfigured()}async storeSession(e,t){await this.writeSecret(e,t)}async getStoredSession(e,t,i="local"){let r=this.getSessionId(t),s=await this.readSecret(e,r,"local");if("cloud"!==i)return np(s,t,!1);let o=!1;return null!=s&&null!=s.expiresAt&&(o=!0,await Promise.allSettled([this.deleteSecrets(e,s.id),this.writeSecret(e,s)])),null==s&&(o=!0,s=await this.readSecret(e,r,"cloud")),np(s,t,o)}async deleteStoredSessions(e,t,i){await this.deleteSecrets(e,this.getSessionId(t),i)}async deleteAllStoredSessions(e,t){await this.deleteAllSecrets(e,t)}async deleteSecrets(e,t,i){(null==i||"local"===i)&&await this.container.storage.deleteSecret(this.getLocalSecretKey(e,t)),(null==i||"cloud"===i)&&await this.container.storage.deleteSecret(this.getCloudSecretKey(e,t)),await this.removeConfigured(e,{domain:(0,nd.NT)(e)?t:void 0,type:i})}async deleteAllSecrets(e,t){if((0,nd.NT)(e)){let i=this.configured.get(e)?.map(e=>e.domain);if(null!=i)for(let r of i)await this.deleteSecrets(e,r,t);return}await this.deleteSecrets(e,nd.Mt[e].domain,t)}async writeSecret(e,t){await this.container.storage.storeSecret(this.getSecretKey(e,t.id,t.cloud?"cloud":"local"),JSON.stringify(t)),await this.addConfigured({integrationId:e,domain:(0,nd.NT)(e)?t.domain:void 0,expiresAt:t.expiresAt,scopes:t.scopes.join(","),cloud:t.cloud??!1})}async readSecret(e,t,i="local"){let r;try{let s=await this.container.storage.getSecret(this.getSecretKey(e,t,i));if(s&&(r=JSON.parse(s),null!=r)){let t=this.configured.get(e),i=(0,nd.NT)(e)?r.id:void 0;null!=t&&0!==t.length&&t.some(t=>t.domain===i&&t.integrationId===e)||await this.addConfigured({integrationId:e,domain:i,expiresAt:r.expiresAt,scopes:r.scopes.join(","),cloud:r.cloud??!1})}}catch{try{await this.deleteSecrets(e,t,i)}catch{}}return r}getSecretKey(e,t,i="local"){return"cloud"===i?this.getCloudSecretKey(e,t):this.getLocalSecretKey(e,t)}getLocalSecretKey(e,t){return`gitlens.integration.auth:${e}|${t}`}getCloudSecretKey(e,t){return`gitlens.integration.auth.cloud:${e}|${t}`}getSessionId(e){return e.domain}changedIds=new Set;debouncedFireDidChange;queueDidChange(e){this.debouncedFireDidChange??=(0,tg.s)(()=>{this._onDidChange.fire({ids:[...this.changedIds]}),this.changedIds.clear()},300),this.changedIds.add(e),this.debouncedFireDidChange()}};function np(e,t,i){if(null!=e)return{id:e.id,accessToken:e.accessToken,account:{id:e.account?.id??"",label:e.account?.label??""},scopes:e.scopes,cloud:e.cloud??i,expiresAt:e.expiresAt?new Date(e.expiresAt):void 0,domain:e.domain??t.domain,protocol:e.protocol}}var ng=i(2336),nm=i(1121),nf=Object.defineProperty,nw=Object.getOwnPropertyDescriptor,nv=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nw(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nf(t,i,o),o};let IntegrationAuthenticationService=class IntegrationAuthenticationService{constructor(e,t){this.container=e,this.configuredIntegrationService=t}providers=new Map;dispose(){this.providers.forEach(e=>void e.dispose()),this.providers.clear()}async get(e){return this.ensureProvider(e)}async reset(){await Promise.allSettled(nd.bT.map(async e=>(await this.ensureProvider(e)).deleteAllSessions()))}supports(e){switch(e){case sy.Q7.AzureDevOps:case sy.Q7.Bitbucket:case sy.PY.GitHubEnterprise:case sy.Q7.GitLab:case sy.PY.GitLabSelfHosted:case sy.tp.Jira:return!0;case sy.Q7.GitHub:return(0,nm.LT)(sy.Q7.GitHub);default:return!1}}async ensureProvider(e){let t=this.providers.get(e);if(null==t){switch(e){case sy.Q7.AzureDevOps:t=new(await i.e(758).then(i.bind(i,4997))).AzureDevOpsAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case sy.Q7.Bitbucket:t=new(await i.e(758).then(i.bind(i,2114))).BitbucketAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case sy.PY.BitbucketServer:t=new(await i.e(758).then(i.bind(i,2114))).BitbucketServerAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case sy.Q7.GitHub:t=(0,nm.LT)(sy.Q7.GitHub)?new(await i.e(758).then(i.bind(i,1388))).GitHubAuthenticationProvider(this.container,this,this.configuredIntegrationService):new ng.Ht(this.container,this,this.configuredIntegrationService,e);break;case sy.PY.CloudGitHubEnterprise:t=new(await i.e(758).then(i.bind(i,1388))).GitHubEnterpriseCloudAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case sy.PY.GitHubEnterprise:t=new(await i.e(758).then(i.bind(i,1388))).GitHubEnterpriseAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case sy.Q7.GitLab:t=(0,nm.LT)(sy.Q7.GitLab)?new(await i.e(758).then(i.bind(i,1292))).GitLabCloudAuthenticationProvider(this.container,this,this.configuredIntegrationService):new(await i.e(758).then(i.bind(i,1292))).GitLabLocalAuthenticationProvider(this.container,this,this.configuredIntegrationService,sy.Q7.GitLab);break;case sy.PY.CloudGitLabSelfHosted:t=new(await i.e(758).then(i.bind(i,1292))).GitLabSelfHostedCloudAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case sy.PY.GitLabSelfHosted:t=new(await i.e(758).then(i.bind(i,1292))).GitLabLocalAuthenticationProvider(this.container,this,this.configuredIntegrationService,sy.PY.GitLabSelfHosted);break;case sy.tp.Jira:t=new(await i.e(758).then(i.bind(i,1331))).JiraAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;default:t=new ng.Ht(this.container,this,this.configuredIntegrationService,e)}this.providers.set(e,t)}return t}};nv([(0,ew.Rm)()],IntegrationAuthenticationService.prototype,"reset",1),nv([(0,tp.G)()],IntegrationAuthenticationService.prototype,"ensureProvider",1);var ny=i(495),nb=i(3378),nC=i(9426),nk=Object.defineProperty,nS=Object.getOwnPropertyDescriptor,nR=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nS(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nk(t,i,o),o};let RepositoryIdentityService=class RepositoryIdentityService{constructor(e,t){this.container=e,this.locator=t}dispose(){}getRepository(e,t){return this.locateRepository(e,t)}async getRepositoryIdentity(e){let[t,i]=await Promise.allSettled([e.git.remotes().getBestRemoteWithProvider(),e.git.commits().getInitialCommitSha?.()]),r=(0,eC.Ro)(t);return{name:e.name,initialCommitSha:(0,eC.Ro)(i),remote:r,provider:r?.provider?.providerDesc}}async locateRepository(e,t){let i,r=null!=e.initialCommitSha&&"-"!==e.initialCommitSha,s=e?.remote?.url!=null,o=e.provider?.id!=null&&null!=e.provider.repoDomain&&null!=e.provider.repoName;if(!r&&!s&&!o)return;let n=s||o?await this.locator?.getLocation(e.remote?.url,null!=e.provider?{provider:e.provider.id,owner:e.provider.repoDomain,repoName:e.provider.repoName}:void 0):[];if(n?.length){for(let e of n){let t=this.container.git.getRepository(w.Uri.file(e));if(null!=t){i=t;break}}null==i&&t?.openIfNeeded&&(i=await this.container.git.getOrOpenRepository(w.Uri.file(n[0]),{closeOnOpen:!t?.keepOpen}))}else{let[,s,o]=e.remote?.url!=null?(0,eg.BX)(e.remote.url):[];for(let n of this.container.git.repositories)if(null!=s&&null!=o&&(await n.git.remotes().getRemotes({filter:e=>e.matches(s,o)})).length>0||!t?.skipRefValidation&&r&&await n.git.refs().isValidReference(e.initialCommitSha)){i=n;break}}if(null==i&&t?.prompt){let r={title:"Locate Repository"};if(await w.window.showInformationMessage(`Unable to find a repository for '${e.name}'.
Would you like to locate it?`,{modal:!0},r,{title:"Cancel",isCloseAffordance:!0})!==r)return;let s=(await w.window.showOpenDialog({title:`Choose a location for ${e.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(null==s)return;let o=await this.container.git.getOrOpenRepository(s,{closeOnOpen:!t?.keepOpen,detectNested:!1});if(null==o)return;(null==e.initialCommitSha||await o.git.refs().isValidReference(e.initialCommitSha))&&(i=o,await this.storeRepositoryLocation(i,e))}return i}async storeRepositoryLocation(e,t){if(e.virtual||null==this.locator)return;let[i,r]=await Promise.allSettled([null==t?this.getRepositoryIdentity(e):void 0,e.git.remotes().getRemotes()]);t??=(0,eC.Ro)(i);let s=(0,eC.Ro)(r)??[],o=e.uri.fsPath;for(let e of s){let t=await e.provider?.url({type:e5.J.Repo});null!=t&&await this.locator.storeLocation(o,t)}t?.provider?.id!=null&&t?.provider?.repoDomain!=null&&t?.provider?.repoName!=null&&await this.locator.storeLocation(o,void 0,{provider:t.provider.id,owner:t.provider.repoDomain,repoName:t.provider.repoName})}};nR([(0,ew.Rm)()],RepositoryIdentityService.prototype,"getRepository",1),nR([(0,ew.Rm)()],RepositoryIdentityService.prototype,"getRepositoryIdentity",1),nR([(0,ew.Rm)()],RepositoryIdentityService.prototype,"locateRepository",1),nR([(0,ew.Rm)({args:{1:!1}})],RepositoryIdentityService.prototype,"storeRepositoryLocation",1);var nP=i(6166),nA=Object.defineProperty,nI=Object.getOwnPropertyDescriptor,nD=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nA(t,i,o),o};let WorkspacesApi=class WorkspacesApi{constructor(e,t){this.container=e,this.connection=t}async getWorkspace(e,t){let i;if(t?.includeRepositories){let e=`(first: ${t?.repoCount??100}`;t?.repoPage&&(e+=`, page: ${t.repoPage}`),e+=")",i=`
				provider_data {
					repositories ${e} {
						total_count
						page_info {
							end_cursor
							has_next_page
						}
						nodes {
							id
							name
							repository_id
							provider
							provider_project_name
							provider_organization_id
							provider_organization_name
							url
						}
					}
				}
			`}let r=`
			id
			description
			name
			organization {
				id
			}
			provider
			azure_organization_id
			azure_project
			repo_relation
			${i??""}
		`,s=`
			query getWorkspace {
				project(id: "${e}") { ${r} }
			}
		`,o=await this.fetch({query:s});if(!o.ok)throw ev.Vy.error(void 0,`Getting workspace failed: (${o.status}) ${o.statusText}`),Error(o.statusText);return await o.json()}async getWorkspaces(e){let t,i;if(e?.includeRepositories){let i=`(first: ${e?.repoCount??100}`;e?.repoPage&&(i+=`, page: ${e.repoPage}`),i+=")",t=`
				provider_data {
					repositories ${i} {
						total_count
						page_info {
							end_cursor
							has_next_page
						}
						nodes {
							id
							name
							repository_id
							provider
							provider_project_name
							provider_organization_id
							provider_organization_name
							url
						}
					}
				}
			`}let r=`
			total_count
			page_info {
				end_cursor
				has_next_page
			}
			nodes {
				id
				description
				name
				organization {
					id
				}
				provider
				azure_organization_id
				azure_project
				repo_relation
				${t??""}
			}
		`,s=`(first: ${e?.count??100}`;e?.cursor?s+=`, after: "${e.cursor}"`:e?.page&&(s+=`, page: ${e.page}`),s+=")";let o=`
			query getWorkpaces {
				memberProjects: projects ${s} { ${r} }
			}
		`,n=await this.fetch({query:o});if(!n.ok)throw ev.Vy.error(void 0,`Getting workspaces failed: (${n.status}) ${n.statusText}`),Error(n.statusText);let a=new Set,l=await n.json();if(l?.data!=null){for(let e of Object.values(l.data))if(null!=e)if(null==i)for(let t of(i={data:{projects:e}},e.nodes))a.add(t.id);else for(let t of e.nodes)a.has(t.id)||(a.add(t.id),i.data.projects.nodes.push(t));return null!=i&&(i.data.projects.total_count=a.size),i}}async getWorkspaceRepositories(e,t){let i=`(first: ${t?.count??100}`;t?.cursor?i+=`, after: "${t.cursor}"`:t?.page&&(i+=`, page: ${t.page}`),i+=")";let r=await this.fetch({query:`
					query getWorkspaceRepos {
						project (id: "${e}") {
							provider_data {
								repositories ${i} {
									total_count
									page_info {
										end_cursor
										has_next_page
									}
									nodes {
										id
										name
										repository_id
										provider
										provider_project_name
										provider_organization_id
										provider_organization_name
										url
									}
								}
							}
						}
					}
				`});if(!r.ok)throw ev.Vy.error(void 0,`Getting workspace repos failed: (${r.status}) ${r.statusText}`),Error(r.statusText);return await r.json()}async createWorkspace(e){if(!e.name||!e.description||!e.provider||e.provider===nP.y1.Azure&&(!e.azureOrganizationName||!e.azureProjectName)||(e.provider===nP.y1.GitHubEnterprise||e.provider===nP.y1.GitLabSelfHosted)&&!e.hostUrl)return;let t=await this.fetch({query:`
					mutation createWorkspace {
						create_project(
							input: {
						  		type: GK_PROJECT
						  		name: "${e.name}"
						  		description: "${e.description}"
						  		provider: ${e.provider}
								${e.hostUrl?`host_url: "${e.hostUrl}"`:""}
								${e.azureOrganizationName?`azure_organization_id: "${e.azureOrganizationName}"`:""}
								${e.azureProjectName?`azure_project: "${e.azureProjectName}"`:""}
						  		profile_id: "shared-services"
							}
						) {
							id,
							name,
							description,
							organization {
								id
							}
							provider
							azure_organization_id
							azure_project
							repo_relation
						}
					}
				`});if(!t.ok)throw ev.Vy.error(void 0,`Creating workspace failed: (${t.status}) ${t.statusText}`),Error(t.statusText);return await t.json()}async deleteWorkspace(e){let t=await this.fetch({query:`
					mutation deleteWorkspace {
						delete_project(
							id: "${e}"
						) {
							id
						}
					}
				`});if(!t.ok)throw ev.Vy.error(void 0,`Deleting workspace failed: (${t.status}) ${t.statusText}`),Error(t.statusText);let i=await t.json();if(i?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to delete this workspace";throw ev.Vy.error(void 0,e),Error(e)}return i}async addReposToWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map(e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`).join(","),i+="]";let r=1,s=t.map(e=>`Repository${r++}: repository(provider_organization_id: "${e.owner}", name: "${e.repoName}") {
			id
			name
			repository_id
			provider
			provider_project_name
			provider_organization_id
			provider_organization_name
			url
		}`).join(","),o=await this.fetch({query:`
					mutation addReposToWorkspace {
						add_repositories_to_project(
							input: {
								project_id: "${e}",
								repositories: ${i}
							}
						) {
							id
							provider_data {
								${s}
							}
						}
					}
				`});if(!o.ok)throw ev.Vy.error(void 0,`Adding repositories to workspace failed: (${o.status}) ${o.statusText}`),Error(o.statusText);let n=await o.json();if(n?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to add repositories to this workspace";throw ev.Vy.error(void 0,e),Error(e)}return n}async removeReposFromWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map(e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`).join(","),i+="]";let r=await this.fetch({query:`
					mutation removeReposFromWorkspace {
						remove_repositories_from_project(
							input: {
								project_id: "${e}",
								repositories: ${i}
							}
						) {
							id
						}
					}
				`});if(!r.ok)throw ev.Vy.error(void 0,`Removing repositories from workspace failed: (${r.status}) ${r.statusText}`),Error(r.statusText);let s=await r.json();if(s?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to remove repositories from this workspace";throw ev.Vy.error(void 0,e),Error(e)}return s}async fetch(e,t){return this.connection.fetchGkApiGraphQL("api/projects/graphql",e,t)}};nD([(0,ew.Rm)()],WorkspacesApi.prototype,"getWorkspace",1),nD([(0,ew.Rm)()],WorkspacesApi.prototype,"getWorkspaces",1),nD([(0,ew.Rm)()],WorkspacesApi.prototype,"getWorkspaceRepositories",1),nD([(0,ew.Rm)()],WorkspacesApi.prototype,"createWorkspace",1),nD([(0,ew.Rm)()],WorkspacesApi.prototype,"deleteWorkspace",1),nD([(0,ew.Rm)()],WorkspacesApi.prototype,"addReposToWorkspace",1),nD([(0,ew.Rm)()],WorkspacesApi.prototype,"removeReposFromWorkspace",1);var n$=i(5725),nT=i(4300),nE=Object.defineProperty,n_=Object.getOwnPropertyDescriptor,nO=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?n_(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nE(t,i,o),o};let WorkspacesService=class WorkspacesService{constructor(e,t,i,r){this.container=e,this._api=t,this._sharedStorage=i,this._repositoryLocator=r,this._currentWorkspaceId=nF(),this._currentWorkspaceAutoAddSetting=w.workspace.getConfiguration("gitkraken")?.get("workspaceAutoAddSetting")??"disabled",this._disposable=w.Disposable.from(this._onDidResetWorkspaces,e.subscription.onDidChange(this.onSubscriptionChanged,this))}_onDidResetWorkspaces=new w.EventEmitter;get onDidResetWorkspaces(){return this._onDidResetWorkspaces.event}_cloudWorkspaces;_disposable;_localWorkspaces;_currentWorkspaceId;_currentWorkspaceAutoAddSetting="disabled";_currentWorkspace;dispose(){this._disposable.dispose()}get currentWorkspaceId(){return this._currentWorkspaceId}get currentWorkspace(){return this._currentWorkspace}onSubscriptionChanged(e){(null==e.current.account||e.current.account.id!==e.previous?.account?.id||e.current.state!==e.previous?.state)&&this.resetWorkspaces({cloud:!0})}async loadCloudWorkspaces(e=!1){let t,i=await this.container.subscription.getSubscription();if(i?.account==null)return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Please sign in to use cloud workspaces."};let r=[];try{let i=await this._api.getWorkspaces({includeRepositories:!e,includeOrganizations:!0});t=i?.data?.projects?.nodes}catch{return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Failed to load cloud workspaces."}}let s=0,o=(0,sz.k0)(i.state);if(t?.length)for(let i of t){let t=await this._sharedStorage?.getCloudWorkspaceCodeWorkspaceFileLocation(i.id);if(!o&&i.organization?.id){s+=1;continue}let n=i.provider_data?.repositories?.nodes,a=null!=n?n.map(e=>({...e,workspaceId:i.id})):n;null!=a||e||(a=[]),r.push(new nP.j2(this.container,i.id,i.name,i.organization?.id,i.provider,i.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===i.id,i.provider===nP.UQ.Azure?{organizationId:i.azure_organization_id??void 0,project:i.azure_project??void 0}:void 0,a,t))}return{cloudWorkspaces:r,cloudWorkspaceInfo:s>0?`${s} shared workspaces hidden - upgrade to GitLens Pro to access.`:void 0}}async loadLocalWorkspaces(){let e=[];for(let t of Object.values((await this._sharedStorage?.getLocalWorkspaceData())?.workspaces||{}))null!=t.localId&&null!=t.name&&e.push(new nT.h(this.container,t.localId,t.name,t.repositories?.map(e=>({localPath:e.localPath,name:e.localPath.split(/[\\/]/).pop()??"unknown",workspaceId:t.localId}))??[],null!=this._currentWorkspaceId&&this._currentWorkspaceId===t.localId));return{localWorkspaces:e,localWorkspaceInfo:void 0}}getCloudWorkspace(e){return this._cloudWorkspaces?.find(t=>t.id===e)}getLocalWorkspace(e){return this._localWorkspaces?.find(t=>t.id===e)}async getWorkspaces(e){let t={cloudWorkspaces:[],localWorkspaces:[],cloudWorkspaceInfo:void 0,localWorkspaceInfo:void 0};if(null==this._cloudWorkspaces||e?.force){let i=await this.loadCloudWorkspaces(e?.excludeRepositories);this._cloudWorkspaces=i.cloudWorkspaces,t.cloudWorkspaceInfo=i.cloudWorkspaceInfo}if(null==this._localWorkspaces||e?.force){let e=await this.loadLocalWorkspaces();this._localWorkspaces=e.localWorkspaces,t.localWorkspaceInfo=e.localWorkspaceInfo}let i=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find(e=>e.current);return null!=i&&(this._currentWorkspaceId=i.id,this._currentWorkspace=i),t.cloudWorkspaces=this._cloudWorkspaces??[],t.localWorkspaces=this._localWorkspaces??[],t}async getCloudWorkspaceRepositories(e){let t=await this._api.getWorkspaceRepositories(e),i=t?.data?.project?.provider_data?.repositories?.nodes;return i?.map(t=>({...t,workspaceId:e}))??[]}async addMissingCurrentWorkspaceRepos(e){if(null==this._currentWorkspaceId)return;let t=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find(e=>e.current);if(null==t)try{let e=await this._api.getWorkspace(this._currentWorkspaceId,{includeRepositories:!0});if(e?.data?.project==null)return;let i=e.data.project.provider_data?.repositories?.nodes,r=null!=i?i.map(t=>({...t,workspaceId:e.data.project.id})):[];t=new nP.j2(this.container,e.data.project.id,e.data.project.name,e.data.project.organization?.id,e.data.project.provider,e.data.project.repo_relation,!0,e.data.project.provider===nP.UQ.Azure?{organizationId:e.data.project.azure_organization_id??void 0,project:e.data.project.azure_project??void 0}:void 0,r,w.workspace.workspaceFile?.fsPath)}catch{return}if(!e?.force&&"disabled"===this._currentWorkspaceAutoAddSetting||!t?.current||(this._currentWorkspace=t,!(await t.getRepositoryDescriptors())?.length))return;let i=[...(await this.resolveWorkspaceRepositoriesByName(t,{resolveFromPath:!0,usePathMapping:!0})).values()].map(e=>e.repository),r=new Map;for(let e of this.container.git.openRepositories)r.set(e.id,e);let s=i.filter(e=>!r.has(e.id));if(0===s.length){e?.force&&w.window.showInformationMessage("No new repositories found to add.",{modal:!0});return}let o=[];if(!e?.force&&"prompt"===this._currentWorkspaceAutoAddSetting){let e={title:"Change Auto-Add Behavior..."},t={title:"Cancel",isCloseAffordance:!0},i=await w.window.showInformationMessage("New repositories found in the linked Cloud workspace. Would you like to add them to the current VS Code workspace?",{title:"Add..."},e,t);if(null==i||i===t)return;if(i===e){this.chooseCodeWorkspaceAutoAddSetting({current:!0});return}}if(e?.force||"prompt"===this._currentWorkspaceAutoAddSetting){let e=await (0,n$.ST)("Add Repositories to Workspace","Choose which repositories to add to the current workspace",s);if(0===e.length)return;o=e.map(e=>e.path)}else o=s.map(e=>e.path);if(0===o.length)return;let n=w.workspace.workspaceFolders?.length??0;w.window.withProgress({location:w.ProgressLocation.Notification,title:"Adding new repositories from linked cloud workspace...",cancellable:!1},()=>new Promise(e=>{w.workspace.updateWorkspaceFolders(n,0,...o.map(e=>({uri:w.Uri.file(e)}))),e(!0)}))}resetWorkspaces(e){(e?.cloud??!0)&&(this._cloudWorkspaces=void 0),(e?.local??!0)&&(this._localWorkspaces=void 0),this._onDidResetWorkspaces.fire()}async getCloudWorkspaceRepoPath(e,t){return this._sharedStorage?.getCloudWorkspaceRepositoryLocation(e,t)}async updateCloudWorkspaceRepoLocalPath(e,t,i){await this._sharedStorage?.storeCloudWorkspaceRepositoryLocation(e,t,i)}async getRepositoriesInParentFolder(e){let t=(await w.window.showOpenDialog({title:"Choose a folder containing repositories for this workspace",canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(!(null==t||e?.isCancellationRequested))try{return await this.container.git.findRepositories(t,{cancellation:e,depth:1,silent:!0})}catch{return}}async locateAllCloudWorkspaceRepos(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=await i.getRepositoryDescriptors();if(null==r||0===r.length)return;let s=await this.getRepositoriesInParentFolder(t);if(!(null==s||0===s.length||t?.isCancellationRequested)){for(let i of(await this.resolveWorkspaceRepositoriesByName(e,{cancellation:t,repositories:s})).values())if(await this.locateWorkspaceRepo(e,i.descriptor,i.repository),t?.isCancellationRequested)return}}async locateWorkspaceRepo(e,t,i){let r,s;if(null==i||i instanceof w.Uri){let e=i;if(null==e&&(e=(await w.window.showOpenDialog({title:`Choose a location for ${t.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0]),null==e||null==(r=await this.container.git.getOrOpenRepository(e,{closeOnOpen:!0,detectNested:!1})))return}else r=i;let o=r.uri.fsPath,n=(await r.git.remotes().getRemotes()).map(async e=>e.provider?.url({type:e5.J.Repo}));for(let e of(await Promise.allSettled(n)).map(e=>(0,eC.Ro)(e)).filter(e=>null!=e))await this._repositoryLocator?.storeLocation(o,e);let a=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);null==s&&a?.type==="cloud"&&(s=a.provider),null!=t.id&&(null!=t.url||null!=t.provider_organization_id&&null!=t.name&&null!=s)&&await this._repositoryLocator?.storeLocation(o,t.url??void 0,{provider:s,owner:t.provider_organization_id,repoName:t.name}),null!=t.id&&await this.updateCloudWorkspaceRepoLocalPath(e,t.id,o)}async createCloudWorkspace(e){let t,i,r,s,o,n,a,l=w.window.createInputBox();l.title="Create Cloud Workspace";let c=w.window.createQuickPick();c.title="Create Cloud Workspace";let u={GitHub:nP.y1.GitHub,"GitHub Enterprise":nP.y1.GitHubEnterprise};l.ignoreFocusOut=!0;let h=[];if(e?.repos!=null&&e.repos.length>0){for(let t of e.repos)if(0===(await t.git.remotes().getRemotes({filter:e=>"github.com"===e.domain})).length){await w.window.showErrorMessage("Only GitHub is supported for this operation. Please ensure all open repositories are hosted on GitHub.",{modal:!0});return}n=nP.y1.GitHub}try{if(!(t=await new Promise(e=>{h.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty name for the workspace";return}e(t)})),l.placeholder="Please enter a name for the new workspace",l.prompt="Enter your workspace name",l.show()}))||!(i=await new Promise(e=>{h.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty description for the workspace";return}e(t)})),l.value="",l.title="Create Workspace",l.placeholder="Please enter a description for the new workspace",l.prompt="Enter your workspace description",l.show()}))||(null==n&&(n=await new Promise(e=>{h.push(c.onDidHide(()=>e(void 0)),c.onDidAccept(()=>{0!==c.activeItems.length&&e(u[c.activeItems[0].label])})),c.placeholder="Please select a provider for the new workspace",c.items=Object.keys(u).map(e=>({label:e})),c.canSelectMany=!1,c.show()})),!n||(n===nP.y1.GitHubEnterprise||n===nP.y1.GitLabSelfHosted)&&!(r=await new Promise(e=>{h.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty host URL for the workspace";return}e(t)})),l.value="",l.placeholder="Please enter a host URL for the new workspace",l.prompt="Enter your workspace host URL",l.show()}))||n===nP.y1.Azure&&(!(s=await new Promise(e=>{h.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty organization name for the workspace";return}e(t)})),l.value="",l.placeholder="Please enter an organization name for the new workspace",l.prompt="Enter your workspace organization name",l.show()}))||!(o=await new Promise(e=>{h.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty project name for the workspace";return}e(t)})),l.value="",l.placeholder="Please enter a project name for the new workspace",l.prompt="Enter your workspace project name",l.show()})))))return}finally{l.dispose(),c.dispose(),h.forEach(e=>void e.dispose())}let d={name:t,description:i,provider:n,hostUrl:r,azureOrganizationName:s,azureProjectName:o};try{let e=await this._api.createWorkspace(d);a=e?.data?.create_project}catch{return}if(null!=a){null==this._cloudWorkspaces&&(this._cloudWorkspaces=[]);let t=await this._sharedStorage?.getCloudWorkspaceCodeWorkspaceFileLocation(a.id);this._cloudWorkspaces?.push(new nP.j2(this.container,a.id,a.name,a.organization?.id,a.provider,a.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===a.id,a.provider===nP.UQ.Azure?{organizationId:a.azure_organization_id??void 0,project:a.azure_project??void 0}:void 0,[],t));let i=this.getCloudWorkspace(a.id);null!=i&&await this.addCloudWorkspaceRepos(i.id,{repos:e?.repos,suppressNotifications:!0})}}async deleteCloudWorkspace(e){let t=await w.window.showWarningMessage("Are you sure you want to delete this workspace? This cannot be undone.",{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=t&&"Cancel"!==t.title)try{let t=await this._api.deleteWorkspace(e);t?.data?.delete_project?.id===e&&(this._cloudWorkspaces=this._cloudWorkspaces?.filter(t=>t.id!==e))}catch(e){w.window.showErrorMessage(e.message)}}async filterReposForProvider(e,t){let i=[];for(let r of e)(await r.git.remotes().getRemotes({filter:e=>e.provider?.id===nP.ft[t]})).length&&i.push(r);return i}async filterReposForCloudWorkspace(e,t){let i=this.getCloudWorkspace(t)??this.getLocalWorkspace(t);if(null==i)return e;let r=[...(await i.getRepositoriesByName()).values()].map(e=>e.repository);return e.filter(e=>!r.find(t=>t.id===e.id))}async addCloudWorkspaceRepos(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=[],s=t?.repos;if(!t?.repos){let r=await this.filterReposForProvider(this.container.git.openRepositories,i.provider);r=await this.filterReposForCloudWorkspace(r,e);let o=[{label:"Choose repositories from a folder",description:void 0,choice:"parentFolder"}];r.length>0&&o.unshift({label:"Choose repositories from the current window",description:void 0,choice:"currentWindow"}),o[0].picked=!0;let n=await w.window.showQuickPick(o,{placeHolder:"Choose repositories from the current window or a folder",ignoreFocusOut:!0});if(null==n)return;"parentFolder"===n.choice&&await w.window.withProgress({location:w.ProgressLocation.Notification,title:"Finding repositories to add to the workspace...",cancellable:!0},async(s,o)=>{let n=await this.getRepositoriesInParentFolder(o);if(null!=n){if(0===n.length){t?.suppressNotifications||w.window.showInformationMessage("No repositories found in the chosen folder.",{modal:!0});return}if(!o.isCancellationRequested){if(0===(r=await this.filterReposForProvider(n,i.provider)).length){t?.suppressNotifications||w.window.showInformationMessage(`No matching repositories found for provider ${i.provider}.`,{modal:!0});return}!o.isCancellationRequested&&0===(r=await this.filterReposForCloudWorkspace(r,e)).length&&(t?.suppressNotifications||w.window.showInformationMessage("All possible repositories are already in this workspace.",{modal:!0}))}}});let a=await (0,n$.ST)("Add Repositories to Workspace","Choose which repositories to add to the workspace",r);if(0===a.length)return;s=a.map(e=>e.path)}if(null==s)return;for(let e of s){let t=e instanceof e4.LN?e:await this.container.git.getOrOpenRepository(w.Uri.file(e),{closeOnOpen:!0});if(null==t)continue;let i=await t.git.remotes().getRemote("origin")||(await t.git.remotes().getRemotes())?.[0],s=await nx(i);null!=s&&r.push({owner:s.owner,repoName:s.repoName,repo:t,url:s.url})}if(0===r.length)return;let o=[],n=new Set((await i.getRepositoryDescriptors()).map(e=>e.id));await w.window.withProgress({location:w.ProgressLocation.Notification,title:`Adding repositories to workspace ${i.name}...`,cancellable:!1},async()=>{try{let t=await this._api.addReposToWorkspace(e,r.map(e=>({owner:e.owner,repoName:e.repoName})));if(t?.data.add_repositories_to_project==null)return;o=Object.values(t.data.add_repositories_to_project.provider_data).filter(e=>null!=e).map(t=>({...t,workspaceId:e}))}catch(e){w.window.showErrorMessage(e.message);return}for(let{repo:t,repoName:s,url:a}of(o.length>0&&i.addRepositories(o),o.length<r.length&&(o=(await i.getRepositoryDescriptors({force:!0})).filter(e=>!n.has(e.id))),r)){let i=o.find(e=>e.name.toLowerCase()===s||e.url===a);null!=i&&await this.locateWorkspaceRepo(e,i,t)}})}async removeCloudWorkspaceRepo(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=await w.window.showWarningMessage(`Are you sure you want to remove ${t.name} from this workspace? This cannot be undone.`,{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=r&&"Cancel"!==r.title)try{let r=await this._api.removeReposFromWorkspace(e,[{owner:t.provider_organization_id,repoName:t.name}]);if(r?.data.remove_repositories_from_project==null)return;i.removeRepositories([t.name])}catch(e){w.window.showErrorMessage(e.message)}}async resolveWorkspaceRepositoriesByName(e,t){let i=new Map,r=e instanceof nP.j2||e instanceof nT.h?e:this.getLocalWorkspace(e)??this.getCloudWorkspace(e);if(null==r)return i;let s=await r.getRepositoryDescriptors();if(null==s||0===s.length)return i;let o=t?.repositories??this.container.git.repositories,n=new Map,a=new Map;for(let e of o){if(t?.cancellation?.isCancellationRequested)break;if(a.set((0,T.Fd)(e.uri.fsPath.toLowerCase()),e),r instanceof nP.j2)for(let t of(await e.git.remotes().getRemotes())){let i=await nx(t);null!=i&&n.set(`${i.provider}/${i.owner}/${i.repoName}`,e)}}for(let e of s){let r=null,s=null;null==e.id?r=e.localPath:t?.usePathMapping===!0&&(r=await this.getMappedPathForCloudWorkspaceRepoDescriptor(e)),null!=r&&(s=a.get((0,T.Fd)(r.toLowerCase()))),null==s&&null!=e.id&&null!=e.provider&&(s=n.get(`${e.provider.toLowerCase()}/${e.provider_organization_id.toLowerCase()}/${e.name.toLowerCase()}`)),null!=r&&null==s&&t?.resolveFromPath===!0&&(s=await this.container.git.getOrOpenRepository(w.Uri.file(r),{closeOnOpen:!0,force:!0})),null!=s&&i.set(e.name,{descriptor:e,repository:s})}return i}async saveAsCodeWorkspaceFile(e){let t=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==t)return;let i=await t.getRepositoryDescriptors();if(null==i)return;let r=await t.getRepositoriesByName();if(0===r.size){w.window.showErrorMessage("No repositories in this workspace could be found locally. Please locate at least one repository.",{modal:!0});return}let s=[];for(let e of r.values()){let t=e.repository;t.virtual||s.push(t.uri.fsPath)}if(s.length<i.length){let e=await w.window.showWarningMessage("Some repositories in this workspace could not be located locally. Do you want to continue?",{modal:!0},{title:"Continue"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"===e.title)return}let o=await w.window.showSaveDialog({defaultUri:w.Uri.file(`${t.name}.code-workspace`),filters:{"Code Workspace":["code-workspace"]},title:"Choose a location for the new code workspace file"});if(null==o)return;let n=await this.chooseCodeWorkspaceAutoAddSetting();if(!await this._sharedStorage?.createOrUpdateCodeWorkspaceFile(o,s,{workspaceId:e,workspaceAutoAddSetting:n})){w.window.showErrorMessage("Could not create the new workspace file. Check logs for details");return}t.setLocalPath(o.fsPath);let a={title:"Cancel",isCloseAffordance:!0},l=await w.window.showInformationMessage(`Workspace file created for ${t.name}. Would you like to open it now?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},a);null!=l&&l!==a&&this.openCodeWorkspaceFile(e,{location:l.location})}async chooseCodeWorkspaceAutoAddSetting(e){if(e?.current&&(null==w.workspace.workspaceFile||null==this._currentWorkspaceId||null==this._currentWorkspaceAutoAddSetting))return"disabled";let t=e?.current?this._currentWorkspaceAutoAddSetting:"disabled",i=[{label:"Add on Workspace (Window) Open",description:"enabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"enabled"},{label:"Prompt on Workspace (Window) Open",description:"prompt"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"prompt"},{label:"Never",description:"disabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"disabled"}],r=await w.window.showQuickPick(i,{placeHolder:"Choose the behavior of automatically adding missing repositories to the current VS Code workspace",title:"Linked Workspace: Automatically Add Repositories"});if(r?.option==null)return t;let s=r.option;if(e?.current&&null!=w.workspace.workspaceFile){if(!await this._sharedStorage?.updateCodeWorkspaceFileSettings(w.workspace.workspaceFile,{workspaceAutoAddSetting:s}))return this._currentWorkspaceAutoAddSetting;this._currentWorkspaceAutoAddSetting=s}return s}async openCodeWorkspaceFile(e,t){let i=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==i)return;if(null==i.localPath){let t=await w.window.showInformationMessage(`The workspace file for ${i.name} has not been created. Would you like to create it now?`,{modal:!0},{title:"Create"},{title:"Cancel",isCloseAffordance:!0});if(null==t||"Cancel"===t.title)return;return void this.saveAsCodeWorkspaceFile(e)}let r=t?.location==="currentWindow"?"currentWindow":"newWindow";if(!t?.location){let e=await w.window.showInformationMessage(`How would you like to open the workspace file for ${i.name}?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"===e.title)return;r=e.location??"newWindow"}if(!await this._sharedStorage?.confirmCloudWorkspaceCodeWorkspaceFilePath(i.id)){await this._sharedStorage?.removeCloudWorkspaceCodeWorkspaceFile(i.id),i.setLocalPath(void 0);let e=await w.window.showInformationMessage(`The workspace file for ${i.name} could not be found. Would you like to locate it now?`,{modal:!0},{title:"Locate"},{title:"Cancel",isCloseAffordance:!0});if(e?.title!=="Locate")return;let t=(await w.window.showOpenDialog({defaultUri:w.Uri.file(i.localPath),canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Code Workspace":["code-workspace"]},title:"Locate the workspace file"}))?.[0]?.fsPath;if(null==t)return;await this._sharedStorage?.storeCloudWorkspaceCodeWorkspaceFileLocation(i.id,t),i.setLocalPath(t)}(0,ef.OH)(w.Uri.file(i.localPath),{location:r})}async getMappedPathForCloudWorkspaceRepoDescriptor(e){let t=await this.getCloudWorkspaceRepoPath(e.workspaceId,e.id);return null==t&&(t=(await this._repositoryLocator?.getLocation(e.url??void 0,{repoName:e.name,provider:e.provider??void 0,owner:e.provider_organization_id}))?.[0]),t}};async function nx(e){if(e.provider?.owner==null)return;let t=e.provider.path.split("/").pop();if(null!=t)return{provider:e.provider.id.toLowerCase(),owner:e.provider.owner.toLowerCase(),repoName:t.toLowerCase(),url:await e.provider.url({type:e5.J.Repo})}}function nF(){return w.workspace.getConfiguration("gitkraken")?.get("workspaceId")}nO([(0,ew.Rm)()],WorkspacesService.prototype,"getWorkspaces",1),nO([(0,ew.Rm)()],WorkspacesService.prototype,"addMissingCurrentWorkspaceRepos",1),nO([(0,ew.Rm)()],WorkspacesService.prototype,"resetWorkspaces",1),nO([(0,ew.Rm)({args:{1:!1,2:!1}})],WorkspacesService.prototype,"locateWorkspaceRepo",1),nO([(0,ew.Rm)({args:!1})],WorkspacesService.prototype,"createCloudWorkspace",1),nO([(0,ew.Rm)()],WorkspacesService.prototype,"deleteCloudWorkspace",1),nO([(0,ew.Rm)({args:{1:!1}})],WorkspacesService.prototype,"addCloudWorkspaceRepos",1),nO([(0,ew.Rm)({args:{1:!1}})],WorkspacesService.prototype,"removeCloudWorkspaceRepo",1),nO([(0,ew.Rm)({args:{1:!1}})],WorkspacesService.prototype,"resolveWorkspaceRepositoriesByName",1),nO([(0,ew.Rm)()],WorkspacesService.prototype,"saveAsCodeWorkspaceFile",1),nO([(0,ew.Rm)()],WorkspacesService.prototype,"chooseCodeWorkspaceAutoAddSetting",1),nO([(0,ew.Rm)()],WorkspacesService.prototype,"openCodeWorkspaceFile",1);var nL=Object.defineProperty,nB=Object.getOwnPropertyDescriptor,nU=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nL(t,i,o),o};let StatusBarController=class StatusBarController{constructor(e){this.container=e,this._disposable=w.Disposable.from((0,sh.Oo)(e.onReady)(this.onReady,this),v.H.onDidChange(this.onConfigurationChanged,this))}_cancellation;_disposable;_selectedSha;_statusBarBlame;_statusBarMode;dispose(){this.clearBlame(),this._statusBarBlame?.dispose(),this._statusBarMode?.dispose(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(v.H.changed(e,"mode")){let t=v.H.get("mode.statusBar.enabled")?this.container.mode:void 0;if(t?.statusBarItemName){let i="left"!==v.H.get("mode.statusBar.alignment")?w.StatusBarAlignment.Right:w.StatusBarAlignment.Left;v.H.changed(e,"mode.statusBar.alignment")&&this._statusBarMode?.alignment!==i&&(this._statusBarMode?.dispose(),this._statusBarMode=void 0),this._statusBarMode=this._statusBarMode??w.window.createStatusBarItem("gitlens.mode",i,i===w.StatusBarAlignment.Right?999:1),this._statusBarMode.name="GitLens Modes",this._statusBarMode.command="gitlens.switchMode",this._statusBarMode.text=t.statusBarItemName,this._statusBarMode.tooltip=new w.MarkdownString(`**${t.statusBarItemName}** ${R.EO.Dash} ${t.description}

---

Click to Switch GitLens Modes`,!0),this._statusBarMode.accessibilityInformation={label:`GitLens Mode: ${t.statusBarItemName}
Click to Switch GitLens Modes`},this._statusBarMode.show()}else this._statusBarMode?.dispose(),this._statusBarMode=void 0}if(v.H.changed(e,"statusBar"))if(v.H.get("statusBar.enabled")){let t="left"!==v.H.get("statusBar.alignment")?w.StatusBarAlignment.Right:w.StatusBarAlignment.Left;v.H.changed(e,"statusBar.alignment")&&this._statusBarBlame?.alignment!==t&&(this._statusBarBlame?.dispose(),this._statusBarBlame=void 0),this._statusBarBlame=this._statusBarBlame??w.window.createStatusBarItem("gitlens.blame",t,1e3*(t===w.StatusBarAlignment.Right)),this._statusBarBlame.name="GitLens Current Line Blame",this._statusBarBlame.command=v.H.get("statusBar.command"),v.H.changed(e,"statusBar.enabled")&&this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))}else v.H.changed(e,"statusBar.enabled")&&(this.container.lineTracker.unsubscribe(this),this._statusBarBlame?.dispose(),this._statusBarBlame=void 0)}onActiveLinesChanged(e){let t=!(v.H.get("statusBar.reduceFlicker")&&"selection"===e.reason&&(e.pending||null!=e.selections));if(!e.pending&&null!=e.selections){let i=this.container.lineTracker.getState(e.selections[0].active);if(i?.commit!=null){this.updateBlame(e.editor,i);return}t=!0}if(t){if(this.clearBlame(),e.suspended&&e.editor?.document.isDirty&&null!=this._statusBarBlame){let t=this._statusBarBlame,i=this.container.documentTracker.get(e.editor.document);queueMicrotask(async()=>{let e=await i;if(null==e)return;let r=await e?.getStatus();r?.blameable&&(t.tooltip=new w.MarkdownString,t.tooltip.isTrusted={enabledCommands:["gitlens.showSettingsPage"]},e.canDirtyIdle?(t.text="$(watch) Blame Paused",t.tooltip.appendMarkdown(`Blame will resume after a [${v.H.get("advanced.blame.delayAfterEdit")} ms delay](${(0,oX.J)("gitlens.showSettingsPage",[void 0,"advanced.blame.delayAfterEdit"])} 'Change the after edit delay') to limit the performance impact because there are unsaved changes`)):(t.text="$(debug-pause) Blame Paused",t.tooltip.appendMarkdown(`Blame will resume after saving because there are unsaved changes and the file is over the [${v.H.get("advanced.blame.sizeThresholdAfterEdit")} line threshold](${(0,oX.J)("gitlens.showSettingsPage",[void 0,"advanced.blame.sizeThresholdAfterEdit"])} 'Change the after edit line threshold') to limit the performance impact`)),t.show())})}}else this._statusBarBlame?.text.startsWith("$(git-commit)")&&(this._statusBarBlame.text=`$(watch)${this._statusBarBlame.text.substring(13)}`)}clearBlame(){this._selectedSha=void 0,this._cancellation?.cancel(),this._statusBarBlame?.hide()}async updateBlame(e,t){let i,r,s=(0,eb.dQ)(),o=v.H.get("statusBar");if(!o.enabled||null==this._statusBarBlame||!(0,ef.oU)(e)){this._cancellation?.cancel(),this._selectedSha=void 0,(0,eb.TT)(s,` \u2022 skipped; ${!o.enabled||null==this._statusBarBlame?"disabled":"not a trackable editor"}`);return}let{commit:n}=t;if(null==n){this._cancellation?.cancel(),(0,eb.TT)(s," • skipped; no commit found");return}if(this._selectedSha===n.sha&&!n.isUncommitted){this._statusBarBlame?.text.startsWith("$(watch)")&&(this._statusBarBlame.text=`$(git-commit)${this._statusBarBlame.text.substring(8)}`),(0,eb.TT)(s," • skipped; same commit");return}this._selectedSha=n.sha,this._cancellation?.cancel(),this._cancellation=new w.CancellationTokenSource;let a=this._cancellation.token;switch(o.command){case"gitlens.copyRemoteCommitUrl":i="Click to Copy Remote Commit URL";break;case"gitlens.copyRemoteFileUrl":this._statusBarBlame.command="gitlens.copyRemoteFileUrlToClipboard",i="Click to Copy Remote File Revision URL";break;case"gitlens.diffWithPrevious":this._statusBarBlame.command="gitlens.diffLineWithPrevious",i="Click to Open Line Changes with Previous Revision";break;case"gitlens.diffWithWorking":this._statusBarBlame.command="gitlens.diffLineWithWorking",i="Click to Open Line Changes with Working File";break;case"gitlens.openCommitOnRemote":i="Click to Open Commit on Remote";break;case"gitlens.openFileOnRemote":i="Click to Open Revision on Remote";break;case"gitlens.revealCommitInView":i="Click to Reveal Commit in the Side Bar";break;case"gitlens.showCommitsInView":i="Click to Search for Commit";break;case"gitlens.showQuickCommitDetails":i="Click to Show Commit";break;case"gitlens.showQuickCommitFileDetails":i="Click to Show Commit (file)";break;case"gitlens.showQuickRepoHistory":i="Click to Show Branch History";break;case"gitlens.showQuickFileHistory":i="Click to Show File History";break;case"gitlens.toggleCodeLens":i="Click to Toggle Git CodeLens";break;case"gitlens.toggleFileBlame":i="Click to Toggle File Blame";break;case"gitlens.toggleFileChanges":null!=n.file&&(this._statusBarBlame.command=(0,rB.gu)("gitlens.toggleFileChanges","Toggle File Changes",n.file.uri,{type:"changes",context:{sha:n.sha,only:!1,selection:!1}})),i="Click to Toggle File Changes";break;case"gitlens.toggleFileChangesOnly":null!=n.file&&(this._statusBarBlame.command=(0,rB.gu)("gitlens.toggleFileChanges","Toggle File Changes",n.file.uri,{type:"changes",context:{sha:n.sha,only:!0,selection:!1}})),i="Click to Toggle File Changes";break;case"gitlens.toggleFileHeatmap":i="Click to Toggle File Heatmap"}this._statusBarBlame.tooltip=new w.MarkdownString(`Loading... 

---

${i}`),this._statusBarBlame.accessibilityInformation={label:`${this._statusBarBlame.text}
${i}`};let l=await this.container.git.remotes(n.repoPath).getBestRemotesWithProviders(),[c]=l,u=v.H.get("defaultDateFormat"),h=sc.c.has(o.format,"tips")||sc.c.has(o.tooltipFormat,"tips")?this.container.git.getBranchesAndTagsTipsLookup(n.repoPath):void 0,d=!n.isUncommitted&&c?.hasIntegration()&&o.pullRequests.enabled&&(sc.c.has(o.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")||sc.c.has(o.tooltipFormat,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"));function p(e,t,r){e.text=`$(git-commit) ${sc.c.fromTemplate(o.format,n,{dateFormat:null===o.dateFormat?u:o.dateFormat,getBranchAndTagTips:t,messageTruncateAtNewLine:!0,pullRequest:r,pullRequestPendingMessage:"PR $(watch)",remotes:l})}`,e.accessibilityInformation={label:`${e.text}
${i}`}}async function g(e,t,i,r){return(0,su.MX)(e,n,n.getGitUri(),n.lines[0].line-1,{autolinks:!0,cancellation:a,dateFormat:u,format:o.tooltipFormat,getBranchAndTagTips:t,pullRequest:i,pullRequests:d&&null!=i,remotes:l,timeout:r})}d&&(r=await (0,eC.wW)(n.getAssociatedPullRequest(c),a,100,async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;ev.Vy.debug(s,`${R.EO.Dot} pull request query took too long (over 100 ms)`);let[t,r]=await Promise.allSettled([h,e.value]);if(a.isCancellationRequested||null==this._statusBarBlame)return;let o=(0,eC.Ro)(r),n=(0,eC.Ro)(t);ev.Vy.debug(s,`${R.EO.Dot} pull request query completed; updating...`),p(this._statusBarBlame,n,o);let l=await g(this.container,n,o);null!=l&&(this._statusBarBlame.tooltip=l.appendMarkdown(`

---

${i}`))}));let m=null!=h?await h:void 0;if(a.isCancellationRequested)return;p(this._statusBarBlame,m,r?.value),this._statusBarBlame.show();let f=await (0,eC.wW)(g(this.container,m,r?.value,20),a,100,async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;let t=await e.value;null!=t&&(this._statusBarBlame.tooltip=t.appendMarkdown(`

---

${i}`))});a.isCancellationRequested||f.paused||null==f.value||(this._statusBarBlame.tooltip=f.value.appendMarkdown(`

---

${i}`))}};nU([(0,ew.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],StatusBarController.prototype,"onActiveLinesChanged",1),nU([(0,ew.Yz)({args:{1:e=>e.commit?.sha}})],StatusBarController.prototype,"updateBlame",1);var nN=Object.defineProperty,nq=Object.getOwnPropertyDescriptor,nW=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nN(t,i,o),o};let nM=Object.create(null),nG=[];let KeyboardScope=class KeyboardScope{_mapping;constructor(e){for(let t in this._mapping=e,this._mapping)this._mapping[t]=this._mapping[t]??nM;nG.push(this._mapping)}async dispose(){let e=nG.indexOf(this._mapping),t=(0,eb.dQ)();(0,eb.TT)(t,` \u2022 index=${e}`),e===nG.length-1?(nG.pop(),await this.updateKeyCommandsContext(nG[nG.length-1])):nG.splice(e,1)}_paused=!0;get paused(){return this._paused}async clearKeyCommand(e){let t=(0,eb.dQ)(),i=nG[nG.length-1];if(i!==this._mapping||null==i[e]){(0,eb.TT)(t," • skipped");return}i[e]=void 0,await (0,sT.o)(`${R.Od}:key:${e}`,!1)}async pause(e){if(this._paused)return;this._paused=!0;let t=Object.keys(this._mapping).reduce((t,i)=>(t[i]=null==e||e.includes(i)?void 0:this._mapping[i],t),Object.create(null));await this.updateKeyCommandsContext(t)}async resume(){this._paused&&(this._paused=!1,await this.updateKeyCommandsContext(this._mapping))}async start(){await this.resume()}async setKeyCommand(e,t){let i=(0,eb.dQ)(),r=nG[nG.length-1];if(r!==this._mapping){(0,eb.TT)(i," • skipped");return}let s=!!r[e];r[e]=t,s||await (0,sT.o)(`${R.Od}:key:${e}`,!0)}async updateKeyCommandsContext(e){await Promise.all(R.HP.map(t=>(0,sT.o)(`${R.Od}:key:${t}`,!!e?.[t])))}};nW([(0,ew.Rm)({args:!1,prefix:e=>`${e.prefix}[${nG.length}]`})],KeyboardScope.prototype,"dispose",1),nW([(0,ew.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${nG.length}](${t})`})],KeyboardScope.prototype,"clearKeyCommand",1),nW([(0,ew.Rm)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"pause",1),nW([(0,ew.Rm)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"resume",1),nW([(0,ew.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${nG.length}](${t})`})],KeyboardScope.prototype,"setKeyCommand",1);let Keyboard=class Keyboard{_disposable;constructor(){let e=R.HP.map(e=>(0,rB.Lb)(`${R.Od}.key.${e}`,()=>this.execute(e),this));this._disposable=w.Disposable.from(...e)}dispose(){this._disposable.dispose()}createScope(e){return new KeyboardScope({...e})}async beginScope(e){let t=this.createScope(e);return await t.start(),t}async execute(e){let t=(0,eb.dQ)();if(!nG.length){(0,eb.TT)(t," • skipped, no mappings");return}try{let i=nG[nG.length-1][e];if("function"==typeof i&&(i=await i()),"function"!=typeof i?.onDidPressKey){(0,eb.TT)(t," • skipped, no callback");return}await i.onDidPressKey(e)}catch(e){ev.Vy.error(e,t)}}};nW([(0,ew.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${nG.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"createScope",1),nW([(0,ew.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${nG.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"beginScope",1),nW([(0,ew.Rm)()],Keyboard.prototype,"execute",1);let TelemetryService=class TelemetryService{constructor(e){this.container=e,e.context.subscriptions.push(v.H.onDidChange(t=>{v.H.changed(t,"telemetry.enabled")&&this.ensureTelemetry(e)}),w.env.onDidChangeTelemetryEnabled(()=>this.ensureTelemetry(e))),this.ensureTelemetry(e)}_enabled=!1;get enabled(){return this._enabled}provider;globalAttributes=new Map;eventQueue=[];dispose(){this.provider?.dispose(),this.provider=void 0}_initializationTimer;ensureTelemetry(e){if(this._enabled=w.env.isTelemetryEnabled&&v.H.get("telemetry.enabled",void 0,!0),!this._enabled){null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.eventQueue.length=0,this.provider?.dispose(),this.provider=void 0;return}null==this._initializationTimer&&(this._initializationTimer=setTimeout(()=>this.initializeTelemetry(e),7500))}async initializeTelemetry(e){if(null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.provider=new(await i.e(240).then(i.bind(i,8461))).OpenTelemetryProvider({env:e.env,extensionId:e.id,extensionVersion:e.version,machineId:w.env.machineId,sessionId:w.env.sessionId,language:w.env.language,platform:(0,eX.uo)(),vscodeEdition:w.env.appName,vscodeHost:w.env.appHost,vscodeRemoteName:w.env.remoteName??"",vscodeShell:w.env.shell,vscodeUIKind:String(w.env.uiKind),vscodeVersion:w.version},(0,eJ.cQ)(),e.debugging),this.eventQueue.length){let e=[...this.eventQueue];for(let{type:t,name:i,data:r,global:s}of(this.eventQueue.length=0,e))"sendEvent"===t&&(this.provider.setGlobalAttributes(s),nj(r),this.provider.sendEvent(i,nV(r)))}this.provider.setGlobalAttributes(this.globalAttributes)}sendEvent(e,...t){if(!this._enabled)return;let[i,r,s,o]=t;nj(i);let n=nH(r,i);if(null==this.provider){this.eventQueue.push({type:"sendEvent",name:e,data:n,global:new Map(this.globalAttributes),startTime:s??Date.now(),endTime:o??Date.now()});return}this.provider.sendEvent(e,nV(n),s,o)}startEvent(e,...t){if(!this._enabled)return;let[i,r,s]=t;nj(i);let o=nH(r,i);if(s=s??Date.now(),null!=this.provider){let t=this.provider.startEvent(e,nV(o),s);return{dispose:()=>t?.end()}}return{dispose:()=>this.sendEvent(e,i,r,s,Date.now())}}setGlobalAttribute(e,t){null==t?this.globalAttributes.delete(`global.${e}`):this.globalAttributes.set(`global.${e}`,t),this.provider?.setGlobalAttributes(this.globalAttributes)}setGlobalAttributes(e){for(let[t,i]of Object.entries(e))null==i?this.globalAttributes.delete(`global.${t}`):this.globalAttributes.set(`global.${t}`,i);this.provider?.setGlobalAttributes(this.globalAttributes)}deleteGlobalAttribute(e){this.globalAttributes.delete(`global.${e}`),this.provider?.setGlobalAttributes(this.globalAttributes)}};function nH(e,t){if(null==e)return t;if((t??={})["source.name"]=e.source,null!=e.detail){if("string"==typeof e.detail)t["source.detail"]=e.detail;else if("object"==typeof e.detail)for(let[i,r]of Object.entries(e.detail))t[`source.detail.${i}`]=r}return t}function nV(e){if(null==e)return;let t=Object.create(null);for(let[i,r]of Object.entries(e))null!=r&&(t[i]=r);return t}function nj(e){if(null==e||"object"==typeof e)return}let UsageTracker=class UsageTracker{constructor(e,t){this.container=e,this.storage=t}_onDidChange=new w.EventEmitter;get onDidChange(){return this._onDidChange.event}dispose(){this._onDidChange.dispose()}get(e){return this.storage.get("usages")?.[e]}isUsed(e){return!!this.get(e)?.firstUsedAt}async reset(e){let t=this.storage.get("usages");if(null!=t){if(null==e){await this.storage.delete("usages"),this._onDidChange.fire(void 0);return}t=(0,o0.Y8)(t,e,void 0),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:void 0})}}async track(e){let t=this.storage.get("usages");null==t&&(t=Object.create(null));let i=Date.now(),r=t[e];null==r?(r={count:1,firstUsedAt:i,lastUsedAt:i},t[e]=r):(r.count!==Number.MAX_SAFE_INTEGER&&r.count++,r.lastUsedAt=i),this.container.telemetry.sendEvent("usage/track",{"usage.key":e,"usage.count":r.count}),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:r})}};let nQ=[sQ.zZ.ProTrial,sQ.zZ.ProTrialExpired,sQ.zZ.ProTrialReactivationEligible,sQ.zZ.Paid],nz=["command:gitlens.plus.startPreviewTrial:executed","command:gitlens.plus.reactivateProTrial:executed"],nY=new Map([["gettingStarted",{subscriptionStates:nQ,subscriptionCommands:nz,usage:[]}],["homeView",{usage:["homeView:shown","command:gitlens.showHomeView:executed","command:gitlens.showAccountView:executed"]}],["visualizeCodeHistory",{subscriptionStates:nQ,subscriptionCommands:nz,usage:["graphDetailsView:shown","graphView:shown","graphWebview:shown","commitDetailsView:shown","command:gitlens.showGraph:executed","command:gitlens.showGraphPage:executed","command:gitlens.showGraphView:executed","command:gitlens.showInCommitGraph:executed","command:gitlens.showInCommitGraphView:executed"]}],["prReviews",{subscriptionStates:nQ,subscriptionCommands:nz,usage:["launchpadView:shown","worktreesView:shown","command:gitlens.showLaunchpad:executed","command:gitlens.showLaunchpadView:executed","command:gitlens.gitCommands.worktree:executed","command:gitlens.gitCommands.worktree.create:executed","command:gitlens.gitCommands.worktree.delete:executed","command:gitlens.gitCommands.worktree.open:executed"]}],["streamlineCollaboration",{subscriptionStates:nQ,subscriptionCommands:nz,usage:["patchDetailsView:shown","patchDetailsWebview:shown","draftsView:shown","command:gitlens.showDraftsView:executed","command:gitlens.showPatchDetailsPage:executed","command:gitlens.createCloudPatch:executed","command:gitlens.createPatch:executed"]}],["integrations",{usage:["command:gitlens.plus.cloudIntegrations.connect:executed","command:gitlens.plus.cloudIntegrations.manage:executed"]}]]);let WalkthroughStateProvider=class WalkthroughStateProvider{constructor(e){this.container=e,this.disposables.push(this._onProgressChanged,this.container.usage.onDidChange(this.onUsageChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this)),this.initializeState()}_onProgressChanged=new w.EventEmitter;get onProgressChanged(){return this._onProgressChanged.event}walkthroughSize=nY.size;disposables=[];completed=new Set;subscriptionState;async initializeState(){for(let e of(this.subscriptionState=(await this.container.subscription.getSubscription(!0)).state,nY.keys()))this.validateStep(e)&&this.completeStep(e);this._onProgressChanged.fire(void 0)}onUsageChanged(e){let t=e?.key;if(!t)return;let i=this.getStepsFromUsage(t),r=!1;for(let e of i)!this.completed.has(e)&&this.validateStep(e)&&(this.completeStep(e),this.container.telemetry.sendEvent("walkthrough/completion",{"context.key":e}),r=!0);r&&this._onProgressChanged.fire(void 0)}onSubscriptionChanged(e){this.subscriptionState=e.current.state;let t=this.getStepsFromSubscriptionState(e.current.state),i=!1;for(let e of t)!this.completed.has(e)&&this.validateStep(e)&&(this.completeStep(e),this.container.telemetry.sendEvent("walkthrough/completion",{"context.key":e}),i=!0);i&&this._onProgressChanged.fire(void 0)}_isInitialized=!1;_initPromise;async waitForWalkthroughInitialized(){this._isInitialized||(this._initPromise||(this._initPromise=(0,eC.uk)(1e3).then(()=>{this._isInitialized=!0})),await this._initPromise)}async completeStep(e){this.completed.add(e),await this.waitForWalkthroughInitialized(),(0,sT.o)(`gitlens:walkthroughState:${e}`,!0)}get doneCount(){return this.completed.size}get progress(){return this.doneCount/this.walkthroughSize}dispose(){w.Disposable.from(...this.disposables).dispose()}getStepsFromUsage(e){let t=[];for(let[i,{subscriptionCommands:r,usage:s}]of nY)(r?.includes(e)||s.includes(e))&&t.push(i);return t}getStepsFromSubscriptionState(e){let t=[];for(let[e,{subscriptionStates:i}]of nY)null!=i&&t.push(e);return t}validateStep(e){let t,i,{subscriptionStates:r,subscriptionCommands:s,usage:o}=nY.get(e);return null!=r&&r.length>0&&(t=null!=this.subscriptionState&&r.includes(this.subscriptionState)),null!=s&&s.length>0&&(i=s.some(e=>this.container.usage.isUsed(e))),(void 0!==t||!1!==i)&&(!1!==t||!0===i)&&(!(o.length>0)||!!o.some(e=>this.container.usage.isUsed(e)))}};let nK=/\b(g(?:it)?\b\s*)\b(branch|checkout|cherry-pick|fetch|grep|log|merge|pull|push|rebase|reset|revert|show|stash|status|tag)\b/gi,nZ=/\b((?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\x00-\x1F\x7F ,~^:?*[\\]+[^ ./])\b/gi,nJ=/^[0-9a-f]{7,40}\.\.\.?[0-9a-f]{7,40}$/,nX=/^[0-9a-f]{7,40}$/;let GitTerminalLinkProvider=class GitTerminalLinkProvider{constructor(e){this.container=e,this.disposable=w.window.registerTerminalLinkProvider(this)}disposable;dispose(){this.disposable.dispose()}async provideTerminalLinks(e){let t,i,r;if(0===e.line.trim().length)return[];let s=this.container.git.highlander?.path;if(!s)return[];let o=v.H.get("terminalLinks.showDetailsView"),n=[],a=new RegExp(nZ,nZ.flags),l=new RegExp(nK,nK.flags);for(;;){if(null!=(r=l.exec(e.line))){let[e,t,i]=r,s={startIndex:r.index+t.length,length:i.length,tooltip:"Open in Git Command Palette",command:(0,rB.c6)("gitlens.gitCommands",{command:i})};n.push(s)}if(null==(r=a.exec(e.line)))break;let[c,u]=r;if("HEAD"===u.toUpperCase()){let e={startIndex:r.index,length:u.length,tooltip:"Show HEAD",command:(0,rB.c6)("gitlens.showQuickBranchHistory",{branch:"HEAD",repoPath:s})};n.push(e);continue}void 0===t&&(t=await this.container.git.branches(s).getBranches());let h=t.values.find(e=>e.name===u);if(null==h&&(h=t.values.find(e=>(0,tl.km)(e.name)===u)),null!=h){let e={startIndex:r.index,length:u.length,tooltip:"Show Branch",command:(0,rB.c6)("gitlens.showQuickBranchHistory",{repoPath:s,branch:h.name})};n.push(e);continue}void 0===i&&(i=await this.container.git.tags(s).getTags());let d=i.values.find(e=>e.name===u);if(null!=d){let e={startIndex:r.index,length:u.length,tooltip:"Show Tag",command:(0,rB.c6)("gitlens.showQuickBranchHistory",{repoPath:s,tag:d.name})};n.push(e);continue}if(!nX.test(u)){if(nJ.test(u)){let e={startIndex:r.index,length:u.length,tooltip:"Show Commits",command:(0,rB.c6)("gitlens.gitCommands",{command:"log",state:{repo:s,reference:(0,tc.kA)(u,s,{refType:"revision"})}})};n.push(e)}continue}if(await this.container.git.refs(s).isValidReference(u)){let e={startIndex:r.index,length:u.length,tooltip:"Show Commit",command:o?(0,rB.c6)("gitlens.showInDetailsView",{ref:(0,tc.kA)(u,s,{refType:"revision"})}):(0,rB.c6)("gitlens.showQuickCommitDetails",{repoPath:s,sha:u})};n.push(e)}}return n}handleTerminalLink(e){w.commands.executeCommand(e.command.command,e.command.args)}};var n0=i(9326),n1=Object.defineProperty,n2=Object.getOwnPropertyDescriptor,n5=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?n2(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n1(t,i,o),o};let GitDocumentTracker=class GitDocumentTracker{constructor(e){this.container=e,this._disposable=w.Disposable.from(this._onDidChangeBlameState,this._onDidChangeContent,this._onDidChangeDirtyState,this._onDidTriggerDirtyIdle,(0,sh.Oo)(e.onReady)(this.onReady,this),v.H.onDidChange(this.onConfigurationChanged,this),w.window.onDidChangeActiveTextEditor(this.onActiveTextEditorChanged,this),w.window.onDidChangeVisibleTextEditors(this.onVisibleTextEditorsChanged,this),w.workspace.onDidOpenTextDocument(this.onTextDocumentOpened,this),w.workspace.onDidChangeTextDocument(this.onTextDocumentChanged,this),w.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),w.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)),this._dirtyIdleTriggerDelay=v.H.get("advanced.blame.delayAfterEdit")}_onDidChangeBlameState=new w.EventEmitter;get onDidChangeBlameState(){return this._onDidChangeBlameState.event}_onDidChangeContent=new w.EventEmitter;get onDidChangeContent(){return this._onDidChangeContent.event}_onDidChangeDirtyState=new w.EventEmitter;get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}_onDidTriggerDirtyIdle=new w.EventEmitter;get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}_dirtyIdleTriggerDelay;_dirtyIdleTriggeredDebounced;_dirtyStateChangedDebounced;_disposable;_documentMap=new Map;dispose(){this._disposable.dispose(),this.clear()}onReady(){this.onConfigurationChanged();let e=w.window.activeTextEditor?.document,t=w.workspace.textDocuments.filter(e=>this.container.git.supportedSchemes.has(e.uri.scheme)).map(t=>[t,(0,ef.LH)(t),e===t]);for(let[e,i,r]of(t.sort(([,e,t],[,i,r])=>t===r?e===i?0:e?-1:1:t?-1:1),t))this.onTextDocumentOpened(e,i||r)}onActiveTextEditorChanged(e){this._dirtyIdleTriggeredDebounced?.flush(),this._dirtyIdleTriggeredDebounced?.cancel(),this._dirtyIdleTriggeredDebounced=void 0,this._dirtyStateChangedDebounced?.flush(),this._dirtyStateChangedDebounced?.cancel(),this._dirtyStateChangedDebounced=void 0}onConfigurationChanged(e){null!=e&&(v.H.changed(e,"blame.ignoreWhitespace")||v.H.changed(e,"advanced.caching.enabled"))&&this.refreshDocuments(),v.H.changed(e,"advanced.blame.delayAfterEdit")&&(this._dirtyIdleTriggerDelay=v.H.get("advanced.blame.delayAfterEdit"),this._dirtyIdleTriggeredDebounced?.flush(),this._dirtyIdleTriggeredDebounced?.cancel(),this._dirtyIdleTriggeredDebounced=void 0)}onRepositoriesChanged(e){this.refreshDocuments({addedOrChangedRepoPaths:e.added.length?new Set(e.added.map(e=>e.path.toLowerCase())):void 0,removedRepoPaths:e.removed.length?new Set(e.removed.map(e=>e.path.toLowerCase())):void 0})}onRepositoryChanged(e){e.changed(e4.Z_.Index,e4.Z_.Heads,e4.Z_.PausedOperationStatus,e4.Z_.Unknown,e4.Ti.Any)&&this.refreshDocuments({addedOrChangedRepoPaths:new Set([e.repository.path])})}onTextDocumentOpened(e,t){this.container.git.supportedSchemes.has(e.uri.scheme)&&this.addCore(e,t)}debouncedTextDocumentChanges=new WeakMap;onTextDocumentChanged(e){if(!this.container.git.supportedSchemes.has(e.document.uri.scheme)||!this._documentMap.has(e.document))return;let t=this.debouncedTextDocumentChanges.get(e.document);null==t&&(t=(0,tg.s)(e=>this.onTextDocumentChangedCore(e),50,{aggregator:([e],[t])=>[{...t,contentChanges:[...e.contentChanges,...t.contentChanges]}]}),this.debouncedTextDocumentChanges.set(e.document,t)),t(e)}async onTextDocumentChangedCore(e){this.debouncedTextDocumentChanges.delete(e.document);let t=this._documentMap.get(e.document);if(null==t)return;let i=await t;i.refresh("changed");let r=e.document.isDirty,s=w.window.activeTextEditor;null!=this._dirtyIdleTriggeredDebounced&&(r?this._dirtyIdleTriggeredDebounced({editor:s,document:i}):this._dirtyIdleTriggeredDebounced.cancel()),s?.document===e.document&&this._onDidChangeContent.fire({editor:s,document:i,contentChanges:e.contentChanges}),(i.forceDirtyStateChangeOnNextDocumentChange||i.dirty!==r)&&(i.resetForceDirtyStateChangeOnNextDocumentChange(),i.dirty=r,null!=s&&s.document===e.document&&this.fireDocumentDirtyStateChanged({editor:s,document:i,dirty:i.dirty}))}onTextDocumentClosed(e){this.remove(e)}async onTextDocumentSaved(e){let t=this._documentMap.get(e);null!=t&&(await t).refresh("saved")}onVisibleTextEditorsChanged(e){let t=[];for(let i of e){let e=i.document;if(!this.container.git.supportedSchemes.has(e.uri.scheme))continue;let r=this._documentMap.get(e);null!=r&&t.push(r.then(e=>e?.refresh("visible")))}Promise.allSettled(t)}async add(e){let t;if((0,e1.t5)(e))try{t=await w.workspace.openTextDocument(e.documentUri())}catch(r){let i=r?.toString()??"";if(w.env.language.startsWith("en"))if(i.includes("File seems to be binary and cannot be opened as text"))t=new BinaryTextDocument(e);else if(i.includes("File not found")||i.includes("Unable to read file")||i.includes("Unable to resolve non-existing file"))t=new MissingRevisionTextDocument(e);else throw r;else if(i.includes("cannot open"))t=new MissingRevisionTextDocument(e);else throw r}else t=e instanceof w.Uri?await w.workspace.openTextDocument(e):e;return this.addCore(t)}async addCore(e,t){let i=(0,tf._j)(this.container,this,e,e=>this._onDidChangeBlameState.fire(e),t??(0,ef.LH)(e),!1);return this._documentMap.set(e,i),i}async clear(){for(let e of this._documentMap.values())(await e).dispose();this._documentMap.clear()}get(e){if(e instanceof w.Uri){let t=(0,ef.c5)(e);if(null==t)return;e=t}return this._documentMap.get(e)}async getOrAdd(e){return this.get(e)??this.add(e)}has(e){if(e instanceof w.Uri){let t=(0,ef.c5)(e);if(null==t)return!1;e=t}return this._documentMap.has(e)}async resetCache(e,t){let i=this.get(e);if(null!=i)switch(t){case"blame":(await i).state?.clearBlame();break;case"diff":(await i).state?.clearDiff();break;case"log":(await i).state?.clearLog()}}async remove(e,t){let i;null!=t&&(i=this._documentMap.get(e)),this._documentMap.delete(e),this.updateContext(e.uri,!1,!1),(t??await i)?.dispose()}_openUrisBlameable=new n0.T;_openUrisTracked=new n0.T;_updateContextDebounced;updateContext(e,t,i){let r=!1;(function(e,t,i){i?this._openUrisTracked.has(e)||(r=!0,this._openUrisTracked.add(e)):this._openUrisTracked.has(e)&&(r=!0,this._openUrisTracked.delete(e)),t?this._openUrisBlameable.has(e)||(r=!0,this._openUrisBlameable.add(e)):this._openUrisBlameable.has(e)&&(r=!0,this._openUrisBlameable.delete(e)),r&&(this._updateContextDebounced??=(0,tg.s)(()=>{(0,sT.o)("gitlens:tabs:tracked",[...this._openUrisTracked]),(0,sT.o)("gitlens:tabs:blameable",[...this._openUrisBlameable])},100),this._updateContextDebounced())}).call(this,e,t,i)}fireDocumentDirtyStateChanged(e){if(e.dirty){queueMicrotask(()=>{this._dirtyStateChangedDebounced?.cancel(),w.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)}),this._dirtyIdleTriggerDelay>0&&(this._dirtyIdleTriggeredDebounced??=(0,tg.s)(e=>{!this._dirtyIdleTriggeredDebounced?.pending()&&e.document.setDirtyIdle()&&this._onDidTriggerDirtyIdle.fire(e)},this._dirtyIdleTriggerDelay),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document}));return}this._dirtyStateChangedDebounced??=(0,tg.s)(e=>{w.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)},250),this._dirtyStateChangedDebounced(e)}async refreshDocuments(e){if(0!==this._documentMap.size)for(let t of this._documentMap.values()){let i=await t,r=i.uri.repoPath?.toLocaleLowerCase();null!=r&&(e?.removedRepoPaths?.has(r)?this.remove(i.document,i):(null==e||e?.addedOrChangedRepoPaths?.has(r))&&i.refresh("repositoryChanged"))}}};n5([(0,ew.Yz)()],GitDocumentTracker.prototype,"addCore",1),n5([(0,ew.Yz)()],GitDocumentTracker.prototype,"clear",1),n5([(0,ew.Yz)()],GitDocumentTracker.prototype,"get",1),n5([(0,ew.Yz)()],GitDocumentTracker.prototype,"resetCache",1),n5([(0,ew.Yz)({args:{1:!1}})],GitDocumentTracker.prototype,"remove",1);let EmptyTextDocument=class EmptyTextDocument{constructor(e){this.gitUri=e,this.uri=e.documentUri(),this.eol=w.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.languageId="",this.lineCount=0,this.version=0}eol;fileName;isClosed;isDirty;isUntitled;languageId;lineCount;uri;version;getText(e){throw Error("Method not supported.")}getWordRangeAtPosition(e,t){throw Error("Method not supported.")}lineAt(e){throw Error("Method not supported.")}offsetAt(e){throw Error("Method not supported.")}positionAt(e){throw Error("Method not supported.")}save(){throw Error("Method not supported.")}validatePosition(e){throw Error("Method not supported.")}validateRange(e){throw Error("Method not supported.")}};let BinaryTextDocument=class BinaryTextDocument extends EmptyTextDocument{};let MissingRevisionTextDocument=class MissingRevisionTextDocument extends EmptyTextDocument{};var n4=Object.defineProperty,n7=Object.getOwnPropertyDescriptor,n3=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?n7(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n4(t,i,o),o};let LineTracker=class LineTracker{constructor(e,t){this.container=e,this.documentTracker=t}_onDidChangeActiveLines=new w.EventEmitter;get onDidChangeActiveLines(){return this._onDidChangeActiveLines.event}_disposable;_editor;_state=new Map;_subscriptions=new Map;_subscriptionOnlyWhenTracking;dispose(){for(let e of(this._onDidChangeActiveLines.dispose(),this._subscriptions.keys()))this.unsubscribe(e)}onActiveTextEditorChanged(e){e!==this._editor&&(null==e||(0,ef.oU)(e))&&(this._editor=e,this._selections=n9(e?.selections),this._suspended?this.resume({force:!0}):this.notifyLinesChanged("editor"))}onBlameStateChanged(e){this.notifyLinesChanged("editor")}onContentChanged(e){this.selections?.length&&e.contentChanges.some(e=>this.selections.some(t=>e.range.end.line>=t.active&&t.active>=e.range.start.line||e.range.start.line>=t.active&&t.active>=e.range.end.line))&&this.notifyLinesChanged("editor")}onDirtyIdleTriggered(e){this.resume()}onDirtyStateChanged(e){e.dirty?this.suspend():this.resume({force:!0})}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!(0,ef.oU)(e.textEditor))return;let t=n9(e.selections);this._editor===e.textEditor&&this.includes(t)||(this._editor=e.textEditor,this._selections=t,this.notifyLinesChanged(this._editor===e.textEditor?"selection":"editor"))}_selections;get selections(){return this._selections}_suspended=!1;get suspended(){return this._suspended}getState(e){return this._state.get(e)}resetState(e){if(null!=e){this._state.delete(e);return}this._state.clear()}setState(e,t){this._state.set(e,t)}includes(e,t){if("number"!=typeof e)return n6(e,this._selections);if(null==this._selections||0===this._selections.length)return!1;let i=t?.activeOnly??!0;for(let t of this._selections)if(e===t.active||!i&&(t.anchor>=e&&e>=t.active||t.active>=e&&e>=t.anchor))return!0;return!1}refresh(){this.notifyLinesChanged("editor")}resume(e){(e?.force||this._suspended)&&(this._suspended=!1,this._subscriptionOnlyWhenTracking??=this.documentTracker.onDidChangeContent(this.onContentChanged,this),e?.silent||this.notifyLinesChanged("editor"))}suspend(e){(e?.force||!this._suspended)&&(this._suspended=!0,this._subscriptionOnlyWhenTracking?.dispose(),this._subscriptionOnlyWhenTracking=void 0,e?.silent||this.notifyLinesChanged("editor"))}subscribed(e){return this._subscriptions.has(e)}subscribe(e,t){let i=(0,eb.dQ)(),r=0===this._subscriptions.size,s=this._subscriptions.get(e);return null==s?(s=[t],this._subscriptions.set(e,s)):s.push(t),r?((0,eb.TT)(i," • starting line tracker..."),this.resume({force:!0,silent:!0}),this._disposable=w.Disposable.from({dispose:()=>this.suspend({force:!0,silent:!0})},w.window.onDidChangeActiveTextEditor((0,tg.s)(this.onActiveTextEditorChanged,0),this),w.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.documentTracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this)),queueMicrotask(()=>this.onActiveTextEditorChanged(w.window.activeTextEditor))):(0,eb.TT)(i," • already started..."),{dispose:()=>this.unsubscribe(e)}}unsubscribe(e){let t=this._subscriptions.get(e);if(null!=t){for(let i of(this._subscriptions.delete(e),t))i.dispose();0===this._subscriptions.size&&(this._fireLinesChangedDebounced?.cancel(),this._disposable?.dispose(),this._disposable=void 0)}}async fireLinesChanged(e){let t=!1;this.suspended||e.pending||null==e.selections||null==e.editor||(t=await this.updateState(e.selections,e.editor)),this._onDidChangeActiveLines.fire(t?e:{...e,selections:void 0,suspended:this.suspended})}_fireLinesChangedDebounced;notifyLinesChanged(e){"editor"===e&&this.resetState();let t={editor:this._editor,selections:this.selections,reason:e};if(null==t.selections){queueMicrotask(()=>{t.editor===w.window.activeTextEditor&&(this._fireLinesChangedDebounced?.cancel(),this.fireLinesChanged(t))});return}null==this._fireLinesChangedDebounced&&(this._fireLinesChangedDebounced=(0,tg.s)(e=>{e.editor===w.window.activeTextEditor&&n6(e.selections,n9(e.editor?.selections))&&this.fireLinesChanged(e)},250)),this._fireLinesChangedDebounced.pending()||this.fireLinesChanged({...t,pending:!0}),this._fireLinesChangedDebounced(t)}async updateState(e,t){let i=(0,eb.dQ)();if(!this.includes(e))return(0,eb.TT)(i,` \u2022 lines no longer match`),!1;let r=await this.documentTracker.getOrAdd(t.document),s=await r.getStatus();if(!s.blameable)return(0,eb.TT)(i,` \u2022 document is not blameable`),!1;if(1===e.length){let s=await this.container.git.getBlameForLine(r.uri,e[0].active,t?.document);if(null==s)return(0,eb.TT)(i,` \u2022 blame failed`),!1;null!=s.commit&&s.commit.file,this.setState(s.line.line-1,{commit:s.commit})}else{let s=await this.container.git.getBlame(r.uri,t.document);if(null==s)return(0,eb.TT)(i,` \u2022 blame failed`),!1;for(let t of e){let e=s.lines[t.active],i=s.commits.get(e.sha);null!=i&&i.file,null==i?this.resetState(t.active):this.setState(t.active,{commit:i})}}return this.includes(e)?(s=await r.getStatus()).blameable?(t.document.isDirty&&r.setForceDirtyStateChangeOnNextDocumentChange(),!0):((0,eb.TT)(i,` \u2022 document is not blameable`),!1):((0,eb.TT)(i,` \u2022 lines no longer match`),!1)}};function n6(e,t){return null==e&&null==t||null!=e&&null!=t&&e.length===t.length&&e.every((e,i)=>{let r=t[i];return e.active===r.active&&e.anchor===r.anchor})}function n9(e){return e?.map(e=>({active:e.active.line,anchor:e.anchor.line}))}n3([(0,ew.Yz)({args:{0:e=>`editor/doc=${e.editor?.document.uri.toString(!0)}, blameable=${e.blameable}`}})],LineTracker.prototype,"onBlameStateChanged",1),n3([(0,ew.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],LineTracker.prototype,"onContentChanged",1),n3([(0,ew.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],LineTracker.prototype,"onDirtyIdleTriggered",1),n3([(0,ew.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, dirty=${e.dirty}`}})],LineTracker.prototype,"onDirtyStateChanged",1),n3([(0,ew.Yz)()],LineTracker.prototype,"resume",1),n3([(0,ew.Yz)()],LineTracker.prototype,"suspend",1),n3([(0,ew.Yz)({args:!1,singleLine:!0})],LineTracker.prototype,"subscribe",1),n3([(0,ew.Yz)({args:!1,singleLine:!0})],LineTracker.prototype,"unsubscribe",1),n3([(0,ew.Yz)({args:{0:e=>e?.map(e=>e.active).join(","),1:e=>e.document.uri.toString(!0)},exit:!0})],LineTracker.prototype,"updateState",1);var n8=i(8191),ae=i(1192),at=i(3373),ai=i(9881),ar=Object.defineProperty,as=Object.getOwnPropertyDescriptor,ao=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?as(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ar(t,i,o),o};let DeepLinkService=class DeepLinkService{constructor(e){this.container=e,this._context={state:ai.rq.Idle},this._disposables.push(this._onDeepLinkProgressUpdated,e.uri.onDidReceiveUri(async e=>this.processDeepLinkUri(e)));let t=this.container.storage.get("deepLinks:pending");this.processPendingDeepLink(t)}_context;_onDeepLinkProgressUpdated=new w.EventEmitter;_disposables=[];dispose(){w.Disposable.from(...this._disposables).dispose()}resetContext(){this._context={state:ai.rq.Idle,url:void 0,mainId:void 0,repo:void 0,remoteUrl:void 0,remote:void 0,secondaryRemote:void 0,repoPath:void 0,filePath:void 0,targetId:void 0,secondaryTargetId:void 0,secondaryRemoteUrl:void 0,targetType:void 0,targetSha:void 0,action:void 0,repoOpenLocation:void 0,repoOpenUri:void 0,params:void 0,currentBranch:void 0}}setContextFromDeepLink(e,t,i){this._context={...this._context,mainId:e.mainId,targetType:e.type,url:t,remoteUrl:e.remoteUrl,repoPath:e.repoPath,filePath:e.filePath,targetId:e.targetId,secondaryTargetId:e.secondaryTargetId,secondaryRemoteUrl:e.secondaryRemoteUrl,action:e.action,params:e.params},null!=i&&(this._context.repo=i,this._context.repoPath=i.path)}async processDeepLinkUri(e,t=!0,i){let r=(0,ai.yI)(e);if(null!=r&&this._context.state===ai.rq.Idle){if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,!r.type||!r.mainId&&!r.remoteUrl&&!r.repoPath&&!r.targetId){w.window.showErrorMessage("Unable to resolve link"),ev.Vy.warn(`Unable to resolve link - missing basic properties: ${e.toString()}`);return}if(!Object.values(ai.vk).includes(r.type)){w.window.showErrorMessage("Unable to resolve link"),ev.Vy.warn(`Unable to resolve link - unknown link type: ${e.toString()}`);return}if(r.type!==ai.vk.Repository&&null==r.targetId&&null==r.mainId){w.window.showErrorMessage("Unable to resolve link"),ev.Vy.warn(`Unable to resolve link - no main/target id provided: ${e.toString()}`);return}if(r.type===ai.vk.Comparison&&null==r.secondaryTargetId){w.window.showErrorMessage("Unable to resolve link"),ev.Vy.warn(`Unable to resolve link - no secondary target id provided: ${e.toString()}`);return}this.setContextFromDeepLink(r,e.toString(),i),await this.processDeepLink(void 0,t)}}getServiceActionFromPendingContext(){switch(this._context.state){case ai.rq.MaybeOpenRepo:return null!=this._context.repo?ai.uW.RepoOpened:ai.uW.RepoOpening;case ai.rq.SwitchToRef:if(null==this._context.repo)return ai.uW.DeepLinkErrored;switch(this._context.action){case ai.zB.SwitchToPullRequest:case ai.zB.SwitchToPullRequestWorktree:case ai.zB.SwitchToAndSuggestPullRequest:return ai.uW.OpenInspect;default:return ai.uW.DeepLinkResolved}case ai.rq.GoToTarget:if(this._context.action===ai.zB.DeleteBranch)return ai.uW.DeleteBranch;return ai.uW.DeepLinkErrored;default:return ai.uW.DeepLinkErrored}}async findMatchingRepositoryFromCurrentWindow(e,t,i){let r,s;if(null!=e){let t=(0,T.bm)(e)?w.Uri.parse(e):e;try{let e=await this.container.git.getOrOpenRepository(t,{detectNested:!1});if(null!=e){this._context.repo=e;return}}catch{}}for(let o of(null!=t&&([,r,s]=(0,eg.BX)(t)),this.container.git.repositories)){if(null!=e&&(0,T.Fd)(o.path.toLowerCase())===(0,T.Fd)(e.toLowerCase())){this._context.repo=o;return}if(null!=r&&null!=s){let e=await o.git.remotes().getRemotes({filter:e=>e.matches(r,s)});if(e.length>0){this._context.repo=o,this._context.remote=e[0];return}}if(null!=i&&"-"!==i&&await o.git.refs().isValidReference(i)){this._context.repo=o;return}}}async processPendingDeepLink(e){if(null==e||(this.container.storage.delete("deepLinks:pending"),e?.url==null))return;let t=(0,ai.yI)(w.Uri.parse(e.url));if(null==t)return;this._context={state:e.state??ai.rq.MaybeOpenRepo},this.setContextFromDeepLink(t,e.url),this._context.targetSha=e.targetSha,this._context.secondaryTargetSha=e.secondaryTargetSha,this._context.repoPath=e.repoPath,this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,await this.findMatchingRepositoryFromCurrentWindow(this._context.repoPath,this._context.remoteUrl,this._context.mainId);let i=this.getServiceActionFromPendingContext();queueMicrotask(()=>{this.processDeepLink(i,e.useProgress)})}async getBranch(e){let{repo:t,remote:i,secondaryRemote:r}=this._context;if(!t)return;let s=e;null==i||s.startsWith(`${i.name}/`)?null==r||s.startsWith(`${r.name}/`)||(s=`${r.name}/${s}`):s=`${i.name}/${s}`;let o=await t.git.branches().getBranch(s);if(null!=o)return o;if(e.includes(":")){let[i,r]=e.split(":");if(null!=i&&null!=s){let[e,n]=i.split("/");if(null!=e&&null!=n){for(let i of(await t.git.remotes().getRemotes()))if(i.provider?.owner===e&&(s=`${i.name}/${r}`,null!=(o=await t.git.branches().getBranch(s))))return o}}}return t.git.branches().getBranch(e)}async getCommit(e){let{repo:t}=this._context;if(t&&await t.git.refs().isValidReference(e))return t.git.commits().getCommit(e)}async getTag(e){let{repo:t}=this._context;return t?.git.tags().getTag(e)}async getShaForBranch(e){return(await this.getBranch(e))?.sha}async getShaForTag(e){return(await this.getTag(e))?.sha}async getShaForCommit(e){let{repo:t}=this._context;if(t&&await t.git.refs().isValidReference(e))return e}async getShasForComparison(e,t){let i=await this.getRefSha(e);if(null==i)return;let r=await this.getRefSha(t);if(null!=r)return[i,r]}async getRefSha(e){if(""===e)return e;if((0,em.HH)(e))return this.getShaForCommit(e);let t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){let t=await this.getShaForBranch(e);if(null!=t)return t}let i=await this.getShaForTag(e);return null!=i?i:this.getShaForCommit(e)}async getTargetRef(e){if(""===e)return;if((0,em.HH)(e))return this.getCommit(e);let t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){let t=await this.getBranch(e);if(null!=t)return t}let i=await this.getTag(e);return null!=i?i:this.getCommit(e)}async getShasForTargets(){let{repo:e,targetType:t,targetId:i,secondaryTargetId:r}=this._context;if(null!=e&&t!==ai.vk.Repository&&null!=i){if(t===ai.vk.Branch)return this.getShaForBranch(i);if(t===ai.vk.Tag)return this.getShaForTag(i);if(t===ai.vk.Commit)return this.getShaForCommit(i);if(t===ai.vk.File)return this.getRefSha(i);if(t===ai.vk.Comparison){if(null==r)return;return this.getShasForComparison(i,r)}}}async showOpenTypePrompt(e){let t=[{label:"Choose a Local Folder...",action:"folder"},{label:"Choose a Workspace File...",action:"workspace"}];null!=this._context.remoteUrl&&t.push({label:"Clone Repository...",action:"clone"}),e?.includeCurrent&&t.push((0,or.uK)(),{label:"Use Current Window",action:"current"}),t.push((0,or.uK)(),{label:"Cancel"});let i=await w.window.showQuickPick(t,{title:"Locating Repository",placeHolder:e?.customMessage??"Unable to locate a matching repository, please choose how to locate it"});return i?.action}async showOpenLocationPrompt(e){let t,i=[{label:"Open in Current Window",action:"currentWindow"},{label:"Open in New Window",action:"newWindow"}];switch("workspace"!==e&&i.push({label:"Add Folder to Workspace",action:"addToWorkspace"}),e){case"clone":t="  •  Clone";break;case"folder":t="  •  Folder";break;case"workspace":t="  •  Workspace from File";break;case"current":t=""}i.push((0,or.uK)(),{label:"Cancel"});let r=await w.window.showQuickPick(i,{title:`Locating Repository${t}`,placeHolder:`Please choose where to open the repository ${"clone"===e?"after cloning":e}`});return r?.action}async showAddRemotePrompt(e,t){let i={label:"Add Remote"};if(await w.window.showQuickPick([i,{label:"Cancel"}],{title:"Locating Remote",placeHolder:`Unable to find remote for '${e}', would you like to add a new remote?`})===i)return await w.window.showInputBox({prompt:"Enter a name for the remote",value:function(e){let t=e.split("/");if(!(t.length<3))return t[t.length-2]}(e),validateInput:e=>e?t.includes(e)?"A remote with that name already exists":void 0:"A name is required"})}async processDeepLink(e=ai.uW.DeepLinkEventFired,t=!0){let i="",r=e;if(r===ai.uW.DeepLinkCancelled&&this._context.state===ai.rq.Idle)return;let s=[],{targetType:o}=this._context;for(t&&queueMicrotask(()=>void w.window.withProgress({cancellable:!0,location:w.ProgressLocation.Notification,title:`Opening ${(0,ai.$)(o??ai.vk.Repository)} link...`},(e,t)=>(e.report({increment:0}),new Promise(i=>{t.onCancellationRequested(()=>{queueMicrotask(()=>this.processDeepLink(ai.uW.DeepLinkCancelled)),i()}),this._onDeepLinkProgressUpdated.event(({message:t,increment:r})=>{e.report({message:t,increment:r}),100===r&&i()})}))));;){this._context.state=ai.HZ[this._context.state][r];let{state:e,mainId:o,repo:n,url:a,remoteUrl:l,secondaryRemoteUrl:c,remote:u,secondaryRemote:h,repoPath:d,filePath:p,targetId:g,secondaryTargetId:m,targetSha:f,secondaryTargetSha:v,targetType:y,repoOpenLocation:b,repoOpenUri:C}=this._context;switch(this._onDeepLinkProgressUpdated.fire(ai.aN[e]),e){case ai.rq.Idle:r===ai.uW.DeepLinkErrored&&(w.window.showErrorMessage("Unable to resolve link"),ev.Vy.warn(`Unable to resolve link - ${i}: ${a}`)),this.resetContext();return;case ai.rq.AccountCheck:if(null==y){r=ai.uW.DeepLinkErrored,i="No link type provided.";break}if(!ai.VZ.includes(y)){r=ai.uW.AccountCheckPassed;break}if(!await (0,oc.G5)(this.container,`Opening ${(0,ai.$)(y)} links is a Preview feature and requires an account.`,{source:"deeplink",detail:{action:"open",type:y,friendlyType:(0,ai.$)(y)}})){r=ai.uW.DeepLinkErrored,i="Account required to open link";break}r=ai.uW.AccountCheckPassed;break;case ai.rq.PlanCheck:if(null==y){r=ai.uW.DeepLinkErrored,i="No link type provided.";break}if(!ai.sE.includes(y)){r=ai.uW.PlanCheckPassed;break}if(!await (0,o1.KH)(this.container,`Opening ${(0,ai.$)(y)} links is a Pro feature.`,{source:"deeplink",detail:{action:"open",type:y,friendlyType:(0,ai.$)(y)}})){r=ai.uW.DeepLinkErrored,i="GitLens Pro is required to open link";break}r=ai.uW.PlanCheckPassed;break;case ai.rq.TypeMatch:switch(y){case ai.vk.Draft:r=ai.uW.LinkIsDraftType;break;case ai.vk.Workspace:r=ai.uW.LinkIsWorkspaceType;break;case ai.vk.Command:r=ai.uW.LinkIsCommandType;break;default:r=ai.uW.LinkIsRepoType}break;case ai.rq.RepoMatch:case ai.rq.AddedRepoMatch:{let t;if(null!=n){r=ai.uW.RepoMatched;break}if(!o&&!l&&!d){r=ai.uW.DeepLinkErrored,i="No repository id, remote url or path was provided.";break}let a=o,c=l;if(null!=t&&(this._context.remoteUrl=t.remote?.url??void 0,c=t.remote?.url,this._context.mainId=t.initialCommitSha??void 0,a=t.initialCommitSha),await this.findMatchingRepositoryFromCurrentWindow(d,c,a),null!=this._context.repo){r=ai.uW.RepoMatched;break}if(!this._context.repo&&e===ai.rq.RepoMatch&&(s=await this.container.repositoryLocator?.getLocation(c)??[]).length){for(let e of this.container.git.repositories)if(s.some(t=>(0,T.Fd)(e.path.toLowerCase())===(0,T.Fd)(t.toLowerCase()))){this._context.repo=e,r=ai.uW.RepoMatched;break}if(null==this._context.repo){r=ai.uW.RepoMatchedInLocalMapping;break}}this._context.repo||(e===ai.rq.RepoMatch?r=ai.uW.RepoMatchFailed:(r=ai.uW.DeepLinkErrored,i="No matching repository found."));break}case ai.rq.CloneOrAddRepo:{let e,t;if(!o&&!l&&!d){r=ai.uW.DeepLinkErrored,i="Missing repository id, remote url and path.";break}if(s.length>0){if(null==(e=await w.window.showQuickPick([...s,"Choose a different location"],{placeHolder:"Matching repository found. Choose a location to open it."}))){r=ai.uW.DeepLinkCancelled;break}"Choose a different location"!==e&&(this._context.repoOpenUri=w.Uri.file(e),t="folder")}if(null==t&&(t=await this.showOpenTypePrompt({customMessage:"Choose a different location"===e?"Please choose an option to open the repository":void 0})),!t){r=ai.uW.DeepLinkCancelled;break}let n=await this.showOpenLocationPrompt(t);if(!n||(this._context.repoOpenLocation=n,null==this._context.repoOpenUri&&(this._context.repoOpenUri=(await w.window.showOpenDialog({title:`Choose a ${"workspace"===t?"workspace":"folder"} to ${"clone"===t?"clone the repository to":"open the repository"}`,canSelectFiles:"workspace"===t,canSelectFolders:"workspace"!==t,canSelectMany:!1,..."workspace"===t&&{filters:{Workspaces:["code-workspace"]}}}))?.[0]),!this._context.repoOpenUri)){r=ai.uW.DeepLinkCancelled;break}if(null!=this._context.repoOpenUri&&null!=l&&"clone"===t){let e;try{e=await w.window.withProgress({location:w.ProgressLocation.Notification,title:`Cloning repository for link: ${this._context.url}}`},async()=>this.container.git.clone(l,this._context.repoOpenUri?.fsPath??""))}catch{r=ai.uW.DeepLinkErrored,i="Unable to clone repository";break}if(!e){r=ai.uW.DeepLinkErrored,i="Unable to clone repository";break}this._context.repoOpenUri=w.Uri.file(e)}let a=await this.container.git.getOrOpenRepository(this._context.repoOpenUri,{closeOnOpen:!0,detectNested:!1});null!=a&&(this._context.repo=a,"current"===t||"workspace"===t||s.includes(this._context.repoOpenUri.fsPath)||await this.container.repositoryLocator?.storeLocation(a.uri.fsPath,l)),r=ai.uW.RepoAdded;break}case ai.rq.RemoteMatch:case ai.rq.EnsureRemoteMatch:if(d&&n&&!l&&!c){r=ai.uW.RemoteMatchUnneeded;break}if(!n||!l&&!c){r=ai.uW.DeepLinkErrored,i="Missing repository or remote url.";break}if(l&&!u){let e=await n.git.remotes().getRemotes({filter:e=>e.url===l});e.length>0&&(this._context.remote=e[0])}if(c&&!h){let e=await n.git.remotes().getRemotes({filter:e=>e.url===c});e.length>0&&(this._context.secondaryRemote=e[0])}l&&!this._context.remote||c&&!this._context.secondaryRemote?e===ai.rq.RemoteMatch?r=ai.uW.RemoteMatchFailed:(r=ai.uW.DeepLinkErrored,i="No matching remote found."):r=ai.uW.RemoteMatched;break;case ai.rq.AddRemote:{let e,t;if(!n||!l&&!c){r=ai.uW.DeepLinkErrored,i="Missing repository or remote url.";break}if(l&&!u)if(e=await this.showAddRemotePrompt(l,(await n.git.remotes().getRemotes()).map(e=>e.name)))try{if(this._context.remote=await n.git.remotes().addRemoteWithResult?.(e,l,{fetch:!0}),!this._context.remote){r=ai.uW.DeepLinkErrored,i="Failed to add remote.";break}}catch{r=ai.uW.DeepLinkErrored,i="Failed to add remote.";break}else{r=ai.uW.DeepLinkCancelled;break}if(c&&!h)if(t=await this.showAddRemotePrompt(c,(await n.git.remotes().getRemotes()).map(e=>e.name)))try{if(this._context.secondaryRemote=await n.git.remotes().addRemoteWithResult?.(t,c,{fetch:!0}),!this._context.secondaryRemote){r=ai.uW.DeepLinkErrored,i="Failed to add remote.";break}}catch{r=ai.uW.DeepLinkErrored,i="Failed to add remote.";break}else{r=ai.uW.DeepLinkCancelled;break}if(this._context.secondaryRemote&&!this._context.remote&&(this._context.remote=this._context.secondaryRemote),e||t){if(!this._context.remote){r=ai.uW.DeepLinkErrored,i="Failed to add remote.";break}}else{r=ai.uW.DeepLinkCancelled;break}r=ai.uW.RemoteAdded;break}case ai.rq.TargetMatch:case ai.rq.FetchedTargetMatch:if(!n||!y){r=ai.uW.DeepLinkErrored,i="Missing repository or target type.";break}if(y===ai.vk.Repository){r=ai.uW.TargetMatched;break}if(y===ai.vk.Comparison)[this._context.targetSha,this._context.secondaryTargetSha]=await this.getShasForTargets()??[];else if(y===ai.vk.File&&null==g){r=ai.uW.TargetMatched;break}else this._context.targetSha=await this.getShasForTargets();if(null==this._context.targetSha||null==this._context.secondaryTargetSha&&y===ai.vk.Comparison){e===ai.rq.TargetMatch&&null!=u?r=ai.uW.TargetMatchFailed:(r=ai.uW.DeepLinkErrored,i=`No matching ${null==f?"target":"secondary target"} found.`);break}r=ai.uW.TargetMatched;break;case ai.rq.Fetch:if(!n||!u){r=ai.uW.DeepLinkErrored,i="Missing repository or remote.";break}try{await n.fetch({remote:u.name,progress:!0})}catch{r=ai.uW.DeepLinkErrored,i="Error fetching remote.";break}if(h&&h.name!==u.name)try{await n.fetch({remote:h.name,progress:!0})}catch{}r=ai.uW.TargetFetched;break;case ai.rq.MaybeOpenRepo:null!=b&&null!=C?(r=ai.uW.RepoOpening,"addToWorkspace"===b&&(w.workspace.workspaceFolders?.length||0)>1||(await this.container.storage.store("deepLinks:pending",{url:this._context.url,repoPath:C.toString(),targetSha:this._context.targetSha,secondaryTargetSha:this._context.secondaryTargetSha,useProgress:t}),r=ai.uW.DeepLinkStored),(0,ef.OH)(C,{location:b})):r=ai.uW.RepoOpened;break;case ai.rq.RepoOpening:this._disposables.push((0,sh.Oo)(this.container.git.onDidChangeRepositories)(()=>{queueMicrotask(()=>this.processDeepLink(ai.uW.RepoOpened))}));return;case ai.rq.GoToTarget:if(y===ai.vk.Repository){r=this._context.action===ai.zB.Switch||this._context.action===ai.zB.SwitchToPullRequest||this._context.action===ai.zB.SwitchToPullRequestWorktree||this._context.action===ai.zB.SwitchToAndSuggestPullRequest?ai.uW.OpenSwitch:ai.uW.OpenGraph;break}switch(y){case ai.vk.File:r=ai.uW.OpenFile;break;case ai.vk.Comparison:r=ai.uW.OpenComparison;break;default:r=this._context.action===ai.zB.Switch||this._context.action===ai.zB.SwitchToPullRequest||this._context.action===ai.zB.SwitchToPullRequestWorktree||this._context.action===ai.zB.SwitchToAndSuggestPullRequest?ai.uW.OpenSwitch:y===ai.vk.Branch&&this._context.action===ai.zB.DeleteBranch?ai.uW.DeleteBranch:ai.uW.OpenGraph}break;case ai.rq.OpenGraph:if(!n||!y){r=ai.uW.DeepLinkErrored,i="Missing repository or target type.";break}if(y===ai.vk.Repository){await (0,rB.RS)("gitlens.showInCommitGraph",n),r=ai.uW.DeepLinkResolved;break}if(!f){r=ai.uW.DeepLinkErrored,i=`Cannot find target ${y} in repo.`;break}await (0,rB.RS)("gitlens.showInCommitGraph",{ref:(0,tc.kA)(f,n.path)}),r=ai.uW.DeepLinkResolved;break;case ai.rq.OpenComparison:if(!n){r=ai.uW.DeepLinkErrored,i="Missing repository.";break}if(null==g||null==m||null==f||null==v){r=ai.uW.DeepLinkErrored,i="Missing target or secondary target.";break}await this.container.views.searchAndCompare.compare(n.path,""===m||(0,em.HH)(m)?m:{label:m,ref:v},""===g||(0,em.HH)(g)?g:{label:g,ref:f}),r=ai.uW.DeepLinkResolved;break;case ai.rq.OpenDraft:{if(!g){r=ai.uW.DeepLinkErrored,i="Missing cloud patch id.";break}let e=this._context.params?.get("type"),t=this._context.params?.get("prEntityId")??void 0;null!=t&&(t=(0,_.Ey)(t).toString()),await (0,rB.RS)("gitlens.openCloudPatch",{type:"suggested_pr_change"===e?"code_suggestion":"patch",id:g,patchId:m,prEntityId:t}),r=ai.uW.DeepLinkResolved;break}case ai.rq.OpenWorkspace:if(!o){r=ai.uW.DeepLinkErrored,i="Missing workspace id.";break}await this.container.views.workspaces.revealWorkspaceNode(o,{select:!0,focus:!0,expand:!0}),r=ai.uW.DeepLinkResolved;break;case ai.rq.OpenFile:{let e,t;if(null==p||!n){r=ai.uW.DeepLinkErrored,i="Missing file path.";break}if(null!=m){let t=m.split("-");if(1===t.length){let i=parseInt(t[0]);isNaN(i)||(e=new w.Range(i<1?0:i-1,0,i,0))}else if(2===t.length){let i=parseInt(t[0]),r=parseInt(t[1]);isNaN(i)||isNaN(r)||(e=new w.Range(i<1?0:i-1,0,r,0))}}if(null==f)try{await (0,ef.Ol)(w.Uri.file(`${n.path}/${p}`),{preview:!1,selection:e,throwOnError:!0}),r=ai.uW.DeepLinkResolved;break}catch(e){r=ai.uW.DeepLinkErrored,i=`Unable to open file${e?.message?`: ${e.message}`:""}`;break}try{t=this.container.git.getRevisionUri(f,p,d??n.uri.fsPath)}catch{}if(null==t){r=ai.uW.DeepLinkErrored,i="Unable to get revision uri.";break}try{await (0,ae.vM)(t,{preview:!1,selection:e}),r=ai.uW.DeepLinkResolved;break}catch{r=ai.uW.DeepLinkErrored,i="Unable to open file.";break}}case ai.rq.SwitchToRef:{if(!n||!y||!g){r=ai.uW.DeepLinkErrored,i="Missing repository or target type.";break}let e=!1;if(y===ai.vk.Branch){let t=await n.git.branches().getBranch();this._context.currentBranch=t?.name;let i=await this.getBranch(g);null!=t&&null!=i&&t.getNameWithoutRemote()===i.getNameWithoutRemote()&&(e=!0)}if(!e){let e=await this.getTargetRef(g);if(null==e){r=ai.uW.DeepLinkErrored,i="Unable to find link target in the repository.";break}let s={url:this._context.url,repoPath:n.path,targetSha:this._context.targetSha,secondaryTargetSha:this._context.secondaryTargetSha,useProgress:t,state:this._context.state},o=w.Uri.parse(this._context.url??"").toString(!0),a=new URL(o).searchParams;a.delete("prId"),a.delete("prTitle"),a.delete("prBaseRef"),a.delete("prHeadRef");let l=a.toString(),c=l.length>0?`${o.split("?")[0]}?${l}`:o.split("?")[0],u=async e=>this.container.storage.store("deepLinks:pending",e?s:{...s,url:c});if(await (0,n8.b)({command:"switch",state:{repos:n,reference:e,onWorkspaceChanging:u,worktreeDefaultOpen:this._context.action===ai.zB.SwitchToPullRequestWorktree?"new":void 0}}),!await Promise.race([new Promise(e=>setTimeout(()=>e(!1),1e4)),new Promise(e=>(0,sh.Oo)(n.onDidChange)(async t=>{t.changed(e4.Z_.Head,e4.Ti.Any)&&((await n.git.branches().getBranch())?.name!==this._context.currentBranch?e(!0):e(!1))}))])){r=ai.uW.DeepLinkResolved;break}}r=this._context.action===ai.zB.SwitchToPullRequest||this._context.action===ai.zB.SwitchToPullRequestWorktree||this._context.action===ai.zB.SwitchToAndSuggestPullRequest?ai.uW.OpenInspect:ai.uW.DeepLinkResolved;break}case ai.rq.OpenInspect:{if(await this.container.storage.delete("deepLinks:pending"),!n){r=ai.uW.DeepLinkErrored,i="Missing repository.";break}await (0,at.$)({type:"wip",inReview:this._context.action===ai.zB.SwitchToAndSuggestPullRequest,repository:n,source:"launchpad"});let{params:e}=this._context;if(this._context.action===ai.zB.SwitchToPullRequestWorktree&&null!=e&&(null!=e.get("prId")||null!=e.get("prTitle"))&&null!=e.get("prBaseRef")&&null!=e.get("prHeadRef")){r=ai.uW.OpenAllPrChanges;break}r=ai.uW.DeepLinkResolved;break}case ai.rq.OpenAllPrChanges:{let e=this._context.params?.get("prId"),t=this._context.params?.get("prHeadRef"),s=this._context.params?.get("prBaseRef"),o=this._context.params?.get("prTitle");if(!d||!e&&!o||!t||!s){r=ai.uW.DeepLinkErrored,i=d?e?"No pull request refs was provided.":"No pull request id provided.":"No repository path was provided.";break}await (0,ae.$5)(this.container,{repoPath:d,lhs:s,rhs:t},{title:`Changes in Pull Request ${o?`"${o}"`:`#${e}`}`}),r=ai.uW.DeepLinkResolved;break}case ai.rq.RunCommand:{if(null==o||!(0,ai.U3)(o)){r=ai.uW.DeepLinkErrored,i="Invalid command type.";break}let e=ai.Cf.get(o);if(null==e){r=ai.uW.DeepLinkErrored,i="Invalid command.";break}await (0,rB.RS)(e,{source:"deeplink"}),r=ai.uW.DeepLinkResolved;break}case ai.rq.DeleteBranch:{if(!g||!n&&!d){r=ai.uW.DeepLinkErrored,i="Missing workspace id.";break}let e=n??this.container.git.getRepository(d);if(!e){r=ai.uW.DeepLinkErrored,i="No matching repository found.";break}let t=await e.git.branches().getBranch(g);if(!t){r=ai.uW.DeepLinkErrored,i="No matching branch found.";break}(0,n8.b)({command:"branch",state:{subcommand:"delete",repo:d||n.uri.fsPath,references:t}}),r=ai.uW.DeepLinkResolved;break}default:r=ai.uW.DeepLinkErrored,i="Unknown state."}}}async copyDeepLinkUrl(e,t,i,r){let s=await ("string"==typeof e?null!=t?this.generateDeepLinkUrl(e,t,i,r):this.generateDeepLinkUrl(e):this.generateDeepLinkUrl(e,t));await w.env.clipboard.writeText(s.toString())}async copyFileDeepLinkUrl(e,t,i,r,s){let o=await this.generateFileDeepLinkUr(e,t,i,r,s);await w.env.clipboard.writeText(o.toString())}async generateDeepLinkUrl(e,t,i,r){let s,o,n,a,l=v.H.get("deepLinks.schemeOverride"),c=l?!0===l?w.env.uriScheme:l:"vscode",u="";if("dev"===this.container.env?u="dev.":"staging"===this.container.env&&(u="staging."),null==t&&"string"==typeof e){let t=new URL(`https://${u}gitkraken.dev/link/workspaces/${e}`);return t.searchParams.set("origin","gitlens"),t}let h="string"!=typeof e?e.repoPath:e,d=await this.container.git.getUniqueRepositoryId(h)??"-";if("string"!=typeof e)switch(e.refType){case"branch":s=ai.vk.Branch,o=e.remote?(0,tl.km)(e.name):e.name;break;case"revision":s=ai.vk.Commit,o=e.ref;break;case"tag":s=ai.vk.Tag,o=e.name}null!=i&&null!=r&&(s=ai.vk.Comparison,o=i.ref??i.label,n=r.ref??r.label),a=s===ai.vk.Comparison?`/${s}/${n}...${o}`:null!=s&&s!==ai.vk.Repository?`/${s}/${o}`:"";let p=new URL(`${c}://${this.container.context.extension.id}/link/${ai.vk.Repository}/${d}${a}`);null!=t&&p.searchParams.set("url",t);let g=new URL(`https://${u}gitkraken.dev/link/${encodeURIComponent(Buffer.from(p.href).toString("base64"))}`);return g.searchParams.set("origin","gitlens"),g}async generateFileDeepLinkUr(e,t,i,r,s){let o=ai.vk.File,n=v.H.get("deepLinks.schemeOverride"),a=n?!0===n?w.env.uriScheme:n:"vscode",l="";"dev"===this.container.env?l="dev.":"staging"===this.container.env&&(l="staging.");let c=await this.container.git.getUniqueRepositoryId(e)??"-",u="";null!=r&&(1===r.length?u=`${r[0]}`:2===r.length&&(r[0]===r[1]?u=`${r[0]}`:r[0]<r[1]&&(u=`${r[0]}-${r[1]}`)));let h=new URL(`${a}://${this.container.context.extension.id}/link/${ai.vk.Repository}/${c}/${o}/${t}`);if(h.searchParams.set("url",i),""!==u&&h.searchParams.set("lines",u),null!=s)switch(s.refType){case"branch":case"tag":h.searchParams.set("ref",s.name);break;case"revision":h.searchParams.set("ref",s.ref)}let d=new URL(`https://${l}gitkraken.dev/link/${encodeURIComponent(Buffer.from(h.href).toString("base64"))}`);return d.searchParams.set("origin","gitlens"),d}};ao([(0,ew.Yz)()],DeepLinkService.prototype,"processPendingDeepLink",1),ao([(0,ew.Yz)()],DeepLinkService.prototype,"processDeepLink",1);var an=Object.defineProperty,aa=Object.getOwnPropertyDescriptor;let UriService=class UriService{constructor(e){this.container=e,this._disposable=w.Disposable.from(this._onDidReceiveAuthenticationUri,this._onDidReceiveCloudIntegrationAuthenticationUri,this._onDidReceiveLoginUri,this._onDidReceiveSubscriptionUpdatedUri,this._onDidReceiveUri,w.window.registerUriHandler(this))}_onDidReceiveAuthenticationUri=new w.EventEmitter;get onDidReceiveAuthenticationUri(){return this._onDidReceiveAuthenticationUri.event}_onDidReceiveCloudIntegrationAuthenticationUri=new w.EventEmitter;get onDidReceiveCloudIntegrationAuthenticationUri(){return this._onDidReceiveCloudIntegrationAuthenticationUri.event}_onDidReceiveLoginUri=new w.EventEmitter;get onDidReceiveLoginUri(){return this._onDidReceiveLoginUri.event}_onDidReceiveSubscriptionUpdatedUri=new w.EventEmitter;get onDidReceiveSubscriptionUpdatedUri(){return this._onDidReceiveSubscriptionUpdatedUri.event}_onDidReceiveUri=new w.EventEmitter;get onDidReceiveUri(){return this._onDidReceiveUri.event}_disposable;dispose(){this._disposable.dispose()}handleUri(e){let[,t]=e.path.split("/");if(t===oT){this._onDidReceiveAuthenticationUri.fire(e);return}if(t===nm.Je){this._onDidReceiveCloudIntegrationAuthenticationUri.fire(e);return}if(t===sz.Kg){this._onDidReceiveSubscriptionUpdatedUri.fire(e);return}if(t===o$){this._onDidReceiveLoginUri.fire(e);return}this._onDidReceiveUri.fire(e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?aa(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&an(t,i,o)})([(0,ew.Rm)({args:{0:e=>e.with({query:""}).toString(!0)}})],UriService.prototype,"handleUri",1);var al=i(8710),ac=i(2937),au=i(9642),ah=i(7524);function ad(){return v.H.get("graph.experimental.renderer.enabled")?"graph-next.html":"graph.html"}var ap=i(5670),ag=i(8698),am=Object.defineProperty,af=Object.getOwnPropertyDescriptor;let RepositoriesSubscribeableNode=class RepositoriesSubscribeableNode extends ag.Y{splatted=!0;constructor(e){super("repositories",e1.Bd,e)}async getSplattedChild(){return null==this.children&&await this.getChildren(),this.children?.length===1?this.children[0]:void 0}etag(){return(0,oq.L2)(this.view.container.git.etag,this.view.container.subscription.etag)}subscribe(){return w.Disposable.from((0,sh.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this),(0,sh.HC)(this.view.container.subscription.onDidChange,this.onSubscriptionChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}onSubscriptionChanged(e){e.current.plan!==e.previous.plan&&this.triggerChange(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?af(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&am(t,i,o)})([(0,ew.Yz)()],RepositoriesSubscribeableNode.prototype,"subscribe",1);var aw=i(3159),av=i(4063),ay=i(778),ab=i(133),aC=i(7640),ak=i(6729),aS=i(889),aR=i(2070),aP=i(8754);let BranchTrackingStatusFilesNode=class BranchTrackingStatusFilesNode extends au.eu{constructor(e,t,i,r,s){super("tracking-status-files",e1.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.direction=s,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s}),this._uniqueId=(0,au.pF)(this.type,this.context)}get ref1(){return this.branch.ref}get ref2(){return this.status.upstream?.name}get repoPath(){return this.status.repoPath}async getFilesComparison(){let e=await this.getGroupedFiles();return{files:[...(0,tm.Tj)(e,([,e])=>e[e.length-1])],repoPath:this.repoPath,ref1:this.ref1,ref2:this.ref2,title:"ahead"===this.direction?`Changes to push to ${this.ref2}`:`Changes to pull from ${this.ref2}`}}async getGroupedFiles(){let e=await this.view.container.git.commits(this.repoPath).getLog("behind"===this.direction?(0,em.Xn)(this.ref1,this.ref2,".."):(0,em.Xn)(this.ref2,this.ref1,".."),{limit:0});if(null==e)return new Map;await Promise.allSettled((0,tm.Tj)((0,tm.pb)(e.commits.values(),e=>null==e.files),e=>e.ensureFullDetails()));let t=[...(0,tm.qI)(e.commits.values(),e=>e.files?.map(t=>({...t,commit:e}))??[])];return t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()),(0,tm.Fi)(t,e=>e.path)}async getChildren(){let e=await this.getGroupedFiles(),t=[...(0,tm.Tj)(e.values(),e=>new aP.Z(this.view,this,this.repoPath,e,this.direction))];if("list"!==this.view.config.files.layout){let e=(0,$.Ay)(t,e=>e.uri.relativePath.split("/"),(...e)=>(0,T.Fd)((0,T.HS)(...e)),this.view.config.files.compact);t=new aR.x(this.view,this,e,this.repoPath,"",void 0,!1).getChildren()}else t.sort((e,t)=>e.priority-t.priority||(0,_.wN)(e.label,t.label));return t}async getTreeItem(){let e=await this.view.container.git.diff(this.repoPath).getChangedFilesCount("behind"===this.direction?`${this.ref1}...${this.ref2}`:`${this.ref2}...`),t=e?.files??0,i=`${(0,_.td)("file",t)} changed`,r=new w.TreeItem(i,w.TreeItemCollapsibleState.Collapsed);return r.id=this.id,r.contextValue=au.U0.BranchStatusFiles,r}};var aA=i(2199),aI=i(6339),aD=i(3957),a$=Object.defineProperty,aT=Object.getOwnPropertyDescriptor,aE=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?aT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&a$(t,i,o),o};let BranchTrackingStatusNode=class BranchTrackingStatusNode extends au.eu{constructor(e,t,i,r,s,o=!1,n){super("tracking-status",e1.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.upstreamType=s,this.root=o,this.options=n,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s,root:o}),this._uniqueId=(0,au.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}get repoPath(){return this.uri.repoPath}async getFilesComparison(){if("ahead"===this.upstreamType){let e=new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType),t=await e?.getFilesComparison();if(null==t)return;let i=this.options?.unpublishedCommits!=null?(0,tm.HV)(this.options.unpublishedCommits):void 0;if(null==i)return;let r=await this.view.container.git.refs(this.repoPath).resolveReference(`${i}^`);return{...t,ref1:r,ref2:t.ref1,title:`Changes to push to ${t.ref2}`}}let e=(await this.getChildren()).find(e=>e.is("tracking-status-files"));return e?.getFilesComparison()}async getChildren(){let e;if(null==this.status.upstream||"same"===this.upstreamType||"missing"===this.upstreamType||"none"===this.upstreamType)return[];let t=await this.getLog();if(null==t)return[];if("ahead"===this.upstreamType){let i=(e=[...t.commits.values()])[e.length-1];if(null==await i.getPreviousSha()){let t=await this.view.container.git.commits(this.uri.repoPath).getLog(i.sha,{limit:2});null!=t&&(e[e.length-1]=(0,tm.$1)(t.commits.values()))}}else e=t.commits.values();let i=[],r=!0;return!this.options?.showAheadCommits&&"ahead"===this.upstreamType&&this.status.upstream.state.ahead?(r=!1,i.push(...await new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType).getChildren())):(i.push(...(0,aD.h)((0,tm.Tj)(e,e=>new aA.e(this.view,this,e,"ahead"===this.upstreamType,this.branch)),this,1)),t.hasMore&&i.push(new aI.cb(this.view,this,i[i.length-1]))),r&&i.unshift(new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType)),i}async getTreeItem(){let e,t,i,r,s,o,n=0;if("missing"!==this.upstreamType&&"none"!==this.upstreamType){let e=this.view.container.git.getRepository(this.repoPath);n=await e?.getLastFetched()??0}function a(e){return`$(git-branch) \`${this.branch.name}\` is ${(0,aS.u)(this.status.upstream,{empty:this.status.upstream.missing?`missing upstream $(git-branch) \`${this.status.upstream.name}\``:`up to date with $(git-branch) \`${this.status.upstream.name}\`${e?.provider?.name?` on ${e.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) \`${this.status.upstream.name}\`${e?.provider?.name?` on ${e.provider.name}`:""}`})}`}switch(this.upstreamType){case"ahead":{let n=await this.branch.getRemote();e="Outgoing",t=`${(0,_.td)("commit",this.status.upstream.state.ahead)} to push to ${n?.name??(0,tl.Zq)(this.status.upstream.name)}`,o=`${(0,_.td)("commit",this.status.upstream.state.ahead)} to push to \`${this.status.upstream.name}\`${n?.provider?.name?` on ${n?.provider.name}`:""}\\
${a.call(this,n)}`,i=w.TreeItemCollapsibleState.Collapsed,r=this.root?au.U0.StatusAheadOfUpstream:au.U0.BranchStatusAheadOfUpstream,s=new w.ThemeIcon("cloud-upload",new w.ThemeColor("gitlens.unpublishedChangesIconColor"));break}case"behind":{let n=await this.branch.getRemote();e="Incoming",t=`${(0,_.td)("commit",this.status.upstream.state.behind)} to pull from ${n?.name??(0,tl.Zq)(this.status.upstream.name)}`,o=`${(0,_.td)("commit",this.status.upstream.state.behind)} to pull from \`${this.status.upstream.name}\`${n?.provider?.name?` on ${n.provider.name}`:""}\\
${a.call(this,n)}`,i=w.TreeItemCollapsibleState.Collapsed,r=this.root?au.U0.StatusBehindUpstream:au.U0.BranchStatusBehindUpstream,s=new w.ThemeIcon("cloud-download",new w.ThemeColor("gitlens.unpulledChangesIconColor"));break}case"same":{let l=await this.branch.getRemote();e=`Up to date with ${l?.name??(0,tl.Zq)(this.status.upstream.name)}${l?.provider?.name?` on ${l.provider.name}`:""}`,t=n?(0,tL.PI)(n):"",o=a.call(this,l),i=w.TreeItemCollapsibleState.None,r=this.root?au.U0.StatusSameAsUpstream:au.U0.BranchStatusSameAsUpstream,s=new w.ThemeIcon("cloud");break}case"missing":{let n=await this.branch.getRemote();e=`Missing upstream branch${n?.provider?.name?` on ${n.provider.name}`:""}`,t=this.status.upstream.name,o=a.call(this,n),i=w.TreeItemCollapsibleState.None,r=this.root?au.U0.StatusMissingUpstream:au.U0.BranchStatusSameAsUpstream,s=new w.ThemeIcon("warning",new w.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"));break}case"none":{let t=await this.view.container.git.remotes(this.branch.repoPath).getRemotesWithProviders(),n=(0,tu.zF)(t),a=n?.length?n[0].name:void 0;e=`Publish ${this.branch.name} to ${a??"a remote"}`,o=`\`${this.branch.name}\` hasn't been published to ${a??"a remote"}`,i=w.TreeItemCollapsibleState.None,r=this.root?au.U0.StatusNoUpstream:au.U0.BranchStatusNoUpstream,s=new w.ThemeIcon("cloud-upload",t.length?new w.ThemeColor("gitlens.unpublishedChangesIconColor"):void 0)}}let l=new w.TreeItem(e,i);l.id=this.id,l.contextValue=r,l.description=t,n&&(o+=`

Last fetched ${(0,tL.PI)(n)}`),l.iconPath=s;let c=new w.MarkdownString(o,!0);return c.supportHtml=!0,c.isTrusted=!0,l.tooltip=c,l}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if("same"!==this.upstreamType&&"none"!==this.upstreamType){if(null==this._log){let e="ahead"===this.upstreamType?(0,em.Xn)(this.status.upstream?.name,this.status.ref,".."):(0,em.Xn)(this.status.ref,this.status.upstream?.name,"..");this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(e,{limit:this.limit??this.view.config.defaultItemLimit})}return this._log}}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await w.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};aE([(0,tp.G)(),(0,ew.Yz)()],BranchTrackingStatusNode.prototype,"refresh",1),aE([(0,tp.G)()],BranchTrackingStatusNode.prototype,"loadMore",1);var a_=i(1920),aO=i(5288),ax=i(8029),aF=i(7763),aL=i(6792),aB=Object.defineProperty,aU=Object.getOwnPropertyDescriptor,aN=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?aU(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&aB(t,i,o),o};let CompareBranchNode=class CompareBranchNode extends ag.Y{constructor(e,t,i,r,s,o=!1){super("compare-branch",e,t,i),this.parent=i,this.branch=r,this.showComparison=s,this.root=o,this.updateContext({branch:r,root:o,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,au.pF)(this.type,this.context),this.loadCompareWith()}etag(){return 0}get ahead(){return{ref1:this._compareWith?.ref||"HEAD",ref2:this.branch.ref}}get behind(){return{ref1:this.branch.ref,ref2:this._compareWith?.ref||"HEAD"}}get compareRef(){return{label:this.branch.name,ref:this.branch.sha}}_compareWith;get compareWith(){return this._compareWith}get compareWithRef(){return null!=this._compareWith?{label:this._compareWith.label,ref:this._compareWith.ref}:void 0}_isFiltered;get filterByAuthors(){let e=this.getState("filterCommits"),t=!!e?.length;return null!=this._isFiltered&&this._isFiltered!==t&&this.updateContext({comparisonFiltered:t}),this._isFiltered=t,e}get repoPath(){return this.branch.repoPath}subscribe(){let e=[(0,sh.HC)(this.view.onDidChangeNodesCheckedState,this.onNodesCheckedStateChanged,this)];if(this.compareWithWorkingTree){let t=this.view.container.git.getRepository(this.uri);null!=t&&e.push((0,sh.HC)(t.onDidChangeFileSystem,this.onFileSystemChanged,this,[t.watchFileSystem()]))}return w.Disposable.from(...e)}onFileSystemChanged(e){this.triggerChange(!0)}onNodesCheckedStateChanged(e){let t=(0,ax.dt)(this.getStorageId());e.items.some(([e])=>e.id?.startsWith(t))&&this.storeCompareWith(!1).catch()}async getChildren(){if(null==this._compareWith)return[];if(null==this.children){let e={...this.ahead,range:(0,em.Xn)(this.ahead.ref1,this.compareWithWorkingTree?"":this.ahead.ref2,"..")},t={...this.behind,range:(0,em.Xn)(this.behind.ref1,this.behind.ref2,"..")},i=await this.view.container.git.commits(this.repoPath).getLeftRightCommitCount((0,em.Xn)(t.ref1,t.ref2,"..."),{authors:this.filterByAuthors}),r=this.view.container.git.refs(this.repoPath),s=await r.getMergeBase(t.ref1,t.ref2,{forkPoint:!0})??await r.getMergeBase(t.ref1,t.ref2),o=[new aF.V(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery(t.range),comparison:t,direction:"behind",files:{ref1:this.compareWithWorkingTree?"":s??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,_.td)("commit",i?.right??0),expand:!1}),new aF.V(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery(e.range),comparison:e,direction:"ahead",files:{ref1:s??e.ref1,ref2:this.compareWithWorkingTree?"":e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,_.td)("commit",i?.left??0),expand:!1})];this.filterByAuthors?.length||o.push(new aL.o(this.view,this,this.repoPath,this._compareWith.ref||"HEAD",this.compareWithWorkingTree?"":this.branch.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})),this.children=o}return this.children}getTreeItem(){let e,t,i;null==this._compareWith?(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with <branch, tag, or ref>`,e=w.TreeItemCollapsibleState.None,i=`Click to compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with a branch, tag, or ref`):(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with ${this._compareWith.label??(0,em.pV)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,e=w.TreeItemCollapsibleState.Collapsed);let r=new w.TreeItem(t,e);return r.id=this.id,r.contextValue=`${au.U0.CompareBranch}${this.branch.current?"+current":""}+${this.comparisonType}${null==this._compareWith?"":"+comparing"}${this.root?"+root":""}${this.filterByAuthors?.length?"+filtered":""}`,null==this._compareWith&&(r.command={title:`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with${R.EO.Ellipsis}`,command:"gitlens.views.editNode",arguments:[this]}),r.iconPath=new w.ThemeIcon("git-compare"),r.tooltip=i,r}async clear(){this._compareWith=void 0,await this.updateCompareWith(void 0),this.children=void 0,this.view.triggerNodeChange(this)}clearReviewed(){this.storeCompareWith(!0).catch(),this.triggerChange()}async edit(){let e=await (0,aO.NZ)(this.branch.repoPath,`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,picked:this.branch.ref,sort:{branches:{current:!0},tags:{}}});null==e||e instanceof or.Fj||(await this.updateCompareWith({ref:e.ref,notation:void 0,type:this.comparisonType}),this.children=void 0,this.view.triggerNodeChange(this))}refresh(e){super.refresh(e),this.loadCompareWith()}async setComparisonType(e){null!=this._compareWith?await this.updateCompareWith({...this._compareWith,type:e,checkedFiles:void 0}):this.showComparison=e,this.children=void 0,this.view.triggerNodeChange(this)}async setDefaultCompareWith(e){null==this._compareWith&&await this.updateCompareWith(e)}get comparisonType(){return this._compareWith?.type??this.showComparison}get compareWithWorkingTree(){return"working"===this.comparisonType}async getAheadFilesQuery(){let e=(0,em.Xn)(this._compareWith?.ref||"HEAD",this.branch.ref||"HEAD","..."),t=this.view.container.git.diff(this.repoPath),[i,r,s,o]=await Promise.allSettled([t.getDiffStatus(e),this.compareWithWorkingTree?t.getDiffStatus("HEAD"):void 0,t.getChangedFilesCount(e),this.compareWithWorkingTree?t.getChangedFilesCount("HEAD"):void 0]),n=(0,eC.Ro)(i)??[],a=(0,eC.Ro)(s);if(this.compareWithWorkingTree){let e=(0,eC.Ro)(r);if(null!=e)if(0===n.length)n=e;else for(let t of e){let e=n.findIndex(e=>e.path===t.path);-1!==e?n.splice(e,1,t):n.push(t)}let t=(0,eC.Ro)(o);null!=t&&(a=null==a?t:{additions:a.additions+t.additions,deletions:a.deletions+t.deletions,files:n.length,approximated:!0})}return{label:`${(0,_.td)("file",n.length,{zero:"No"})} changed`,files:n,stats:a}}async getBehindFilesQuery(){let e=(0,em.Xn)(this.branch.ref,this._compareWith?.ref||"HEAD","..."),t=this.view.container.git.diff(this.repoPath),[i,r]=await Promise.allSettled([t.getDiffStatus(e),t.getChangedFilesCount(e)]),s=(0,eC.Ro)(i)??[];return{label:`${(0,_.td)("file",s.length,{zero:"No"})} changed`,files:s,stats:(0,eC.Ro)(r)}}getCommitsQuery(e){return(0,a_.R6)(this.view.container,this.repoPath,e,this.filterByAuthors)}getFilesQuery(){let e=this.branch.ref,t=this._compareWith?.ref;return t?this.compareWithWorkingTree&&(e=""):(t=e,e=""),(0,a_.i9)(this.view.container,this.repoPath,e,t)}getStorageId(){return`${this.branch.id}${this.branch.current?"+current":""}`}loadCompareWith(){let e=this.view.container.storage.getWorkspace("branch:comparisons"),t=this.getStorageId(),i=e?.[t];null!=i&&"string"==typeof i?this._compareWith={ref:i,notation:void 0,type:this.showComparison}:(this._compareWith=i,null!=i&&(0,ax.sV)(this.view,i.checkedFiles))}async storeCompareWith(e){let t=this.getStorageId();e&&(0,ax.pi)(this.view,t);let i=this.view.container.storage.getWorkspace("branch:comparisons");if(null==i){if(null==this._compareWith)return;i=Object.create(null)}if(null!=this._compareWith){let e=(0,ax.oI)(this.view,t);this._compareWith.checkedFiles=e,i[t]={...this._compareWith}}else{if(null==i[t])return;let{[t]:e,...r}=i;i=r}await this.view.container.storage.storeWorkspace("branch:comparisons",i)}async updateCompareWith(e){this._compareWith=e,await this.storeCompareWith(!0)}};aN([(0,ew.Rm)()],CompareBranchNode.prototype,"clear",1),aN([(0,ew.Rm)()],CompareBranchNode.prototype,"clearReviewed",1),aN([(0,ew.Rm)()],CompareBranchNode.prototype,"edit",1),aN([(0,ew.Yz)()],CompareBranchNode.prototype,"refresh",1),aN([(0,ew.Rm)()],CompareBranchNode.prototype,"setComparisonType",1),aN([(0,ew.Rm)()],CompareBranchNode.prototype,"setDefaultCompareWith",1);let aq={"cherry-pick":{label:"Cherry picking",conflicts:"Resolve conflicts to continue cherry picking",directionality:"into"},merge:{label:"Merging",conflicts:"Resolve conflicts to continue merging",directionality:"into"},rebase:{label:"Rebasing",conflicts:"Resolve conflicts to continue rebasing",directionality:"onto",pending:"Pending rebase of"},revert:{label:"Reverting",conflicts:"Resolve conflicts to continue reverting",directionality:"in"}};var aW=i(5030),aM=i(4252),aG=i(9412),aH=i(1665);let MergeConflictFileNode=class MergeConflictFileNode extends aM.u${constructor(e,t,i,r){super("conflict-file",e1.nk.fromFile(i,r.repoPath,r.HEAD.ref),e,t,i),this.status=r}toClipboard(){return this.fileName}get baseUri(){return e1.nk.fromFile(this.file,this.status.repoPath,this.status.mergeBase??"HEAD")}get fileName(){return this.file.path}getChildren(){return[new aG.N(this.view,this,this.status,this.file),new aH.a(this.view,this,this.status,this.file)]}getTreeItem(){let e=new w.TreeItem(this.label,w.TreeItemCollapsibleState.Collapsed);return e.description=this.description,e.contextValue=`${au.U0.File}+conflicted`,e.tooltip=(0,aM.h)(this.file,"in ```Index```"),e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=w.ThemeIcon.File,e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=aW.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,D.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=aW.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,rB.Jl)("vscode.open","Open File",this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),{preserveFocus:!0,preview:!0})}};let MergeConflictFilesNode=class MergeConflictFilesNode extends au.eu{constructor(e,t,i,r){super("conflict-files",e1.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.conflicts=r}get repoPath(){return this.uri.repoPath}getChildren(){let e=this.conflicts.map(e=>new MergeConflictFileNode(this.view,this,e,this.status));if("list"!==this.view.config.files.layout){let t=(0,$.Ay)(e,e=>e.uri.relativePath.split("/"),(...e)=>(0,T.Fd)((0,T.HS)(...e)),this.view.config.files.compact);e=new aR.x(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort((e,t)=>(0,_.wN)(e.label,t.label));return e}getTreeItem(){return new w.TreeItem((0,_.td)("conflict",this.conflicts.length),w.TreeItemCollapsibleState.Expanded)}};let RebaseCommitNode=class RebaseCommitNode extends aA.e{async getTreeItem(){let e=new w.TreeItem(`Paused at commit ${this.commit.shortSha}`,this._options.expand?w.TreeItemCollapsibleState.Expanded:w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=`${au.U0.Commit}+rebase`,e.description=sc.c.fromTemplate("${message}",this.commit,{messageTruncateAtNewLine:!0}),e.iconPath=new w.ThemeIcon("debug-pause"),e}getTooltipTemplate(){return`Rebase paused at ${super.getTooltipTemplate()}`}};let PausedOperationStatusNode=class PausedOperationStatusNode extends au.eu{constructor(e,t,i,r,s,o){super("paused-operation-status",e1.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.pausedOpStatus=r,this.status=s,this.root=o,this.updateContext({branch:i,root:o,pausedOperation:r.type}),this._uniqueId=(0,au.pF)(this.type,this.context)}get repoPath(){return this.uri.repoPath}async getChildren(){if("rebase"!==this.pausedOpStatus.type)return this.status?.hasConflicts?[new MergeConflictFilesNode(this.view,this,this.pausedOpStatus,this.status.conflicts)]:[];let e=[],t=this.pausedOpStatus.steps.current.commit;if(null!=t){let i=null!=t?await this.view.container.git.commits(this.pausedOpStatus.repoPath).getCommit(t.ref):void 0;null!=i&&e.push(new RebaseCommitNode(this.view,this,i))}return this.status?.hasConflicts&&e.push(new MergeConflictFilesNode(this.view,this,this.pausedOpStatus,this.status.conflicts)),e}getTreeItem(){let e=this.status?.hasConflicts===!0,t=this.status?.hasConflicts||"rebase"===this.pausedOpStatus.type&&this.pausedOpStatus.steps.total>0&&null!=this.pausedOpStatus.steps.current.commit,i=new w.TreeItem(this.label,t?w.TreeItemCollapsibleState.Expanded:w.TreeItemCollapsibleState.None);switch(i.id=this.id,this.pausedOpStatus.type){case"cherry-pick":i.contextValue=au.U0.PausedOperationCherryPick;break;case"merge":i.contextValue=au.U0.PausedOperationMerge;break;case"rebase":i.contextValue=au.U0.PausedOperationRebase;break;case"revert":i.contextValue=au.U0.PausedOperationRevert}return i.description=e?(0,_.td)("conflict",this.status.conflicts.length):void 0,i.iconPath=new w.ThemeIcon("warning",new w.ThemeColor(e?"gitlens.decorations.statusMergingOrRebasingConflictForegroundColor":"gitlens.decorations.statusMergingOrRebasingForegroundColor")),i.tooltip=this.tooltip,i.resourceUri=(0,al.E)("status",{status:this.pausedOpStatus.type,conflicts:e}),i}get label(){let e=this.status?.hasConflicts===!0;if("rebase"!==this.pausedOpStatus.type){let t=aq[this.pausedOpStatus.type];return`${e?t.conflicts:t.label} ${(0,tc.M4)(this.pausedOpStatus.incoming,{expand:!1,icon:!1})} ${t.directionality} ${(0,tc.M4)(this.pausedOpStatus.current,{expand:!1,icon:!1})}`}let t=this.pausedOpStatus.steps.total>0,i=aq[this.pausedOpStatus.type];return`${e?i.conflicts:t?i.label:i.pending} ${(0,tc.M4)(this.pausedOpStatus.incoming,{expand:!1,icon:!1})} ${i.directionality} ${(0,tc.M4)(this.pausedOpStatus.current??this.pausedOpStatus.onto,{expand:!1,icon:!1})}${t?` (${this.pausedOpStatus.steps.current.number}/${this.pausedOpStatus.steps.total})`:""}`}get tooltip(){let e,t=this.status?.hasConflicts===!0;if("rebase"!==this.pausedOpStatus.type){let i=aq[this.pausedOpStatus.type];e=`${i.label} ${(0,tc.M4)(this.pausedOpStatus.incoming,{label:!1})} ${i.directionality} ${(0,tc.M4)(this.pausedOpStatus.current,{label:!1})}${t?`

Resolve ${(0,_.td)("conflict",this.status.conflicts.length)} before continuing`:""}`}else{let i=this.pausedOpStatus.steps.total>0,r=aq[this.pausedOpStatus.type];e=`${i?r.label:r.pending} ${(0,tc.M4)(this.pausedOpStatus.incoming,{label:!1})} ${r.directionality} ${(0,tc.M4)(this.pausedOpStatus.current??this.pausedOpStatus.onto,{label:!1})}${i?`

Paused at step ${this.pausedOpStatus.steps.current.number} of ${this.pausedOpStatus.steps.total}${t?`\\
Resolve ${(0,_.td)("conflict",this.status.conflicts.length)} before continuing`:""}`:""}`}let i=new w.MarkdownString(e,!0);return i.supportHtml=!0,i.isTrusted=!0,i}};var aV=i(4644),aj=Object.defineProperty,aQ=Object.getOwnPropertyDescriptor,az=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?aQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&aj(t,i,o),o};let BranchNode=class BranchNode extends ak.t{constructor(e,t,i,r,s,o,n){super("branch",e,t,i),this.parent=i,this.repo=r,this.branch=s,this.root=o,this.updateContext({repository:r,branch:s,root:o}),this._uniqueId=(0,au.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this),this.options={expand:!1,limitCommits:!1,showAsCommits:!1,showComparison:!1,showStashes:!1,showStatusDecorationOnly:this.root,showStatus:!0,showTracking:!this.root,...n}}limit;options;splatted=!0;dispose(){super.dispose(),this.children=void 0}get id(){return this._uniqueId}toClipboard(){return this.branch.name}get avoidCompacting(){return this.root||this.current||this.worktree?.opened||this.branch.detached||this.branch.starred}compacted=!1;get current(){return this.branch.current}get ref(){return this.branch}get treeHierarchy(){return this.avoidCompacting?[this.branch.name]:this.branch.getNameWithoutRemote().split("/")}get worktree(){let e=this.context.worktreesByBranch?.get(this.branch.id);return e?.isDefault?void 0:e}_children;get children(){return this._children}set children(e){this._children!==e&&((0,aC.lm)(this._children,e),this._children=e)}async getChildren(){if(null==this.children){let e,t,i,r,s=this.branch,o=0,n=!1;!1!==this.options.showComparison&&"remotes"!==this.view.type&&(n=null==(i=new CompareBranchNode(this.uri,this.view,this,s,this.options.showComparison,this.splatted)).compareWith),this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=s.upstream||s.remote)&&(0,sT.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes(s.repoPath)&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")&&(e=(0,eC.v6)(),r=this.getAssociatedPullRequest(s,this.root?{include:["opened","merged"]}:void 0),queueMicrotask(async()=>{await e?.promise;let t=!1,i=setTimeout(()=>{t=!0,this.view.triggerNodeChange(this)},250),n=await r;clearTimeout(i),null!=n&&null!=this.children&&this.children.splice(o,0,new ah.Xu(this.view,this,n,s)),(t||null!=n)&&this.view.triggerNodeChange(this.root?this.parent??this:this)}));let[a,l,c,u,h,d,p]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath,s.name),this.options.showStatus&&s.current?this.view.container.git.status(this.uri.repoPath).getStatus():void 0,this.options.showStatus&&s.current?this.view.container.git.status(this.uri.repoPath).getPausedOperationStatus?.():void 0,!s.remote?this.view.container.git.getBranchAheadRange(s).then(e=>e?this.view.container.git.commits(this.uri.repoPath).getLogShasOnly(e,{limit:0,merges:this.options.showMergeCommits}):void 0):void 0,n?this.view.container.git.branches(this.branch.repoPath).getBaseBranchName?.(this.branch.name):void 0,n?(0,ay.b3)(this.view.container,this.branch,{associatedPullRequest:r,timeout:100}):void 0]),g=(0,eC.Ro)(a);if(null==g)return[new aI.S2(this.view,this,"No commits could be found.")];let m=[],f=(0,eC.Ro)(c),w=(0,eC.Ro)(u),v=(0,eC.Ro)(h);if(null!=t&&m.push(new ah.Xu(this.view,this,t,s)),null!=w)m.push(new PausedOperationStatusNode(this.view,this,s,w,f??await this.view.container.git.status(this.uri.repoPath).getStatus(),this.root));else if(this.options.showTracking){let e={ref:s.ref,repoPath:s.repoPath,upstream:s.upstream};null!=e.upstream?this.root&&e.upstream.missing?m.push(new BranchTrackingStatusNode(this.view,this,s,e,"missing",this.root)):!this.root||e.upstream.state.behind||e.upstream.state.ahead?(e.upstream.state.behind&&m.push(new BranchTrackingStatusNode(this.view,this,s,e,"behind",this.root)),e.upstream.state.ahead&&m.push(new BranchTrackingStatusNode(this.view,this,s,e,"ahead",this.root,{unpublishedCommits:v}))):m.push(new BranchTrackingStatusNode(this.view,this,s,e,"same",this.root)):s.detached||m.push(new BranchTrackingStatusNode(this.view,this,s,e,"none",this.root))}if(o=0,null!=i&&(m.push(i),n)){let e,t=(0,eC.Ro)(d),r=(0,eC.Ro)(p);null!=(e=r?.paused?t:r?.value??t)&&i.setDefaultCompareWith({ref:e,label:e,notation:"...",type:"branch",checkedFiles:[]}),r?.paused&&r.value.then(e=>{null!=e&&i.setDefaultCompareWith({ref:e,label:e,notation:"...",type:"branch",checkedFiles:[]})})}0!==m.length&&("commits"===this.view.type?m.push(new CommitsCurrentBranchNode(this.view,this,this.branch)):m.push(new aI.S2(this.view,this,"",R.EO.Dash.repeat(2),"")));let y=(0,eC.Ro)(l);m.push(...(0,aD.h)((0,tm.Tj)(g.commits.values(),e=>(0,O.kk)(e)?new aV.m(this.view,this,e,{icon:!0}):new aA.e(this.view,this,e,v?.has(e.ref),s,y)),this)),g.hasMore&&m.push(new aI.cb(this.view,this,m[m.length-1],{getCount:()=>this.view.container.git.commits(s.repoPath).getCommitCount(s.name)})),this.children=m,setTimeout(()=>e?.fulfill(),1)}return this.children}async getTreeItem(){this.splatted=!1;let e=await aY(this.view.container,this.branch,this.current,{avatars:this.view.config.avatars,pendingPullRequest:this.getState("pendingPullRequest"),showAsCommits:this.options.showAsCommits,showingLocalAndRemoteBranches:"branches"===this.view.type&&this.view.config.showRemoteBranches,showStatusDecorationOnly:this.options.showStatusDecorationOnly,useBaseNameOnly:!(this.view.config.branches?.layout!=="tree"||this.compacted||this.avoidCompacting),worktree:this.worktree,worktreesByBranch:this.context.worktreesByBranch});this.repo.closed&&(e.contextValue+="+closed");let t=new w.TreeItem(e.label,this.options.expand?w.TreeItemCollapsibleState.Expanded:w.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=e.contextValue,t.description=e.description,t.iconPath=e.iconPath,t.resourceUri=e.resourceUri,t.tooltip=e.tooltip,t}async star(){await this.branch.star(),this.view.refresh(!0)}async unstar(){await this.branch.unstar(),this.view.refresh(!0)}refresh(e){super.refresh?.(e),this.children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}_log;async getLog(){if(null==this._log){let e=this.limit??(this.root&&!this.options.limitCommits?this.view.config.pageItemLimit:this.view.config.defaultItemLimit),t=this.branch.upstream?.state.ahead??0;0!==e&&t>e&&(e=Math.min(t+1,2*e)),this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(this.ref.ref,{limit:e,authors:this.options?.authors,merges:this.options?.showMergeCommits,stashes:this.options?.showStashes})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await w.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.children=void 0,this.triggerChange(!1)))}};async function aY(e,t,i,r){let s,o,n,a,l=t.status,c=[];i&&(t.rebasing&&c.push("rebasing"),c.push("current branch")),r?.worktree&&(r.worktree.opened&&!i?c.push("in an opened worktree"):c.push("in a worktree"));let u=`$(git-branch) \`${t.getNameWithoutRemote()}\`${c.length?` \xa0(_${c.join(", ")}_)`:""}`,h=au.U0.Branch,d=!1;if(i&&(h+="+current",d=!0),t.remote&&(h+="+remote"),t.starred&&(h+="+starred"),null==t.upstream||t.upstream.missing||(h+="+tracking"),r?.showAsCommits&&(h+="+commits"),r?.worktree!=null?(h+="+worktree",d=!0,r.worktree.opened&&(h+="+opened")):r?.worktreesByBranch?.get(t.id)?.isDefault&&(d=!0),d&&(h+="+checkedout"),!t.remote)if(null!=t.upstream){let e=R.EO.Dash,i=await t.getRemote();if(t.upstream.missing)e=R.EO.Warning;else if(null!=i){let t,r;for(let{type:e}of i.urls)if("fetch"===e){if(t=!0,r)break}else if("push"===e&&(r=!0,t))break;t&&r?e=R.EO.ArrowsRightLeft:r?e=R.EO.ArrowRight:t&&(e=R.EO.ArrowLeft)}switch(o=r?.showAsCommits?`${t.getTrackingStatus({suffix:(0,_.eV)(R.EO.Dot,1,1)})}${t.getNameWithoutRemote()}${t.rebasing?" (Rebasing)":""}${(0,_.eV)(e,2,2)}${t.upstream.name}`:`${t.getTrackingStatus({suffix:`${R.EO.Space} `})}${e}${R.EO.Space} ${t.upstream.name}`,u+=`

Branch is ${t.getTrackingStatus({empty:`${t.upstream.missing?"missing upstream":"up to date with"} \\
 $(git-branch) \`${t.upstream.name}\`${i?.provider?.name?` on ${i.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:`\\
$(git-branch) \`${t.upstream.name}\`${i?.provider?.name?` on ${i.provider.name}`:""}`})}`,l){case"ahead":h+="+ahead",s=new w.ThemeColor("gitlens.decorations.branchAheadForegroundColor");break;case"behind":h+="+behind",s=new w.ThemeColor("gitlens.decorations.branchBehindForegroundColor");break;case"diverged":h+="+ahead+behind",s=new w.ThemeColor("gitlens.decorations.branchDivergedForegroundColor");break;case"upToDate":s=new w.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor")}}else{let i=(0,tu.zF)(await e.git.remotes(t.repoPath).getRemotesWithProviders()),r=i?.length?i[0].name:void 0;u+=`

Local branch, hasn't been published to ${r??"a remote"}`}if(null!=t.date&&(o=`${o?`${o}${(0,_.eV)(R.EO.Dot,2,2)}`:""}${t.formattedDate}`,u+=`

Last commit ${t.formatDateFromNow()} (${t.formatDate(e.BranchDateFormatting.dateFormat)})`),(u=new w.MarkdownString(u,!0)).supportHtml=!0,u.isTrusted=!0,t.starred&&u.appendMarkdown("\\\n$(star-full) Favorited"),r?.pendingPullRequest!=null&&u.appendMarkdown(`

$(loading~spin) Loading associated pull request${R.EO.Ellipsis}`),r?.showAsCommits)n="Commits";else{let e=t.getNameWithoutRemote();n=`${!r?.useBaseNameOnly?e:t.getBasename()}${t.rebasing?" (Rebasing)":""}`}let p=!1;if("local"===l&&(await e.git.remotes(t.repoPath).getRemotes()).length&&(p=!0),r?.pendingPullRequest!=null)a=new w.ThemeIcon("loading~spin");else if(r?.showAsCommits)a=new w.ThemeIcon("git-commit",s);else if(r?.worktree!=null)a=(0,ip.wL)(e,t);else if(t.remote&&r?.showingLocalAndRemoteBranches){let i=await t.getRemote();a=(0,ip.x1)(e,i,{avatars:r?.avatars})}else a=(0,ip.BI)(e,t);return{label:n,description:o,tooltip:u,contextValue:h,iconPath:a,resourceUri:(0,al.E)("branch",{status:p?"unpublished":l,current:i,worktree:r?.worktree!=null?{opened:r.worktree.opened}:void 0,starred:t.starred,showStatusOnly:r?.showStatusDecorationOnly})}}az([(0,tB.B)()],BranchNode.prototype,"worktree",1),az([(0,ew.Rm)()],BranchNode.prototype,"star",1),az([(0,ew.Rm)()],BranchNode.prototype,"unstar",1),az([(0,tp.G)()],BranchNode.prototype,"loadMore",1);let aK=Object.freeze({dispose:()=>{}});let CommitsCurrentBranchNode=class CommitsCurrentBranchNode extends ag.Y{constructor(e,t,i){super("commits-current-branch",e1.Bd,e,t),this.branch=i,this.repo=e.container.git.getRepository(i.repoPath)}repo;getChildren(){return[]}async getTreeItem(){let e=await this.getLastFetched()??0,t=`${this.branch.name}${e?` \xa0\u2022\xa0 fetched ${(0,tL.PI)(new Date(e))}`:""}`,i=new w.TreeItem("",w.TreeItemCollapsibleState.None);return i.contextValue=au.U0.CommitsCurrentBranch,i.description=`\u2014\xa0\xA0 on ${t}`,i.tooltip=t,i}etag(){return this.repo?.etag??0}async getLastFetched(){return this.branch.upstream?.missing||this.branch.detached?void 0:this.repo?.getLastFetched()}async subscribe(){let e=await this.getLastFetched()??0,t=(0,ab.u)(e);if(0!==e&&t>0)return w.Disposable.from(null!=this.repo?(0,sh.HC)(this.repo.onDidChange,()=>this.view.triggerNodeChange(this),this):aK,(0,oq.gC)(()=>{t!==(0,ab.u)(e)&&this.resetSubscription(),this.view.triggerNodeChange(this)},t))}};let BranchOrTagFolderNode=class BranchOrTagFolderNode extends au.eu{constructor(e,t,i,r,s,o,n,a=!1){super("branch-tag-folder",e1.nk.fromRepoPath(s),e,t),this.parent=t,this.folderType=i,this.root=r,this.repoPath=s,this.folderName=o,this.relativePath=n,this._expand=a,this._uniqueId=(0,au.pF)(`${this.type}+${i}+${n??o}`,this.context)}get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e=[];for(let t of this.root.children.values()){if(void 0===t.value){let i=t.descendants?.some(e=>e.is("branch")&&(e.current||e.worktree?.opened)||e.is("worktree")&&e.worktree?.opened);e.push(new BranchOrTagFolderNode(this.view,this.folderName?this:this.parent,this.folderType,t,this.repoPath,t.name,t.relativePath,i));continue}t.value.parent=this.folderName?this:this.parent,e.push(t.value)}return e}getTreeItem(){let e=new w.TreeItem(this.label,this._expand?w.TreeItemCollapsibleState.Expanded:w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=au.U0.BranchOrTagFolder,e.iconPath=w.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}};var aZ=Object.defineProperty,aJ=Object.getOwnPropertyDescriptor;let BranchesNode=class BranchesNode extends av.l{constructor(e,t,i,r){super("branches",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e,t="branches"===this.view.type&&this.view.config.showRemoteBranches,i=t?(await this.repo.git.remotes().getDefaultRemote())?.name:void 0,r={filter:e=>!e.remote||t&&null!=i&&e.getRemoteName()===i,sort:this.view.config.showCurrentBranchOnTop?{current:!0,groupByType:null==i,openedWorktreesByBranch:(0,ig.vJ)(this.context.worktreesByBranch)}:{current:!1,groupByType:null==i}},s=new tI.t(e=>this.repo.git.branches().getBranches({...r,paging:e}));null!=i&&(e=await (0,tl.rt)(s));let o=[];for await(let t of s.values())t.remote&&e?.has(t.name)||o.push(new BranchNode(e1.nk.fromRepoPath(this.uri.repoPath,t.ref),this.view,this,this.repo,t,!1,{showComparison:"repositories"===this.view.type?this.view.config.branches.showBranchComparison:this.view.config.showBranchComparison,showStashes:this.view.config.showStashes}));if(0===o.length)return[new aI.S2(this.view,this,"No branches could be found.")];if("list"===this.view.config.branches.layout)return this.children=o,o;let n=(0,$.Ay)(o,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0)),a=new BranchOrTagFolderNode(this.view,this,"branch",n,this.repo.path,"",void 0);this.children=a.getChildren()}return this.children}async getTreeItem(){let e=new w.TreeItem("Branches",w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=au.U0.Branches,(await this.repo.git.remotes().getRemotes()).length&&(e.contextValue+="+remotes"),this.repo.closed&&(e.contextValue+="+closed"),e.iconPath=new w.ThemeIcon("git-branch"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?aJ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&aZ(t,i,o)})([(0,ew.Yz)()],BranchesNode.prototype,"refresh",1);var aX=i(2895),a0=i(6250),a1=i(1729),a2=i(7528),a5=i(4693),a4=i(7488),a7=i(5507),a3=i(9842),a6=i(9317),a9=i(3310),a8=i(5367),le=Object.defineProperty,lt=Object.getOwnPropertyDescriptor,li=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&le(t,i,o),o};let{command:lr,getCommands:ls}=rU();let ViewCommands=class ViewCommands{constructor(e){this.container=e;let t=[];for(let{command:e,handler:i,options:r}of ls())t.push(lo(e,i,this,r));this._disposable=w.Disposable.from(...t)}_disposable;dispose(){this._disposable.dispose()}async copyNode(e,t,i){if(0===(t=Array.isArray(t)?t:null!=e?[e]:[]).length)return;let r=(0,tm.fj)((0,$.x1)(await Promise.allSettled((0,tm.Tj)(t,e=>e.toClipboard?.(i))),e=>"fulfilled"===e.status&&e.value?.trim()?e.value:void 0),"\n");await w.env.clipboard.writeText(r)}async copyOrOpenNodeUrls(e,t,i){if(!(t=Array.isArray(t)?t:null!=e?[e]:[]).length)return;let r=[...(0,$.x1)(await Promise.allSettled((0,tm.Tj)(t,e=>e.getUrl?.())),e=>"fulfilled"===e.status&&e.value?.trim()?e.value:void 0)];if(r.length){if(i){await w.env.clipboard.writeText(r.join("\n"));return}if(r.length>10){let e={title:"Open"};if(await w.window.showWarningMessage(`Are you sure you want to open ${r.length} URLs?`,{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return}for(let e of r)null!=e&&(0,ef.CZ)(e)}}copyOrOpenCommitsOnRemote(e,t,i){let r=t?.length?t.map(e=>e.ref):[e.ref];return(0,rB.RS)("gitlens.openOnRemote",{repoPath:r[0].repoPath,resource:r.map(e=>({type:e5.J.Commit,sha:e.ref})),clipboard:i})}collapseNode(){return(0,rB.S4)("list.collapseAllToFocus")}dismissNode(e){(0,au.sr)(e.view)&&e.view.dismissNode(e)}editNode(e){if((0,au.jZ)(e))return e.edit()}expandNode(e){return e.view.reveal(e,{select:!1,focus:!1,expand:3})}loadMoreChildren(e){return e.loadMore()}loadAllChildren(e){return e.loadAll()}refreshNode(e,t){return null==t&&(0,au.DQ)(e)&&(e.limit=void 0,e.view.resetNodeLastKnownLimit(e)),e.view.refreshNode(e,null==t||t)}addAuthors(e){return a1.s((0,au.K2)(e))}addAuthor(e,t){if(!e?.is("contributor"))return Promise.resolve();let i=t?.length?t.map(e=>e.contributor):[e.contributor];return a1.s(e.repoPath,i.filter(e=>!e.current))}addRemote(e){return a2.WQ((0,au.K2)(e))}async addPullRequestRemote(e,t,i){let r=(0,a6.Yv)(t);if(r.remote?.url!=null)return await i.git.remotes().addRemote?.(r.provider.repoDomain,r.remote.url,{fetch:!0}),e.triggerChange(!0)}applyChanges(e){return e.is("results-file")?ae.YF(e.file,(0,tc.kA)(e.ref1,e.repoPath),(0,tc.kA)(e.ref2,e.repoPath)):e instanceof ak.p&&null!=e.ref&&"HEAD"!==e.ref.ref?ae.YF(e.file,e.ref):Promise.resolve()}applyStash(e){return e.is("stash")?a5.Bb(e.repoPath,e.commit):Promise.resolve()}browseRepoAtRevision(e,t){return e instanceof ak.t||e instanceof ak.p?(0,n8.V)(e.uri,{before:t?.before,openInNewWindow:t?.openInNewWindow}):Promise.resolve()}cherryPick(e,t){if(!e.is("commit"))return Promise.resolve();let i=t?.length?t.map(e=>e.ref):[e.ref];return rL.$T(e.repoPath,i)}clearComparison(e){e.is("compare-branch")&&e.clear()}clearReviewed(e){let t;if(e.is("results-files")){if(null==(t=e.getParent()))return}else t=e;t.isAny("compare-branch","compare-results")&&t.clearReviewed()}closeRepository(e){e.isAny("repository","repo-folder")&&(e.repo.closed=!0)}async createBranch(e){let t=e instanceof ak.t||e instanceof ak.p?e?.ref:e?.is("tracking-status")?e.branch:void 0;if(null==t){let i=e?.repoPath?this.container.git.getRepository(e.repoPath):this.container.git.getBestRepository();if(null==i)return;t=await i.git.branches().getBranch()}return a0.vt(e?.repoPath,t)}async createPullRequest(e){if(!e.isAny("branch","tracking-status"))return Promise.resolve();let t=await e.branch.getRemote();return(0,rB.ph)("createPullRequest",{repoPath:e.repoPath,remote:null!=t?{name:t.name,provider:null!=t.provider?{id:t.provider.id,name:t.provider.name,domain:t.provider.domain}:void 0,url:t.url}:void 0,branch:{name:e.branch.name,upstream:e.branch.upstream?.name,isRemote:e.branch.remote}})}async createTag(e){let t=e instanceof ak.t||e instanceof ak.p?e?.ref:e?.is("tracking-status")?e.branch:void 0;if(null==t){let i=e?.repoPath?this.container.git.getRepository(e.repoPath):this.container.git.getBestRepository();if(null==i)return;t=await i.git.branches().getBranch()}return a4.vt(e?.repoPath,t)}async createWorktree(e){if(e?.is("worktrees")&&(e=void 0),null==e||e.is("branch"))return a7.vt(e?.repoPath,void 0,e?.ref)}deleteBranch(e,t){if(!e.is("branch"))return Promise.resolve();let i=t?.length?t.map(e=>e.branch):[e.branch];return a0.TF(e.repoPath,i)}deleteStash(e,t){if(!e.is("stash"))return Promise.resolve();let i=t?.length?t.map(e=>e.commit):[e.commit];return a5.gv(e.repoPath,i)}renameStash(e){return e.is("stash")?a5.$w(e.repoPath,e.commit):Promise.resolve()}deleteTag(e,t){if(!e.is("tag"))return Promise.resolve();let i=t?.length?t.map(e=>e.tag):[e.tag];return a4.TF(e.repoPath,i)}async deleteWorktree(e,t){if(!e.is("worktree"))return;let i=(t?.length?t.map(e=>e.worktree):[e.worktree]).filter(e=>!e.isDefault&&!e.opened).map(e=>e.uri);return a7.TF(e.repoPath,i)}fetch(e){return e.isAny("repository","repo-folder")?rL.hd(e.repo):e.is("remote")?a2.hd(e.remote.repoPath,e.remote.name):e.isAny("branch","tracking-status")?rL.hd(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}async highlightChanges(e){e.isAny("commit-file","stash-file","file-commit","results-file")&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(w.window.activeTextEditor,"changes",{sha:e.ref.ref},!0))}async highlightRevisionChanges(e){e.isAny("commit-file","stash-file","file-commit","results-file")&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(w.window.activeTextEditor,"changes",{sha:e.ref.ref,only:!0},!0))}merge(e){return e.isAny("branch","tag")?rL.h1(e.repoPath,e.is("branch")?e.branch:e.tag):Promise.resolve()}openBranchOnRemote(e){return(0,rB.RS)("gitlens.openBranchOnRemote",e)}openInTerminal(e){return e.isAny("tracking-status","repository","repo-folder")?(0,rB.S4)("openInTerminal",w.Uri.file(e.repoPath)):Promise.resolve()}openInIntegratedTerminal(e){return e.isAny("tracking-status","repository","repo-folder")?(0,rB.S4)("openInIntegratedTerminal",w.Uri.file(e.repoPath)):Promise.resolve()}async abortPausedOperation(e){if(!e.is("paused-operation-status"))return;let t=this.container.git.status(e.pausedOpStatus.repoPath).abortPausedOperation;if(null!=t)try{await t()}catch(e){w.window.showErrorMessage(e.message)}}async continuePausedOperation(e){if(!e.is("paused-operation-status"))return;let t=this.container.git.status(e.pausedOpStatus.repoPath).continuePausedOperation;if(null!=t)try{await t()}catch(e){w.window.showErrorMessage(e.message)}}async skipPausedOperation(e){if(!e.is("paused-operation-status"))return;let t=this.container.git.status(e.pausedOpStatus.repoPath).continuePausedOperation;if(null!=t)try{await t({skip:!0})}catch(e){w.window.showErrorMessage(e.message)}}async openPausedOperationInRebaseEditor(e){if(!e.is("paused-operation-status")||"rebase"!==e.pausedOpStatus.type)return;let t=await this.container.git.config(e.repoPath).getGitDir?.();if(null==t)return;let i=w.Uri.joinPath(t.uri,"rebase-merge","git-rebase-todo");(0,rB.S4)("vscode.openWith",i,"gitlens.rebase",{preview:!1})}openPullRequest(e){return e.is("pullrequest")?(0,rB.ph)("openPullRequest",{repoPath:e.uri.repoPath,provider:{id:e.pullRequest.provider.id,name:e.pullRequest.provider.name,domain:e.pullRequest.provider.domain},pullRequest:{id:e.pullRequest.id,url:e.pullRequest.url}}):Promise.resolve()}async openPullRequestChanges(e){if(!e.is("pullrequest")&&!e.is("launchpad-item"))return Promise.resolve();let t=e.pullRequest;if(t?.refs?.base==null||t?.refs.head==null)return Promise.resolve();let i=await (0,a3.w8)(this.container,t,e.repoPath);if(null==i)return Promise.resolve();let r=(0,a6.tI)(i.path,t.refs);return null==await (0,a3.td)(t,i,{promptMessage:`Unable to open changes for PR #${t.id} because of a missing remote.`},r)?Promise.resolve():ae.$5(this.container,{repoPath:r.repoPath,lhs:r.base.ref,rhs:r.head.ref},{title:`Changes in Pull Request #${t.id}`})}async openPullRequestComparison(e){if(!e.is("pullrequest")&&!e.is("launchpad-item"))return Promise.resolve();let t=e.pullRequest;if(t?.refs?.base==null||t?.refs.head==null)return Promise.resolve();let i=await (0,a3.w8)(this.container,t,e.repoPath);if(null==i)return Promise.resolve();let r=(0,a6.tI)(i.path,t.refs);return null==await (0,a3.td)(t,i,{promptMessage:`Unable to open comparison for PR #${t.id} because of a missing remote.`},r)?Promise.resolve():this.container.views.searchAndCompare.compare(r.repoPath,r.head,r.base)}async openDraft(e){await (0,a9.X)({mode:"view",draft:e.draft})}async openDraftOnWeb(e){let t=this.container.drafts.generateWebUrl(e.draft);await (0,ef.CZ)(t)}async openWorktree(e,t,i){let r;if((e.is("branch")||e.is("worktree"))&&null!=e.worktree){if(t?.length&&i?.location==="newWindow"){let e={folders:(0,$.x1)(t,e=>null!=e.worktree?{name:e.worktree.name,path:e.worktree.uri.fsPath}:void 0),settings:{}};r=w.Uri.file((0,eX.ZR)(`worktrees-${Date.now()}.code-workspace`)),await w.workspace.fs.writeFile(r,new TextEncoder().encode(JSON.stringify(e,null,2)))}else r=e.worktree.uri;(0,ef.OH)(r,i)}}async openInWorktree(e){if(e.is("branch")||e.is("pullrequest")||e.is("launchpad-item")){if(e.is("branch")){let t=await e.branch.getAssociatedPullRequest();if(null!=t){let i=(await e.branch.getRemote())?.url??(0,a6.Yv)(t).remote.url;if(null!=i){let r=(0,nC.pX)(this.container,t,e.branch.getNameWithoutRemote(),i,ai.zB.SwitchToPullRequestWorktree);return this.container.deepLinks.processDeepLinkUri(r,!1,e.repo)}}return(0,n8.b)({command:"switch",state:{repos:e.repo,reference:e.branch,worktreeDefaultOpen:"new"}})}if(e.is("pullrequest")||e.is("launchpad-item")){let t=e.pullRequest;if(t?.refs?.head==null)return Promise.resolve();let i=(0,a6.Yv)(t);if(null==i.remote.url)return Promise.resolve();let r=(0,nC.pX)(this.container,t,t.refs.head.branch,i.remote.url,ai.zB.SwitchToPullRequestWorktree),s=await (0,a3.sY)(this.container,t,{skipVirtual:!0});return this.container.deepLinks.processDeepLinkUri(r,!1,s)}}}pruneRemote(e){return e.is("remote")?a2.R3(e.remote.repoPath,e.remote.name):Promise.resolve()}async removeRemote(e){return e.is("remote")?a2.TF(e.remote.repoPath,e.remote.name):Promise.resolve()}publishBranch(e){return e.isAny("branch","tracking-status")?rL.VC(e.repoPath,void 0,e.branch):Promise.resolve()}publishRepository(e){return e.isAny("branch","tracking-status")?(0,rB.wS)("git.publish",w.Uri.file(e.repoPath)):Promise.resolve()}pull(e){return e.isAny("repository","repo-folder")?rL.a$(e.repo):e.isAny("branch","tracking-status")?rL.a$(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}push(e,t){return e.isAny("repository","repo-folder")?rL.VC(e.repo,t):e.isAny("branch","tracking-status")?rL.VC(e.repoPath,t,e.root?void 0:e.branch):e.isAny("commit","file-commit")?e.isTip?rL.VC(e.repoPath,t):this.pushToCommit(e):Promise.resolve()}pushToCommit(e){return e.isAny("commit","file-commit")?rL.VC(e.repoPath,!1,e.commit):Promise.resolve()}rebase(e){return e.isAny("branch","commit","file-commit","tag")?rL.RU(e.repoPath,e.ref):Promise.resolve()}rebaseToRemote(e){if(!e.isAny("branch","tracking-status"))return Promise.resolve();let t=e.is("branch")?e.branch.upstream?.name:e.status.upstream?.name;return null==t?Promise.resolve():rL.RU(e.repoPath,(0,tc.kA)(t,e.repoPath,{refType:"branch",name:t,remote:!0}))}renameBranch(e){return e.is("branch")?a0.$w(e.repoPath,e.branch):Promise.resolve()}resetCommit(e){return e.isAny("commit","file-commit")?rL.cL(e.repoPath,(0,tc.kA)(`${e.ref.ref}^`,e.ref.repoPath,{refType:"revision",name:`${e.ref.name}^`,message:e.ref.message})):Promise.resolve()}resetToCommit(e){return e.isAny("commit","file-commit")?rL.cL(e.repoPath,e.ref):Promise.resolve()}resetToTip(e){return e.is("branch")?rL.cL(e.repoPath,(0,tc.kA)(e.ref.ref,e.repoPath,{refType:"revision",name:e.ref.name})):Promise.resolve()}restore(e){return e instanceof ak.p?ae.VX(e.file,e.ref):Promise.resolve()}revealRepositoryInExplorer(e){if(e.is("repository"))return(0,ef.mP)(e.repo.uri)}revealWorktreeInExplorer(e){return"string"==typeof e?(0,ef.mP)(w.Uri.parse(e)):e.is("worktree")?(0,ef.mP)(e.worktree.uri):void 0}revert(e){return e.isAny("commit","file-commit")?rL.ru(e.repoPath,e.ref):Promise.resolve()}setAsDefault(e){return e.is("remote")?e.setAsDefault():Promise.resolve()}setBranchComparison(e,t){if(e.is("compare-branch"))return e.setComparisonType(t)}setShowRelativeDateMarkers(e){return v.H.updateEffective("views.showRelativeDateMarkers",e)}setContributorsStatistics(e){return v.H.updateEffective("views.showContributorsStatistics",e)}async stageFile(e){(e.isAny("commit-file","file-commit")||e.is("status-file"))&&(await this.container.git.staging(e.repoPath)?.stageFile(e.file.path),e.triggerChange())}async stageDirectory(e){e.is("folder")&&e.relativePath&&(await this.container.git.staging(e.repoPath)?.stageDirectory(e.relativePath),e.triggerChange())}async star(e){return e.isAny("branch","repository","repo-folder")?e.star():Promise.resolve()}switch(e){return rL.S_((0,au.K2)(e))}switchTo(e){return e instanceof ak.t?rL.S_(e.repoPath,e.is("branch")&&e.branch.current?void 0:e.ref):rL.S_((0,au.K2)(e))}async undoCommit(e){e.isAny("commit","file-commit")&&await ae.MQ(this.container,e.ref)}unsetAsDefault(e){return e.is("remote")?e.setAsDefault(!1):Promise.resolve()}async unstageFile(e){e.isAny("commit-file","file-commit","status-file")&&(await this.container.git.staging(e.repoPath)?.unstageFile(e.file.path),e.triggerChange())}async unstageDirectory(e){e.is("folder")&&e.relativePath&&(await this.container.git.staging(e.repoPath)?.unstageDirectory(e.relativePath),e.triggerChange())}async unstar(e){return e.isAny("branch","repository","repo-folder")?e.unstar():Promise.resolve()}async compareHeadWith(e){if(e instanceof ak.p)return this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,"HEAD");if(!(e instanceof ak.t))return Promise.resolve();let[t,i]=await ae.Di(this.container,e.repoPath,"HEAD",e.ref.ref);return this.container.views.searchAndCompare.compare(e.repoPath,t,i)}compareBranchWithHead(e){return e instanceof ak.t?this.container.views.searchAndCompare.compare(e.repoPath,e.ref,"HEAD"):Promise.resolve()}async compareWithMergeBase(e){if(!e.is("branch"))return Promise.resolve();let t=await this.container.git.branches(e.repoPath).getBranch();if(null==t)return;let i=await this.container.git.refs(e.repoPath).getMergeBase(t.ref,e.ref.ref);if(null!=i)return this.container.views.searchAndCompare.compare(e.repoPath,e.ref.ref,{ref:i,label:`${t.ref} (${(0,em.pV)(i)})`})}async openChangedFileDiffsWithMergeBase(e){if(!e.is("branch"))return Promise.resolve();let t=await this.container.git.branches(e.repoPath).getBranch();if(null==t)return;let i=await this.container.git.refs(e.repoPath).getMergeBase(t.ref,e.ref.ref);if(null!=i)return ae.$5(this.container,{repoPath:e.repoPath,lhs:i,rhs:e.ref.ref},{title:`Changes between ${t.ref} (${(0,em.pV)(i)}) ${R.EO.ArrowLeftRightLong} ${(0,em.pV)(e.ref.ref,{strings:{working:"Working Tree"}})}`})}compareWithUpstream(e){return e.is("branch")&&null!=e.branch.upstream?this.container.views.searchAndCompare.compare(e.repoPath,e.ref,e.branch.upstream.name):Promise.resolve()}compareWorkingWith(e){return e instanceof ak.p?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,""):e instanceof ak.t?this.container.views.searchAndCompare.compare(e.repoPath,"",e.ref):Promise.resolve()}async compareAncestryWithWorking(e){if(!e.is("branch"))return;let t=await this.container.git.branches(e.repoPath).getBranch();if(null==t)return;let i=await this.container.git.refs(e.repoPath).getMergeBase(t.ref,e.ref.ref);if(null!=i)return this.container.views.searchAndCompare.compare(e.repoPath,"",{ref:i,label:`${t.ref} (${(0,em.pV)(i)})`})}compareWithSelected(e){(e instanceof ak.t||e instanceof ak.p)&&this.container.views.searchAndCompare.compareWithSelected(e.repoPath,e.ref)}selectForCompare(e){(e instanceof ak.t||e instanceof ak.p)&&this.container.views.searchAndCompare.selectForCompare(e.repoPath,e.ref)}async compareFileWith(e,t,i,r,s){return null==r&&(r=await this.container.git.getWorkingUri(e,t)),(0,rB.RS)("gitlens.diffWith",{repoPath:e,lhs:{sha:i,uri:t},rhs:{sha:s,uri:r??t}})}compareFileWithSelected(e){if(null==this._selectedFile||!(e instanceof ak.p)||null==e.ref)return Promise.resolve();if(this._selectedFile.repoPath!==e.repoPath)return this.selectFileForCompare(e),Promise.resolve();let t=this._selectedFile;return this._selectedFile=void 0,(0,sT.o)("gitlens:views:canCompare:file",!1),this.compareFileWith(t.repoPath,t.uri,t.ref,e.uri,e.ref.ref)}_selectedFile;selectFileForCompare(e){e instanceof ak.p&&null!=e.ref&&(this._selectedFile={ref:e.ref.ref,repoPath:e.repoPath,uri:e.uri},(0,sT.o)("gitlens:views:canCompare:file",!0))}async openAllChanges(e,t,i){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let r=await e.getFilesComparison();if(!r?.files.length)return;return null!=r.title&&(t={...t,title:r.title}),ae.WD(this.container,r.files,{repoPath:r.repoPath,lhs:r.ref1,rhs:r.ref2},i,t)}if(e.isAny("commit","stash"))return ae.P3(this.container,e.commit,i,t)}openChanges(e){if(e.is("conflict-file")){(0,rB.RS)("gitlens.diffWith",{lhs:{sha:e.status.HEAD.ref,uri:e1.nk.fromFile(e.file,e.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:e1.nk.fromFile(e.file,e.repoPath)},repoPath:e.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}});return}if(!(e instanceof ak.p)&&!e.is("status-file"))return;let t=e.getCommand();if(t?.arguments!=null)switch(t.command){case"gitlens.diffWith":{let[e]=t.arguments;e.showOptions.preview=!1,(0,rB.RS)(t.command,e);break}case"gitlens.diffWithPrevious":{let[,e]=t.arguments;e.showOptions.preview=!1,(0,rB.Y0)(t.command,void 0,e);break}default:throw Error(`Unexpected command: ${t.command}`)}}async openAllChangesWithWorking(e,t,i){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let r=await e.getFilesComparison();if(!r?.files.length)return;return ae.fl(this.container,r.files,{repoPath:r.repoPath,ref:r.ref1||r.ref2},i,t)}if(e.isAny("commit","stash"))return ae.Qv(this.container,e.commit,i,t)}async mergeChangesWithWorking(e){if(!(e instanceof ak.p))return Promise.resolve();let t=this.container.git.getRepository(e.repoPath);if(null==t)return Promise.resolve();let i=await this.container.git.getBestRevisionUri(e.repoPath,e.file.path,e.ref.ref);if(null==i)return Promise.resolve();let r={uri:i,title:"Incoming",detail:` ${e.ref.name}`},[s,o]=await Promise.allSettled([t.git.refs().getMergeBase(e.ref.ref,"HEAD"),this.container.git.getWorkingUri(e.repoPath,e.uri)]),n=(0,eC.Ro)(o);if(null==n)return w.window.showWarningMessage("Unable to open the merge editor, no working file found"),Promise.resolve();let a={uri:n,title:"Current",detail:" Working Tree"},l=await this.container.git.getBestRevisionUri(e.repoPath,e.file.path,"HEAD");if(null!=l){let e=await t.git.branches().getBranch?.();a.uri=l,a.detail=` ${e?.name||"HEAD"}`}let c=(0,eC.Ro)(s),u=null!=c?await this.container.git.getBestRevisionUri(e.repoPath,e.file.path,c):void 0;return(0,ef.g6)({base:u??i,input1:r,input2:a,output:n})}async openChangesWithMergeBase(e){if(!e.is("results-file"))return Promise.resolve();let t=await this.container.git.refs(e.repoPath).getMergeBase(e.ref1,e.ref2||"HEAD");return null==t?Promise.resolve():ae.eX(e.file,{repoPath:e.repoPath,lhs:t,rhs:e.ref1},{preserveFocus:!0,preview:!0,lhsTitle:`${(0,T.P8)(e.uri.fsPath)} (Base)`})}async openChangesWithWorking(e){if(e.is("status-file"))return(0,rB.Y0)("gitlens.diffWithWorking",void 0,{uri:e.uri,showOptions:{preserveFocus:!0,preview:!0}});if(e.is("conflict-file"))return(0,rB.Y0)("gitlens.diffWithWorking",void 0,{uri:e.baseUri,showOptions:{preserveFocus:!0,preview:!0}});if(e.is("file-commit")&&e.commit.file?.hasConflicts){let t=await e.getConflictBaseUri();if(null!=t)return(0,rB.Y0)("gitlens.diffWithWorking",void 0,{uri:t,showOptions:{preserveFocus:!0,preview:!0}})}return e instanceof ak.p?ae.DD(e.file,{repoPath:e.repoPath,ref:e.is("results-file")&&""!==e.ref2?e.ref2:e.ref.ref}):Promise.resolve()}async openPreviousChangesWithWorking(e){return e instanceof ak.p?ae.DD(e.file,{repoPath:e.repoPath,ref:e.is("results-file")&&""!==e.ref2?e.ref1:`${e.ref.ref}^`}):Promise.resolve()}openFile(e,t){return e instanceof ak.p||e.isAny("conflict-file","status-file","file-history","line-history")?ae.Tq(e.uri,{preserveFocus:!0,preview:!1,...t}):Promise.resolve()}async openFiles(e){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return ae.Km(t.files,{repoPath:t.repoPath,ref:t.ref1||t.ref2})}if(e.isAny("commit","stash"))return ae.Km(e.commit)}async openOnlyChangedFiles(e){if(e.is("compare-results")||e.is("results-files")||e.is("tracking-status")||e.is("tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return ae.E9(e.view.container,t.files)}if(e.isAny("commit","stash"))return ae.E9(e.view.container,e.commit)}async openRevision(e,t){if(!e.isAny("commit-file","file-commit","results-file","stash-file","conflict-file","status-file"))return Promise.resolve();let i=(t={showOptions:{preserveFocus:!0,preview:!1},...t}).revisionUri;return null==i&&(i=e.isAny("results-file","conflict-file")?this.container.git.getRevisionUri(e.uri):e.commit.file?.status==="D"?this.container.git.getRevisionUri(await e.commit.getPreviousSha()??L.nB,e.commit.file.path,e.commit.repoPath):this.container.git.getRevisionUri(e.uri)),ae.vM(i,t.showOptions??{preserveFocus:!0,preview:!1})}async openRevisions(e,t){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return ae.m(t.files,{repoPath:t.repoPath,lhs:t.ref2,rhs:t.ref1})}if(e.isAny("commit","stash"))return ae.m(e.commit,t)}async setResultsCommitsFilter(e,t){if(!e?.isAny("compare-results","compare-branch"))return;let i=this.container.git.getRepository(e.repoPath);if(null!=i){if(t){let r=e.getState("filterCommits");if(null==r){let e=await i.git.config().getCurrentUser();r=null!=e?[e]:void 0}let s=await (0,a8.W)(this.container,i,"Filter Commits",i.virtual?"Choose a contributor to show commits from":"Choose contributors to show commits from",{appendReposToTitle:!0,clearButton:!0,multiselect:!i.virtual,picked:e=>r?.some(t=>ii(e,t))??!1});if(null==s)return;0===s.length?(t=!1,e.deleteState("filterCommits")):e.storeState("filterCommits",s)}else e.deleteState("filterCommits");e.triggerChange(!0)}}setResultsFilesFilter(e,t){e.is("results-files")&&(e.filter=t)}async associateIssueWithBranch(e){if(!e.is("branch"))return Promise.resolve();(0,rB.RS)("gitlens.associateIssueWithBranch",{command:"associateIssueWithBranch",branch:e.ref,source:"view"})}async generateChangelog(e){e.is("results-commits")&&await (0,aX.D)(this.container,(0,r1.R)(()=>e.getChangesForChangelog()),{source:"view",detail:"comparison"},{progress:{location:w.ProgressLocation.Notification}})}async generateChangelogFrom(e){(e.is("branch")||e.is("tag"))&&await (0,rB.RS)("gitlens.ai.generateChangelog",{repoPath:e.repoPath,head:e.ref,source:{source:"view",detail:e.is("branch")?"branch":"tag"}})}};function lo(e,t,i,r){return(0,rB.Lb)(e,(...e)=>{if(r?.args!=null&&(e=r.args(...e)),r?.multiselect){let[s,o,...n]=e;if(s instanceof au.eu&&Array.isArray(o)&&o[0]instanceof au.eu){let e=o.filter(e=>e?.constructor===s.constructor);return"sequential"===r.multiselect?(e.includes(s)||e.splice(0,0,s),(0,oq.CX)(t,e.map(e=>[e,...n]),i)):t.apply(i,[s,e,...n])}}return t.apply(i,e)},i)}li([lr("gitlens.views.copy",{args:(e,t)=>[e,t,"text"]}),lr("gitlens.views.copyAsMarkdown",{args:(e,t)=>[e,t,"markdown"]}),(0,ew.Rm)()],ViewCommands.prototype,"copyNode",1),li([lr("gitlens.views.copyUrl",{args:(e,t)=>[e,t,!0]}),lr("gitlens.views.copyUrl.multi",{args:(e,t)=>[e,t,!0],multiselect:!0}),lr("gitlens.views.openUrl",{args:(e,t)=>[e,t,!1]}),lr("gitlens.views.openUrl.multi",{args:(e,t)=>[e,t,!1],multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"copyOrOpenNodeUrls",1),li([lr("gitlens.views.copyRemoteCommitUrl",{args:(e,t)=>[e,t,!0]}),lr("gitlens.views.copyRemoteCommitUrl.multi",{args:(e,t)=>[e,t,!0],multiselect:!0}),lr("gitlens.views.openCommitOnRemote",{args:(e,t)=>[e,t,!1]}),lr("gitlens.views.openCommitOnRemote.multi",{args:(e,t)=>[e,t,!1],multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"copyOrOpenCommitsOnRemote",1),li([lr("gitlens.views.collapseNode"),(0,ew.Rm)()],ViewCommands.prototype,"collapseNode",1),li([lr("gitlens.views.dismissNode"),(0,ew.Rm)()],ViewCommands.prototype,"dismissNode",1),li([lr("gitlens.views.editNode"),(0,ew.Rm)()],ViewCommands.prototype,"editNode",1),li([lr("gitlens.views.expandNode"),(0,ew.Rm)()],ViewCommands.prototype,"expandNode",1),li([lr("gitlens.views.loadMoreChildren"),(0,ew.Rm)()],ViewCommands.prototype,"loadMoreChildren",1),li([lr("gitlens.views.loadAllChildren"),(0,ew.Rm)()],ViewCommands.prototype,"loadAllChildren",1),li([lr("gitlens.views.refreshNode",{multiselect:"sequential"}),(0,ew.Rm)()],ViewCommands.prototype,"refreshNode",1),li([lr("gitlens.views.addAuthors"),(0,ew.Rm)()],ViewCommands.prototype,"addAuthors",1),li([lr("gitlens.views.addAuthor"),lr("gitlens.views.addAuthor.multi",{multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"addAuthor",1),li([lr("gitlens.views.addRemote"),(0,ew.Rm)()],ViewCommands.prototype,"addRemote",1),li([lr("gitlens.views.addPullRequestRemote"),(0,ew.Rm)()],ViewCommands.prototype,"addPullRequestRemote",1),li([lr("gitlens.views.applyChanges"),(0,ew.Rm)()],ViewCommands.prototype,"applyChanges",1),li([lr("gitlens.views.stash.apply"),(0,ew.Rm)()],ViewCommands.prototype,"applyStash",1),li([lr("gitlens.views.browseRepoAtRevision"),lr("gitlens.views.browseRepoAtRevisionInNewWindow",{args:e=>[e,{openInNewWindow:!0}]}),lr("gitlens.views.browseRepoBeforeRevision",{args:e=>[e,{before:!0}]}),lr("gitlens.views.browseRepoBeforeRevisionInNewWindow",{args:e=>[e,{before:!0,openInNewWindow:!0}]}),(0,ew.Rm)()],ViewCommands.prototype,"browseRepoAtRevision",1),li([lr("gitlens.views.cherryPick"),lr("gitlens.views.cherryPick.multi",{multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"cherryPick",1),li([lr("gitlens.views.clearComparison"),(0,ew.Rm)()],ViewCommands.prototype,"clearComparison",1),li([lr("gitlens.views.clearReviewed"),(0,ew.Rm)()],ViewCommands.prototype,"clearReviewed",1),li([lr("gitlens.views.closeRepository"),(0,ew.Rm)()],ViewCommands.prototype,"closeRepository",1),li([lr("gitlens.views.title.createBranch",{args:()=>[]}),lr("gitlens.views.createBranch"),(0,ew.Rm)()],ViewCommands.prototype,"createBranch",1),li([lr("gitlens.views.createPullRequest"),(0,ew.Rm)()],ViewCommands.prototype,"createPullRequest",1),li([lr("gitlens.views.title.createTag",{args:()=>[]}),lr("gitlens.views.createTag"),(0,ew.Rm)()],ViewCommands.prototype,"createTag",1),li([lr("gitlens.views.title.createWorktree",{args:()=>[]}),lr("gitlens.views.createWorktree"),(0,ew.Rm)()],ViewCommands.prototype,"createWorktree",1),li([lr("gitlens.views.deleteBranch"),lr("gitlens.views.deleteBranch.multi",{multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"deleteBranch",1),li([lr("gitlens.views.stash.delete"),lr("gitlens.views.stash.delete.multi",{multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"deleteStash",1),li([lr("gitlens.views.stash.rename"),(0,ew.Rm)()],ViewCommands.prototype,"renameStash",1),li([lr("gitlens.views.deleteTag"),lr("gitlens.views.deleteTag.multi",{multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"deleteTag",1),li([lr("gitlens.views.deleteWorktree"),lr("gitlens.views.deleteWorktree.multi",{multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"deleteWorktree",1),li([lr("gitlens.views.fetch"),(0,ew.Rm)()],ViewCommands.prototype,"fetch",1),li([lr("gitlens.views.highlightChanges"),(0,ew.Rm)()],ViewCommands.prototype,"highlightChanges",1),li([lr("gitlens.views.highlightRevisionChanges"),(0,ew.Rm)()],ViewCommands.prototype,"highlightRevisionChanges",1),li([lr("gitlens.views.mergeBranchInto"),(0,ew.Rm)()],ViewCommands.prototype,"merge",1),li([lr("gitlens.views.openBranchOnRemote"),lr("gitlens.views.openBranchOnRemote.multi",{multiselect:"sequential"}),(0,ew.Rm)()],ViewCommands.prototype,"openBranchOnRemote",1),li([lr("gitlens.views.openInTerminal"),(0,ew.Rm)()],ViewCommands.prototype,"openInTerminal",1),li([lr("gitlens.views.openInIntegratedTerminal"),(0,ew.Rm)()],ViewCommands.prototype,"openInIntegratedTerminal",1),li([lr("gitlens.views.abortPausedOperation"),(0,ew.Rm)()],ViewCommands.prototype,"abortPausedOperation",1),li([lr("gitlens.views.continuePausedOperation"),(0,ew.Rm)()],ViewCommands.prototype,"continuePausedOperation",1),li([lr("gitlens.views.skipPausedOperation"),(0,ew.Rm)()],ViewCommands.prototype,"skipPausedOperation",1),li([lr("gitlens.views.openPausedOperationInRebaseEditor"),(0,ew.Rm)()],ViewCommands.prototype,"openPausedOperationInRebaseEditor",1),li([lr("gitlens.views.openPullRequest"),(0,ew.Rm)()],ViewCommands.prototype,"openPullRequest",1),li([lr("gitlens.views.openPullRequestChanges"),(0,ew.Rm)()],ViewCommands.prototype,"openPullRequestChanges",1),li([lr("gitlens.views.openPullRequestComparison"),(0,ew.Rm)()],ViewCommands.prototype,"openPullRequestComparison",1),li([lr("gitlens.views.draft.open"),(0,ew.Rm)()],ViewCommands.prototype,"openDraft",1),li([lr("gitlens.views.draft.openOnWeb"),(0,ew.Rm)()],ViewCommands.prototype,"openDraftOnWeb",1),li([lr("gitlens.views.openWorktree"),lr("gitlens.views.openWorktreeInNewWindow",{args:e=>[e,void 0,{location:"newWindow"}]}),lr("gitlens.views.openWorktreeInNewWindow.multi",{args:(e,t)=>[e,t,{location:"newWindow"}],multiselect:!0}),(0,ew.Rm)()],ViewCommands.prototype,"openWorktree",1),li([lr("gitlens.views.openInWorktree"),(0,ew.Rm)()],ViewCommands.prototype,"openInWorktree",1),li([lr("gitlens.views.pruneRemote"),(0,ew.Rm)()],ViewCommands.prototype,"pruneRemote",1),li([lr("gitlens.views.removeRemote"),(0,ew.Rm)()],ViewCommands.prototype,"removeRemote",1),li([lr("gitlens.views.publishBranch"),(0,ew.Rm)()],ViewCommands.prototype,"publishBranch",1),li([lr("gitlens.views.publishRepository"),(0,ew.Rm)()],ViewCommands.prototype,"publishRepository",1),li([lr("gitlens.views.pull"),(0,ew.Rm)()],ViewCommands.prototype,"pull",1),li([lr("gitlens.views.push",{args:e=>[e,!1]}),lr("gitlens.views.pushWithForce",{args:e=>[e,!0]}),(0,ew.Rm)()],ViewCommands.prototype,"push",1),li([lr("gitlens.views.pushToCommit"),(0,ew.Rm)()],ViewCommands.prototype,"pushToCommit",1),li([lr("gitlens.views.rebaseOntoBranch"),lr("gitlens.views.rebaseOntoCommit"),(0,ew.Rm)()],ViewCommands.prototype,"rebase",1),li([lr("gitlens.views.rebaseOntoUpstream"),(0,ew.Rm)()],ViewCommands.prototype,"rebaseToRemote",1),li([lr("gitlens.views.renameBranch"),(0,ew.Rm)()],ViewCommands.prototype,"renameBranch",1),li([lr("gitlens.views.resetCommit"),(0,ew.Rm)()],ViewCommands.prototype,"resetCommit",1),li([lr("gitlens.views.resetToCommit"),(0,ew.Rm)()],ViewCommands.prototype,"resetToCommit",1),li([lr("gitlens.views.resetToTip"),(0,ew.Rm)()],ViewCommands.prototype,"resetToTip",1),li([lr("gitlens.views.restore"),(0,ew.Rm)()],ViewCommands.prototype,"restore",1),li([lr("gitlens.views.revealRepositoryInExplorer"),(0,ew.Rm)()],ViewCommands.prototype,"revealRepositoryInExplorer",1),li([lr("gitlens.views.revealWorktreeInExplorer"),(0,ew.Rm)()],ViewCommands.prototype,"revealWorktreeInExplorer",1),li([lr("gitlens.views.revert"),(0,ew.Rm)()],ViewCommands.prototype,"revert",1),li([lr("gitlens.views.setAsDefault"),(0,ew.Rm)()],ViewCommands.prototype,"setAsDefault",1),li([lr("gitlens.views.setBranchComparisonToWorking",{args:e=>[e,"working"]}),lr("gitlens.views.setBranchComparisonToBranch",{args:e=>[e,"branch"]}),(0,ew.Rm)()],ViewCommands.prototype,"setBranchComparison",1),li([lr("gitlens.views.setShowRelativeDateMarkersOn",{args:()=>[!0]}),lr("gitlens.views.setShowRelativeDateMarkersOff",{args:()=>[!1]}),(0,ew.Rm)()],ViewCommands.prototype,"setShowRelativeDateMarkers",1),li([lr("gitlens.views.setContributorsStatisticsOff",{args:()=>[!1]}),lr("gitlens.views.setContributorsStatisticsOn",{args:()=>[!0]}),(0,ew.Rm)()],ViewCommands.prototype,"setContributorsStatistics",1),li([lr("gitlens.views.stageFile"),(0,ew.Rm)()],ViewCommands.prototype,"stageFile",1),li([lr("gitlens.views.stageDirectory"),(0,ew.Rm)()],ViewCommands.prototype,"stageDirectory",1),li([lr("gitlens.views.star"),lr("gitlens.views.star.multi",{multiselect:"sequential"}),(0,ew.Rm)()],ViewCommands.prototype,"star",1),li([lr("gitlens.views.switchToAnotherBranch"),(0,ew.Rm)()],ViewCommands.prototype,"switch",1),li([lr("gitlens.views.switchToBranch"),lr("gitlens.views.switchToCommit"),lr("gitlens.views.switchToTag"),(0,ew.Rm)()],ViewCommands.prototype,"switchTo",1),li([lr("gitlens.views.undoCommit"),(0,ew.Rm)()],ViewCommands.prototype,"undoCommit",1),li([lr("gitlens.views.unsetAsDefault"),(0,ew.Rm)()],ViewCommands.prototype,"unsetAsDefault",1),li([lr("gitlens.views.unstageFile"),(0,ew.Rm)()],ViewCommands.prototype,"unstageFile",1),li([lr("gitlens.views.unstageDirectory"),(0,ew.Rm)()],ViewCommands.prototype,"unstageDirectory",1),li([lr("gitlens.views.unstar"),lr("gitlens.views.unstar.multi",{multiselect:"sequential"}),(0,ew.Rm)()],ViewCommands.prototype,"unstar",1),li([lr("gitlens.views.compareWithHead"),(0,ew.Rm)()],ViewCommands.prototype,"compareHeadWith",1),li([lr("gitlens.views.compareBranchWithHead"),(0,ew.Rm)()],ViewCommands.prototype,"compareBranchWithHead",1),li([lr("gitlens.views.compareWithMergeBase"),(0,ew.Rm)()],ViewCommands.prototype,"compareWithMergeBase",1),li([lr("gitlens.views.openChangedFileDiffsWithMergeBase"),(0,ew.Rm)()],ViewCommands.prototype,"openChangedFileDiffsWithMergeBase",1),li([lr("gitlens.views.compareWithUpstream"),(0,ew.Rm)()],ViewCommands.prototype,"compareWithUpstream",1),li([lr("gitlens.views.compareWithWorking"),(0,ew.Rm)()],ViewCommands.prototype,"compareWorkingWith",1),li([lr("gitlens.views.compareAncestryWithWorking"),(0,ew.Rm)()],ViewCommands.prototype,"compareAncestryWithWorking",1),li([lr("gitlens.views.compareWithSelected"),(0,ew.Rm)()],ViewCommands.prototype,"compareWithSelected",1),li([lr("gitlens.views.selectForCompare"),(0,ew.Rm)()],ViewCommands.prototype,"selectForCompare",1),li([lr("gitlens.views.compareFileWithSelected"),(0,ew.Rm)()],ViewCommands.prototype,"compareFileWithSelected",1),li([lr("gitlens.views.selectFileForCompare"),(0,ew.Rm)()],ViewCommands.prototype,"selectFileForCompare",1),li([lr("gitlens.views.openChangedFileDiffs",{args:(e,t)=>[e,t]}),lr("gitlens.views.openChangedFileDiffsIndividually",{args:(e,t)=>[e,t,!0]}),(0,ew.Rm)()],ViewCommands.prototype,"openAllChanges",1),li([lr("gitlens.views.openChanges"),(0,ew.Rm)()],ViewCommands.prototype,"openChanges",1),li([lr("gitlens.views.openChangedFileDiffsWithWorking",{args:(e,t)=>[e,t]}),lr("gitlens.views.openChangedFileDiffsWithWorkingIndividually",{args:(e,t)=>[e,t,!0]}),(0,ew.Rm)()],ViewCommands.prototype,"openAllChangesWithWorking",1),li([lr("gitlens.views.mergeChangesWithWorking"),(0,ew.Rm)()],ViewCommands.prototype,"mergeChangesWithWorking",1),li([lr("gitlens.views.openChangesWithMergeBase"),(0,ew.Rm)()],ViewCommands.prototype,"openChangesWithMergeBase",1),li([lr("gitlens.views.openChangesWithWorking"),(0,ew.Rm)()],ViewCommands.prototype,"openChangesWithWorking",1),li([lr("gitlens.views.openPreviousChangesWithWorking"),(0,ew.Rm)()],ViewCommands.prototype,"openPreviousChangesWithWorking",1),li([lr("gitlens.views.openFile"),(0,ew.Rm)()],ViewCommands.prototype,"openFile",1),li([lr("gitlens.views.openChangedFiles"),(0,ew.Rm)()],ViewCommands.prototype,"openFiles",1),li([lr("gitlens.views.openOnlyChangedFiles"),(0,ew.Rm)()],ViewCommands.prototype,"openOnlyChangedFiles",1),li([lr("gitlens.views.openFileRevision"),(0,ew.Rm)()],ViewCommands.prototype,"openRevision",1),li([lr("gitlens.views.openChangedFileRevisions"),(0,ew.Rm)()],ViewCommands.prototype,"openRevisions",1),li([lr("gitlens.views.setResultsCommitsFilterAuthors",{args:e=>[e,!0]}),lr("gitlens.views.setResultsCommitsFilterOff",{args:e=>[e,!1]}),(0,ew.Rm)()],ViewCommands.prototype,"setResultsCommitsFilter",1),li([lr("gitlens.views.setResultsFilesFilterOnLeft",{args:e=>[e,aL.U.Left]}),lr("gitlens.views.setResultsFilesFilterOnRight",{args:e=>[e,aL.U.Right]}),lr("gitlens.views.setResultsFilesFilterOff",{args:e=>[e,void 0]}),(0,ew.Rm)()],ViewCommands.prototype,"setResultsFilesFilter",1),li([lr("gitlens.views.associateIssueWithBranch"),(0,ew.Rm)()],ViewCommands.prototype,"associateIssueWithBranch",1),li([lr("gitlens.views.ai.generateChangelog"),(0,ew.Rm)()],ViewCommands.prototype,"generateChangelog",1),li([lr("gitlens.views.ai.generateChangelogFrom"),(0,ew.Rm)()],ViewCommands.prototype,"generateChangelogFrom",1);var ln=Object.defineProperty,la=Object.getOwnPropertyDescriptor,ll=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?la(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ln(t,i,o),o};let BranchesRepositoryNode=class BranchesRepositoryNode extends aw.P{async getChildren(){return null==this.child&&(this.child=new BranchesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return!!(this.view.config.showStashes&&e.changed(e4.Z_.Stash,e4.Ti.Any))||e.changed(e4.Z_.Config,e4.Z_.Heads,e4.Z_.Index,e4.Z_.Remotes,e4.Z_.RemoteProviders,e4.Z_.PausedOperationStatus,e4.Z_.Unknown,e4.Ti.Any)}};let BranchesViewNode=class BranchesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading branches...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No branches could be found.",[];v.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,ap.Y)(e)).keys()]);let t=await (0,ig.Ao)(e,{includeDefault:!0});this.updateContext({worktreesByBranch:t?.size?t:void 0});let i=1===e.length;this.children=e.map(e=>new BranchesRepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e,i))}if(1===this.children.length){let[e]=this.children,{showRemoteBranches:t}=this.view.config,i=t?(await e.repo.git.remotes().getDefaultRemote())?.name:void 0,r=await e.repo.git.branches().getBranches({filter:e=>!e.remote||t&&null!=i&&e.getRemoteName()===i});return 0===r.values.length?(this.view.message="No branches could be found.",e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(r.values.length),e.getChildren())}return this.children}getTreeItem(){return new w.TreeItem("Branches",w.TreeItemCollapsibleState.Expanded)}};let BranchesView=class BranchesView extends aC.DN{configKey="branches";constructor(e,t){super(e,"branches","Branches","branchesView",t)}get canReveal(){return this.config.reveal||!v.H.get("views.repositories.showBranches")}get canSelectMany(){return v.H.get("views.multiselect")}getRoot(){return new BranchesViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches"),this.refresh(!0)),this),lo(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),lo(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),lo(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),lo(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),lo(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),lo(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this),lo(this.getQualifiedCommand("setShowRemoteBranchesOn"),()=>this.setShowRemoteBranches(!0),this),lo(this.getQualifiedCommand("setShowRemoteBranchesOff"),()=>this.setShowRemoteBranches(!1),this),lo(this.getQualifiedCommand("setShowStashesOn"),()=>this.setShowStashes(!0),this),lo(this.getQualifiedCommand("setShowStashesOff"),()=>this.setShowStashes(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"sortBranchesBy")||!!v.H.changed(e,"sortRepositoriesBy"))&&!0}async findBranch(e,t){if(e.remote)return;let{repoPath:i}=e;return this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:4,canTraverse:e=>e instanceof BranchesViewNode||(e instanceof BranchesRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.branches(e.repoPath).getBranchesWithCommits([e.ref],void 0,(0,O.WM)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:async t=>t instanceof BranchesViewNode||(t instanceof BranchesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t})}async revealBranch(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealCommit(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof aw.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof BranchesViewNode||e instanceof aw.P});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return v.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return v.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await v.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await v.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}setShowRemoteBranches(e){return v.H.updateEffective(`views.${this.configKey}.showRemoteBranches`,e)}setShowStashes(e){return v.H.updateEffective(`views.${this.configKey}.showStashes`,e)}};ll([(0,tp.G)(()=>"")],BranchesView.prototype,"revealBranch",1),ll([(0,tp.G)(()=>"")],BranchesView.prototype,"revealCommit",1),ll([(0,tp.G)(()=>"")],BranchesView.prototype,"revealRepository",1);var lc=Object.defineProperty,lu=Object.getOwnPropertyDescriptor,lh=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lu(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lc(t,i,o),o};let CommitsRepositoryNode=class CommitsRepositoryNode extends aw.P{async getChildren(){if(null==this.child){let e=await this.repo.git.branches().getBranch();if(null==e)return this.view.message="No commits could be found.",[];this.view.message=void 0;let t=this.view.state.filterCommits.get(this.repo.id);this.child=new BranchNode(this.uri,this.view,this.splatted?this.parent??this:this,this.repo,e,!0,{expand:!0,limitCommits:!this.splatted,showComparison:this.view.config.showBranchComparison,showStatusDecorationOnly:!0,showMergeCommits:!this.view.state.hideMergeCommits,showStashes:this.view.config.showStashes,showTracking:!0,authors:t})}return this.child.getChildren()}async refresh(e=!1){e?this.child=void 0:this.parent?.triggerChange(!1),await this.ensureSubscription()}async subscribe(){let e=await this.repo?.getLastFetched()??0,t=(0,ab.u)(e);return 0!==e&&t>0?w.Disposable.from(await super.subscribe(),(0,oq.gC)(()=>{t!==(0,ab.u)(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)},t)):super.subscribe()}changed(e){return!!(this.view.config.showStashes&&e.changed(e4.Z_.Stash,e4.Ti.Any))||e.changed(e4.Z_.Config,e4.Z_.Heads,e4.Z_.Index,e4.Z_.Remotes,e4.Z_.RemoteProviders,e4.Z_.PausedOperationStatus,e4.Z_.Unknown,e4.Ti.Any)}};lh([(0,tp.G)(),(0,ew.Yz)()],CommitsRepositoryNode.prototype,"refresh",1),lh([(0,ew.Yz)()],CommitsRepositoryNode.prototype,"subscribe",1);let CommitsViewNode=class CommitsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading commits...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No commits could be found.",[];let t=1===e.length;this.children=e.map(e=>new CommitsRepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e,t,{showBranchAndLastFetched:!0}))}let e=[];if(v.H.get("plusFeatures.enabled")&&!this.view.grouped&&null==this.view.container.usage.get("graphView:shown")&&null==this.view.container.usage.get("graphWebview:shown")&&e.push(new aI.RK(this.view,this,(0,rB.gu)("gitlens.showGraph","Show Commit Graph"),"Visualize commits on the Commit Graph",void 0,"Visualize commits on the Commit Graph",new w.ThemeIcon("gitlens-graph"))),1===this.children.length){let[t]=this.children,i=await t.repo.git.branches().getBranch();if(null!=i){let e=[];i.rebasing?e.push(`${i.name} (Rebasing)`):e.push(i.name);let t=i.getTrackingStatus();t&&e.push(t),this.view.description=`${this.view.grouped?`${this.view.name.toLocaleLowerCase()}: `:""}${e.join(` ${R.EO.Dot} `)}`}e.push(...await t.getChildren())}else e.push(...this.children);return e}getTreeItem(){return new w.TreeItem("Commits",w.TreeItemCollapsibleState.Expanded)}};let CommitsView=class CommitsView extends aC.DN{configKey="commits";constructor(e,t){super(e,"commits","Commits","commitsView",t),this.disposables.push(e.usage.onDidChange(this.onUsageChanged,this))}onUsageChanged(e){(null==e||"graphView:shown"===e.key||"graphWebview:shown"===e.key)&&this.refresh()}get canReveal(){return this.config.reveal||!v.H.get("views.repositories.showCommits")}get canSelectMany(){return v.H.get("views.multiselect")}_state={filterCommits:new Map};get state(){return this._state}getRoot(){return new CommitsViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","status","tags"),this.refresh(!0)),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setCommitsFilterAuthors"),e=>this.setCommitsFilter(e,!0),this),lo(this.getQualifiedCommand("setCommitsFilterOff"),e=>this.setCommitsFilter(e,!1),this),lo(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),lo(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),lo(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),lo(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),lo(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),lo(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this),lo(this.getQualifiedCommand("setShowStashesOn"),()=>this.setShowStashes(!0),this),lo(this.getQualifiedCommand("setShowStashesOff"),()=>this.setShowStashes(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"plusFeatures.enabled")||!!v.H.changed(e,"sortRepositoriesBy"))&&!0}async findCommit(e,t){let{repoPath:i}=e,r=this.container.git.branches(e.repoPath),s=await r.getBranch();if(null!=s&&(await r.getBranchesWithCommits([e.ref],s.name,{commitDate:(0,O.WM)(e)?e.committer.date:void 0})).length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:2,canTraverse:async t=>{if(t instanceof CommitsViewNode){let i=await t.getSplattedChild?.();return i instanceof CommitsRepositoryNode&&(i=await i.getSplattedChild?.())instanceof BranchNode&&await i.loadMore({until:e.ref}),!0}if(t instanceof CommitsRepositoryNode&&t.repoPath===i){let i=await t.getSplattedChild?.();if(i instanceof BranchNode)return await i.loadMore({until:e.ref}),!0}return t instanceof BranchTrackingStatusNode&&t.repoPath===i},token:t})}async revealCommit(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof aw.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof CommitsViewNode||e instanceof aw.P});return void 0!==i&&await this.reveal(i,t),i}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}async setCommitsFilter(e,t){let i;if(null!=e)if(e.is("repo-folder"))i=e.repo;else{let t=e;do if(t=t.getParent(),t?.is("repo-folder")){i=t.repo;break}while(null!=t)}if(t){if(null==(i??=await (0,n$.t6)("Filter Commits","Choose a repository")))return;let e=this.state.filterCommits.get(i.id);if(null==e){let t=await i.git.config().getCurrentUser();e=null!=t?[t]:void 0}let r=await (0,a8.W)(this.container,i,"Filter Commits",i.virtual?"Choose a contributor to show commits from":"Choose contributors to show commits from",{appendReposToTitle:!0,clearButton:!0,multiselect:!i.virtual,picked:t=>e?.some(e=>ii(t,e))??!1});if(null==r)return;0===r.length?(t=!1,this.state.filterCommits.delete(i.id)):this.state.filterCommits.set(i.id,r)}else null!=i?this.state.filterCommits.delete(i.id):this.state.filterCommits.clear();(0,sT.o)("gitlens:views:commits:filtered",0!==this.state.filterCommits.size),this.refresh(!0)}setShowMergeCommits(e){(0,sT.o)("gitlens:views:commits:hideMergeCommits",!e),this.state.hideMergeCommits=!e,this.refresh(!0)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return v.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}async setShowBranchPullRequest(e){await v.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await v.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}setShowStashes(e){return v.H.updateEffective(`views.${this.configKey}.showStashes`,e)}};lh([(0,tp.G)(()=>"")],CommitsView.prototype,"revealCommit",1),lh([(0,tp.G)(()=>"")],CommitsView.prototype,"revealRepository",1);var ld=i(909),lp=i(4488),lg=Object.defineProperty,lm=Object.getOwnPropertyDescriptor,lf=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lm(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lg(t,i,o),o};let ContributorsRepositoryNode=class ContributorsRepositoryNode extends aw.P{async getChildren(){return null==this.child&&(this.child=new lp.j(this.uri,this.view,this,this.repo,{showMergeCommits:!this.view.state.hideMergeCommits})),this.child.getChildren()}async subscribe(){return w.Disposable.from(await super.subscribe(),(0,ih.A0)(e=>this.child?.updateAvatar(e.email)))}changed(e){return e.changed(e4.Z_.Config,e4.Z_.Heads,e4.Z_.Remotes,e4.Z_.Unknown,e4.Ti.Any)}};lf([(0,ew.Yz)()],ContributorsRepositoryNode.prototype,"subscribe",1);let ContributorsViewNode=class ContributorsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading contributors...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No contributors could be found.",[];v.H.get("views.collapseWorktreesWhenPossible")&&v.H.get("views.contributors.showAllBranches")&&(e=[...(await (0,ap.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new ContributorsRepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.getChildren();return 0===t.length?(this.view.message="No contributors could be found.",e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(t.length),t)}return this.children}getTreeItem(){return new w.TreeItem("Contributors",w.TreeItemCollapsibleState.Expanded)}};let ContributorsView=class ContributorsView extends aC.DN{configKey="contributors";constructor(e,t){super(e,"contributors","Contributors","contributorsView",t),(0,sT.o)("gitlens:views:contributors:hideMergeCommits",!0)}get canReveal(){return this.config.reveal||!v.H.get("views.repositories.showContributors")}get canSelectMany(){return v.H.get("views.multiselect")}_state={hideMergeCommits:!0};get state(){return this._state}getRoot(){return new ContributorsViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("contributors"),this.refresh(!0)),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setShowAllBranchesOn"),()=>this.setShowAllBranches(!0),this),lo(this.getQualifiedCommand("setShowAllBranchesOff"),()=>this.setShowAllBranches(!1),this),lo(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),lo(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),lo(this.getQualifiedCommand("setShowStatisticsOn"),()=>this.setShowStatistics(!0),this),lo(this.getQualifiedCommand("setShowStatisticsOff"),()=>this.setShowStatistics(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"sortContributorsBy")||!!v.H.changed(e,"sortRepositoriesBy")||!!v.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}findContributor(e,t){let{repoPath:i,username:r,email:s,name:o}=e;return this.findNode(e=>e instanceof ld.W&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===o,{maxDepth:2,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof ContributorsRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof aw.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof aw.P});return void 0!==i&&await this.reveal(i,t),i}async revealContributor(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing contributor '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAllBranches(e){return v.H.updateEffective(`views.${this.configKey}.showAllBranches`,e)}setShowMergeCommits(e){(0,sT.o)("gitlens:views:contributors:hideMergeCommits",!e),this.state.hideMergeCommits=!e,this.refresh(!0)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowStatistics(e){return v.H.updateEffective(`views.${this.configKey}.showStatistics`,e)}};lf([(0,tp.G)(()=>"")],ContributorsView.prototype,"revealRepository",1),lf([(0,tp.G)(()=>"")],ContributorsView.prototype,"revealContributor",1);var lw=i(6875);let GroupingNode=class GroupingNode extends au.eu{constructor(e,t,i,r=w.TreeItemCollapsibleState.Expanded,s,o,n,a){super("grouping",e1.Bd,e),this.label=t,this.childrenOrFn=i,this.collapsibleState=r,this.description=s,this.tooltip=o,this.iconPath=n,this.contextValue=a}getChildren(){return"function"==typeof this.childrenOrFn?this.childrenOrFn():this.childrenOrFn}getTreeItem(){let e=new w.TreeItem(this.label,this.collapsibleState);return e.id=this.id,e.contextValue=this.contextValue??au.U0.Grouping,e.description=this.description,e.tooltip=this.tooltip,e.iconPath=this.iconPath,e}};var lv=Object.defineProperty,ly=Object.getOwnPropertyDescriptor;let DraftsViewNode=class DraftsViewNode extends av.l{constructor(e){super("drafts",e1.Bd,e)}async getChildren(){if(null==this.children){let e=[];try{let t=await this.view.container.drafts.getDrafts();t?.sort((e,t)=>t.updatedAt.getTime()-e.updatedAt.getTime());let i=(0,tm.fA)(t,this.calcDraftGroupKey.bind(this),e=>new lw.e(this.uri,this.view,this,e)),r=i.get("mine"),s=i.get("shared");r?.length&&!s?.length?e.push(...r):(r?.length&&e.push(new GroupingNode(this.view,"Created by Me",r)),s?.length&&e.push(new GroupingNode(this.view,"Shared with Me",s)))}catch(e){if(!(e instanceof ik.WT))throw e}this.children=e}return this.children}getTreeItem(){return new w.TreeItem("Drafts",w.TreeItemCollapsibleState.Expanded)}calcDraftGroupKey(e){return"suggested_pr_change"===e.type?"pr_suggestion":e.isMine?"mine":"shared"}};let DraftsView=class DraftsView extends aC.DN{configKey="drafts";_disposable;constructor(e){super(e,"drafts","Cloud Patches","draftsView"),this.description=R.WZ}dispose(){this._disposable?.dispose(),super.dispose()}getRoot(){return new DraftsViewNode(this)}onVisibilityChanged(e){null==this._disposable&&(this._disposable=w.Disposable.from(this.container.subscription.onDidChange(()=>this.refresh(!0),this))),super.onVisibilityChanged(e)}async show(e){if(await (0,o1.ZQ)())return super.show(e)}get canReveal(){return!1}registerCommands(){return[lo(this.getQualifiedCommand("info"),()=>(0,rB.RS)("gitlens.openWalkthrough",{step:"streamline-collaboration",source:{source:"cloud-patches",detail:"info"}}),this),lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),lo(this.getQualifiedCommand("create"),async()=>{await (0,rB.RS)("gitlens.createCloudPatch"),this.ensureRoot().triggerChange(!0)},this),lo(this.getQualifiedCommand("delete"),async e=>{let t={title:"Delete"};await w.window.showInformationMessage(`Are you sure you want to delete Cloud Patch '${e.draft.title}'?`,{modal:!0},t,{title:"Cancel",isCloseAffordance:!0})===t&&(await this.container.drafts.deleteDraft(e.draft.id),e.getParent()?.triggerChange(!0))},this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}async findDraft(e,t){return this.findNode(t=>t.draft?.id===e.id,{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof DraftsViewNode||e instanceof GroupingNode,token:t})}async revealDraft(e,t){let i=await this.findDraft(e);if(null!=i)return await this.ensureRevealNode(i,t),i}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}};async function lb(e,t){if(null==t)return;let i=(0,e1.t5)(t)?t:await e1.nk.fromUri(t);if(null!=i.sha){let r=await e.git.getWorkingUri(i.repoPath,i);null!=r&&(t=r)}return t}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ly(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lv(t,i,o)})([(0,tp.G)(()=>"")],DraftsView.prototype,"revealDraft",1);var lC=i(2436),lk=Object.defineProperty,lS=Object.getOwnPropertyDescriptor,lR=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),lP=e=>{throw TypeError(e)},lA=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lS(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lk(t,i,o),o},lI=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&lP("Object expected"),i&&(r=t[lR("asyncDispose")]),void 0===r&&(r=t[lR("dispose")],i&&(s=r)),"function"!=typeof r&&lP("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},lD=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let FileHistoryNode=class FileHistoryNode extends ag.Y{constructor(e,t,i,r,s){super("file-history",e,t,i),this.parent=i,this.folder=r,this.branch=s,null!=s&&this.updateContext({branch:s}),this._uniqueId=(0,au.pF)(`${this.type}+${e.toString()}`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;let e=[];if(null==this.uri.repoPath)return e;let t=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[i,r,s,o,n]=await Promise.all([this.getLog(),null==this.uri.sha?this.view.container.git.status(this.uri.repoPath).getStatusForPath?.(this.getPathOrGlob()):void 0,null==this.uri.sha?this.view.container.git.config(this.uri.repoPath).getCurrentUser():void 0,this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath,this.branch?.name),t?this.view.container.git.commits(this.uri.repoPath).getLogShasOnly(t,{limit:0}):void 0]);if(r?.length)if(this.folder){let t=(0,tm.Tj)((0,tm.pD)((0,tm.qI)(r,e=>e.getPseudoCommits(this.view.container,s)),e=>e.sha,(e,t)=>e.with({files:{files:[...e.files??(null!=e.file?[e.file]:[]),...t.files??(null!=t.file?[t.file]:[])]}})),e=>new aA.e(this.view,this,e));e.push(...t)}else{let[t]=r,i=t.getPseudoCommits(this.view.container,s);i.length&&e.push(...i.map(e=>new lC.f(this.view,this,t,e)))}return(null!=i&&(e.push(...(0,aD.h)((0,tm.x1)(i.commits.values(),e=>this.folder?new aA.e(this.view,this,e,n?.has(e.ref),this.branch,o,{expand:!1}):null!=e.file?new lC.f(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,unpublished:n?.has(e.ref)}):void 0),this)),i.hasMore&&e.push(new aI.cb(this.view,this,e[e.length-1]))),0===e.length)?[new aI.S2(this.view,this,"No file history could be found.")]:e}getTreeItem(){this.splatted=!1;let e=this.label,t=new w.TreeItem(e,w.TreeItemCollapsibleState.Expanded);return t.contextValue=au.U0.FileHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}
${this.uri.directory}/${null==this.uri.sha?"":`

${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return this.folder&&""===this.uri.fileName?`${(0,T.P8)(this.uri.path)}${this.uri.sha?` ${this.uri.sha===L.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`:`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===L.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}subscribe(){let e=this.view.container.git.getRepository(this.uri);if(null!=e)return w.Disposable.from((0,sh.HC)(e.onDidChange,this.onRepositoryChanged,this),(0,sh.HC)(e.onDidChangeFileSystem,this.onFileSystemChanged,this,[e.watchFileSystem()]),(0,sh.HC)(v.H.onDidChange,e=>{v.H.changed(e,"advanced.fileHistoryFollowsRenames")&&this.view.resetNodeLastKnownLimit(this)},this))}etag(){return Date.now()}onRepositoryChanged(e){var t=[];try{if(!e.changed(e4.Z_.Index,e4.Z_.Heads,e4.Z_.Remotes,e4.Z_.RemoteProviders,e4.Z_.PausedOperationStatus,e4.Z_.Unknown,e4.Ti.Any))return;let i=lI(t,(0,eb.bP)(`${(0,ev.zu)(this)}.onRepositoryChanged(e=${e.toString()})`,!1));ev.Vy.debug(i,"triggering node refresh"),this.triggerChange(!0)}catch(e){var i=e,r=!0}finally{lD(t,i,r)}}onFileSystemChanged(e){var t=[];try{if(this.folder){if(!e.uris.some(e=>e.fsPath.startsWith(this.uri.fsPath)))return}else if(!e.uris.some(e=>e.toString()===this.uri.toString()))return;let i=lI(t,(0,eb.bP)(`${(0,ev.zu)(this)}.onFileSystemChanged(e=${this.uri.toString(!0)})`,!1));ev.Vy.debug(i,"triggering node refresh"),this.triggerChange(!0)}catch(e){var i=e,r=!0}finally{lD(t,i,r)}}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.commits(this.uri.repoPath).getLogForPath(this.getPathOrGlob(),this.uri.sha,{limit:this.limit??this.view.config.pageItemLimit})),this._log}getPathOrGlob(){return this.folder?(0,D.pW)(this.uri):this.uri}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await w.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};lA([(0,ew.Yz)()],FileHistoryNode.prototype,"subscribe",1),lA([(0,tp.G)(),(0,ew.Yz)()],FileHistoryNode.prototype,"refresh",1),lA([(0,tB.B)()],FileHistoryNode.prototype,"getPathOrGlob",1),lA([(0,tp.G)()],FileHistoryNode.prototype,"loadMore",1);var l$=Object.defineProperty,lT=Object.getOwnPropertyDescriptor,lE=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l$(t,i,o),o};let FileHistoryTrackerNode=class FileHistoryTrackerNode extends ag.Y{_base;splatted=!0;constructor(e){super("file-history-tracker",e1.Bd,e)}dispose(){super.dispose(),this.child=void 0}_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}async getChildren(){if(null==this.child){let e;if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide file history information.",[];this.view.message=void 0;let t={...this.uri,repoPath:this.uri.repoPath,sha:this._base??this.uri.sha},i=new e1.nk(this.uri,t),r=await (0,D.ZA)(this.uri);this.view.title=r?"Folder History":"File History",t.sha&&"HEAD"!==t.sha?(0,em.HH)(t.sha)||(e=await this.view.container.git.branches(t.repoPath).getBranch(t.sha)):e=await this.view.container.git.branches(t.repoPath).getBranch(),this.child=new FileHistoryNode(i,this.view,this,r,e)}return this.child.getChildren()}getTreeItem(){this.splatted=!1;let e=new w.TreeItem("File History",w.TreeItemCollapsibleState.Expanded);return e.contextValue=au.U0.ActiveFileHistory,e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!==e1.Bd&&null!=this._uri.repoPath}async changeBase(){let e=await (0,aO.NZ)(this.uri.repoPath,"Change File History Base","Choose a reference to set as the new base",{allowRevisions:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,tc.gC)(e)){let t=await this.view.container.git.branches(this.uri.repoPath).getBranch();this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this.child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){let t=(0,eb.dQ)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==e1.Bd&&await this.view.container.documentTracker.resetCache(this._uri,"log"),this.reset());let i=w.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&w.window.visibleTextEditors.some(e=>e.document?.uri.path===this.uri.path))||(this.reset(),(0,eb.TT)(t,`, uri=${ev.Vy.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path)return(0,eb.TT)(t,`, uri=${ev.Vy.toLoggable(this._uri)}`),!0;let r=await e1.nk.fromUri(i.document.uri),s=await lb(this.view.container,r);return!!(this.hasUri&&(0,s3.k)(s??r,this.uri))||(null!=s&&(r=await e1.nk.fromUri(s)),null==r.repoPath?this.reset():(this.setUri(r),this.child=void 0),(0,eb.TT)(t,`, uri=${ev.Vy.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this.child=void 0}setEditorFollowing(e){e&&this.setUri(),this.canSubscribe=e,e||this.triggerChange()}async showHistoryForUri(e){this.setUri(e),await this.triggerChange()}subscribe(){return w.Disposable.from((0,sh.HC)(w.window.onDidChangeActiveTextEditor,(0,tg.s)(this.onActiveEditorChanged,250),this))}etag(){return 0}_triggerChangeDebounced;onActiveEditorChanged(e){if(null==e&&(0,ef.QK)(this._uri)){null==this._triggerChangeDebounced&&(this._triggerChangeDebounced=(0,tg.s)(()=>this.triggerChange(),1500)),this._triggerChangeDebounced();return}this.triggerChange()}setUri(e){this._uri=e??e1.Bd,(0,sT.o)("gitlens:views:fileHistory:canPin",this.hasUri)}};lE([(0,tp.G)(),(0,ew.Rm)()],FileHistoryTrackerNode.prototype,"changeBase",1),lE([(0,tp.G)(),(0,ew.Yz)({exit:!0})],FileHistoryTrackerNode.prototype,"refresh",1),lE([(0,ew.Rm)()],FileHistoryTrackerNode.prototype,"setEditorFollowing",1),lE([(0,ew.Rm)()],FileHistoryTrackerNode.prototype,"showHistoryForUri",1),lE([(0,ew.Yz)()],FileHistoryTrackerNode.prototype,"subscribe",1),lE([(0,ew.Yz)({args:!1})],FileHistoryTrackerNode.prototype,"onActiveEditorChanged",1);var l_=Object.defineProperty,lO=Object.getOwnPropertyDescriptor,lx=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),lF=e=>{throw TypeError(e)},lL=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lO(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l_(t,i,o),o},lB=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&lF("Object expected"),i&&(r=t[lx("asyncDispose")]),void 0===r&&(r=t[lx("dispose")],i&&(s=r)),"function"!=typeof r&&lF("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},lU=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let LineHistoryNode=class LineHistoryNode extends ag.Y{constructor(e,t,i,r,s,o){super("line-history",e,t,i),this.parent=i,this.branch=r,this.selection=s,this.editorContents=o,null!=r&&this.updateContext({branch:r}),this._uniqueId=(0,au.pF)(`${this.type}+${e.toString()}+[${s.start.line},${s.start.character}-${s.end.line},${s.end.character}]`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;let e=[];if(null==this.uri.repoPath)return e;let t=this.selection,i=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[r,s,o,n]=await Promise.all([this.getLog(t),null==this.uri.sha||(0,em._k)(this.uri.sha)?this.editorContents?await this.view.container.git.getBlameForRangeContents(this.uri,t,this.editorContents):await this.view.container.git.getBlameForRange(this.uri,t):void 0,this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath,this.branch?.name),i?this.view.container.git.commits(this.uri.repoPath).getLogShasOnly(i,{limit:0}):void 0]);if(null!=s)for(let i of s.commits.values()){if(!i.isUncommitted)continue;let r=s.lines[0],o=s.lines[s.lines.length-1],n=t.active.line===r.line-1;t=new w.Selection((n?o:r).originalLine-1,t.anchor.character,(n?r:o).originalLine-1,t.active.character);let a=await this.view.container.git.status(this.uri.repoPath).getStatusForFile?.(this.uri);if(null!=a){let r={conflictStatus:a?.conflictStatus,path:i.file?.path??"",indexStatus:a?.indexStatus,originalPath:i.file?.originalPath,repoPath:this.uri.repoPath,status:a?.status??F.NO.Modified,workingTreeStatus:a?.workingTreeStatus},s=await this.view.container.git.config(this.uri.repoPath).getCurrentUser(),o=a?.getPseudoCommits(this.view.container,s);if(null!=o)for(let i of o.reverse())e.unshift(new lC.f(this.view,this,r,i,{selection:t}))}break}return(null!=r&&(e.push(...(0,aD.h)((0,tm.x1)(r.commits.values(),e=>null!=e.file?new lC.f(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,selection:t,unpublished:n?.has(e.ref)}):void 0),this)),r.hasMore&&e.push(new aI.cb(this.view,this,e[e.length-1]))),0===e.length)?[new aI.S2(this.view,this,"No line history could be found.")]:e}getTreeItem(){this.splatted=!1;let e=this.label,t=new w.TreeItem(e,w.TreeItemCollapsibleState.Expanded);return t.contextValue=au.U0.LineHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}${this.lines}
${this.uri.directory}/${null==this.uri.sha?"":`

${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return`${this.uri.fileName}${this.lines}${this.uri.sha?` ${this.uri.sha===L.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}get lines(){return this.selection.isSingleLine?`:${this.selection.start.line+1}`:`:${this.selection.start.line+1}-${this.selection.end.line+1}`}subscribe(){let e=this.view.container.git.getRepository(this.uri);if(null!=e)return w.Disposable.from((0,sh.HC)(e.onDidChange,this.onRepositoryChanged,this),(0,sh.HC)(e.onDidChangeFileSystem,this.onFileSystemChanged,this,[e.watchFileSystem()]))}etag(){return Date.now()}onRepositoryChanged(e){var t=[];try{if(!e.changed(e4.Z_.Index,e4.Z_.Heads,e4.Z_.Remotes,e4.Z_.RemoteProviders,e4.Z_.PausedOperationStatus,e4.Z_.Unknown,e4.Ti.Any))return;let i=lB(t,(0,eb.bP)(`${(0,ev.zu)(this)}.onRepositoryChanged(e=${e.toString()})`,!1));ev.Vy.debug(i,"triggering node refresh"),this.triggerChange(!0)}catch(e){var i=e,r=!0}finally{lU(t,i,r)}}onFileSystemChanged(e){var t=[];try{if(!e.uris.some(e=>e.toString()===this.uri.toString()))return;let i=lB(t,(0,eb.bP)(`${(0,ev.zu)(this)}.onFileSystemChanged(e=${this.uri.toString(!0)})`,!1));ev.Vy.debug(i,"triggering node refresh"),this.triggerChange(!0)}catch(e){var i=e,r=!0}finally{lU(t,i,r)}}refresh(e){e&&(this._log=void 0)}_log;async getLog(e){return null==this._log&&(this._log=await this.view.container.git.commits(this.uri.repoPath).getLogForPath(this.uri,this.uri.sha,{all:!1,limit:this.limit??this.view.config.pageItemLimit,range:e??this.selection,renames:!1})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await w.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};lL([(0,tB.B)()],LineHistoryNode.prototype,"lines",1),lL([(0,ew.Yz)()],LineHistoryNode.prototype,"subscribe",1),lL([(0,tp.G)(),(0,ew.Yz)()],LineHistoryNode.prototype,"refresh",1),lL([(0,tp.G)()],LineHistoryNode.prototype,"loadMore",1);var lN=Object.defineProperty,lq=Object.getOwnPropertyDescriptor,lW=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lN(t,i,o),o};let LineHistoryTrackerNode=class LineHistoryTrackerNode extends ag.Y{_base;_editorContents;_selection;splatted=!0;constructor(e){super("line-history-tracker",e1.Bd,e)}dispose(){super.dispose(),this.child=void 0}_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}async getChildren(){if(null==this.child){let e;if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide line history information.",[];let t=this._selection,i=this._editorContents;if(null==t)return this.view.description=void 0,this.view.message="There was no selection provided for line history.",this.view.description=`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===L.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}${!this.followingEditor?" (pinned)":""}`,[];this.view.message=void 0;let r={...this.uri,repoPath:this.uri.repoPath,sha:this.uri.sha??this._base},s=new e1.nk(this.uri,r);r.sha&&"HEAD"!==r.sha?(0,em.HH)(r.sha)||(e=await this.view.container.git.branches(r.repoPath).getBranch(r.sha)):e=await this.view.container.git.branches(r.repoPath).getBranch(),this.child=new LineHistoryNode(s,this.view,this,e,t,i)}return this.child.getChildren()}getTreeItem(){this.splatted=!1;let e=new w.TreeItem("Line History",w.TreeItemCollapsibleState.Expanded);return e.contextValue=au.U0.ActiveLineHistory,this.ensureSubscription(),e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!==e1.Bd&&null!=this._uri.repoPath}async changeBase(){let e=await (0,aO.NZ)(this.uri.repoPath,"Change Line History Base","Choose a reference to set as the new base",{allowRevisions:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,tc.gC)(e)){let t=await this.view.container.git.branches(this.uri.repoPath).getBranch();this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this.child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){let t=(0,eb.dQ)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==e1.Bd&&await this.view.container.documentTracker.resetCache(this._uri,"log"),this.reset());let i=w.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&w.window.visibleTextEditors.some(e=>e.document?.uri.path===this.uri.path))||(this.reset(),(0,eb.TT)(t,`, uri=${ev.Vy.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path&&null!=this._selection&&i.selection.isEqual(this._selection))return(0,eb.TT)(t,`, uri=${ev.Vy.toLoggable(this._uri)}`),!0;let r=await e1.nk.fromUri(i.document.uri);return!!(this.hasUri&&(0,s3.k)(r,this.uri)&&null!=this._selection&&i.selection.isEqual(this._selection))||(null==r.repoPath?this.reset():(this.setUri(r),this._editorContents=i.document.isDirty?i.document.getText():void 0,this._selection=i.selection,this.child=void 0),(0,eb.TT)(t,`, uri=${ev.Vy.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this._editorContents=void 0,this._selection=void 0,this.child=void 0}setEditorFollowing(e){this.canSubscribe=e}subscribe(){if(this.view.container.lineTracker.subscribed(this))return;let e=(0,tg.s)(this.onActiveLinesChanged.bind(this),250);return this.view.container.lineTracker.subscribe(this,(0,sh.HC)(this.view.container.lineTracker.onDidChangeActiveLines,t=>{t.pending||e(t)},this))}etag(){return 0}onActiveLinesChanged(e){this.triggerChange()}setUri(e){this._uri=e??e1.Bd,(0,sT.o)("gitlens:views:fileHistory:canPin",this.hasUri)}};lW([(0,tp.G)(),(0,ew.Rm)()],LineHistoryTrackerNode.prototype,"changeBase",1),lW([(0,tp.G)(),(0,ew.Yz)({exit:!0})],LineHistoryTrackerNode.prototype,"refresh",1),lW([(0,ew.Rm)()],LineHistoryTrackerNode.prototype,"setEditorFollowing",1),lW([(0,ew.Yz)()],LineHistoryTrackerNode.prototype,"subscribe",1),lW([(0,ew.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineHistoryTrackerNode.prototype,"onActiveLinesChanged",1);let lM=" (pinned)";let FileHistoryView=class FileHistoryView extends aC.DN{configKey="fileHistory";_followCursor=!1;_followEditor=!0;constructor(e){super(e,"fileHistory","File History","fileHistoryView"),(0,sT.o)("gitlens:views:fileHistory:cursorFollowing",this._followCursor),(0,sT.o)("gitlens:views:fileHistory:editorFollowing",this._followEditor)}get canSelectMany(){return v.H.get("views.multiselect")}get showCollapseAll(){return!1}getRoot(){return this._followCursor?new LineHistoryTrackerNode(this):new FileHistoryTrackerNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),lo(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),lo(this.getQualifiedCommand("setCursorFollowingOn"),()=>this.setCursorFollowing(!0),this),lo(this.getQualifiedCommand("setCursorFollowingOff"),()=>this.setCursorFollowing(!1),this),lo(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),lo(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),lo(this.getQualifiedCommand("setRenameFollowingOn"),()=>this.setRenameFollowing(!0),this),lo(this.getQualifiedCommand("setRenameFollowingOff"),()=>this.setRenameFollowing(!1),this),lo(this.getQualifiedCommand("setShowAllBranchesOn"),()=>this.setShowAllBranches(!0),this),lo(this.getQualifiedCommand("setShowAllBranchesOff"),()=>this.setShowAllBranches(!1),this),lo(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),lo(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"advanced.fileHistoryFollowsRenames")||!!v.H.changed(e,"advanced.fileHistoryShowAllBranches")||!!v.H.changed(e,"advanced.fileHistoryShowMergeCommits"))&&!0}async showHistoryForUri(e){this.setCursorFollowing(!1);let t=this.ensureRoot(!0);return t instanceof FileHistoryTrackerNode&&(await t.showHistoryForUri(e),this.setEditorFollowing(!1)),this.show()}changeBase(){this.root?.changeBase()}setCursorFollowing(e){let t=!this._followEditor&&this.root?.hasUri?this.root.uri:void 0;this._followCursor=e,(0,sT.o)("gitlens:views:fileHistory:cursorFollowing",e),this.title=this._followCursor?"Line History":"File History";let i=this.ensureRoot(!0);null!=t&&i.setUri(t),i.setEditorFollowing(this._followEditor),i.ensureSubscription(),this.refresh(!0)}setEditorFollowing(e){let t=this.ensureRoot();t.hasUri&&(this._followEditor=e,(0,sT.o)("gitlens:views:fileHistory:editorFollowing",e),t.setEditorFollowing(e),this.description?.endsWith(lM)?e&&(this.description=this.description.substring(0,this.description.length-lM.length)):e||null==this.description||(this.description+=lM),e&&(t.ensureSubscription(),this.refresh(!0)))}setRenameFollowing(e){return v.H.updateEffective("advanced.fileHistoryFollowsRenames",e)}setShowAllBranches(e){return v.H.updateEffective("advanced.fileHistoryShowAllBranches",e)}setShowMergeCommits(e){return v.H.updateEffective("advanced.fileHistoryShowMergeCommits",e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}};var lG=i(8286);let LaunchpadViewGroupingNode=class LaunchpadViewGroupingNode extends GroupingNode{constructor(e,t,i,r,s=w.TreeItemCollapsibleState.Expanded,o,n,a,l){super(e,t,r,s,o,n,a,l),this.group=i,this.disposable=w.Disposable.from(this.view.onDidChangeNodeCollapsibleState(this.onNodeCollapsibleStateChanged,this))}disposable;dispose(){super.dispose(),this.disposable?.dispose()}onNodeCollapsibleStateChanged(e){if(e.element===this){let t=this.view.container.storage.get("launchpadView:groups:expanded")??[];e.state===w.TreeItemCollapsibleState.Expanded?t.push(this.group):t.splice(t.indexOf(this.group),1),this.view.container.storage.store("launchpadView:groups:expanded",t).catch()}}};let LaunchpadItemNode=class LaunchpadItemNode extends av.l{constructor(e,t,i,r){let s=r.openRepository?.repo?.path;super("launchpad-item",null!=s?e1.nk.fromRepoPath(s):e1.Bd,e,t),this.parent=t,this.group=i,this.item=r,this.updateContext({launchpadGroup:i,launchpadItem:r}),this._uniqueId=(0,au.pF)(this.type,this.context),this.repoPath=s}repoPath;get id(){return this._uniqueId}toClipboard(e){let t=this.getUrl();return"markdown"===e?`[${this.item.underlyingPullRequest.id}](${t}) ${this.item.underlyingPullRequest.title}`:t}getUrl(){return this.item.url??this.item.underlyingPullRequest.url}get pullRequest(){return"pullrequest"===this.item.type?this.item.underlyingPullRequest:void 0}async getChildren(){if(null==this.children){let e=await (0,ah.k0)(this.view,this,this.item.underlyingPullRequest,this.item.openRepository?.repo??this.repoPath);this.children=e}return this.children}getTreeItem(){let e=this.item,t=new w.TreeItem(e.title.length>60?`${e.title.substring(0,60)}...`:e.title,this.item.openRepository?.localBranch?.current?w.TreeItemCollapsibleState.Expanded:w.TreeItemCollapsibleState.Collapsed);return t.contextValue=au.U0.LaunchpadItem,t.description=`\xa0 ${e.repository.owner.login}/${e.repository.name}#${e.id} \xa0 ${e.codeSuggestionsCount>0?` $(gitlens-code-suggestion) ${e.codeSuggestionsCount}`:""}`,t.iconPath=e.author?.avatarUrl!=null?w.Uri.parse(e.author.avatarUrl):void 0,t.command=(0,rB.gu)("gitlens.showLaunchpad","Open in Launchpad",{source:"launchpad-view",state:{item:{...this.item,group:this.group}}}),"pullrequest"===e.type&&(t.contextValue+="+pr",t.tooltip=(0,ah._u)(e.underlyingPullRequest,{idPrefix:`${e.repository.owner.login}/${e.repository.name}`,codeSuggestionsCount:e.codeSuggestionsCount})),t}};let LaunchpadViewNode=class LaunchpadViewNode extends av.l{disposable;constructor(e){super("launchpad",e1.Bd,e),this.disposable=w.Disposable.from(this.view.container.launchpad.onDidChange(this.refresh,this),this.view.container.subscription.onDidChange(this.onSubscriptionChanged,this))}dispose(){this.disposable?.dispose(),super.dispose()}onSubscriptionChanged(e){e.current.plan!==e.previous.plan&&this.triggerChange(!0)}refresh(){null!=this.children&&((0,aC.lm)(this.children),this.children=void 0)}async getChildren(){if(this.view.description=this.view.grouped?`${this.view.name.toLocaleLowerCase()}\xa0\u2022\xa0 ${R.lD}`:R.lD,this.view.message=void 0,null==this.children){if(!(await this.view.container.git.access("launchpad")).allowed)return[];let e=[];if(!await this.view.container.launchpad.hasConnectedIntegration())return[];try{let t=await this.view.container.launchpad.getCategorizedItems();if(!t.items?.length)return this.view.message="All done! Take a vacation.",[];let i=(0,nC.Vy)(t.items),r=new Map((this.view.container.storage.get("launchpadView:groups:expanded")??[]).map(e=>[e,!0]));for(let[t,s]of i){if(!s.length)continue;let i=lG.lj.get(t);e.push(new LaunchpadViewGroupingNode(this.view,lG.aL.get(t),t,s.map(e=>new LaunchpadItemNode(this.view,this,t,e)),"current-branch"===t||r.get(t)?w.TreeItemCollapsibleState.Expanded:w.TreeItemCollapsibleState.Collapsed,void 0,void 0,new w.ThemeIcon(i.substring(2,i.length-1))))}}catch(e){if(!(e instanceof ik.WT))throw e}this.children=e}return this.children}getTreeItem(){return new w.TreeItem("Launchpad",w.TreeItemCollapsibleState.Expanded)}};let LaunchpadView=class LaunchpadView extends aC.DN{configKey="launchpad";_disposable;constructor(e,t){super(e,"launchpad","Launchpad","launchpadView",t)}dispose(){this._disposable?.dispose(),super.dispose()}getViewDescription(e){let t=super.getViewDescription(e);return t?`${t} \xa0\u2022\xa0 ${R.lD}`:R.lD}getRoot(){return new LaunchpadViewNode(this)}onVisibilityChanged(e){null==this._disposable&&(this._disposable=w.Disposable.from(this.container.integrations.onDidChangeConnectionState(()=>this.refresh(),this),this.container.launchpad.onDidRefresh(()=>this.refresh(),this),this.container.integrations.onDidSyncCloudIntegrations(()=>this.refresh(),this))),super.onVisibilityChanged(e)}async show(e){if(await (0,o1.ZQ)())return super.show(e)}get canReveal(){return!1}registerCommands(){return[lo(this.getQualifiedCommand("info"),()=>(0,rB.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad-view",detail:"info"}}),this),lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>w.window.withProgress({location:{viewId:this.id}},()=>this.container.launchpad.getCategorizedItems({force:!0})),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat"))&&!0}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}};let lH=" (pinned)";let LineHistoryView=class LineHistoryView extends aC.DN{configKey="lineHistory";constructor(e){super(e,"lineHistory","Line History","lineHistoryView"),(0,sT.o)("gitlens:views:lineHistory:editorFollowing",!0)}get canSelectMany(){return v.H.get("views.multiselect")}get showCollapseAll(){return!1}getRoot(){return new LineHistoryTrackerNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),lo(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),lo(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),lo(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat"))&&!0}changeBase(){this.root?.changeBase()}setEditorFollowing(e){let t=this.ensureRoot();t.hasUri&&((0,sT.o)("gitlens:views:lineHistory:editorFollowing",e),this.root?.setEditorFollowing(e),this.description?.endsWith(lH)?e&&(this.description=this.description.substring(0,this.description.length-lH.length)):e||null==this.description||(this.description+=lH),e&&(t.ensureSubscription(),this.refresh(!0)))}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}};let PullRequestViewNode=class PullRequestViewNode extends au.eu{child;constructor(e){super("pullrequest",e1.Bd,e)}getChildren(){return null!=this.child?[this.child]:[]}getTreeItem(){return new w.TreeItem("Pull Request",w.TreeItemCollapsibleState.Expanded)}async setPullRequest(e,t){null!=e?(this.child=new ah.Xu(this.view,this,e,t,{expand:!0}),this.view.description=`${e.repository.owner}/${e.repository.repo}#${e.id}`,(0,sT.o)("gitlens:views:pullRequest:visible",!0)):(this.child=void 0,this.view.description=void 0,(0,sT.o)("gitlens:views:pullRequest:visible",!1)),await this.triggerChange()}};let PullRequestView=class PullRequestView extends aC.DN{configKey="pullRequest";constructor(e){super(e,"pullRequest","Pull Request","commitsView")}get canReveal(){return!1}get canSelectMany(){return!1}get showCollapseAll(){return!1}close(){this.setVisible(!1)}async showPullRequest(e,t){null!=e?(this.description=`${e.repository.owner}/${e.repository.repo}#${e.id}`,this.setVisible(!0)):(this.description=void 0,this.setVisible(!1)),await this.ensureRoot().setPullRequest(e,t),null!=e&&await this.show()}setVisible(e){(0,sT.o)("gitlens:views:pullRequest:visible",e)}getRoot(){return new PullRequestViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),lo(this.getQualifiedCommand("close"),()=>this.close(),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat"))&&!0}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}};var lV=Object.defineProperty,lj=Object.getOwnPropertyDescriptor;let RemoteNode=class RemoteNode extends au.eu{constructor(e,t,i,r,s){super("remote",e,t,i),this.parent=i,this.repo=r,this.remote=s,this.updateContext({repository:r,remote:s}),this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.remote.name}get repoPath(){return this.repo.path}async getChildren(){let e=await this.repo.git.branches().getBranches({filter:e=>e.remote&&e.name.startsWith(this.remote.name),sort:!0});if(0===e.values.length)return[new aI.S2(this.view,this,"No branches could be found.")];let t=e.values.map(e=>new BranchNode(e1.nk.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:!1,showStashes:!1,showTracking:!1}));if("list"===this.view.config.branches.layout)return t;let i=(0,$.Ay)(t,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0));return new BranchOrTagFolderNode(this.view,this,"remote-branch",i,this.repo.path,"",void 0).getChildren()}async getTreeItem(){let e,t=new w.TreeItem(this.remote.name,w.TreeItemCollapsibleState.Collapsed);if(t.id=this.id,t.description=(0,tu.Qw)(this.remote),null!=this.remote.provider){let{provider:i}=this.remote;if(t.iconPath=null!=i.avatarUri&&this.view.config.avatars?i.avatarUri:"remote"===i.icon?new w.ThemeIcon("cloud"):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-${i.icon}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-${i.icon}.svg`)},this.remote.hasIntegration()){let r=await this.view.container.integrations.getByRemote(this.remote),s=r?.maybeConnected??await r?.isConnected();t.contextValue=`${au.U0.Remote}${s?"+connected":"+disconnected"}`,e=`\`${this.remote.name}\` \xa0(${i.name} ${R.EO.Dash} _${s?"connected":"not connected"}${this.remote.default?", default":""}_) 

${i.displayPath}`}else t.contextValue=au.U0.Remote,e=`\`${this.remote.name}\` \xa0(${i.name}${this.remote.default?", default":""}) 

${i.displayPath}`}else t.contextValue=au.U0.Remote,t.iconPath=new w.ThemeIcon("cloud"),e=`\`${this.remote.name}\` \xa0(${this.remote.domain}${this.remote.default?", default":""}) 

${this.remote.path}`;for(let{type:i,url:r}of(this.remote.default&&(t.contextValue+="+default"),t.resourceUri=(0,al.E)("remote",{state:this.remote.default?"default":void 0}),this.remote.urls))e+=`\\
${r} (${i})`;return t.tooltip=new w.MarkdownString(e,!0),t}async setAsDefault(e=!0){await this.remote.setAsDefault(e),this.triggerChange()}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?lj(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lV(t,i,o)})([(0,ew.Rm)()],RemoteNode.prototype,"setAsDefault",1);var lQ=Object.defineProperty,lz=Object.getOwnPropertyDescriptor;let RemotesNode=class RemotesNode extends av.l{constructor(e,t,i,r){super("remotes",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.git.remotes().getRemotes({sort:!0});if(0===e.length)return[new aI.S2(this.view,this,"No remotes could be found")];this.children=e.map(e=>new RemoteNode(this.uri,this.view,this,this.repo,e))}return this.children}getTreeItem(){let e=new w.TreeItem("Remotes",w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=au.U0.Remotes,e.iconPath=new w.ThemeIcon("cloud"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?lz(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lQ(t,i,o)})([(0,ew.Yz)()],RemotesNode.prototype,"refresh",1);var lY=Object.defineProperty,lK=Object.getOwnPropertyDescriptor,lZ=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lK(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lY(t,i,o),o};let ReflogRecordNode=class ReflogRecordNode extends au.eu{constructor(e,t,i){super("reflog-record",e1.nk.fromRepoPath(i.repoPath),e,t),this.record=i,this.updateContext({reflog:i}),this._uniqueId=(0,au.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){let e=await this.getLog();if(void 0===e)return[new aI.S2(this.view,this,"No commits could be found.")];let t=[...(0,tm.Tj)(e.commits.values(),e=>new aA.e(this.view,this,e))];return e.hasMore&&t.push(new aI.cb(this.view,this,t[t.length-1])),t}getTreeItem(){let e=new w.TreeItem(`${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}`,w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=`${0===this.record.HEAD.length?"":`${this.record.HEAD} ${R.EO.Space}${R.EO.Dot}${R.EO.Space} `}${this.record.formattedDate}`,e.contextValue=au.U0.ReflogRecord,e.tooltip=`${0===this.record.HEAD.length?"":`${this.record.HEAD}
`}${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}${this.record.details?` (${this.record.details})`:""}
${this.record.formatDateFromNow()} (${this.record.formatDate()})
${this.record.previousShortSha} ${R.EO.Space}${R.EO.ArrowRight}${R.EO.Space} ${this.record.shortSha}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if(void 0===this._log){let e=`${this.record.previousSha}..${this.record.sha}`;this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(e,{limit:this.limit??this.view.config.defaultItemLimit})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await w.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};lZ([(0,tp.G)(),(0,ew.Yz)()],ReflogRecordNode.prototype,"refresh",1),lZ([(0,tp.G)()],ReflogRecordNode.prototype,"loadMore",1);var lJ=Object.defineProperty,lX=Object.getOwnPropertyDescriptor;let ReflogNode=class ReflogNode extends av.l{constructor(e,t,i,r){super("reflog",e,t,i),this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,au.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){if(void 0===this.children){let e=[],t=await this.getReflog();if(void 0===t||0===t.records.length)return[new aI.S2(this.view,this,"No activity could be found.")];e.push(...t.records.map(e=>new ReflogRecordNode(this.view,this,e))),t.hasMore&&e.push(new aI.cb(this.view,this,e[e.length-1])),this.children=e}return this.children}getTreeItem(){let e=new w.TreeItem("Incoming Activity",w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=au.U0.Reflog,e.description="experimental",e.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-activity.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-activity.svg")},e}refresh(e){super.refresh(!0),e&&(this._reflog=void 0)}_reflog;async getReflog(){return void 0===this._reflog&&(this._reflog=await this.repo.git.commits().getIncomingActivity?.({all:!0,limit:this.limit??this.view.config.defaultItemLimit})),this._reflog}get hasMore(){return this._reflog?.hasMore??!0}async loadMore(e){let t=await this.getReflog();t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._reflog!==t&&(this._reflog=t,this.limit=t?.count,this.triggerChange(!1)))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?lX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lJ(t,i,o)})([(0,ew.Yz)()],ReflogNode.prototype,"refresh",1);var l0=Object.defineProperty,l1=Object.getOwnPropertyDescriptor;let StashesNode=class StashesNode extends av.l{constructor(e,t,i,r){super("stashes",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.git.stash()?.getStash();if(null==e)return[new aI.S2(this.view,this,"No stashes could be found.")];this.children=[...(0,tm.Tj)(e.stashes.values(),e=>new aV.m(this.view,this,e))]}return this.children}getTreeItem(){let e=new w.TreeItem("Stashes",w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=au.U0.Stashes,e.iconPath=new w.ThemeIcon("gitlens-stashes"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?l1(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l0(t,i,o)})([(0,ew.Yz)()],StashesNode.prototype,"refresh",1);let StatusFilesNode=class StatusFilesNode extends au.eu{constructor(e,t,i,r){super("status-files",e1.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}async getChildren(){let e,t=[],i=this.repoPath;null!=this.range&&null!=(e=await this.view.container.git.commits(i).getLog(this.range,{limit:0}))&&(await Promise.allSettled((0,tm.Tj)((0,tm.pb)(e.commits.values(),e=>null==e.files),e=>e.ensureFullDetails())),t=[...(0,tm.qI)(e.commits.values(),e=>e.files?.map(t=>({...t,commit:e}))??[])]),("worktrees"===this.view.type||this.view.config.includeWorkingTree)&&0!==this.status.files.length&&t.unshift(...(0,tm.qI)(this.status.files,e=>(0,tm.Tj)(e.getPseudoCommits(this.view.container,void 0),t=>this.getFileWithPseudoCommit(e,t)))),t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());let r=Object.values((0,tm.$z)(t,e=>e.path)).map(e=>new aP.Z(this.view,this,i,e,"working"));if("list"!==this.view.config.files.layout){let e=(0,$.Ay)(r,e=>e.uri.relativePath.split("/"),(...e)=>(0,T.Fd)((0,T.HS)(...e)),this.view.config.files.compact);r=new aR.x(this.view,this,e,i,"",void 0,!0).getChildren()}else r.sort((e,t)=>e.priority-t.priority||(0,_.wN)(e.label,t.label));return r}async getTreeItem(){let e="worktrees"===this.view.type||this.view.config.includeWorkingTree?this.status.files.length:0;if(null!=this.range&&this.status.upstream?.state.ahead)if(e>0){let t=await this.view.container.git.diff(this.repoPath).getDiffStatus(`${this.status.upstream?.name}...`);if(null!=t){let i=new Set;for(let e of this.status.files)i.add(e.path);for(let e of t)i.add(e.path);e=i.size}}else{let t=await this.view.container.git.diff(this.repoPath).getChangedFilesCount(`${this.status.upstream?.name}...`);null!=t?e+=t.files:e=-1}let t=-1===e?"?? files changed":`${(0,_.td)("file",e)} changed`,i=new w.TreeItem(t,w.TreeItemCollapsibleState.Collapsed);return i.description="working tree",i.id=this.id,i.contextValue=au.U0.StatusFiles,i.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-diff.svg")},i}getFileWithPseudoCommit(e,t){return{status:(t.isUncommitted?t.isUncommittedStaged?e.indexStatus:e.workingTreeStatus:e.status)??e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t}}};var l2=Object.defineProperty,l5=Object.getOwnPropertyDescriptor,l4=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?l5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l2(t,i,o),o};let TagNode=class TagNode extends ak.t{constructor(e,t,i,r){super("tag",e,t,i),this.parent=i,this.tag=r,this.updateContext({tag:r}),this._uniqueId=(0,au.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return this.tag.name}get label(){return"tree"===this.view.config.branches.layout?this.tag.getBasename():this.tag.name}get ref(){return this.tag}async getChildren(){let e=await this.getLog();if(null==e)return[new aI.S2(this.view,this,"No commits could be found.")];let t=await this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath,this.tag.name),i=[...(0,aD.h)((0,tm.Tj)(e.commits.values(),e=>new aA.e(this.view,this,e,void 0,void 0,t)),this)];return e.hasMore&&i.push(new aI.cb(this.view,this,i[i.length-1],{getCount:()=>this.view.container.git.commits(this.tag.repoPath).getCommitCount(this.tag.name)})),i}getTreeItem(){let e=new w.TreeItem(this.label,w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=au.U0.Tag,e.description=(0,id.E)(this.tag.message),e.tooltip=`${this.tag.name}${(0,_.eV)(R.EO.Dash,2,2)}${(0,em.pV)(this.tag.sha)}${null!=this.tag.date?`
${this.tag.formatDateFromNow()} (${this.tag.formatDate(this.view.container.TagDateFormatting.dateFormat)})`:""}

${(0,id.E)(this.tag.message)}${null!=this.tag.commitDate&&this.tag.date!==this.tag.commitDate?`
${this.tag.formatCommitDateFromNow()} (${this.tag.formatCommitDate(this.view.container.TagDateFormatting.dateFormat)})`:""}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(this.tag.name,{limit:this.limit??this.view.config.defaultItemLimit})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await w.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};l4([(0,tp.G)(),(0,ew.Yz)()],TagNode.prototype,"refresh",1),l4([(0,tp.G)()],TagNode.prototype,"loadMore",1);var l7=Object.defineProperty,l3=Object.getOwnPropertyDescriptor;let TagsNode=class TagsNode extends av.l{constructor(e,t,i,r){super("tags",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.git.tags().getTags({sort:!0});if(0===e.values.length)return[new aI.S2(this.view,this,"No tags could be found.")];let t=e.values.map(e=>new TagNode(e1.nk.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e));if("list"===this.view.config.branches.layout)return t;let i=(0,$.Ay)(t,e=>e.tag.name.split("/"),(...e)=>e.join("/"),this.view.config.files.compact),r=new BranchOrTagFolderNode(this.view,this,"tag",i,this.repo.path,"",void 0);this.children=r.getChildren()}return this.children}getTreeItem(){let e=new w.TreeItem("Tags",w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=au.U0.Tags,e.iconPath=new w.ThemeIcon("tag"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?l3(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l7(t,i,o)})([(0,ew.Yz)()],TagsNode.prototype,"refresh",1);let UncommittedFileNode=class UncommittedFileNode extends aM.u${constructor(e,t,i,r){super("uncommitted-file",e1.nk.fromFile(r,i),e,t,r)}toClipboard(){return this.path}get path(){return this.file.path}getChildren(){return[]}getTreeItem(){let e=new w.TreeItem(this.label,w.TreeItemCollapsibleState.None);e.contextValue=au.U0.File,e.description=this.description,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath);let t=(0,i7.O)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,T.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,T.HS)("images","light",t))},e.tooltip=(0,aM.h)(this.file),e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=aW.Z.fromTemplate(this.view.config.formats.files.description,{...this.file},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,T.pD)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=aW.Z.fromTemplate("${file}",{...this.file},{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,rB.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{uri:e1.nk.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}})}};let UncommittedFilesNode=class UncommittedFilesNode extends au.eu{constructor(e,t,i,r){super("uncommitted-files",e1.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}getChildren(){let e=this.repoPath,t=[...(0,tm.qI)(this.status.files,e=>e.getPseudoCommits(this.view.container,void 0).map(t=>({status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t})))];t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());let i=Object.values((0,tm.$z)(t,e=>e.path)).map(t=>new UncommittedFileNode(this.view,this,e,t[t.length-1]));if("list"!==this.view.config.files.layout){let t=(0,$.Ay)(i,e=>e.uri.relativePath.split("/"),(...e)=>(0,T.Fd)((0,T.HS)(...e)),this.view.config.files.compact);i=new aR.x(this.view,this,t,e,"",void 0,!0).getChildren()}else i.sort((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"}));return i}getTreeItem(){let e=new w.TreeItem("Uncommitted changes",w.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=au.U0.UncommittedFiles,e.iconPath=new w.ThemeIcon("folder"),e}};var l6=Object.defineProperty,l9=Object.getOwnPropertyDescriptor,l8=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?l9(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l6(t,i,o),o};let WorktreeNode=class WorktreeNode extends av.l{constructor(e,t,i,r,s){super("worktree",e,t,i),this.parent=i,this.worktree=r,this.worktreeStatus=s,this.updateContext({worktree:r}),this._uniqueId=(0,au.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;_branch;get id(){return this._uniqueId}toClipboard(){return this.worktree.uri.fsPath}get repoPath(){return this.uri.repoPath}compacted=!1;get avoidCompacting(){return this.worktree.isDefault||this.worktree.opened}get treeHierarchy(){return"branch"===this.worktree.type&&!this.avoidCompacting&&this.worktree.branch?.getNameWithoutRemote().split("/")||[this.worktree.name]}async getChildren(){if(null==this.children){let e,t,i=this._branch;if(null!=i&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=i.upstream||i.remote)&&(0,sT.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes(i.repoPath)&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,eC.v6)();let t=this.getAssociatedPullRequest(i,{include:["opened","merged"]});queueMicrotask(async()=>{await e?.promise;let r=!1,s=setTimeout(()=>{r=!0,this.view.triggerNodeChange(this)},250),o=await t;clearTimeout(s),null!=o&&null!=this.children&&this.children.splice(0,0,new ah.Xu(this.view,this,o,i)),(r||null!=o)&&this.view.triggerNodeChange(this)})}let[r,s,o]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath),null!=i&&!i.remote?this.view.container.git.getBranchAheadRange(i).then(e=>e?this.view.container.git.commits(this.uri.repoPath).getLogShasOnly(e,{limit:0}):void 0):void 0]),n=(0,eC.Ro)(r);if(null==n)return[new aI.S2(this.view,this,"No commits could be found.")];let a=[];null!=i&&null!=t&&a.push(new ah.Xu(this.view,this,t,i)),null!=i&&!1!==this.view.config.showBranchComparison&&a.push(new CompareBranchNode(this.uri,this.view,this,i,this.view.config.showBranchComparison,this.splatted));let l=(0,eC.Ro)(o),c=(0,eC.Ro)(s);a.push(...(0,aD.h)((0,tm.Tj)(n.commits.values(),e=>(0,O.kk)(e)?new aV.m(this.view,this,e,{icon:!0}):new aA.e(this.view,this,e,l?.has(e.ref),i,c)),this)),n.hasMore&&a.push(new aI.cb(this.view,this,a[a.length-1])),this.worktreeStatus?.status?.hasChanges&&a.unshift(new UncommittedFilesNode(this.view,this,this.worktreeStatus.status,void 0)),this.children=a,e?.fulfill()}return this.children}async getTreeItem(){let e,t;this.splatted=!1;let i="",r=!1,s=new w.MarkdownString("",!0);s.isTrusted=!0;let o=this.worktree.isDefault||this.worktree.opened?` \xa0(${this.worktree.isDefault?`_default${this.worktree.opened?", active_":"_"}`:this.worktree.opened?"_active_":""})`:"",n=this.worktreeStatus?.status,a=`\\
$(folder) [\`${this.worktree.friendlyPath}\`](command:gitlens.views.revealWorktreeInExplorer?%22${this.worktree.uri.toString()}%22 "Reveal in Explorer")`,{viewAs:l}=this.view.config.worktrees;switch(this.worktree.type){case"bare":e=new w.ThemeIcon("folder"),s.appendMarkdown(`${this.worktree.isDefault?"$(pass) ":""}Bare Worktree${o}${a}`);break;case"branch":{let{branch:t}=this.worktree;if(this._branch=t,s.appendMarkdown(`${this.worktree.isDefault?"$(pass) ":""}Worktree for $(git-branch) \`${t?.getNameWithoutRemote()??t?.name}\`${o}${a}`),e=(0,ip.BI)(this.view.container,t),null!=t&&!t.remote)if(null!=t.upstream){let e=R.EO.Dash,r=await t.getRemote();if(t.upstream.missing)e=R.EO.Warning;else if(null!=r){let t,i;for(let{type:e}of r.urls)if("fetch"===e){if(t=!0,i)break}else if("push"===e&&(i=!0,t))break;t&&i?e=R.EO.ArrowsRightLeft:i?e=R.EO.ArrowRight:t&&(e=R.EO.ArrowLeft)}i=`${t.getTrackingStatus({empty:`${"name"!==l?` ${t.getNameWithoutRemote()}`:""}${(0,_.eV)(e,2*("name"!==l),2)}`,suffix:`${"name"!==l?` ${t.getNameWithoutRemote()}`:""}${(0,_.eV)(e,2,2)}`})}${t.upstream.name}`,s.appendMarkdown(`

Branch is ${t.getTrackingStatus({empty:`${t.upstream.missing?"missing upstream":"up to date with"} \\
 $(git-branch) \`${t.upstream.name}\`${r?.provider?.name?` on ${r.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:`\\
$(git-branch) \`${t.upstream.name}\`${r?.provider?.name?` on ${r.provider.name}`:""}`})}`)}else{let e=(0,tu.lb)(await this.view.container.git.remotes(t.repoPath).getRemotesWithProviders());s.appendMarkdown(`

Local branch, hasn't been published to ${e??"a remote"}`)}null!=n&&(r=n.hasChanges,s.appendMarkdown(`

${n.getFormattedDiffStatus({prefix:"Has Uncommitted Changes\\\n",empty:"No Uncommitted Changes",expand:!0})}`));break}case"detached":e=new w.ThemeIcon("git-commit"),s.appendMarkdown(`${this.worktree.isDefault?"$(pass) ":""}Detached Worktree at $(git-commit) ${(0,em.pV)(this.worktree.sha)}${o}${a}`),null!=n&&(r=n.hasChanges,s.appendMarkdown(`

${n.getFormattedDiffStatus({prefix:"Has Uncommitted Changes",empty:"No Uncommitted Changes",expand:!0})}`))}let c=this.getState("pendingPullRequest");null!=c&&s.appendMarkdown(`

$(loading~spin) Loading associated pull request${R.EO.Ellipsis}`);let u=this.worktreeStatus?.missing??!1;switch(u&&s.appendMarkdown(`

${R.EO.Warning} Unable to locate worktree path`),l){case"path":t=(0,D.Sp)(this.worktree.uri);break;case"relativePath":t=this.worktree.friendlyPath;break;default:t="tree"===this.view.config.files.layout&&this.compacted&&!this.avoidCompacting&&"branch"===this.worktree.type&&this.worktree.branch?this.worktree.branch.getBasename():this.worktree.name}let h=new w.TreeItem(t,w.TreeItemCollapsibleState.Collapsed);return h.id=this.id,h.description=i,h.contextValue=`${au.U0.Worktree}${this.worktree.isDefault?"+default":""}${this.worktree.opened?"+active":""}`,h.iconPath=null!=c?new w.ThemeIcon("loading~spin"):this.worktree.opened?new w.ThemeIcon("check"):e,h.tooltip=s,h.resourceUri=(0,al.E)("worktree",{hasChanges:r,missing:u}),h}refresh(e){super.refresh(!0),e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(this.worktree.sha,{limit:this.limit??this.view.config.defaultItemLimit,stashes:this.view.config.showStashes})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await w.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.children=void 0,this.triggerChange(!1)))}};l8([(0,ew.Yz)()],WorktreeNode.prototype,"refresh",1),l8([(0,tp.G)()],WorktreeNode.prototype,"loadMore",1);var ce=Object.defineProperty,ct=Object.getOwnPropertyDescriptor;let WorktreesNode=class WorktreesNode extends av.l{constructor(e,t,i,r){super("worktrees",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){if(!(await this.repo.access("worktrees")).allowed)return[];let e=await this.repo.git.worktrees()?.getWorktrees();if(!e?.length)return[new aI.S2(this.view,this,"No worktrees could be found.")];let t=(0,$.x1)(await Promise.allSettled((0,tm.Tj)((0,tA.xG)(e),async e=>{let t,i=!1;try{t=await e.getStatus()}catch(t){ev.Vy.error(t,`Worktree status failed: ${e.uri.toString(!0)}`),i=!0}return new WorktreeNode(this.uri,this.view,this,e,{status:t,missing:i})})),e=>"fulfilled"===e.status?e.value:void 0);if("list"===this.view.config.branches.layout||"name"!==this.view.config.worktrees.viewAs)return this.children=t,t;let i=(0,$.Ay)(t,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0)),r=new BranchOrTagFolderNode(this.view,this,"worktree",i,this.repo.path,"",void 0);this.children=r.getChildren()}return this.children}async getTreeItem(){let e=await this.repo.access("worktrees"),t=new w.TreeItem("Worktrees",e.allowed?w.TreeItemCollapsibleState.Collapsed:w.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=au.U0.Worktrees,t.description=e.allowed?void 0:` ${R.EO.Warning}  Use on privately-hosted repos requires GitLens Pro`,t.iconPath=new w.ThemeIcon("folder-opened"),t}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ct(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ce(t,i,o)})([(0,ew.Yz)()],WorktreesNode.prototype,"refresh",1);var ci=Object.defineProperty,cr=Object.getOwnPropertyDescriptor,cs=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ci(t,i,o),o};let RepositoryNode=class RepositoryNode extends ag.Y{constructor(e,t,i,r,s){super("repository",e,t,i),this.repo=r,this.updateContext({...s,repository:this.repo}),this._uniqueId=(0,au.pF)(this.type,this.context),this._status=this.repo.git.status().getStatus()}_status;get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}get workspace(){return this.context.workspace}get wsRepositoryDescriptor(){return this.context.wsRepositoryDescriptor}async getChildren(){if(void 0===this.children){let e=[],t=await this._status;if(null!=t){let i=await this.repo.git.config().getDefaultWorktreePath?.(),r=new tS.Z(this.view.container,t.repoPath,`refs/heads/${t.branch}`,!0,void 0,t.sha,t.upstream,{path:t.repoPath,isDefault:t.repoPath===i},t.detached,t.rebasing),s=await this.repo.git.status().getPausedOperationStatus?.();null!=s?e.push(new PausedOperationStatusNode(this.view,this,r,s,t,!0)):this.view.config.showUpstreamStatus&&(t.upstream?t.upstream.state.behind||t.upstream.state.ahead?(t.upstream.state.behind&&e.push(new BranchTrackingStatusNode(this.view,this,r,t,"behind",!0)),t.upstream.state.ahead&&e.push(new BranchTrackingStatusNode(this.view,this,r,t,"ahead",!0,{showAheadCommits:!0}))):e.push(new BranchTrackingStatusNode(this.view,this,r,t,"same",!0)):t.detached||e.push(new BranchTrackingStatusNode(this.view,this,r,t,"none",!0))),this.view.config.includeWorkingTree&&0!==t.files.length&&e.push(new StatusFilesNode(this.view,this,t,void 0)),!1!==this.view.config.showBranchComparison&&e.push(new CompareBranchNode(this.uri,this.view,this,r,this.view.config.showBranchComparison,!0)),0===e.length||this.view.config.compact||e.push(new aI.S2(this.view,this,"",R.EO.Dash.repeat(2),"")),this.view.config.showCommits&&e.push(new BranchNode(this.uri,this.view,this,this.repo,r,!0,{showAsCommits:!0,showComparison:!1,showStashes:this.view.config.branches.showStashes,showStatusDecorationOnly:!0,showStatus:!1,showTracking:!1}))}this.view.config.showBranches&&e.push(new BranchesNode(this.uri,this.view,this,this.repo)),this.view.config.showRemotes&&e.push(new RemotesNode(this.uri,this.view,this,this.repo)),this.view.config.showStashes&&await this.repo.git.supports("stashes")&&e.push(new StashesNode(this.uri,this.view,this,this.repo)),this.view.config.showTags&&e.push(new TagsNode(this.uri,this.view,this,this.repo)),this.view.config.showWorktrees&&await this.repo.git.supports("git:worktrees")&&e.push(new WorktreesNode(this.uri,this.view,this,this.repo)),this.view.config.showContributors&&e.push(new lp.j(this.uri,this.view,this,this.repo,{stats:this.view.config.showContributorsStatistics})),this.view.config.showIncomingActivity&&!this.repo.provider.virtual&&e.push(new ReflogNode(this.uri,this.view,this,this.repo)),this.children=e}return this.children}async getTreeItem(){let e,t=this.repo.formattedName??this.uri.repoPath??"",i=await this.repo?.getLastFetched()??0,r=`${this.repo.formattedName??this.uri.repoPath??""}${i?`${(0,_.eV)(R.EO.Dash,2,2)}Last fetched ${(0,ap.V)(i,!1)}`:""}${this.repo.formattedName?`\\
${this.uri.repoPath}`:""}`,s="",{workspace:o}=this.context,n=au.U0.Repository;this.repo.starred&&(n+="+starred"),null!=o&&(n+="+workspace","cloud"===o.type?n+="+cloud":"local"===o.type&&(n+="+local")),this.repo.virtual?n+="+virtual":this.repo.closed&&(n+="+closed");let a=await this._status;if(null!=a){let t;r+=`

Current branch $(git-branch) ${a.branch}${a.rebasing?" (Rebasing)":""}`,this.view.config.includeWorkingTree&&0!==a.files.length&&(s=a.getFormattedDiffStatus({compact:!0,prefix:(0,_.eV)(R.EO.Dot,1,1)}));let i=a.getUpstreamStatus({suffix:(0,_.eV)(R.EO.Dot,1,1)});if(e=`${i}${a.branch}${a.rebasing?" (Rebasing)":""}${s}`,null!=a.upstream){let e=(0,tu.zF)(await this.repo.git.remotes().getRemotesWithProviders());t=e?.length?e[0].name:void 0}else{let e=await a.getRemote();t=e?.provider?.name}null!=a.upstream&&(r+=` is ${a.getUpstreamStatus({empty:`up to date with $(git-branch) ${a.upstream.name}${t?` on ${t}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${a.upstream.name}${t?` on ${t}`:""}`})}`,a.upstream.state.behind&&(n+="+behind"),a.upstream.state.ahead&&(n+="+ahead")),s&&(r+=`

Working tree has uncommitted changes${a.getFormattedDiffStatus({expand:!0,prefix:"\n",separator:"\n"})}`)}null!=o&&(r+=`

Repository is ${this.repo.closed?"not ":""}open in the current window`);let l=new w.TreeItem(t,null!=o||"workspaces"===this.view.type?w.TreeItemCollapsibleState.Collapsed:w.TreeItemCollapsibleState.Expanded);l.id=this.id,l.contextValue=n,l.description=`${e??""}${i?`${(0,_.eV)(R.EO.Dot,1,1)}Last fetched ${(0,ap.V)(i)}`:""}`,l.iconPath=(0,ip.pL)(this.view.container,this.repo,a),null==o||this.repo.closed||(l.resourceUri=(0,al.E)("repository",{state:"open",workspace:!0}));let c=new w.MarkdownString(r,!0);return c.supportHtml=!0,c.isTrusted=!0,l.tooltip=c,l}fetch(e){return this.repo.fetch(e)}pull(e){return this.repo.pull(e)}push(e){return this.repo.push(e)}async refresh(e=!1){super.refresh(e),e&&(this._status=this.repo.git.status().getStatus()),await this.ensureSubscription()}async star(){await this.repo.star(),this.parent.triggerChange()}async unstar(){await this.repo.unstar(),this.parent.triggerChange()}async subscribe(){let e=await this.repo?.getLastFetched()??0,t=[(0,sh.HC)(this.repo.onDidChange,this.onRepositoryChanged,this)],i=(0,ab.u)(e);return 0!==e&&i>0&&t.push((0,oq.gC)(()=>{i!==(0,ab.u)(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)},i)),this.view.config.includeWorkingTree&&t.push((0,sh.HC)(this.repo.onDidChangeFileSystem,this.onFileSystemChanged,this,[this.repo.watchFileSystem()])),w.Disposable.from(...t)}etag(){return this.repo.etag}async onFileSystemChanged(e){if(this._status=this.repo.git.status().getStatus(),void 0!==this.children){let e=await this._status,t=this.children.findIndex(e=>"status-files"===e.type);if(void 0!==e&&(e.upstream?.state.ahead||0!==e.files.length)){let i=1;-1===t&&(t=(0,$.Kl)(this.children,e=>"tracking-status"===e.type||"branch"===e.type),i=0,t++),this.children.splice(t,i,new StatusFilesNode(this.view,this,e,void 0))}else -1!==t&&this.children.splice(t,1)}this.triggerChange(!1)}onRepositoryChanged(e){if(e.changed(e4.Z_.Closed,e4.Ti.Any)){this.dispose();return}if(null==this.children||e.changed(e4.Z_.Config,e4.Z_.Index,e4.Z_.Heads,e4.Z_.Opened,e4.Z_.PausedOperationStatus,e4.Z_.Unknown,e4.Ti.Any)){this.triggerChange(!0);return}if(e.changed(e4.Z_.Remotes,e4.Z_.RemoteProviders,e4.Ti.Any)){let e=this.children.find(e=>"remotes"===e.type);null!=e&&this.view.triggerNodeChange(e)}if(e.changed(e4.Z_.Stash,e4.Ti.Any)){let e=this.children.find(e=>"stashes"===e.type);null!=e&&this.view.triggerNodeChange(e)}if(e.changed(e4.Z_.Tags,e4.Ti.Any)){let e=this.children.find(e=>"tags"===e.type);null!=e&&this.view.triggerNodeChange(e)}}};cs([(0,ew.Rm)()],RepositoryNode.prototype,"fetch",1),cs([(0,ew.Rm)()],RepositoryNode.prototype,"pull",1),cs([(0,ew.Rm)()],RepositoryNode.prototype,"push",1),cs([(0,tp.G)(),(0,ew.Yz)()],RepositoryNode.prototype,"refresh",1),cs([(0,ew.Rm)()],RepositoryNode.prototype,"star",1),cs([(0,ew.Rm)()],RepositoryNode.prototype,"unstar",1),cs([(0,ew.Yz)()],RepositoryNode.prototype,"subscribe",1),cs([(0,ew.Yz)({args:{0:e=>`{ repository: ${e.repository.name??""}, uris(${e.uris.length}): [${e.uris.slice(0,1).map(e=>e.fsPath).join(", ")}${e.uris.length>1?", ...":""}] }`}})],RepositoryNode.prototype,"onFileSystemChanged",1),cs([(0,ew.Yz)({args:{0:e=>e.toString()}})],RepositoryNode.prototype,"onRepositoryChanged",1);var co=Object.defineProperty,cn=Object.getOwnPropertyDescriptor,ca=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&co(t,i,o),o};let RemotesRepositoryNode=class RemotesRepositoryNode extends aw.P{async getChildren(){return null==this.child&&(this.child=new RemotesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(e4.Z_.Config,e4.Z_.Remotes,e4.Z_.RemoteProviders,e4.Z_.Unknown,e4.Ti.Any)}};let RemotesViewNode=class RemotesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading remotes...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No remotes could be found.",[];v.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,ap.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new RemotesRepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.git.remotes().getRemotes();return 0===t.length?(this.view.message="No remotes could be found.",e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(t.length),e.getChildren())}return this.children}getTreeItem(){return new w.TreeItem("Remotes",w.TreeItemCollapsibleState.Expanded)}};let RemotesView=class RemotesView extends aC.DN{configKey="remotes";constructor(e,t){super(e,"remotes","Remotes","remotesView",t)}get canReveal(){return this.config.reveal||!v.H.get("views.repositories.showRemotes")}get canSelectMany(){return v.H.get("views.multiselect")}getRoot(){return new RemotesViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","remotes"),this.refresh(!0)),this),lo(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),lo(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),lo(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),lo(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"integrations.enabled")||!!v.H.changed(e,"sortBranchesBy")||!!v.H.changed(e,"sortRepositoriesBy")||!!v.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}async findBranch(e,t){if(!e.remote)return;let{repoPath:i}=e;return this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:t=>t instanceof RemotesViewNode||(t instanceof RemotesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:t instanceof RemoteNode&&t.repoPath===i&&t.remote.name===(0,tl.Zq)(e.name)),token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.branches(e.repoPath).getBranchesWithCommits([e.ref],void 0,(0,O.WM)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0});if(0===r.length)return;let s=r.map(e=>e.split("/",1)[0]);return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:e=>e instanceof RemotesViewNode||(e instanceof RemotesRepositoryNode||e instanceof BranchOrTagFolderNode?e.repoPath===i:e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}async findRemote(e,t){let{repoPath:i}=e;return this.findNode(t=>t.remote?.name===e.name,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RemotesViewNode||e instanceof RemotesRepositoryNode&&e.repoPath===i,token:t})}async revealBranch(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealCommit(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRemote(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof aw.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof RemotesViewNode||e instanceof aw.P});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return v.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}async setShowBranchPullRequest(e){await v.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await v.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};ca([(0,tp.G)(()=>"")],RemotesView.prototype,"revealBranch",1),ca([(0,tp.G)(()=>"")],RemotesView.prototype,"revealCommit",1),ca([(0,tp.G)(()=>"")],RemotesView.prototype,"revealRemote",1),ca([(0,tp.G)(()=>"")],RemotesView.prototype,"revealRepository",1);var cl=Object.defineProperty,cc=Object.getOwnPropertyDescriptor,cu=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cc(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cl(t,i,o),o};let RepositoriesNode=class RepositoriesNode extends ag.Y{constructor(e){super("repositories",e1.Bd,e)}getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return[new aI.S2(this.view,this,"No repositories could be found.")];this.children=e.map(e=>new RepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e))}return this.children}getTreeItem(){let e="workspaces"===this.view.type,t=e&&null!=this.view.container.workspaces.currentWorkspaceId,i=t&&null!=this.view.container.workspaces.currentWorkspace,r=new w.TreeItem(e?"Current Window":"Repositories",e?w.TreeItemCollapsibleState.Collapsed:w.TreeItemCollapsibleState.Expanded);e&&(r.description=w.workspace.name??w.workspace.workspaceFolders?.[0]?.name??"");let s=au.U0.Repositories;return e&&(s+="+workspaces"),t&&(s+="+linked"),i&&(s+="+current",r.resourceUri=(0,al.E)("repositories",{currentWorkspace:!0})),r.contextValue=s,r}async refresh(e=!1){let t=null!=this.children;if(super.refresh(e),!t)return;if(e){await this.unsubscribe(),this.ensureSubscription();return}let i=this.view.container.git.openRepositories;if(0===i.length&&(null==this.children||0===this.children.length))return;if(0===i.length){this.children=[new aI.S2(this.view,this,"No repositories could be found.")];return}let r=[];for(let e of i){let t=e.id,i=this.children.find(e=>e.repo.id===t);null!=i?(r.push(i),i.refresh()):r.push(new RepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e))}this.children=r,this.ensureSubscription()}subscribe(){let e=[(0,sh.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this)];return"gitlens.views.repositories"===this.view.id&&this.view.config.autoReveal&&e.push((0,sh.HC)(w.window.onDidChangeActiveTextEditor,(0,tg.s)(this.onActiveEditorChanged,500),this)),w.Disposable.from(...e)}etag(){return(0,oq.L2)(this.view.container.git.etag,this.view.container.subscription.etag)}onActiveEditorChanged(e){if(null!=e&&null!=this.children&&1!==this.children.length)try{let t=e.document.uri,i=this.children.find(e=>e instanceof RepositoryNode&&e.repo.containsUri(t));if(null==i)return;let r=0===this.view.selection.length?void 0:this.view.selection[0];for(;null!=r;){if(r===i)return;r=r.getParent()}this.view.reveal(i,{expand:!0})}catch(e){ev.Vy.error(e)}}onRepositoriesChanged(e){this.triggerChange(!0)}};cu([(0,tp.G)(),(0,ew.Yz)()],RepositoriesNode.prototype,"refresh",1),cu([(0,ew.Yz)()],RepositoriesNode.prototype,"subscribe",1),cu([(0,ew.Yz)({args:!1})],RepositoriesNode.prototype,"onActiveEditorChanged",1),cu([(0,ew.Yz)()],RepositoriesNode.prototype,"onRepositoriesChanged",1);var ch=Object.defineProperty,cd=Object.getOwnPropertyDescriptor,cp=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cd(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ch(t,i,o),o};let RepositoriesView=class RepositoriesView extends aC.DN{_onDidChangeAutoRefresh=new w.EventEmitter;get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}configKey="repositories";constructor(e,t){super(e,"repositories","Repositories","repositoriesView",t)}dispose(){this._onDidChangeAutoRefresh.dispose(),super.dispose()}getRoot(){return new RepositoriesNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","contributors","remotes","stashes","status","tags"),this.refresh(!0)),this),lo(this.getQualifiedCommand("setBranchesLayoutToList"),()=>this.setBranchesLayout("list"),this),lo(this.getQualifiedCommand("setBranchesLayoutToTree"),()=>this.setBranchesLayout("tree"),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setAutoRefreshToOn"),()=>this.setAutoRefresh(v.H.get("views.repositories.autoRefresh"),!0),this),lo(this.getQualifiedCommand("setAutoRefreshToOff"),()=>this.setAutoRefresh(v.H.get("views.repositories.autoRefresh"),!1),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),lo(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),lo(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),lo(this.getQualifiedCommand("setBranchesShowBranchComparisonOn"),()=>this.setBranchShowBranchComparison(!0),this),lo(this.getQualifiedCommand("setBranchesShowBranchComparisonOff"),()=>this.setBranchShowBranchComparison(!1),this),lo(this.getQualifiedCommand("setShowBranchesOn"),()=>this.toggleSection("showBranches",!0),this),lo(this.getQualifiedCommand("setShowBranchesOff"),()=>this.toggleSection("showBranches",!1),this),lo(this.getQualifiedCommand("setShowCommitsOn"),()=>this.toggleSection("showCommits",!0),this),lo(this.getQualifiedCommand("setShowCommitsOff"),()=>this.toggleSection("showCommits",!1),this),lo(this.getQualifiedCommand("setShowContributorsOn"),()=>this.toggleSection("showContributors",!0),this),lo(this.getQualifiedCommand("setShowContributorsOff"),()=>this.toggleSection("showContributors",!1),this),lo(this.getQualifiedCommand("setShowRemotesOn"),()=>this.toggleSection("showRemotes",!0),this),lo(this.getQualifiedCommand("setShowRemotesOff"),()=>this.toggleSection("showRemotes",!1),this),lo(this.getQualifiedCommand("setShowStashesOn"),()=>this.toggleSection("showStashes",!0),this),lo(this.getQualifiedCommand("setShowStashesOff"),()=>this.toggleSection("showStashes",!1),this),lo(this.getQualifiedCommand("setShowTagsOn"),()=>this.toggleSection("showTags",!0),this),lo(this.getQualifiedCommand("setShowTagsOff"),()=>this.toggleSection("showTags",!1),this),lo(this.getQualifiedCommand("setShowWorktreesOn"),()=>this.toggleSection("showWorktrees",!0),this),lo(this.getQualifiedCommand("setShowWorktreesOff"),()=>this.toggleSection("showWorktrees",!1),this),lo(this.getQualifiedCommand("setShowUpstreamStatusOn"),()=>this.toggleSection("showUpstreamStatus",!0),this),lo(this.getQualifiedCommand("setShowUpstreamStatusOff"),()=>this.toggleSection("showUpstreamStatus",!1),this),lo(this.getQualifiedCommand("setShowSectionOff"),e=>this.toggleSectionByNode(e,!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"sortBranchesBy")||!!v.H.changed(e,"sortContributorsBy")||!!v.H.changed(e,"sortTagsBy")||!!v.H.changed(e,"sortRepositoriesBy"))&&!0}onConfigurationChanged(e){v.H.changed(e,`views.${this.configKey}.autoRefresh`)&&this.setAutoRefresh(v.H.get("views.repositories.autoRefresh")),super.onConfigurationChanged(e)}get autoRefresh(){return this.config.autoRefresh&&this.container.storage.getWorkspace("views:repositories:autoRefresh",!0)}findBranch(e,t){let{repoPath:i}=e;return e.remote?this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:t=>t instanceof RepositoriesNode||(t instanceof RemoteNode?t.repoPath===i&&e.remote&&t.remote.name===(0,tl.Zq)(e.name):(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof RemotesNode||t instanceof BranchOrTagFolderNode)&&t.repoPath===i),token:t}):this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof BranchesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.branches(e.repoPath).getBranchesWithCommits([e.ref],void 0,(0,O.WM)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:async t=>t instanceof RepositoriesNode||(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t});if(0===(r=await this.container.git.branches(e.repoPath).getBranchesWithCommits([e.ref],void 0,(0,O.WM)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0})).length)return;let s=r.map(e=>e.split("/",1)[0]);return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:8,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findContributor(e,t){let{repoPath:i,username:r,email:s,name:o}=e;return this.findNode(e=>e instanceof ld.W&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===o,{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof lp.j)&&e.repoPath===i,token:t})}findRemote(e,t){let{repoPath:i}=e;return this.findNode(t=>t.remote?.name===e.name,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof RemotesNode)&&e.repoPath===i,token:t})}findStash(e,t){let{repoPath:i}=e;return this.findNode(t=>t.commit?.ref===e.ref,{maxDepth:3,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof StashesNode)&&e.repoPath===i,token:t})}findTag(e,t){let{repoPath:i}=e;return this.findNode(t=>t.tag?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof TagsNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}findWorktree(e,t){let{repoPath:i,uri:r}=e,s=r.toString();return this.findNode(t=>t instanceof WorktreeNode&&e.uri.toString()===s,{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof WorktreesNode)&&e.repoPath===i,token:t})}async revealBranch(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealBranches(e,t){let i=await this.findNode(t=>t instanceof BranchesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealCommit(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealContributor(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing contributor '${e.name} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRemote(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof RepositoryNode&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof RepositoriesNode});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findStash(e,r);return void 0!==s&&await this.reveal(s,t),s})}async revealStashes(e,t){let i=await this.findNode(t=>t instanceof StashesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealTag(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealTags(e,t){let i=await this.findNode(t=>t instanceof TagsNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealWorktree(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealWorktrees(e,t){let i=await this.findNode(t=>t instanceof WorktreesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async setAutoRefresh(e,t){e&&(void 0===t?t=this.container.storage.getWorkspace("views:repositories:autoRefresh",!0):await this.container.storage.storeWorkspace("views:repositories:autoRefresh",t)),(0,sT.o)("gitlens:views:repositories:autoRefresh",e&&t),this._onDidChangeAutoRefresh.fire()}setBranchesLayout(e){return v.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return v.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}setBranchShowBranchComparison(e){return v.H.updateEffective(`views.${this.configKey}.branches.showBranchComparison`,!!e&&"branch")}async toggleSection(e,t){return v.H.updateEffective(`views.${this.configKey}.${e}`,t)}async toggleSectionByNode(e,t){return e instanceof BranchesNode?v.H.updateEffective(`views.${this.configKey}.showBranches`,t):e instanceof BranchNode?v.H.updateEffective(`views.${this.configKey}.showCommits`,t):e instanceof BranchTrackingStatusNode?v.H.updateEffective(`views.${this.configKey}.showUpstreamStatus`,t):e instanceof CompareBranchNode?this.setShowBranchComparison(t):e instanceof lp.j?v.H.updateEffective(`views.${this.configKey}.showContributors`,t):e instanceof ReflogNode?v.H.updateEffective(`views.${this.configKey}.showIncomingActivity`,t):e instanceof RemotesNode?v.H.updateEffective(`views.${this.configKey}.showRemotes`,t):e instanceof StashesNode?v.H.updateEffective(`views.${this.configKey}.showStashes`,t):e instanceof TagsNode?v.H.updateEffective(`views.${this.configKey}.showTags`,t):e instanceof WorktreesNode?v.H.updateEffective(`views.${this.configKey}.showWorktrees`,t):Promise.resolve()}};cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealBranch",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealBranches",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealCommit",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealContributor",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealRemote",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealRepository",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealStash",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealStashes",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealTag",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealTags",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealWorktree",1),cp([(0,tp.G)(()=>"")],RepositoriesView.prototype,"revealWorktrees",1);let ComparePickerNode=class ComparePickerNode extends au.eu{constructor(e,t,i){super("compare-picker",e1.Bd,e,t),this.selectedRef=i}order=Date.now();getChildren(){return[]}getTreeItem(){let e,t,i=this.selectedRef,r=i?.repoPath;if(void 0!==r&&this.view.container.git.repositoryCount>1){let t=this.view.container.git.getRepository(r);e=t?.formattedName??r}return null==i?((t=new w.TreeItem("Compare <branch, tag, or ref> with <branch, tag, or ref>",w.TreeItemCollapsibleState.None)).contextValue=au.U0.ComparePicker,t.description=e,t.tooltip=`Click to select or enter a reference for compare${R.EO.Ellipsis}`,t.command={title:`Compare${R.EO.Ellipsis}`,command:this.view.getQualifiedCommand("selectForCompare")}):((t=new w.TreeItem(`Compare ${i.label} with <branch, tag, or ref>`,w.TreeItemCollapsibleState.None)).contextValue=au.U0.ComparePickerWithRef,t.description=e,t.tooltip=`Click to compare ${i.label} with${R.EO.Ellipsis}`,t.command={title:`Compare ${i.label} with${R.EO.Ellipsis}`,command:this.view.getQualifiedCommand("compareWithSelected")}),t}};var cg=i(4498),cm=Object.defineProperty,cf=Object.getOwnPropertyDescriptor,cw=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cf(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cm(t,i,o),o};let SearchAndCompareViewNode=class SearchAndCompareViewNode extends au.eu{splatted=!0;comparePicker;constructor(e){super("search-compare",e1.Bd,e)}dispose(){super.dispose(),(0,aC.lm)(this._children)}_children;get children(){if(null==this._children){let e=[],t=this.view.getStoredNodes();0!==t.length&&e.push(...t),(0,aC.lm)(this._children,e),this._children=e}return this._children}set children(e){this.children!==e&&((0,aC.lm)(this.children,e),this._children=e)}getChildren(){let e=this.children;return 0===e.length?[]:e.sort((e,t)=>t.order-e.order)}getTreeItem(){this.splatted=!1;let e=new w.TreeItem("SearchAndCompare",w.TreeItemCollapsibleState.Expanded);return e.contextValue=au.U0.SearchAndCompare,e}addOrReplace(e){let t=[...this.children];t.includes(e)||(t.push(e),this.children=t,this.view.triggerNodeChange())}async clear(){0!==this.children.length&&(this.removeComparePicker(!0),this.children=[],await this.view.clearStorage(),this.view.triggerNodeChange())}dismiss(e){if(e===this.comparePicker){this.removeComparePicker();return}(e instanceof ax.ip||e instanceof cg.X)&&e.dismiss();let t=[...this.children];if(0===t.length)return;let i=t.indexOf(e);-1!==i&&(t.splice(i,1),this.children=t,this.view.triggerNodeChange())}async refresh(e=!1){let t=this.children;0!==t.length&&await Promise.allSettled((0,$.x1)(t,t=>{let i=t.refresh?.(e);return(0,eC.yL)(i)?i:void 0}))}async compareWithSelected(e,t){let i=this.comparePicker?.selectedRef;if(null!=i){if(null==e)e=i.repoPath;else if(e!==i.repoPath){this.selectForCompare(e,t);return}if(null==t){let r=await (0,aO.NZ)(e,`Compare ${this.getRefName(i.ref)} with`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,picked:"string"==typeof i.ref?i.ref:i.ref.ref,include:aO.m7.BranchesAndTags|aO.m7.HEAD,sort:{branches:{current:!0}}});if(null==r){null!=this.comparePicker&&(await this.view.show(),await this.view.reveal(this.comparePicker,{focus:!0,select:!0}));return}t=r.ref}this.removeComparePicker(),await this.view.compare(e,i.ref,t)}}async selectForCompare(e,t,i){let r;if(null==(e??=(await (0,n$.t6)("Compare"))?.path))return;this.removeComparePicker(!0);let s=i?.prompt??!1;if(null==t){let i=await (0,aO.NZ)(e,"Compare","Choose a reference (branch, tag, etc) to compare",{allowRevisions:{ranges:!0},include:aO.m7.All,sort:{branches:{current:!0},tags:{}}});if(null==i){await this.triggerChange();return}if(t=i.ref,(0,em.p8)(t)){let e=(0,em.jY)(t);null!=e&&(t=e.left||"HEAD",r=e.right||"HEAD")}s=!0}this.comparePicker=new ComparePickerNode(this.view,this,{label:this.getRefName(t),repoPath:e,ref:t});let o=[...this.children];o.unshift(this.comparePicker),this.children=o,(0,sT.o)("gitlens:views:canCompare",!0),await this.triggerChange(),s&&await this.compareWithSelected(e,r)}getRefName(e){return"string"==typeof e?(0,em.pV)(e,{strings:{working:"Working Tree"}}):e.label??(0,em.pV)(e.ref)}removeComparePicker(e=!1){if((0,sT.o)("gitlens:views:canCompare",!1),null!=this.comparePicker){let t=[...this.children],i=t.indexOf(this.comparePicker);-1!==i&&(t.splice(i,1),this.children=t,e||this.triggerChange()),this.comparePicker=void 0}}};cw([(0,ew.Rm)()],SearchAndCompareViewNode.prototype,"clear",1),cw([(0,ew.Rm)({args:{0:e=>e.toString()}})],SearchAndCompareViewNode.prototype,"dismiss",1),cw([(0,tp.G)(),(0,ew.Yz)()],SearchAndCompareViewNode.prototype,"refresh",1);let SearchAndCompareView=class SearchAndCompareView extends aC.DN{configKey="searchAndCompare";constructor(e,t){super(e,"searchAndCompare","Search & Compare","searchAndCompareView",t)}get canSelectMany(){return v.H.get("views.multiselect")}getRoot(){return new SearchAndCompareViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("clear"),()=>void this.clear(),this),lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),lo(this.getQualifiedCommand("swapComparison"),this.swapComparison,this),lo(this.getQualifiedCommand("selectForCompare"),()=>this.selectForCompare()),lo(this.getQualifiedCommand("compareWithSelected"),this.compareWithSelected,this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat"))&&!0}clear(){return this.root?.clear()}dismissNode(e){null!=this.root&&(e instanceof ComparePickerNode||e instanceof ax.ip||e instanceof cg.X)&&this.root.dismiss(e)}async compare(e,t,i,r){return this.visible||r?.reveal===!1||await this.show({preserveFocus:!1}),this.addResultsNode(()=>new ax.ip(this,this.ensureRoot(),e,"string"==typeof t?{ref:t}:t,"string"==typeof i?{ref:i}:i),r?.reveal!==!1&&void 0)}compareWithSelected(e,t){this.ensureRoot().compareWithSelected(e,t)}selectForCompare(e,t,i){this.ensureRoot().selectForCompare(e,t,i)}async search(e,t,{label:i,reveal:r},s,o){this.visible||await this.show({preserveFocus:r?.focus!==!0});let n={label:`Search results ${"string"==typeof i?i:i.label}`,queryLabel:i};if(null!=o){await o.edit({pattern:t,labels:n,log:s});return}await this.addResultsNode(()=>new cg.X(this,this.root,e,t,n,s),r)}getStoredNodes(){let e=this.container.storage.getWorkspace("views:searchAndCompare:pinned");if(null==e)return[];let t=this.ensureRoot();return Object.entries(e).sort(([,e],[,t])=>(t.timestamp??0)-(e.timestamp??0)).map(([,e])=>"comparison"===e.type?((0,ax.sV)(this,e.checkedFiles),new ax.ip(this,t,e.path,{label:e.ref1.label,ref:e.ref1.ref??e.ref1.name??e.ref1.sha},{label:e.ref2.label,ref:e.ref2.ref??e.ref2.name??e.ref2.sha},e.timestamp)):new cg.X(this,t,e.path,(0,tK.V8)(e.search),e.labels,void 0,e.timestamp))}clearStorage(){return this.container.storage.deleteWorkspace("views:searchAndCompare:pinned")}async updateStorage(e,t,i=!1){let r=this.container.storage.getWorkspace("views:searchAndCompare:pinned");r=(0,o0.Y8)(r,e,t),await this.container.storage.storeWorkspace("views:searchAndCompare:pinned",r),i||this.triggerNodeChange(this.ensureRoot())}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof aw.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof SearchAndCompareViewNode||e instanceof aw.P});return void 0!==i&&await this.reveal(i,t),i}async addResultsNode(e,t){t??={expand:!0,focus:!0,select:!0};let i=this.ensureRoot(),r=e();return i.addOrReplace(r),!1!==t&&await new Promise(e=>queueMicrotask(async()=>{await this.reveal(r,t),e()})),r}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}swapComparison(e){if(e instanceof ax.ip)return e.swap()}};cw([(0,tp.G)(()=>"")],SearchAndCompareView.prototype,"revealRepository",1);var cv=Object.defineProperty,cy=Object.getOwnPropertyDescriptor,cb=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cy(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cv(t,i,o),o};let StashesRepositoryNode=class StashesRepositoryNode extends aw.P{async getChildren(){return null==this.child&&(this.child=new StashesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(e4.Z_.Stash,e4.Z_.Unknown,e4.Ti.Any)}};let StashesViewNode=class StashesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading stashes...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No stashes could be found.",[];v.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,ap.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new StashesRepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.git.stash()?.getStash();return t?.stashes.size?(this.view.description=this.view.getViewDescription(t.stashes.size),e.getChildren()):(this.view.message="No stashes could be found.",e.ensureSubscription(),[])}return this.children}getTreeItem(){return new w.TreeItem("Stashes",w.TreeItemCollapsibleState.Expanded)}};let StashesView=class StashesView extends aC.DN{configKey="stashes";constructor(e,t){super(e,"stashes","Stashes","stashesView",t)}get canReveal(){return this.config.reveal||!v.H.get("views.repositories.showStashes")}get canSelectMany(){return v.H.get("views.multiselect")}getRoot(){return new StashesViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("stashes"),this.refresh(!0)),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"sortRepositoriesBy")||!!v.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}findStash(e,t){let{repoPath:i}=e;return this.findNode(t=>t.commit?.ref===e.ref,{maxDepth:2,canTraverse:e=>e instanceof StashesViewNode||e instanceof StashesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof aw.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof StashesViewNode||e instanceof aw.P});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findStash(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}};cb([(0,tp.G)(()=>"")],StashesView.prototype,"revealRepository",1),cb([(0,tp.G)(()=>"")],StashesView.prototype,"revealStash",1);var cC=Object.defineProperty,ck=Object.getOwnPropertyDescriptor,cS=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ck(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cC(t,i,o),o};let TagsRepositoryNode=class TagsRepositoryNode extends aw.P{async getChildren(){return null==this.child&&(this.child=new TagsNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(e4.Z_.Tags,e4.Z_.Unknown,e4.Ti.Any)}};let TagsViewNode=class TagsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading tags...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No tags could be found.",[];v.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,ap.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new TagsRepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.git.tags().getTags();return 0===t.values.length?(this.view.message="No tags could be found.",e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(t.values.length),e.getChildren())}return this.children}getTreeItem(){return new w.TreeItem("Tags",w.TreeItemCollapsibleState.Expanded)}};let TagsView=class TagsView extends aC.DN{configKey="tags";constructor(e,t){super(e,"tags","Tags","tagsView",t)}get canReveal(){return this.config.reveal||!v.H.get("views.repositories.showTags")}get canSelectMany(){return v.H.get("views.multiselect")}getRoot(){return new TagsViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("tags"),this.refresh(!0)),this),lo(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),lo(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"sortTagsBy")||!!v.H.changed(e,"sortRepositoriesBy")||!!v.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}findTag(e,t){let{repoPath:i}=e;return this.findNode(t=>t.tag?.ref===e.ref,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof TagsViewNode||(e instanceof TagsRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof aw.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof TagsViewNode||e instanceof aw.P});return void 0!==i&&await this.reveal(i,t),i}async revealTag(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing ${(0,tc.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setLayout(e){return v.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}};cS([(0,tp.G)(()=>"")],TagsView.prototype,"revealRepository",1),cS([(0,tp.G)(()=>"")],TagsView.prototype,"revealTag",1);var cR=Object.defineProperty,cP=Object.getOwnPropertyDescriptor,cA=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cP(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cR(t,i,o),o};let WorktreesRepositoryNode=class WorktreesRepositoryNode extends aw.P{getChildren(){return null==this.child&&(this.child=new WorktreesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return!!(this.view.config.showStashes&&e.changed(e4.Z_.Stash,e4.Ti.Any))||e.changed(e4.Z_.Config,e4.Z_.Heads,e4.Z_.Index,e4.Z_.Remotes,e4.Z_.RemoteProviders,e4.Z_.PausedOperationStatus,e4.Z_.Worktrees,e4.Z_.Unknown,e4.Ti.Any)}};let WorktreesViewNode=class WorktreesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){if(!1===(await this.view.container.git.access("worktrees")).allowed)return[];this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading worktrees...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No worktrees could be found.",[];v.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,ap.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new WorktreesRepositoryNode(e1.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.getChildren();return t.length<=1?(e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(t.length),t)}return this.children}getTreeItem(){return new w.TreeItem("Worktrees",w.TreeItemCollapsibleState.Expanded)}};let WorktreesView=class WorktreesView extends aC.DN{configKey="worktrees";constructor(e,t){super(e,"worktrees","Worktrees","worktreesView",t)}getViewDescription(e){let t=super.getViewDescription(e);return t?`${t} \xa0\u2022\xa0 ${R.lD}`:R.lD}get canReveal(){return this.config.reveal||!v.H.get("views.repositories.showWorktrees")}get canSelectMany(){return v.H.get("views.multiselect")}async show(e){if(await (0,o1.ZQ)())return super.show(e)}getRoot(){return new WorktreesViewNode(this)}registerCommands(){return[lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),async()=>(this.container.git.resetCaches("worktrees"),this.refresh(!0)),this),lo(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),lo(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),lo(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),lo(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),lo(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),lo(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),lo(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),lo(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),lo(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),lo(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),lo(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this),lo(this.getQualifiedCommand("setShowStashesOn"),()=>this.setShowStashes(!0),this),lo(this.getQualifiedCommand("setShowStashesOff"),()=>this.setShowStashes(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"sortRepositoriesBy")||!!v.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}findWorktree(e,t){let{repoPath:i,uri:r}=e,s=r.toString();return this.findNode(t=>t instanceof WorktreeNode&&e.uri.toString()===s,{maxDepth:2,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof WorktreesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof aw.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof aw.P});return void 0!==i&&await this.reveal(i,t),i}async revealWorktree(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setLayout(e){return v.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return v.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return v.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return v.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await v.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await v.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}setShowStashes(e){return v.H.updateEffective(`views.${this.configKey}.showStashes`,e)}};cA([(0,tp.G)(()=>"")],WorktreesView.prototype,"revealRepository",1),cA([(0,tp.G)(()=>"")],WorktreesView.prototype,"revealWorktree",1);let ScmGroupedView=class ScmGroupedView{constructor(e,t){this.container=e,this.views=t,this._view=this.setView(this.views.lastSelectedScmGroupedView)}_view;dispose(){this._view?.dispose()}get view(){return this._view}setView(e,t){return this.views.scmGroupedViews?.has(e)||(e=this.views.scmGroupedViews?.size?(0,tm.$1)(this.views.scmGroupedViews):void 0),this._view?.type!==e&&(this._view?.dispose(),this._view=this.getView(e)),t&&this._view.show({preserveFocus:!1}),this.views.lastSelectedScmGroupedView=e,this._view}getView(e){switch(e){case"branches":return new BranchesView(this.container,!0);case"commits":return new CommitsView(this.container,!0);case"contributors":return new ContributorsView(this.container,!0);case"launchpad":return new LaunchpadView(this.container,!0);case"remotes":return new RemotesView(this.container,!0);case"repositories":return new RepositoriesView(this.container,!0);case"searchAndCompare":return new SearchAndCompareView(this.container,!0);case"stashes":return new StashesView(this.container,!0);case"tags":return new TagsView(this.container,!0);case"worktrees":return new WorktreesView(this.container,!0)}}};let WorkspaceMissingRepositoryNode=class WorkspaceMissingRepositoryNode extends au.eu{constructor(e,t,i,r){super("workspace-missing-repository",e1.Bd,e,t),this.workspace=i,this.wsRepositoryDescriptor=r,this.updateContext({wsRepositoryDescriptor:r}),this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.name}get name(){return this.wsRepositoryDescriptor.name}get workspaceId(){return this.wsRepositoryDescriptor.workspaceId}getChildren(){return[]}getTreeItem(){let e=new w.TreeItem(this.name,w.TreeItemCollapsibleState.None);return e.id=this.id,e.description="missing",e.tooltip=new w.MarkdownString(`${this.name}

Repository could not be found`),e.contextValue=au.U0.WorkspaceMissingRepository,e.iconPath=new w.ThemeIcon("question",new w.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor")),e.resourceUri=(0,al.E)("repository",{state:"missing",workspace:!0}),e}};var cI=Object.defineProperty,cD=Object.getOwnPropertyDescriptor;let WorkspaceNode=class WorkspaceNode extends ag.Y{constructor(e,t,i,r){super("workspace",e,t,i),this.parent=i,this.workspace=r,this.updateContext({workspace:r}),this._uniqueId=(0,au.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.workspace.name}async getChildren(){if(null==this.children){let e=[];try{let t=await this.workspace.getRepositoryDescriptors();if(!t?.length)return e.push(new aI.RK(this.view,this,(0,rB.gu)("gitlens.views.workspaces.addRepos","Add Repositories...",this),"No repositories")),this.children=e,this.children;let i=await this.workspace.getRepositoriesByName({force:!0});for(let r of t){let t=i.get(r.name)?.repository;if(!t){e.push(new WorkspaceMissingRepositoryNode(this.view,this,this.workspace,r));continue}e.push(new RepositoryNode(e1.nk.fromRepoPath(t.path),this.view,this,t,this.getNewContext({wsRepositoryDescriptor:r})))}}catch{return this.children=void 0,[new aI.S2(this.view,this,"Failed to load repositories")]}this.children=e}return this.children}async getTreeItem(){let e=new w.TreeItem(this.workspace.name,w.TreeItemCollapsibleState.Collapsed),t="cloud"===this.workspace.type,i=au.U0.Workspace;t?i+="+cloud":i+="+local";let r=[];return this.workspace.current&&(i+="+current",r.push("current"),e.resourceUri=(0,al.E)("workspace",{current:!0})),null!=this.workspace.localPath&&(i+="+hasPath"),(await this.workspace.getRepositoryDescriptors())?.length===0&&(i+="+empty"),e.id=this.id,e.contextValue=i,e.iconPath=new w.ThemeIcon("cloud"===this.workspace.type?"cloud":"folder"),e.tooltip=`${this.workspace.name}
${t?`Cloud Workspace ${this.workspace.shared?"(Shared)":""}`:"Local Workspace"}${t&&null!=this.workspace.provider?`
Provider: ${this.workspace.provider}`:""}`,t&&null!=this.workspace.organizationId&&r.push("shared"),e.description=r.join(", "),e}etag(){return this.view.container.git.etag}subscribe(){return w.Disposable.from((0,sh.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?cD(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cI(t,i,o)})([(0,ew.Yz)()],WorkspaceNode.prototype,"subscribe",1);var c$=Object.defineProperty,cT=Object.getOwnPropertyDescriptor;let WorkspacesViewNode=class WorkspacesViewNode extends au.eu{constructor(e){super("workspaces",e1.Bd,e)}_children;async getChildren(){if(null==this._children){let e=[],{cloudWorkspaces:t,cloudWorkspaceInfo:i,localWorkspaces:r,localWorkspaceInfo:s}=await this.view.container.workspaces.getWorkspaces();if(t.length||r.length){for(let i of(e.push(new RepositoriesNode(this.view)),t))e.push(new WorkspaceNode(this.uri,this.view,this,i));for(let t of(null!=i&&e.push(new aI.S2(this.view,this,i)),r))e.push(new WorkspaceNode(this.uri,this.view,this,t));0===t.length&&null==i&&e.push(new aI.S2(this.view,this,"No cloud workspaces found.")),null!=s&&e.push(new aI.S2(this.view,this,s))}this._children=e}return this._children}getTreeItem(){return new w.TreeItem("Workspaces",w.TreeItemCollapsibleState.Expanded)}refresh(){null!=this._children&&((0,aC.lm)(this._children),this._children=void 0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?cT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c$(t,i,o)})([(0,tp.G)(),(0,ew.Yz)()],WorkspacesViewNode.prototype,"refresh",1);let WorkspacesView=class WorkspacesView extends aC.DN{configKey="workspaces";_disposable;constructor(e){super(e,"workspaces","Workspaces","workspacesView"),this.description=R.WZ,this.disposables.push(e.workspaces.onDidResetWorkspaces(()=>void this.refresh(!0)))}dispose(){this._disposable?.dispose(),super.dispose()}getRoot(){return new WorkspacesViewNode(this)}async show(e){if(await (0,o1.ZQ)())return super.show(e)}async findWorkspaceNode(e,t){return this.findNode(t=>t.workspace?.id===e,{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof WorkspacesViewNode,token:t})}async revealWorkspaceNode(e,t){return w.window.withProgress({location:w.ProgressLocation.Notification,title:`Revealing workspace ${e} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorkspaceNode(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}registerCommands(){return[lo(this.getQualifiedCommand("info"),()=>(0,ef.CZ)(R.DS.workspaces),this),lo(this.getQualifiedCommand("copy"),()=>(0,rB.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),lo(this.getQualifiedCommand("refresh"),()=>{this.container.workspaces.resetWorkspaces()},this),lo(this.getQualifiedCommand("addRepos"),async e=>{await this.container.workspaces.addCloudWorkspaceRepos(e.workspace.id),e.getParent()?.triggerChange(!0)}),lo(this.getQualifiedCommand("addReposFromLinked"),async e=>{await this.container.workspaces.addMissingCurrentWorkspaceRepos({force:!0}),e.getParent()?.triggerChange(!0)}),lo(this.getQualifiedCommand("convert"),async e=>{let t=[];for(let i of e.getChildren())i instanceof RepositoryNode&&t.push(i.repo);0!==t.length&&(await this.container.workspaces.createCloudWorkspace({repos:t}),this.ensureRoot().triggerChange(!0))},this),lo(this.getQualifiedCommand("create"),async()=>{await this.container.workspaces.createCloudWorkspace(),this.ensureRoot().triggerChange(!0)},this),lo(this.getQualifiedCommand("createLocal"),async e=>{await this.container.workspaces.saveAsCodeWorkspaceFile(e.workspace.id),this.ensureRoot().triggerChange(!0)},this),lo(this.getQualifiedCommand("openLocal"),async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"currentWindow"}),this.ensureRoot().triggerChange(!0)},this),lo(this.getQualifiedCommand("openLocalNewWindow"),async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"newWindow"})},this),lo(this.getQualifiedCommand("changeAutoAddSetting"),async()=>{await this.container.workspaces.chooseCodeWorkspaceAutoAddSetting({current:!0})},this),lo(this.getQualifiedCommand("delete"),async e=>{await this.container.workspaces.deleteCloudWorkspace(e.workspace.id),e.getParent()?.triggerChange(!0)},this),lo(this.getQualifiedCommand("locateAllRepos"),async e=>{"cloud"===e.workspace.type&&(await w.window.withProgress({location:w.ProgressLocation.Notification,title:`Locating Repositories for '${e.workspace.name}'...`,cancellable:!0},(t,i)=>this.container.workspaces.locateAllCloudWorkspaceRepos(e.workspace.id,i)),e.triggerChange(!0))},this),lo(this.getQualifiedCommand("repo.locate"),async e=>{let t=e.wsRepositoryDescriptor;null!=t&&e.workspace?.id!=null&&(await this.container.workspaces.locateWorkspaceRepo(e.workspace.id,t),e.getParent()?.triggerChange(!0))},this),lo(this.getQualifiedCommand("repo.openInNewWindow"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,ef.OH)(e.repo.uri,{location:"newWindow"})},this),lo(this.getQualifiedCommand("repo.open"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,ef.OH)(e.repo.uri,{location:"currentWindow"})},this),lo(this.getQualifiedCommand("repo.addToWindow"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,ef.OH)(e.repo.uri,{location:"addToWorkspace"})},this),lo(this.getQualifiedCommand("repo.remove"),async e=>{let t=e.wsRepositoryDescriptor;t?.id!=null&&e.workspace?.id!=null&&(await this.container.workspaces.removeCloudWorkspaceRepo(e.workspace.id,t),e.getParent()?.getParent()?.triggerChange(!0))})]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!v.H.changed(e,"defaultDateFormat")||!!v.H.changed(e,"defaultDateLocale")||!!v.H.changed(e,"defaultDateShortFormat")||!!v.H.changed(e,"defaultDateSource")||!!v.H.changed(e,"defaultDateStyle")||!!v.H.changed(e,"defaultGravatarsStyle")||!!v.H.changed(e,"defaultTimeFormat")||!!v.H.changed(e,"sortBranchesBy")||!!v.H.changed(e,"sortContributorsBy")||!!v.H.changed(e,"sortTagsBy")||!!v.H.changed(e,"sortRepositoriesBy"))&&!0}};let cE=Object.freeze({commits:!0,branches:!0,remotes:!0,stashes:!0,tags:!0,worktrees:!0,contributors:!0,repositories:!1,searchAndCompare:!1,launchpad:!1});let Views=class Views{constructor(e,t){this.container=e,this._disposable=w.Disposable.from(v.H.onDidChange(this.onConfigurationChanged,this),new ViewCommands(e),...this.registerViews(),...this.registerWebviewViews(t),...this.registerCommands()),this._welcomeDismissed=e.storage.get("views:scm:grouped:welcome:dismissed",!1),this._lastSelectedScmGroupedView=this.container.storage.getWorkspace("views:scm:grouped:selected",v.H.get("views.scm.grouped.default")),this.updateScmGroupedViewsRegistration();let i=(0,sT.SD)("gitlens:install:new",!1),r=i;if(!r){let t=(0,sT.SD)("gitlens:install:upgradedFrom");t&&-1===(0,ek.UD)(t,"16.0.2")&&(r=!e.storage.get("views:scm:grouped:welcome:dismissed",!1))}if(r&&!w.env.remoteName&&"desktop"===w.env.appHost){let t=(0,oq.Oo)(e.onReady)(()=>{t?.dispose(),setTimeout(()=>{(0,rB.S4)("gitlens.views.scm.grouped.focus",{preserveFocus:!0}),i&&(0,rB.S4)("gitlens.views.home.focus",{preserveFocus:!0})},0)})}}_disposable;_lastSelectedScmGroupedView;get lastSelectedScmGroupedView(){if(this._scmGroupedViews?.size)return this._lastSelectedScmGroupedView&&this._scmGroupedViews.has(this._lastSelectedScmGroupedView)?this._lastSelectedScmGroupedView:(0,tm.$1)(this._scmGroupedViews)}set lastSelectedScmGroupedView(e){this._lastSelectedScmGroupedView=e,(0,sT.o)("gitlens:views:scm:grouped:view",e),this.container.storage.storeWorkspace("views:scm:grouped:selected",e).catch()}_scmGroupedView;_scmGroupedViews;get scmGroupedViews(){return this._scmGroupedViews}_welcomeDismissed=!1;dispose(){this._scmGroupedView?.dispose(),this._branchesView?.dispose(),this._commitsView?.dispose(),this._contributorsView?.dispose(),this._launchpadView?.dispose(),this._remotesView?.dispose(),this._repositoriesView?.dispose(),this._searchAndCompareView?.dispose(),this._stashesView?.dispose(),this._tagsView?.dispose(),this._worktreesView?.dispose(),this._disposable.dispose()}onConfigurationChanged(e){v.H.changed(e,"views.scm.grouped.default")&&(this.lastSelectedScmGroupedView??=v.H.get("views.scm.grouped.default")),v.H.changed(e,"views.scm.grouped.views")&&this.updateScmGroupedViewsRegistration()}registerCommands(){return[(0,rB.Lb)("gitlens.views.branches.regroup",()=>this.toggleScmViewGrouping("branches",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.branches.detach",()=>this.toggleScmViewGrouping("branches",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.branches.regroup",()=>this.toggleScmViewGrouping("branches",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.branches.visibility.hide",()=>this.toggleScmViewVisibility("branches",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.branches.visibility.show",()=>this.toggleScmViewVisibility("branches",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.branches.setAsDefault",()=>this.setAsScmGroupedDefaultView("branches")),(0,rB.Lb)("gitlens.views.commits.regroup",()=>this.toggleScmViewGrouping("commits",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.commits.detach",()=>this.toggleScmViewGrouping("commits",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.commits.regroup",()=>this.toggleScmViewGrouping("commits",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.commits.visibility.hide",()=>this.toggleScmViewVisibility("commits",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.commits.visibility.show",()=>this.toggleScmViewVisibility("commits",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.commits.setAsDefault",()=>this.setAsScmGroupedDefaultView("commits")),(0,rB.Lb)("gitlens.views.contributors.regroup",()=>this.toggleScmViewGrouping("contributors",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.contributors.detach",()=>this.toggleScmViewGrouping("contributors",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.contributors.regroup",()=>this.toggleScmViewGrouping("contributors",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.contributors.visibility.hide",()=>this.toggleScmViewVisibility("contributors",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.contributors.visibility.show",()=>this.toggleScmViewVisibility("contributors",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.contributors.setAsDefault",()=>this.setAsScmGroupedDefaultView("contributors")),(0,rB.Lb)("gitlens.views.launchpad.regroup",()=>this.toggleScmViewGrouping("launchpad",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.launchpad.detach",()=>this.toggleScmViewGrouping("launchpad",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.launchpad.regroup",()=>this.toggleScmViewGrouping("launchpad",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.launchpad.visibility.hide",()=>this.toggleScmViewVisibility("launchpad",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.launchpad.visibility.show",()=>this.toggleScmViewVisibility("launchpad",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.launchpad.setAsDefault",()=>this.setAsScmGroupedDefaultView("launchpad")),(0,rB.Lb)("gitlens.views.remotes.regroup",()=>this.toggleScmViewGrouping("remotes",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.remotes.detach",()=>this.toggleScmViewGrouping("remotes",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.remotes.regroup",()=>this.toggleScmViewGrouping("remotes",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.remotes.visibility.hide",()=>this.toggleScmViewVisibility("remotes",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.remotes.visibility.show",()=>this.toggleScmViewVisibility("remotes",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.remotes.setAsDefault",()=>this.setAsScmGroupedDefaultView("remotes")),(0,rB.Lb)("gitlens.views.repositories.regroup",()=>this.toggleScmViewGrouping("repositories",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.repositories.detach",()=>this.toggleScmViewGrouping("repositories",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.repositories.regroup",()=>this.toggleScmViewGrouping("repositories",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.repositories.visibility.hide",()=>this.toggleScmViewVisibility("repositories",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.repositories.visibility.show",()=>this.toggleScmViewVisibility("repositories",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.repositories.setAsDefault",()=>this.setAsScmGroupedDefaultView("repositories")),(0,rB.Lb)("gitlens.views.searchAndCompare.regroup",()=>this.toggleScmViewGrouping("searchAndCompare",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.searchAndCompare.detach",()=>this.toggleScmViewGrouping("searchAndCompare",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.searchAndCompare.regroup",()=>this.toggleScmViewGrouping("searchAndCompare",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.searchAndCompare.visibility.hide",()=>this.toggleScmViewVisibility("searchAndCompare",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.searchAndCompare.visibility.show",()=>this.toggleScmViewVisibility("searchAndCompare",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.searchAndCompare.setAsDefault",()=>this.setAsScmGroupedDefaultView("searchAndCompare")),(0,rB.Lb)("gitlens.views.stashes.regroup",()=>this.toggleScmViewGrouping("stashes",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.stashes.detach",()=>this.toggleScmViewGrouping("stashes",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.stashes.regroup",()=>this.toggleScmViewGrouping("stashes",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.stashes.visibility.hide",()=>this.toggleScmViewVisibility("stashes",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.stashes.visibility.show",()=>this.toggleScmViewVisibility("stashes",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.stashes.setAsDefault",()=>this.setAsScmGroupedDefaultView("stashes")),(0,rB.Lb)("gitlens.views.tags.regroup",()=>this.toggleScmViewGrouping("tags",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.tags.detach",()=>this.toggleScmViewGrouping("tags",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.tags.regroup",()=>this.toggleScmViewGrouping("tags",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.tags.visibility.hide",()=>this.toggleScmViewVisibility("tags",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.tags.visibility.show",()=>this.toggleScmViewVisibility("tags",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.tags.setAsDefault",()=>this.setAsScmGroupedDefaultView("tags")),(0,rB.Lb)("gitlens.views.worktrees.regroup",()=>this.toggleScmViewGrouping("worktrees",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.worktrees.detach",()=>this.toggleScmViewGrouping("worktrees",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.worktrees.regroup",()=>this.toggleScmViewGrouping("worktrees",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.worktrees.visibility.hide",()=>this.toggleScmViewVisibility("worktrees",!1)),(0,rB.Lb)("gitlens.views.scm.grouped.worktrees.visibility.show",()=>this.toggleScmViewVisibility("worktrees",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.worktrees.setAsDefault",()=>this.setAsScmGroupedDefaultView("worktrees")),(0,rB.Lb)("gitlens.views.scm.grouped.branches",()=>this.setScmGroupedView("branches",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.commits",()=>this.setScmGroupedView("commits",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.contributors",()=>this.setScmGroupedView("contributors",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.launchpad",()=>this.setScmGroupedView("launchpad",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.remotes",()=>this.setScmGroupedView("remotes",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.repositories",()=>this.setScmGroupedView("repositories",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.searchAndCompare",()=>this.setScmGroupedView("searchAndCompare",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.stashes",()=>this.setScmGroupedView("stashes",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.tags",()=>this.setScmGroupedView("tags",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.worktrees",()=>this.setScmGroupedView("worktrees",!0)),(0,rB.Lb)("gitlens.views.scm.grouped.refresh",()=>{this._scmGroupedView?.view!=null&&(0,rB.RS)(`gitlens.views.${this._scmGroupedView.view.type}.refresh`)}),(0,rB.Lb)("gitlens.views.scm.grouped.detachAll",()=>cO(new Set)),(0,rB.Lb)("gitlens.views.scm.grouped.regroupAll",()=>cO(c_(cE))),(0,rB.Lb)("gitlens.views.scm.grouped.welcome.dismiss",()=>{this._welcomeDismissed=!0,this.container.storage.store("views:scm:grouped:welcome:dismissed",!0).catch(),this.updateScmGroupedViewsRegistration()}),(0,rB.Lb)("gitlens.views.scm.grouped.welcome.restore",async()=>{this._welcomeDismissed=!0,this.container.storage.store("views:scm:grouped:welcome:dismissed",!0).catch(),await cO(new Set)})]}registerViews(){return[this._draftsView=new DraftsView(this.container),this._fileHistoryView=new FileHistoryView(this.container),this._lineHistoryView=new LineHistoryView(this.container),this._pullRequestView=new PullRequestView(this.container),this._workspacesView=new WorkspacesView(this.container)]}registerWebviewViews(e){return[this._commitDetailsView=e.registerWebviewView({id:"gitlens.views.commitDetails",fileName:"commitDetails.html",title:"Inspect",contextKeyPrefix:"gitlens:webviewView:commitDetails",trackingFeature:"commitDetailsView",type:"commitDetails",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{CommitDetailsWebviewProvider:r}=await i.e(0).then(i.bind(i,6318));return new r(e,t,{attachedTo:"default"})}),this._graphView=e.registerWebviewView({id:"gitlens.views.graph",fileName:ad(),title:"Commit Graph",contextKeyPrefix:"gitlens:webviewView:graph",trackingFeature:"graphView",type:"graph",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!0}},async(e,t)=>{let{GraphWebviewProvider:r}=await i.e(795).then(i.bind(i,453));return new r(e,t)}),this._graphDetailsView=e.registerWebviewView({id:"gitlens.views.graphDetails",fileName:"commitDetails.html",title:"Commit Graph Inspect",contextKeyPrefix:"gitlens:webviewView:graphDetails",trackingFeature:"graphDetailsView",type:"graphDetails",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{CommitDetailsWebviewProvider:r}=await i.e(0).then(i.bind(i,6318));return new r(e,t,{attachedTo:"graph"})}),this._homeView=e.registerWebviewView({id:"gitlens.views.home",fileName:"home.html",title:"Home",contextKeyPrefix:"gitlens:webviewView:home",trackingFeature:"homeView",type:"home",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!0}},async(e,t)=>{let{HomeWebviewProvider:r}=await i.e(928).then(i.bind(i,1687));return new r(e,t)}),this._patchDetailsView=e.registerWebviewView({id:"gitlens.views.patchDetails",fileName:"patchDetails.html",title:"Patch",contextKeyPrefix:"gitlens:webviewView:patchDetails",trackingFeature:"patchDetailsView",type:"patchDetails",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{PatchDetailsWebviewProvider:r}=await i.e(301).then(i.bind(i,2619));return new r(e,t)},async(...e)=>{if("editor"===v.H.get("cloudPatches.experimental.layout")){await (0,sT.o)("gitlens:views:patchDetails:mode",void 0),(0,rB.RS)("gitlens.showPatchDetailsPage",void 0,...e);return}let t=e[0];null!=t&&await (0,sT.o)("gitlens:views:patchDetails:mode","state"in t?t.state.mode:t.mode)}),this._timelineView=e.registerWebviewView({id:"gitlens.views.timeline",fileName:"timeline.html",title:"Visual File History",contextKeyPrefix:"gitlens:webviewView:timeline",trackingFeature:"timelineView",type:"timeline",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{TimelineWebviewProvider:r}=await i.e(696).then(i.bind(i,2234));return new r(e,t)})]}_scmGroupedViewProxyCache=new Map;getScmGroupedView(e){let t,i=this._scmGroupedViewProxyCache.get(e);if(null!=i)return i;let r=new Map,s=()=>{if((null==t||t.disposed)&&(r.clear(),null==this._scmGroupedView&&this.updateScmGroupedViewsRegistration(!0),null==(t=this._scmGroupedView.setView(e))))throw Error(`Unable to initialize view: ${e}`);return t};return i=new Proxy(Object.create(null),{get:function(e,i){if("visible"===i)return null!=t&&!t.disposed&&t.visible;let o=s(),n=Reflect.get(o,i,o);if("function"!=typeof n)return n;let a=r.get(i);return null==a&&(a=n.bind(o),r.set(i,a)),a},set:function(e,t,i,r){return Reflect.set(s(),t,i,r)},has:function(e,t){return Reflect.has(s(),t)},getOwnPropertyDescriptor:function(e,t){return Reflect.getOwnPropertyDescriptor(s(),t)},defineProperty:function(e,t,i){return Reflect.defineProperty(s(),t,i)},deleteProperty:function(e,t){return Reflect.deleteProperty(s(),t)},ownKeys:function(e){return Reflect.ownKeys(s())}}),this._scmGroupedViewProxyCache.set(e,i),i}async setAsScmGroupedDefaultView(e){this.lastSelectedScmGroupedView=e,await v.H.updateEffective("views.scm.grouped.default",e)}setScmGroupedView(e,t){if(null!=this._scmGroupedView)return this._scmGroupedView.setView(e,t);this.scmGroupedViews?.has(e)||(e=this.scmGroupedViews?.size?(0,tm.$1)(this.scmGroupedViews):void 0),this.lastSelectedScmGroupedView=e,t&&(0,rB.S4)("gitlens.views.scm.grouped.focus")}async showWelcomeNotification(){this._welcomeDismissed=!0;let e=(0,sT.SD)("gitlens:install:new",!1),t={title:"OK",isCloseAffordance:!0},i={title:"Restore Previous Locations"};await w.window.showInformationMessage(e?"GitLens groups many related views—Commits, Branches, Stashes, etc—together for easier view management. Use the tabs in the view header to navigate, detach, or regroup views.":"In GitLens 16, we've grouped many related views—Commits, Branches, Stashes, etc—together for easier view management. Use the tabs in the view header to navigate, detach, or regroup views.",...e?[t]:[t,i])===i?(0,rB.RS)("gitlens.views.scm.grouped.welcome.restore"):(0,rB.RS)("gitlens.views.scm.grouped.welcome.dismiss")}async toggleScmViewGrouping(e,t){null!=this._scmGroupedViews&&(t?this._scmGroupedViews.has(e)||(this._scmGroupedViews.add(e),this.lastSelectedScmGroupedView=e):this._scmGroupedViews.has(e)&&(this._scmGroupedViews.delete(e),e===this.lastSelectedScmGroupedView&&(this.lastSelectedScmGroupedView=(0,tm.$1)(this._scmGroupedViews))),await cO(this._scmGroupedViews),setTimeout(()=>(0,rB.S4)(`gitlens.views.${t?"scm.grouped":e}.focus`),1))}toggleScmViewVisibility(e,t){let i=v.H.get("views.scm.grouped.hiddenViews");i[e]=!t,v.H.updateEffective("views.scm.grouped.hiddenViews",i),t&&this.container.views.showView(e)}updateScmGroupedViewsRegistration(e){if((0,sT.o)("gitlens:views:scm:grouped:welcome",!this._welcomeDismissed),this._scmGroupedViews=c_({...cE,...v.H.get("views.scm.grouped.views",void 0,cE)}),this._scmGroupedView?.dispose(),this._scmGroupedView=void 0,this._scmGroupedViews.has("branches")?(this._branchesView?.dispose(),this._branchesView=void 0):this._branchesView??=new BranchesView(this.container),this._scmGroupedViews.has("commits")?(this._commitsView?.dispose(),this._commitsView=void 0):this._commitsView??=new CommitsView(this.container),this._scmGroupedViews.has("contributors")?(this._contributorsView?.dispose(),this._contributorsView=void 0):this._contributorsView??=new ContributorsView(this.container),this._scmGroupedViews.has("launchpad")?(this._launchpadView?.dispose(),this._launchpadView=void 0):this._launchpadView??=new LaunchpadView(this.container),this._scmGroupedViews.has("remotes")?(this._remotesView?.dispose(),this._remotesView=void 0):this._remotesView??=new RemotesView(this.container),this._scmGroupedViews.has("repositories")?(this._repositoriesView?.dispose(),this._repositoriesView=void 0):this._repositoriesView??=new RepositoriesView(this.container),this._scmGroupedViews.has("searchAndCompare")?(this._searchAndCompareView?.dispose(),this._searchAndCompareView=void 0):this._searchAndCompareView??=new SearchAndCompareView(this.container),this._scmGroupedViews.has("stashes")?(this._stashesView?.dispose(),this._stashesView=void 0):this._stashesView??=new StashesView(this.container),this._scmGroupedViews.has("tags")?(this._tagsView?.dispose(),this._tagsView=void 0):this._tagsView??=new TagsView(this.container),this._scmGroupedViews.has("worktrees")?(this._worktreesView?.dispose(),this._worktreesView=void 0):this._worktreesView??=new WorktreesView(this.container),!this._welcomeDismissed){if(!e)return;this.showWelcomeNotification()}this._scmGroupedViews.size&&(this._scmGroupedView??=new ScmGroupedView(this.container,this))}_branchesView;get branches(){return this._branchesView??this.getScmGroupedView("branches")}_commitsView;get commits(){return this._commitsView??this.getScmGroupedView("commits")}_commitDetailsView;get commitDetails(){return this._commitDetailsView}_contributorsView;get contributors(){return this._contributorsView??this.getScmGroupedView("contributors")}_draftsView;get drafts(){return this._draftsView}_fileHistoryView;get fileHistory(){return this._fileHistoryView}_graphView;get graph(){return this._graphView}_graphDetailsView;get graphDetails(){return this._graphDetailsView}_homeView;get home(){return this._homeView}_launchpadView;_lineHistoryView;_patchDetailsView;get patchDetails(){return this._patchDetailsView}_pullRequestView;get pullRequest(){return this._pullRequestView}_remotesView;get remotes(){return this._remotesView??this.getScmGroupedView("remotes")}_repositoriesView;get repositories(){return this._repositoriesView??this.getScmGroupedView("repositories")}_searchAndCompareView;get searchAndCompare(){return this._searchAndCompareView??this.getScmGroupedView("searchAndCompare")}_stashesView;get stashes(){return this._stashesView??this.getScmGroupedView("stashes")}_tagsView;get tags(){return this._tagsView??this.getScmGroupedView("tags")}_timelineView;get timeline(){return this._timelineView}_worktreesView;get worktrees(){return this._worktreesView??this.getScmGroupedView("worktrees")}_workspacesView;get workspaces(){return this._workspacesView}async revealBranch(e,t){let i=e.remote?this.remotes:this.branches,r=i.canReveal?i:this.repositories,s=await r.revealBranch(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealCommit(e,t){let{commits:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealCommit(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealContributor(e,t){let{contributors:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealContributor(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealRemote(e,t){let{remotes:i}=this,r=i.canReveal?i:this.repositories,s=null!=e?await r.revealRemote(e,t):void 0;return await r.show({preserveFocus:!t?.focus}),s}async revealRepository(e,t,i){let r=null==t||!1===t.canReveal?this.repositories:t,s=await r.revealRepository(e,i);return await r.show({preserveFocus:!i?.focus}),s}async revealStash(e,t){let{stashes:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealStash(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealTag(e,t){let{tags:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealTag(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealWorktree(e,t){let{worktrees:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealWorktree(e,t);return await r.show({preserveFocus:!t?.focus}),s}async showView(e){let t=this;function i(e,i){return null!=i?i.show():(t.setScmGroupedView(e,!0),Promise.resolve())}switch(e){case"branches":return i("branches",this._branchesView);case"commits":return i("commits",this._commitsView);case"contributors":return i("contributors",this._contributorsView);case"drafts":return this.drafts.show();case"fileHistory":return this.fileHistory.show();case"launchpad":return i("launchpad",this._launchpadView);case"lineHistory":return this._lineHistoryView.show();case"pullRequest":return this.pullRequest.show();case"remotes":return i("remotes",this._remotesView);case"repositories":return i("repositories",this._repositoriesView);case"searchAndCompare":return i("searchAndCompare",this._searchAndCompareView);case"stashes":return i("stashes",this._stashesView);case"tags":return i("tags",this._tagsView);case"worktrees":return i("worktrees",this._worktreesView);case"workspaces":return this.workspaces.show();case"scm.grouped":return void(0,rB.S4)("gitlens.views.scm.grouped.focus")}}};function c_(e){let t=new Set;for(let[i,r]of Object.entries(e))r&&t.add(i),(0,sT.o)(`gitlens:views:scm:grouped:views:${i}`,r);return t}async function cO(e){await v.H.updateEffective("views.scm.grouped.views",{commits:e.has("commits"),branches:e.has("branches"),remotes:e.has("remotes"),stashes:e.has("stashes"),tags:e.has("tags"),worktrees:e.has("worktrees"),contributors:e.has("contributors"),repositories:e.has("repositories"),searchAndCompare:e.has("searchAndCompare"),launchpad:e.has("launchpad")})}let RequestType=class RequestType{constructor(e){this.name=e}};let cx=new RequestType("git"),cF=new RequestType("git/logStreamTo"),cL=new RequestType("repositories/inFolder");var cB=Object.defineProperty,cU=Object.getOwnPropertyDescriptor,cN=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cU(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cB(t,i,o),o};let cq=()=>!0,cW=new Map([["blame",cq],["branch",e=>"--contains"===e[1]],["cat-file",cq],["check-mailmap",cq],["check-ref-format",cq],["config",e=>"--get"===e[1]||"--get-regex"===e[1]],["diff",cq],["difftool",cq],["for-each-ref",cq],["log",cq],["ls-files",cq],["ls-tree",cq],["merge-base",cq],["remote",e=>"-v"===e[1]||"get-url"===e[1]],["rev-list",cq],["rev-parse",cq],["show",cq],["show-ref",cq],["stash",e=>"list"===e[1]],["status",cq],["symbolic-ref",cq],["tag",e=>"-l"===e[1]],["worktree",e=>"list"===e[1]]]),cM=/^[/|\\]/,cG=class _VslsHostService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this._disposable=w.Disposable.from(w.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this)),this.onRequest(cx,this.onGitCommandRequest.bind(this)),this.onRequest(cF,this.onGitLogStreamToCommandRequest.bind(this)),this.onRequest(cL,this.onGetRepositoriesForUriRequest.bind(this)),this.onWorkspaceFoldersChanged()}static ServiceId="proxy";static async share(e,t){let i=await e.shareService(this.ServiceId);if(null==i)throw Error("Failed to share host service");return new _VslsHostService(e,i,t)}_disposable;_localPathsRegex;_localToSharedPaths=new Map;_sharedPathsRegex;_sharedToLocalPaths=new Map;dispose(){this._disposable.dispose(),this._api.unshareService(_VslsHostService.ServiceId)}onRequest(e,t){this._service.onRequest(e.name,function(e,i){let r;for(let t of e)if("object"==typeof t&&"__type"in t){r=t;break}return t(r??e[0],i)})}onAvailabilityChanged(e){}onWorkspaceFoldersChanged(e){let t,i;if(null==w.workspace.workspaceFolders||0===w.workspace.workspaceFolders.length)return;let r=(0,eb.dQ)();for(let e of(this._localToSharedPaths.clear(),this._sharedToLocalPaths.clear(),w.workspace.workspaceFolders))t=(0,T.Fd)(e.uri.fsPath),i=(0,T.Fd)(this.convertLocalUriToShared(e.uri).toString()),ev.Vy.debug(r,`shared='${i}' \u2194 local='${t}'`),this._localToSharedPaths.set(t,i),this._sharedToLocalPaths.set(i,t);let s=(0,tm.fj)(this._sharedToLocalPaths.values(),"|");s=s.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._localPathsRegex=RegExp(`(${s})`,"gi");let o=(0,tm.fj)(this._localToSharedPaths.values(),"|");o=o.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._sharedPathsRegex=RegExp(`^(${o})`,"i")}async onGitCommandRequest(e,t){let i=cW.get(e.args[0]);if(!i?.(e.args))throw Error(`Git ${e.args[0]} command is not allowed`);let{options:r,args:s}=e,[o,n]=this.convertGitCommandCwd(r.cwd);r.cwd=o;let a=await function(e,...t){return sn().exec(e,...t)}(r,...this.convertGitCommandArgs(s,n));return"string"==typeof a?(null!=this._localPathsRegex&&a.length>0&&(a=a.replace(this._localPathsRegex,(e,t)=>{let i=this._localToSharedPaths.get((0,T.Fd)(t));return null!=i?i:t})),{data:a}):{data:a.toString("binary"),isBuffer:!0}}async onGitLogStreamToCommandRequest(e,t){let{options:i,args:r}=e,[s,o]=this.convertGitCommandCwd(e.repoPath),[n,a]=await function(e,t,i,r,...s){return sn().logStreamTo(e,t,i,r,...s)}(s,e.sha,e.limit,i,...this.convertGitCommandArgs(r,o));return null!=this._localPathsRegex&&n.length>0&&(n=n.map(e=>e.replace(this._localPathsRegex,(e,t)=>{let i=this._localToSharedPaths.get((0,T.Fd)(t));return null!=i?i:t}))),{data:n,count:a}}async onGetRepositoriesForUriRequest(e,t){let i=[],r=this.convertSharedUriToLocal(w.Uri.parse(e.folderUri,!0)),s=this.container.git.getRepository(r);if(null!=s){let e=this.convertLocalUriToShared(s.uri);i.push({folderUri:e.toString(),root:s.root,closed:s.closed})}return{repositories:i}}convertLocalUriToShared(e){let t=(0,eb.dQ)(),i=this._api.convertLocalUriToShared(e);ev.Vy.debug(t,`LiveShare.convertLocalUriToShared(${e.toString(!0)}) returned ${i.toString(!0)}`);let r=e.path,s=i.path;if(i.authority.length>0&&(s=`/${i.authority}${s}`),RegExp(`${r}$`,"i").test(s))if(s.length===r.length){let t=w.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}`})}else i=i.with({authority:"",path:s.substring(0,s.length-r.length)});else if(!s.startsWith("/~")){let t=w.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}${s}`})}return i}convertGitCommandCwd(e){let t=!1;if(null!=e&&e.length>0&&null!=this._sharedToLocalPaths){if(this._sharedPathsRegex?.test(e))e=(0,T.Fd)(e).replace(this._sharedPathsRegex,(e,i)=>{t||(t="/~0"===i);let r=this._sharedToLocalPaths.get(i);return null!=r?r:i});else if(cM.test(e)){let i=this._sharedToLocalPaths.get("vsls:/~0");null!=i&&(t=!0,e=(0,T.Fd)(this.container.git.getAbsoluteUri(e,i).fsPath))}}return[e,t]}convertGitCommandArgs(e,t){let i=!1,r=-1;for(let s of e){if(r++,"--"===s){i=!0;continue}i&&"string"==typeof s&&(t&&cM.test(s[0])&&e.splice(r,1,s.substring(1)),this._sharedPathsRegex?.test(s)&&e.splice(r,1,(0,T.Fd)(s).replace(this._sharedPathsRegex,(e,t)=>{let i=this._sharedToLocalPaths.get(t);return null!=i?i:t})))}return e}convertSharedUriToLocal(e){(0,rF.VN)(e.path)&&(e=e.with({path:`${e.path}/`}));let t=this._api.convertSharedUriToLocal(e),i=t.path,r=e.path;return i.endsWith(r)&&(i=i.substring(0,i.length-r.length)),47===i.charCodeAt(i.length-1)&&(i=i.slice(0,-1)),t.with({path:i})}};cN([(0,ew.Rm)()],cG.prototype,"onAvailabilityChanged",1),cN([(0,ew.Yz)()],cG.prototype,"onWorkspaceFoldersChanged",1),cN([(0,ew.Rm)()],cG.prototype,"onGitCommandRequest",1),cN([(0,ew.Rm)()],cG.prototype,"onGitLogStreamToCommandRequest",1),cN([(0,ew.Rm)()],cG.prototype,"onGetRepositoriesForUriRequest",1),cN([(0,ew.Yz)({exit:!0})],cG.prototype,"convertLocalUriToShared",1),cN([(0,ew.Rm)()],cG,"share",1);var cH=Object.defineProperty,cV=Object.getOwnPropertyDescriptor,cj=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cV(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cH(t,i,o),o};let cQ=class _VslsGuestService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this.onAvailabilityChanged(t.isServiceAvailable)}static async connect(e,t){let i=(0,eb.dQ)();try{let i=await e.getSharedService(cG.ServiceId);if(null==i)throw Error("Failed to connect to host service");return new _VslsGuestService(e,i,t)}catch(e){ev.Vy.error(e,i);return}}dispose(){}onAvailabilityChanged(e){if(e){this.container.git.setEnabledContext(!0);return}this.container.git.setEnabledContext(!1),w.window.showWarningMessage("GitLens features will be unavailable. Unable to connect to the host GitLens service. The host may have disabled GitLens guest access or may not have GitLens installed.")}async git(e,...t){let i=await this.sendRequest(cx,{__type:"gitlens",options:e,args:t});return i.isBuffer?Buffer.from(i.data,"binary"):i.data}async gitLogStreamTo(e,t,i,r,...s){let o=await this.sendRequest(cF,{__type:"gitlens",repoPath:e,sha:t,limit:i,options:r,args:s});return[o.data,o.count]}async getRepositoriesForUri(e){return(await this.sendRequest(cL,{__type:"gitlens",folderUri:e.toString()})).repositories}sendRequest(e,t,i){return this._service.request(e.name,[t],i)}};cj([(0,ew.Rm)()],cQ.prototype,"onAvailabilityChanged",1),cj([(0,ew.Rm)()],cQ.prototype,"git",1),cj([(0,ew.Rm)()],cQ.prototype,"gitLogStreamTo",1),cj([(0,ew.Rm)()],cQ.prototype,"getRepositoriesForUri",1),cj([(0,ew.Yz)()],cQ.prototype,"sendRequest",1),cj([(0,ew.Rm)()],cQ,"connect",1);var cz=Object.defineProperty,cY=Object.getOwnPropertyDescriptor,cK=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?cY(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cz(t,i,o),o};function cZ(e){switch(e){case"available":return{status:"online",statusText:"Available"};case"away":return{status:"away",statusText:"Away"};case"busy":return{status:"busy",statusText:"Busy"};case"doNotDisturb":return{status:"dnd",statusText:"DND"};default:return{status:"offline",statusText:"Offline"}}}let VslsController=class VslsController{constructor(e){this.container=e,this._ready=(0,eC.v6)(),this._disposable=w.Disposable.from((0,sh.Oo)(e.onReady)(this.onReady,this),v.H.onDidChange(this.onConfigurationChanged,this))}_api;_disposable;_guest;_host;_ready;dispose(){this._ready.fulfill(),this._disposable.dispose(),this._host?.dispose(),this._guest?.dispose()}onReady(){this.initialize()}async initialize(){if(!this.enabled){(0,sT.o)("gitlens:vsls",!1);return}w.workspace.workspaceFolders?.some(e=>e.uri.scheme===R.xB.Vsls)&&this.setReadonly(!0);try{this._api=this.getLiveShareApi();let e=await this._api;if(null==e){(0,sT.o)("gitlens:vsls",!1),this._ready.fulfill();return}(0,sT.o)("gitlens:vsls",!0),this._disposable=w.Disposable.from(this._disposable,e.onDidChangeSession(t=>this.onLiveShareSessionChanged(e,t),this)),this.onLiveShareSessionChanged(e,{session:e.session})}catch(e){ev.Vy.error(e)}}onConfigurationChanged(e){v.H.changed(e,"liveshare.enabled")&&this.initialize()}async onLiveShareSessionChanged(e,t){switch(this._host?.dispose(),this._host=void 0,this._guest?.dispose(),this._guest=void 0,t.session.role){case 1:this.setReadonly(!1),(0,sT.o)("gitlens:vsls","host"),v.H.get("liveshare.allowGuestAccess")&&(this._host=await cG.share(e,this.container)),this._ready.fulfill();break;case 2:this.setReadonly(!0),(0,sT.o)("gitlens:vsls","guest"),this._guest=await cQ.connect(e,this.container),this._ready.fulfill();break;default:this.setReadonly(!1),(0,sT.o)("gitlens:vsls",!0),this._ready.pending||(this._ready=(0,eC.v6)())}}async getLiveShareApi(){try{let e=this.getLiveShareExtension();if(null!=e){let t=e.isActive?e.exports:await e.activate();return await t.getApi("1.0.4753")??void 0}}catch(e){ev.Vy.error(e)}}getLiveShareExtension(){return w.extensions.getExtension("ms-vsliveshare.vsliveshare")}get active(){return v.H.get("liveshare.enabled")&&this.getLiveShareExtension()?.isActive}get enabled(){return v.H.get("liveshare.enabled")}_readonly=!1;get readonly(){return this._readonly}setReadonly(e){this._readonly=e,(0,sT.o)("gitlens:readonly",!!e||void 0)}async guest(){return null!=this._guest||await this._ready.promise,this._guest}async getContact(e){if(null==e)return;let t=await this._api;if(null!=t)return(await t.getContacts([e])).contacts[e]}async getContacts(e){let t=await this._api;if(null!=t)return Object.values((await t.getContacts(e)).contacts)}async getContactPresence(e){let t=await this.getContact(e);if(null!=t)return cZ(t.status)}async getContactsPresence(e){let t=await this.getContacts(e);if(null!=t)return new Map(Object.values(t).map(e=>[e.email,cZ(e.status)]))}async invite(e){if(null==e)return;let t=await this.getContact(e);if(null!=t)return t.invite()}async startSession(){let e=await this._api;if(null!=e)return e.share()}};cK([(0,ew.Yz)()],VslsController.prototype,"getContact",1),cK([(0,ew.Yz)({args:{0:e=>e.length}})],VslsController.prototype,"getContacts",1),cK([(0,ew.Yz)()],VslsController.prototype,"getContactPresence",1),cK([(0,ew.Yz)({args:{0:e=>e.length}})],VslsController.prototype,"getContactsPresence",1);var cJ=i(6386),cX=i(9949),c0=i(5510),c1=i(162);let c2="rebase",c5=new c0.Q2(c2,"abort"),c4=new c0.Q2(c2,"disable"),c7=new c0.Q2(c2,"search"),c3=new c0.Q2(c2,"start"),c6=new c0.Q2(c2,"switch"),c9=new c0.Q2(c2,"reorder"),c8=new c0.Q2(c2,"change/entry"),ue=new c0.Q2(c2,"move/entry"),ut=new c0.Q2(c2,"selection/update"),ui=new c0.C1(c2,"didChange");var ur=Object.defineProperty,us=Object.getOwnPropertyDescriptor,uo=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?us(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ur(t,i,o),o};let un=0x40000000-1,ua=new TextDecoder("utf8"),ul=(0,cX.N)(),uc=(0,cX.N)(),uu=/^\s?#\s?Rebase\s([0-9a-f]+)(?:..([0-9a-f]+))?\sonto\s([0-9a-f]+)\s.*$/im,uh=/^\s?(p|pick|r|reword|e|edit|s|squash|f|fixup|d|drop)\s([0-9a-f]+?)\s(.*)$/gm,ud=new Map([["p","pick"],["pick","pick"],["r","reword"],["reword","reword"],["e","edit"],["edit","edit"],["s","squash"],["squash","squash"],["f","fixup"],["fixup","fixup"],["d","drop"],["drop","drop"]]);let RebaseEditorProvider=class RebaseEditorProvider{constructor(e){this.container=e,this._disposable=w.Disposable.from(w.window.registerCustomEditorProvider("gitlens.rebase",this,{supportsMultipleEditorsPerDocument:!1,webviewOptions:{enableFindWidget:!0,retainContextWhenHidden:!0}})),this.ascending="asc"===v.H.get("rebaseEditor.ordering")}_disposable;ascending=!1;dispose(){this._disposable.dispose()}get contextKeyPrefix(){return"gitlens:webview:rebase"}get enabled(){let e=v.H.inspectCore("workbench.editorAssociations")?.globalValue;if(null==e||0===e.length)return!0;if(Array.isArray(e)){let t=e.find(e=>"git-rebase-todo"===e.filenamePattern);return null==t||"gitlens.rebase"===t.viewType}let t=e["git-rebase-todo"];return null==t||"gitlens.rebase"===t}_disableAfterNextUse=!1;async enableForNextUse(){this.enabled||(await this.setEnabled(!0),this._disableAfterNextUse=!0)}async setEnabled(e){this._disableAfterNextUse=!1;let t=v.H.inspectCore("workbench.editorAssociations"),i=t?.globalValue;if(Array.isArray(i)&&(i=i.reduce((e,t)=>(e[t.filenamePattern]=t.viewType,e),Object.create(null))),null==i){if(e)return;i={"git-rebase-todo":"default"}}else i["git-rebase-todo"]=e?"gitlens.rebase":"default";await v.H.updateAny("workbench.editorAssociations",i,w.ConfigurationTarget.Global)}async resolveCustomTextEditor(e,t,i){this.container.usage.track("rebaseEditor:shown").catch();let r=(0,T.Fd)(w.Uri.joinPath(e.uri,"..","..","..").fsPath),s=this.container.git.getRepository(r),o=[],n={dispose:()=>void w.Disposable.from(...o).dispose(),id:uc.next(),subscriptions:o,document:e,panel:t,repoPath:s?.path??r,firstSelection:!0};o.push(t.onDidDispose(()=>{(0,c1.Do)(this.contextKeyPrefix),w.Disposable.from(...o).dispose()}),t.onDidChangeViewState(e=>this.onViewStateChanged(n,e)),t.webview.onDidReceiveMessage(e=>this.onMessageReceived(n,e)),w.workspace.onDidChangeTextDocument(t=>{0!==t.contentChanges.length&&t.document.uri.toString()===e.uri.toString()&&this.updateState(n,!0)}),w.workspace.onDidSaveTextDocument(t=>{t.uri.toString()===e.uri.toString()&&this.updateState(n,!0)})),null!=s&&o.push(s.onDidChange(e=>{e.changed(e4.Z_.Rebase,e4.Ti.Any)&&this.updateState(n)})),t.webview.options={enableCommandUris:!0,enableScripts:!0},t.webview.html=await this.getHtml(n),this._disableAfterNextUse&&(this._disableAfterNextUse=!1,this.setEnabled(!1))}onViewFocusChanged(e){(0,c1.WJ)(this.contextKeyPrefix)}onViewStateChanged(e,t){t.webviewPanel.visible?(0,c1.WJ)(this.contextKeyPrefix):(0,c1.Do)(this.contextKeyPrefix),e.pendingChange&&this.updateState(e)}async parseState(e){if(void 0===e.branchName){let t=await this.container.git.branches(e.repoPath).getBranch();e.branchName=t?.name??null}return await ug(this.container,e,this.ascending)}async postMessage(e,t){try{let i=await e.panel.webview.postMessage(t);return e.pendingChange=!i,i}catch(t){return ev.Vy.error(t),e.pendingChange=!0,!1}}onMessageReceived(e,t){switch(!0){case c0.pY.is(t):this.onViewFocusChanged(t.params);break;case c5.is(t):this.abort(e);break;case c4.is(t):this.disable(e);break;case c7.is(t):(0,rB.S4)("editor.action.webvieweditor.showFind");break;case c3.is(t):this.rebase(e);break;case c6.is(t):this.switchToText(e);break;case c9.is(t):this.swapOrdering(t.params,e);break;case c8.is(t):this.onEntryChanged(e,t.params);break;case ue.is(t):this.onEntryMoved(e,t.params);break;case ut.is(t):this.onSelectionChanged(e,t.params)}}async onEntryChanged(e,t){let i=um(e.document),r=i.find(e=>e.sha===t.sha);if(null==r)return;let s=e.document.positionAt(r.index),o=e.document.validateRange(new w.Range(new w.Position(s.line,0),new w.Position(s.line,un))),n=t.action,a=new w.WorkspaceEdit,l=[...i];l.splice(i.indexOf(r),1,{...r,action:t.action});let c=!1;for(let e of l)"squash"===e.action||"fixup"===e.action?c=!0:c&&"drop"!==e.action&&(c=!1);if(c){let t=l[l.length-1];if(r.sha===t.sha)n="pick";else{let i=e.document.positionAt(t.index),r=e.document.validateRange(new w.Range(new w.Position(i.line,0),new w.Position(i.line,un)));a.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}a.replace(e.document.uri,o,`${n} ${r.sha} ${r.message}`),await w.workspace.applyEdit(a)}async onEntryMoved(e,t){let i,r=um(e.document),s=r.find(e=>e.sha===t.sha);if(null==s)return;let o=r.findIndex(e=>e.sha===t.sha);if(t.relative){if(-1===t.to&&0===o||1===t.to&&o===r.length-1)return;i=o+t.to}else{if(o===t.to)return;i=t.to}let n=r[i],a=e.document.positionAt(n.index).line;i<o&&a++;let l=e.document.positionAt(s.index),c=e.document.validateRange(new w.Range(new w.Position(l.line,0),new w.Position(l.line+1,0))),u=[...r];u.splice(o,1),u.splice(i,0,s);let h=!1;for(let e of u)"squash"===e.action||"fixup"===e.action?h=!0:h&&"drop"!==e.action&&(h=!1);let d=new w.WorkspaceEdit,p=s.action;if(h){let t=u[u.length-1];if(s.sha===t.sha)p="pick";else{let i=e.document.positionAt(t.index),r=e.document.validateRange(new w.Range(new w.Position(i.line,0),new w.Position(i.line,un)));d.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}d.delete(e.document.uri,c),d.insert(e.document.uri,new w.Position(a,0),`${p} ${s.sha} ${s.message}
`),await w.workspace.applyEdit(d)}onSelectionChanged(e,t){null==e.fireSelectionChangedDebounced&&(e.fireSelectionChangedDebounced=(0,tg.s)(this.fireSelectionChanged.bind(this),250)),e.fireSelectionChangedDebounced(e,t.sha)}fireSelectionChanged(e,t){if(null==t)return;let i=v.H.get("rebaseEditor.showDetailsView");t=e.commits?.find(e=>e.sha.startsWith(t))?.sha??t,this.container.events.fire("commit:selected",{commit:(0,tc.kA)(t,e.repoPath,{refType:"revision"}),interaction:"passive",preserveFocus:!0,preserveVisibility:e.firstSelection?!1===i:"selection"!==i},{source:"gitlens.rebase"}),e.firstSelection=!1}updateState(e,t=!1){if(t){e.notifyDidChangeStateDebounced?.cancel(),this.notifyDidChangeState(e);return}null==e.notifyDidChangeStateDebounced&&(e.notifyDidChangeStateDebounced=(0,tg.s)(this.notifyDidChangeState.bind(this),250)),e.notifyDidChangeStateDebounced(e)}async notifyDidChangeState(e){if(!e.panel.visible){e.pendingChange=!0;return}let t=await this.parseState(e);this.postMessage(e,{id:`host:${ul.next()}`,scope:ui.scope,method:ui.method,params:{state:t}})}async abort(e){e.dispose();let t=new w.WorkspaceEdit;t.replace(e.document.uri,new w.Range(0,0,e.document.lineCount,0),""),await w.workspace.applyEdit(t),await e.document.save(),e.panel.dispose()}async disable(e){await this.abort(e),await this.setEnabled(!1)}async rebase(e){e.dispose(),await e.document.save(),e.panel.dispose()}swapOrdering(e,t){this.ascending=e.ascending??!1,v.H.updateEffective("rebaseEditor.ordering",this.ascending?"asc":"desc"),this.updateState(t,!0)}switchToText(e){(0,th.hU)(),(0,rB.S4)("vscode.open",e.document.uri,{override:!1,preview:!1})}async getHtml(e){let t=w.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=w.Uri.joinPath(t,"rebase.html"),[r,s]=await Promise.all([w.workspace.fs.readFile(i),this.parseState(e)]);return(0,c1.Dv)(ua.decode(r),"gitlens.rebase",void 0,e.panel.webview.cspSource,(0,eZ.m9)(),e.panel.webview.asWebviewUri(this.container.context.extensionUri).toString(),e.panel.webview.asWebviewUri(t).toString(),"editor",s)}};async function up(e,t,i,r){t.commits=[],t.authors=new Map;let s=await e.git.commits(t.repoPath).searchCommits({query:`${i?`#:${i} `:""}${(0,tm.fj)((0,tm.Tj)(r,e=>`#:${e.sha}`)," ")}`},{limit:0});if(null!=s){for(let e of s.commits.values())if(t.commits.push(e),t.authors.has(e.author.name)||t.authors.set(e.author.name,{author:e.author.name,avatarUrl:(await e.getAvatarUri()).toString(!0),email:e.author.email}),!t.authors.has(e.committer.name)){let i=await e.committer.getAvatarUri(e);t.authors.set(e.committer.name,{author:e.committer.name,avatarUrl:i.toString(!0),email:e.committer.email})}}}async function ug(e,t,i){let r,s=t.document.getText(),o=um(s),[,,,n]=uu.exec(s)??["","",""];(null==t.authors||null==t.commits)&&await up(e,t,n,o);let a=v.H.get("defaultDateFormat"),l=cJ.G.createMarkdownCommandLink("${commit}",t.repoPath),c=n?t.commits?.find(e=>e.sha.startsWith(n)):void 0;for(let e of o)null!=(r=t.commits?.find(t=>t.sha.startsWith(e.sha)))&&(r.sha===c?.sha&&(n=""),e.commit={sha:r.sha,author:r.author.name,committer:r.committer.name,date:r.formatDate(a),dateFromNow:r.formattedDate,message:(0,id.E)(r.message??r.summary)});return{webviewId:"gitlens.rebase",webviewInstanceId:void 0,timestamp:Date.now(),branch:t.branchName??"",onto:n?{sha:n,commit:null!=c?{sha:c.sha,author:c.author.name,committer:c.committer.name,date:c.formatDate(a),dateFromNow:c.formatDateFromNow(),message:(0,id.E)(c.message||"root")}:void 0}:void 0,entries:o,authors:null!=t.authors?Object.fromEntries(t.authors):{},commands:{commit:l},ascending:i}}function um(e){let t,i,r,s,o="string"==typeof e?e:e.getText(),n=[];for(;null!=(t=uh.exec(o));)[,i,r,s]=t,n.push({index:t.index,action:ud.get(i)??"pick",sha:` ${r}`.substring(1),message:null==s||0===s.length?"":` ${s}`.substring(1)});return n.reverse()}uo([(0,ew.Yz)({args:{1:!1,2:!1}})],RebaseEditorProvider.prototype,"resolveCustomTextEditor",1),uo([(0,ew.Yz)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],RebaseEditorProvider.prototype,"onViewFocusChanged",1),uo([(0,ew.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`,1:e=>`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`}})],RebaseEditorProvider.prototype,"onViewStateChanged",1),uo([(0,ew.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"updateState",1),uo([(0,ew.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"notifyDidChangeState",1),uo([(0,ew.Rm)({args:!1})],RebaseEditorProvider.prototype,"abort",1),uo([(0,ew.Rm)({args:!1})],RebaseEditorProvider.prototype,"disable",1),uo([(0,ew.Rm)({args:!1})],RebaseEditorProvider.prototype,"rebase",1),uo([(0,ew.Rm)({args:!1})],RebaseEditorProvider.prototype,"swapOrdering",1),uo([(0,ew.Rm)({args:!1})],RebaseEditorProvider.prototype,"switchToText",1);var uf=i(6430),uw=Object.defineProperty,uv=Object.getOwnPropertyDescriptor,uy=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?uv(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&uw(t,i,o),o};let ub=class _Container{static #e;static #t=new Proxy({},{get:function(e,t){if(null!=_Container.#e)return _Container.#e[t];if("config"===t)return v.H.getAll();throw Error("Container is not initialized")}});static create(e,t,i,r,s){if(null!=_Container.#e)throw Error("Container is already initialized");return _Container.#e=new _Container(e,t,i,r,s),_Container.#e}static get instance(){return _Container.#e??_Container.#t}_onReady=new w.EventEmitter;get onReady(){if(this._ready){let e=new w.EventEmitter;return setTimeout(()=>e.fire(),0),e.event}return this._onReady.event}BranchDateFormatting={dateFormat:void 0,dateStyle:void 0,reset:()=>{this.BranchDateFormatting.dateFormat=v.H.get("defaultDateFormat"),this.BranchDateFormatting.dateStyle=v.H.get("defaultDateStyle")}};CommitDateFormatting={dateFormat:null,dateSource:"authored",dateStyle:"relative",reset:()=>{this.CommitDateFormatting.dateFormat=v.H.get("defaultDateFormat"),this.CommitDateFormatting.dateSource=v.H.get("defaultDateSource"),this.CommitDateFormatting.dateStyle=v.H.get("defaultDateStyle")}};CommitShaFormatting={length:7,reset:()=>{this.CommitShaFormatting.length=Math.max(5,v.H.get("advanced.abbreviatedShaLength"))}};PullRequestDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.PullRequestDateFormatting.dateFormat=v.H.get("defaultDateFormat"),this.PullRequestDateFormatting.dateStyle=v.H.get("defaultDateStyle")}};TagDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.TagDateFormatting.dateFormat=v.H.get("defaultDateFormat"),this.TagDateFormatting.dateStyle=v.H.get("defaultDateStyle")}};_connection;_disposables;_terminalLinks;_launchpadIndicator;constructor(e,t,r,s,o){var n,a;this._context=e,this._prerelease=r,this._version=s,this.ensureModeApplied(),this._disposables=[v.H,this._storage=t,this._telemetry=new TelemetryService(this),this._usage=new UsageTracker(this,t),v.H.onDidChangeAny(this.onAnyConfigurationChanged,this)],this._urls=new UrlsProvider(this.env),this._disposables.push(this._connection=new ServerConnection(this,this._urls)),this._disposables.push(this._accountAuthentication=new AccountAuthenticationProvider(this,this._connection)),this._disposables.push(this._uri=new UriService(this)),this._disposables.push(this._subscription=new SubscriptionService(this,this._connection,o)),this._disposables.push(this._walkthrough=new WalkthroughStateProvider(this)),this._disposables.push(this._organizations=new OrganizationService(this,this._connection)),this._disposables.push(this._git=new GitProviderService(this)),this._disposables.push(new GitFileSystemProvider(this)),this._disposables.push(this._deepLinks=new DeepLinkService(this)),this._disposables.push(this._actionRunners=new sv.qr(this)),this._disposables.push(this._documentTracker=new GitDocumentTracker(this)),this._disposables.push(this._lineTracker=new LineTracker(this,this._documentTracker)),this._disposables.push(this._keyboard=new Keyboard),this._disposables.push(this._vsls=new VslsController(this)),this._disposables.push(this._eventBus=new EventBus),this._disposables.push(this._launchpadProvider=new nC.qJ(this)),this._disposables.push(this._fileAnnotationController=new sl.o(this)),this._disposables.push(this._lineAnnotationController=new LineAnnotationController(this)),this._disposables.push(this._lineHoverController=new LineHoverController(this)),this._disposables.push(this._statusBarController=new StatusBarController(this)),this._disposables.push(this._codeLensController=new GitCodeLensController(this));let l=new uf.x(this);this._disposables.push(l),this._disposables.push(this._views=new Views(this,l));let c=l.registerWebviewPanel({id:"gitlens.showGraphPage",options:{preserveInstance:!0}},{id:"gitlens.graph",fileName:ad(),iconPath:"images/gitlens-icon.png",title:"Commit Graph",contextKeyPrefix:"gitlens:webview:graph",trackingFeature:"graphWebview",type:"graph",plusFeature:!0,column:w.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!1},allowMultipleInstances:v.H.get("graph.allowMultiple")},async(e,t)=>{let{GraphWebviewProvider:r}=await i.e(795).then(i.bind(i,453));return new r(e,t)});this._disposables.push(c),this._disposables.push((n=this,w.Disposable.from((0,rB.Lb)("gitlens.showGraph",(...e)=>{let t,[i]=e;if((0,ac.Y6)(i)){if(null!=i.rootUri){let e=n.git.getRepository(i.rootUri);null!=e&&(t=e)}e=[]}else i instanceof au.eu&&(i.is("repo-folder")&&(t=i.repo),e=[]);return null!=t?(0,rB.RS)("gitlens.showInCommitGraph",t):"panel"===v.H.get("graph.layout")?(0,rB.RS)("gitlens.showGraphView",...e):(0,rB.RS)("gitlens.showGraphPage",void 0,...e)}),(0,rB.Lb)(`${c.id}.switchToEditorLayout`,async()=>{await v.H.updateEffective("graph.layout","editor"),queueMicrotask(()=>void(0,rB.RS)("gitlens.showGraphPage"))}),(0,rB.Lb)(`${c.id}.switchToPanelLayout`,async()=>{await v.H.updateEffective("graph.layout","panel"),queueMicrotask(async()=>{await (0,rB.S4)("gitlens.views.graph.resetViewLocation"),await (0,rB.S4)("gitlens.views.graphDetails.resetViewLocation"),(0,rB.RS)("gitlens.showGraphView")})}),(0,rB.Lb)("gitlens.toggleGraph",(...e)=>{(0,sT.SD)("gitlens:webviewView:graph:visible")?(0,rB.S4)("workbench.action.closePanel"):(0,rB.RS)("gitlens.showGraphView",...e)}),(0,rB.Lb)("gitlens.toggleMaximizedGraph",(...e)=>{(0,sT.SD)("gitlens:webviewView:graph:visible")||(0,rB.RS)("gitlens.showGraphView",...e),(0,rB.S4)("workbench.action.toggleMaximizedPanel")}),(0,rB.Lb)("gitlens.showInCommitGraph",e=>{if(e instanceof ah.Xu){if(null==e.ref)return;e={ref:e.ref}}let t="preserveFocus"in e&&(e.preserveFocus??!1);if("panel"===v.H.get("graph.layout")){if(!n.views.graph.visible){let i=c.getBestInstance({preserveFocus:t},e);if(null!=i){i.show({preserveFocus:t},e);return}}n.views.graph.show({preserveFocus:t},e)}else c.show({preserveFocus:t},e)}),(0,rB.Lb)("gitlens.showInCommitGraphView",e=>{if(e instanceof ah.Xu){if(null==e.ref)return;e={ref:e.ref}}let t="preserveFocus"in e&&(e.preserveFocus??!1);n.views.graph.show({preserveFocus:t},e)}),(0,rB.Lb)(`${c.id}.refresh`,()=>void c.getActiveInstance()?.refresh(!0)),(0,rB.Lb)(`${c.id}.split`,()=>void c.splitActiveInstance({preserveInstance:!1,column:w.ViewColumn.Beside}))))),this._disposables.push(new GraphStatusBarController(this));let u=l.registerWebviewPanel({id:"gitlens.showTimelinePage",options:{preserveInstance:!0}},{id:"gitlens.timeline",fileName:"timeline.html",iconPath:"images/gitlens-icon.png",title:"Visual History",contextKeyPrefix:"gitlens:webview:timeline",trackingFeature:"timelineWebview",type:"timeline",plusFeature:!0,column:w.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1},allowMultipleInstances:v.H.get("visualHistory.allowMultiple")},async(e,t)=>{let{TimelineWebviewProvider:r}=await i.e(696).then(i.bind(i,2234));return new r(e,t)});this._disposables.push(u),this._disposables.push(w.Disposable.from((0,rB.Lb)("gitlens.showFileInTimeline",(...e)=>{let[t]=e;(0,ac.D0)(t)&&(e=[t.resourceUri]),u.show(void 0,...e)}),(0,rB.Lb)("gitlens.showFolderInTimeline",(...e)=>{let t=(0,ac.e3)(e);null!=t&&(e=[t]),u.show(void 0,...e)}),(0,rB.Lb)(`${u.id}.refresh`,()=>void u.getActiveInstance()?.refresh(!0)),(0,rB.Lb)(`${u.id}.split`,()=>void u.splitActiveInstance({preserveInstance:!1,column:w.ViewColumn.Beside})))),this._disposables.push(this._rebaseEditor=new RebaseEditorProvider(this));let h=l.registerWebviewPanel({id:"gitlens.showSettingsPage"},{id:"gitlens.settings",fileName:"settings.html",iconPath:"images/gitlens-icon.png",title:"GitLens Settings",contextKeyPrefix:"gitlens:webview:settings",trackingFeature:"settingsWebview",type:"settings",plusFeature:!1,column:w.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},async(e,t)=>{let{SettingsWebviewProvider:r}=await i.e(426).then(i.bind(i,3981));return new r(e,t)});this._disposables.push(h),this._disposables.push(w.Disposable.from(...["gitlens.showSettingsPage!file-annotations","gitlens.showSettingsPage!branches-view","gitlens.showSettingsPage!commits-view","gitlens.showSettingsPage!contributors-view","gitlens.showSettingsPage!file-history-view","gitlens.showSettingsPage!line-history-view","gitlens.showSettingsPage!remotes-view","gitlens.showSettingsPage!repositories-view","gitlens.showSettingsPage!search-compare-view","gitlens.showSettingsPage!stashes-view","gitlens.showSettingsPage!tags-view","gitlens.showSettingsPage!worktrees-view","gitlens.showSettingsPage!views","gitlens.showSettingsPage!commit-graph","gitlens.showSettingsPage!autolinks"].map(e=>{let t,i=/.*?!(.*)/.exec(e);return null!=i&&([,t]=i),(0,rB.Lb)(e,()=>void h.show(void 0,...t?[t]:[]))}))),this._disposables.push(new al.l);let d=l.registerWebviewPanel({id:"gitlens.showPatchDetailsPage",options:{preserveInstance:!0}},{id:"gitlens.patchDetails",fileName:"patchDetails.html",iconPath:"images/gitlens-icon.png",title:"Patch",contextKeyPrefix:"gitlens:webview:patchDetails",trackingFeature:"patchDetailsWebview",type:"patchDetails",plusFeature:!0,column:w.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1},allowMultipleInstances:!0},async(e,t)=>{let{PatchDetailsWebviewProvider:r}=await i.e(301).then(i.bind(i,2619));return new r(e,t)});this._disposables.push(d),v.H.get("launchpad.indicator.enabled")&&this._disposables.push(this._launchpadIndicator=new nb.A(this,this._launchpadProvider)),v.H.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this));let p=new GkCliIntegrationProvider(this);null!=p&&this._disposables.push(p),this._disposables.push(v.H.onDidChange(e=>{v.H.changed(e,"terminalLinks.enabled")&&(this._terminalLinks?.dispose(),this._terminalLinks=void 0,v.H.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this))),v.H.changed(e,"launchpad.indicator.enabled")&&(this._launchpadIndicator?.dispose(),this._launchpadIndicator=void 0,this.telemetry.sendEvent("launchpad/indicator/hidden"),v.H.get("launchpad.indicator.enabled")&&this._disposables.push(this._launchpadIndicator=new nb.A(this,this._launchpadProvider)))})),e.subscriptions.push({dispose:()=>this._disposables.reverse().forEach(e=>void e.dispose())}),a=this,null!=nF()&&setTimeout(()=>a.workspaces.addMissingCurrentWorkspaceRepos(),1e4)}deactivate(){this._deactivating=!0}_deactivating=!1;get deactivating(){return this._deactivating}_ready=!1;async ready(){if(this._ready)throw Error("Container is already ready");this._ready=!0,await this.registerGitProviders(),queueMicrotask(()=>this._onReady.fire())}async registerGitProviders(){for(let e of(await sa(this)))this._disposables.push(this._git.register(e.descriptor.id,e));this._git.registrationComplete()}onAnyConfigurationChanged(e){v.H.changedAny(e,R.Od)&&(this._mode=void 0,v.H.changed(e,"outputLevel")&&(ev.Vy.logLevel=(0,sB.Wn)(v.H.get("outputLevel"))),v.H.changed(e,"defaultGravatarsStyle")&&(0,ih.Qw)(v.H.get("defaultGravatarsStyle")),v.H.changed(e,"mode")&&this.ensureModeApplied())}_accountAuthentication;get accountAuthentication(){return this._accountAuthentication}_actionRunners;get actionRunners(){return this._actionRunners}_ai;get ai(){return null==this._ai&&this._disposables.push(this._ai=new AIProviderService(this,this._connection)),this._ai}_autolinks;get autolinks(){return null==this._autolinks&&this._disposables.push(this._autolinks=new AutolinksProvider(this)),this._autolinks}_cache;get cache(){return null==this._cache&&this._disposables.push(this._cache=new CacheProvider(this)),this._cache}_cloudIntegrations;get cloudIntegrations(){if(null==this._cloudIntegrations){async function e(){try{return new(await i.e(758).then(i.bind(i,5103))).CloudIntegrationService(this,this._connection)}catch(e){ev.Vy.error(e);return}}this._cloudIntegrations=e.call(this)}return this._cloudIntegrations}_drafts;get drafts(){return null==this._drafts&&this._disposables.push(this._drafts=new oP.L(this,this._connection)),this._drafts}_codeLensController;get codeLens(){return this._codeLensController}_context;get context(){return this._context}get debugging(){return this._context.extensionMode===w.ExtensionMode.Development}_deepLinks;get deepLinks(){return this._deepLinks}_documentTracker;get documentTracker(){return this._documentTracker}_enrichments;get enrichments(){return null==this._enrichments&&this._disposables.push(this._enrichments=new ny.dV(this,this._connection)),this._enrichments}get env(){if(this.prereleaseOrDebugging){let e=v.H.getAny("gitkraken.env");if("dev"===e)return"dev";if("staging"===e)return"staging"}return"production"}_eventBus;get events(){return this._eventBus}_fileAnnotationController;get fileAnnotations(){return this._fileAnnotationController}_launchpadProvider;get launchpad(){return this._launchpadProvider}_git;get git(){return this._git}_azure;get azure(){if(null==this._azure){async function e(){try{let e=new(await i.e(758).then(i.bind(i,7336))).AzureDevOpsApi(this);return this._disposables.push(e),e}catch(e){ev.Vy.error(e);return}}this._azure=e.call(this)}return this._azure}_bitbucket;get bitbucket(){if(null==this._bitbucket){async function e(){try{let e=new(await i.e(758).then(i.bind(i,1941))).BitbucketApi(this);return this._disposables.push(e),e}catch(e){ev.Vy.error(e);return}}this._bitbucket=e.call(this)}return this._bitbucket}_github;get github(){if(null==this._github){async function e(){try{let e=new(await i.e(758).then(i.bind(i,9164))).GitHubApi(this);return this._disposables.push(e),e}catch(e){ev.Vy.error(e);return}}this._github=e.call(this)}return this._github}_gitlab;get gitlab(){if(null==this._gitlab){async function e(){try{let e=new(await i.e(758).then(i.bind(i,5240))).GitLabApi(this);return this._disposables.push(e),e}catch(e){ev.Vy.error(e);return}}this._gitlab=e.call(this)}return this._gitlab}get id(){return this._context.extension.id}_integrations;get integrations(){if(null==this._integrations){let e=new ConfiguredIntegrationService(this),t=new IntegrationAuthenticationService(this,e);this._disposables.push(t,e,this._integrations=new sC.a(this,t,e))}return this._integrations}_keyboard;get keyboard(){return this._keyboard}_lineAnnotationController;get lineAnnotations(){return this._lineAnnotationController}_lineHoverController;get lineHovers(){return this._lineHoverController}_lineTracker;get lineTracker(){return this._lineTracker}_mode;get mode(){return null==this._mode&&(this._mode=v.H.get("modes")?.[v.H.get("mode.active")]),this._mode}_organizations;get organizations(){return this._organizations}_prerelease;get prerelease(){return this._prerelease}get prereleaseOrDebugging(){return this._prerelease||this.debugging}_productConfig;get productConfig(){return this._productConfig??=new ProductConfigProvider(this,this._connection),this._productConfig}_rebaseEditor;get rebaseEditor(){return this._rebaseEditor}_repositoryIdentity;get repositoryIdentity(){return null==this._repositoryIdentity&&this._disposables.push(this._repositoryIdentity=new RepositoryIdentityService(this,this.repositoryLocator)),this._repositoryIdentity}_repositoryLocator;get repositoryLocator(){if(void 0===this._repositoryLocator)this._repositoryLocator=new LocalRepositoryLocationProvider(this,this.sharedGkStorage)??null,null!=this._repositoryLocator&&this._disposables.push(this._repositoryLocator);return this._repositoryLocator??void 0}_sharedGkStorage;get sharedGkStorage(){if(void 0===this._sharedGkStorage)this._sharedGkStorage=new LocalSharedGkStorageLocationProvider(this)??null;return this._sharedGkStorage??void 0}_statusBarController;get statusBar(){return this._statusBarController}_storage;get storage(){return this._storage}_subscription;get subscription(){return this._subscription}_telemetry;get telemetry(){return this._telemetry}_uri;get uri(){return this._uri}_urls;get urls(){return this._urls}_usage;get usage(){return this._usage}_walkthrough;get walkthrough(){return this._walkthrough}_version;get version(){return this._version}_views;get views(){return this._views}_vsls;get vsls(){return this._vsls}_workspaces;get workspaces(){if(null==this._workspaces)this._disposables.push(this._workspaces=new WorkspacesService(this,new WorkspacesApi(this,this._connection),new LocalGkWorkspacesSharedStorageProvider(this,this.sharedGkStorage),this.repositoryLocator));return this._workspaces}ensureModeApplied(){let e=this.mode;if(null==e){v.H.clearOverrides();return}if(null!=e.annotations){let t;switch(e.annotations){case"blame":t="gitlens.toggleFileBlame";break;case"changes":t="gitlens.toggleFileChanges";break;case"heatmap":t="gitlens.toggleFileHeatmap"}if(null!=t){let i={type:e.annotations,on:!0};setTimeout(rB.RS,50,t,i)}}v.H.applyOverrides({get:(t,i)=>{if(null!=e.annotations){if(v.H.matches(`${e.annotations}.toggleMode`,t,i))return i="window";if(v.H.matches(e.annotations,t,i))return i.toggleMode="window",i}for(let r of["codeLens","currentLine","hovers","statusBar"])if(null!=e[r]){if(v.H.matches(`${r}.enabled`,t,i)){i=e[r];break}else if(v.H.matches(r,t,i)){i.enabled=e[r];break}}return i},getAll:t=>(null!=e.annotations&&(t[e.annotations].toggleMode="window"),null!=e.codeLens&&(t.codeLens.enabled=e.codeLens),null!=e.currentLine&&(t.currentLine.enabled=e.currentLine),null!=e.hovers&&(t.hovers.enabled=e.hovers),null!=e.statusBar&&(t.statusBar.enabled=e.statusBar),t),onDidChange:e=>{if(!v.H.changed(e,["mode","modes"]))return e;let t=e.affectsConfiguration;return{...e,affectsConfiguration:(e,i)=>!!/^gitlens\.(?:modes?|blame|changes|heatmap|codeLens|currentLine|hovers|statusBar)\b/.test(e)||t(e,i)}}})}};uy([(0,ew.Rm)()],ub.prototype,"registerGitProviders",1),uy([(0,tB.B)()],ub.prototype,"debugging",1),uy([(0,tB.B)()],ub.prototype,"env",1),uy([(0,tB.B)()],ub.prototype,"id",1),uy([(0,tB.B)()],ub.prototype,"prereleaseOrDebugging",1);let uC=ub;function uk(e){return e instanceof uC}},9842:(e,t,i)=>{i.d(t,{Jp:()=>c,sY:()=>h,td:()=>l,ub:()=>a,w8:()=>u});var r=i(1398),s=i(1518),o=i(9317),n=i(8554);async function a(e,t,{base:i,head:s},o,n){if(i?.remote&&s?.remote&&i?.branch&&s?.branch){if("string"==typeof t){let i=e.git.getRepository(t);if(null==i)return;t=i}try{let a=await e.ai.generateCreatePullRequest(t,`${i.remote.name}/${i.branch}`,`${s.remote.name}/${s.branch}`,o,{progress:{location:r.ProgressLocation.Notification},...n});return a?.parsed?{title:a.parsed.summary,description:a.parsed.body}:void 0}catch(e){r.window.showErrorMessage(e.message);return}}}async function l(e,t,i,r){if(null==e.refs)return;r??=(0,o.tI)(t.path,e.refs);let s=(0,n.Xn)(r.base.ref,r.head.ref,"..."),a=t.git.commits(),l=await a.getLeftRightCommitCount(s);return null==l&&await c(e,t,i)&&(l=await a.getLeftRightCommitCount(s)),l}async function c(e,t,i){let s=(0,o.Yv)(e);if(null==s.remote.url)return!1;let n=s.remote.url.replace(/\.git$/,""),a=!1;for(let e of(await t.git.remotes().getRemotes()))if(e.matches(n)){a=!0;break}if(a)return!0;let l={title:"Add Remote"};return!i?.silent&&await r.window.showInformationMessage(`${i?.promptMessage??`Unable to find a remote for PR #${e.id}.`}
Would you like to add a remote for '${s.provider.repoDomain}?`,{modal:!0},l,{title:"Cancel",isCloseAffordance:!0})===l&&(await t.git.remotes().addRemoteWithResult?.(s.provider.repoDomain,s.remote.url,{fetch:!0}),!0)}async function u(e,t,i){return i?e.git.getRepository(i):await h(e,t,{promptIfNeeded:!0})}async function h(e,t,i){let n=(0,o.Yv)(t),a=await e.repositoryIdentity.getRepository(n,{openIfNeeded:!0,keepOpen:!1,prompt:!1});if(null==a&&!i?.skipVirtual){let i=function(e){if("github"!==e.provider.id)return;let t=r.Uri.parse(e.refs?.base?.url??e.url);return t.with({scheme:s.xB.Virtual,authority:"github",path:t.path})}(t);null!=i&&(a=await e.git.getOrOpenRepository(i,{closeOnOpen:!0,detectNested:!1}))}if(null==a){let i=(0,o.Yv)(t,!1);a=await e.repositoryIdentity.getRepository(i,{openIfNeeded:!0,keepOpen:!1,prompt:!1})}return null==a&&i?.promptIfNeeded&&(a=await e.repositoryIdentity.getRepository(n,{openIfNeeded:!0,keepOpen:!1,prompt:!0})),a}},9881:(e,t,i)=>{i.d(t,{$:()=>m,Cf:()=>h,HZ:()=>b,NK:()=>f,U3:()=>u,VZ:()=>p,aN:()=>C,rq:()=>v,sE:()=>g,uW:()=>y,vk:()=>l,yI:()=>w,zB:()=>d});var r,s,o,n,a,l=((r=l||{}).Branch="b",r.Command="command",r.Commit="c",r.Comparison="compare",r.Draft="drafts",r.File="f",r.Repository="r",r.Tag="t",r.Workspace="workspace",r),c=((s=c||{}).CloudPatches="cloud-patches",s.Graph="graph",s.Home="home",s.Inspect="inspect",s.Launchpad="launchpad",s.Walkthrough="walkthrough",s.Worktrees="worktrees",s);function u(e){return Object.values(c).includes(e)}let h=new Map([["cloud-patches","gitlens.showDraftsView"],["graph","gitlens.showGraph"],["home","gitlens.showHomeView"],["inspect","gitlens.showCommitDetailsView"],["launchpad","gitlens.showLaunchpad"],["walkthrough","gitlens.getStarted"],["worktrees","gitlens.showWorktreesView"]]);var d=((o=d||{}).DeleteBranch="delete-branch",o.Switch="switch",o.SwitchToPullRequest="switch-to-pr",o.SwitchToPullRequestWorktree="switch-to-pr-worktree",o.SwitchToAndSuggestPullRequest="switch-to-and-suggest-pr",o);let p=["drafts","workspace"],g=[];function m(e){switch(e){case"b":return"Branch";case"command":return"Command";case"c":return"Commit";case"compare":return"Comparison";case"drafts":return"Cloud Patch";case"f":return"File";case"r":return"Repository";case"t":return"Tag";case"workspace":return"Workspace";default:return"Unknown"}}function f(e){switch(e){case"branch":return"b";case"revision":return"c";case"tag":return"t";default:return"r"}}function w(e){let[,t,i,r,s,...o]=e.path.split("/");if("link"!==t)return;let n=new URLSearchParams(e.query);switch(i){case"r":{let e,t,i,a,l=n.get("url")??void 0;null!=l&&(l=decodeURIComponent(l));let c=n.get("path")??void 0;if(null!=c&&(c=decodeURIComponent(c)),!l&&!c)return;let u=n.get("action")??void 0;if(null==s)return{type:"r",mainId:r,remoteUrl:l,repoPath:c};if(null==o||0===o.length)return;let h=o.join("/");if("compare"===s){let r=h.split(/(\.\.\.|\.\.)/);if(3!==r.length)return;e=r[0],t=r[2],null!=(i=n.get("prRepoUrl")??void 0)&&(i=decodeURIComponent(i))}else if("f"===s){a=h;let i=n.get("ref")??void 0;null!=i&&(i=decodeURIComponent(i)),e=i;let r=n.get("lines")??void 0;null!=r&&(r=decodeURIComponent(r)),t=r}else e=h;return{type:s,mainId:r,remoteUrl:l,repoPath:c,filePath:a,targetId:e,secondaryTargetId:t,secondaryRemoteUrl:i,action:u,params:n,prId:n.get("prId")??void 0}}case"drafts":{if(null==r||r.match(/^v\d+$/))return;let e=n.get("patch")??void 0;return null!=e&&(e=decodeURIComponent(e)),{type:"drafts",targetId:r,secondaryTargetId:e,params:n}}case"workspace":return{type:"workspace",mainId:r,params:n};case"command":return{type:"command",mainId:r,params:n};default:return}}var v=((n=v||{})[n.Idle=0]="Idle",n[n.AccountCheck=1]="AccountCheck",n[n.PlanCheck=2]="PlanCheck",n[n.TypeMatch=3]="TypeMatch",n[n.RepoMatch=4]="RepoMatch",n[n.CloneOrAddRepo=5]="CloneOrAddRepo",n[n.AddedRepoMatch=6]="AddedRepoMatch",n[n.RemoteMatch=7]="RemoteMatch",n[n.AddRemote=8]="AddRemote",n[n.TargetMatch=9]="TargetMatch",n[n.Fetch=10]="Fetch",n[n.FetchedTargetMatch=11]="FetchedTargetMatch",n[n.MaybeOpenRepo=12]="MaybeOpenRepo",n[n.RepoOpening=13]="RepoOpening",n[n.EnsureRemoteMatch=14]="EnsureRemoteMatch",n[n.GoToTarget=15]="GoToTarget",n[n.OpenGraph=16]="OpenGraph",n[n.OpenComparison=17]="OpenComparison",n[n.OpenDraft=18]="OpenDraft",n[n.OpenWorkspace=19]="OpenWorkspace",n[n.OpenFile=20]="OpenFile",n[n.OpenInspect=21]="OpenInspect",n[n.SwitchToRef=22]="SwitchToRef",n[n.RunCommand=23]="RunCommand",n[n.OpenAllPrChanges=24]="OpenAllPrChanges",n[n.DeleteBranch=25]="DeleteBranch",n),y=((a=y||{})[a.AccountCheckPassed=0]="AccountCheckPassed",a[a.DeepLinkEventFired=1]="DeepLinkEventFired",a[a.DeepLinkCancelled=2]="DeepLinkCancelled",a[a.DeepLinkResolved=3]="DeepLinkResolved",a[a.DeepLinkStored=4]="DeepLinkStored",a[a.DeepLinkErrored=5]="DeepLinkErrored",a[a.LinkIsCommandType=6]="LinkIsCommandType",a[a.LinkIsRepoType=7]="LinkIsRepoType",a[a.LinkIsDraftType=8]="LinkIsDraftType",a[a.LinkIsWorkspaceType=9]="LinkIsWorkspaceType",a[a.PlanCheckPassed=10]="PlanCheckPassed",a[a.RepoMatched=11]="RepoMatched",a[a.RepoMatchedInLocalMapping=12]="RepoMatchedInLocalMapping",a[a.RepoMatchFailed=13]="RepoMatchFailed",a[a.RepoAdded=14]="RepoAdded",a[a.RemoteMatched=15]="RemoteMatched",a[a.RemoteMatchFailed=16]="RemoteMatchFailed",a[a.RemoteMatchUnneeded=17]="RemoteMatchUnneeded",a[a.RemoteAdded=18]="RemoteAdded",a[a.TargetMatched=19]="TargetMatched",a[a.TargetMatchFailed=20]="TargetMatchFailed",a[a.TargetFetched=21]="TargetFetched",a[a.RepoOpened=22]="RepoOpened",a[a.RepoOpening=23]="RepoOpening",a[a.OpenGraph=24]="OpenGraph",a[a.OpenComparison=25]="OpenComparison",a[a.OpenFile=26]="OpenFile",a[a.OpenInspect=27]="OpenInspect",a[a.OpenSwitch=28]="OpenSwitch",a[a.OpenAllPrChanges=29]="OpenAllPrChanges",a[a.DeleteBranch=30]="DeleteBranch",a);let b={0:{1:1,2:0},1:{0:2,5:0,2:0},2:{10:3,5:0,2:0},3:{5:0,2:0,6:23,7:4,8:18,9:19},4:{5:0,2:0,11:7,12:5,13:5},5:{14:6,5:0,2:0},6:{11:7,5:0,2:0},7:{5:0,2:0,15:9,16:8,17:9},8:{18:9,5:0,2:0},9:{5:0,2:0,19:12,20:10},10:{21:11,5:0,2:0},11:{19:12,5:0,2:0},12:{22:14,23:13,4:0,5:0,2:0},13:{22:14,5:0,2:0},14:{5:0,2:0,17:15,15:15},15:{24:16,26:20,28:22,25:17,30:25,5:0,2:0},16:{3:0,5:0,2:0},17:{3:0,5:0,2:0},18:{3:0,5:0,2:0},19:{3:0,5:0,2:0},20:{3:0,5:0,2:0},21:{29:24,3:0,5:0,2:0},24:{3:0,5:0,2:0},22:{27:21,3:0,5:0,2:0},23:{3:0,5:0,2:0},25:{3:0,5:0,2:0}},C={0:{message:"Done.",increment:100},1:{message:"Checking account...",increment:1},2:{message:"Checking plan...",increment:2},3:{message:"Matching link type...",increment:5},4:{message:"Finding a matching repository...",increment:10},5:{message:"Adding repository...",increment:20},6:{message:"Finding a matching repository...",increment:25},7:{message:"Finding a matching remote...",increment:30},8:{message:"Adding remote...",increment:40},9:{message:"finding a matching target...",increment:50},10:{message:"Fetching...",increment:60},11:{message:"Finding a matching target...",increment:65},12:{message:"Opening repository...",increment:70},13:{message:"Opening repository...",increment:75},15:{message:"Opening target...",increment:80},16:{message:"Opening graph...",increment:90},17:{message:"Opening comparison...",increment:90},18:{message:"Opening cloud patch...",increment:90},19:{message:"Opening workspace...",increment:90},20:{message:"Opening file...",increment:90},21:{message:"Opening inspect...",increment:90},22:{message:"Switching to ref...",increment:90},23:{message:"Running command...",increment:90}}},9903:(e,t,i)=>{i.d(t,{I:()=>v,o:()=>FileAnnotationController});var r=i(1398),s=i(4301),o=i(1078),n=i(655),a=i(9326),l=i(6612),c=i(4342),u=i(3489),h=i(6851),d=i(7747),p=i(6006),g=i(5704),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};let v={gutterBlameAnnotation:r.window.createTextEditorDecorationType({rangeBehavior:r.DecorationRangeBehavior.OpenOpen,textDecoration:"none"}),gutterBlameHighlight:void 0,changesLineChangedAnnotation:void 0,changesLineAddedAnnotation:void 0,changesLineDeletedAnnotation:void 0};let FileAnnotationController=class FileAnnotationController{constructor(e){this.container=e,this._disposable=r.Disposable.from(this._onDidToggleAnnotations,(0,u.Oo)(e.onReady)(this.onReady,this),o.H.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this)),this._toggleModes=new Map}_onDidToggleAnnotations=new r.EventEmitter;get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}_annotationsDisposable;_annotationProviders=new Map;_disposable;_editor;_keyboardScope=void 0;_toggleModes;_windowAnnotationType=void 0;dispose(){this.clearAll(),v.gutterBlameAnnotation?.dispose(),v.gutterBlameHighlight?.dispose(),v.changesLineChangedAnnotation?.dispose(),v.changesLineAddedAnnotation?.dispose(),v.changesLineDeletedAnnotation?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){let t,i=null==e;if(o.H.changed(e,["blame.highlight","changes.locations"])&&this.updateDecorations(!1),o.H.changed(e,"fileAnnotations.dismissOnEscape")&&(o.H.get("fileAnnotations.dismissOnEscape")?r.window.visibleTextEditors.some(e=>this.getProvider(e))&&this.attachKeyboardHook():this.detachKeyboardHook()),o.H.changed(e,"blame.toggleMode")&&(t=o.H.get("blame.toggleMode"),this._toggleModes.set("blame",t),i||"file"!==t||this.clearAll()),o.H.changed(e,"changes.toggleMode")&&(t=o.H.get("changes.toggleMode"),this._toggleModes.set("changes",t),i||"file"!==t||this.clearAll()),o.H.changed(e,"heatmap.toggleMode")&&(t=o.H.get("heatmap.toggleMode"),this._toggleModes.set("heatmap",t),i||"file"!==t||this.clearAll()),!i&&o.H.changed(e,["blame","changes","heatmap","hovers","defaultDateFormat","defaultDateSource","defaultDateStyle","defaultGravatarsStyle"]))for(let e of this._annotationProviders.values())null!=e&&this.show(e.editor,e.annotationType??"blame")}onThemeChanged(e){this.updateDecorations(!0)}async onActiveTextEditorChanged(e){if(null==e||(0,l.oU)(e)){if(this._editor=e,this.isInWindowToggle()){await this.show(e,this._windowAnnotationType);return}null==this.getProvider(e)?this.detachKeyboardHook():this.attachKeyboardHook()}}onBlameStateChanged(e){let t=r.window.activeTextEditor;if(null!=t){if(e.blameable){o.H.get("fileAnnotations.preserveWhileEditing")&&this.restore(t);return}this.clearCore((0,g.B0)(t))}}async onDirtyIdleTriggered(e){if(!o.H.get("fileAnnotations.preserveWhileEditing")||!(await e.document.getStatus()).blameable)return;let t=r.window.activeTextEditor;null!=t&&this.restore(t)}onDirtyStateChanged(e){for(let[t,i]of this._annotationProviders)e.document.is(i.editor.document)&&(o.H.get("fileAnnotations.preserveWhileEditing")?e.dirty||this.restore(e.editor):e.dirty&&this.clearCore(t))}onTabsChanged(e){for(let t of e.closed)this.clearCore((0,g.UB)(t))}onTextDocumentClosed(e){if(this.container.git.isTrackable(e.uri))for(let[t,i]of this._annotationProviders)i.editor.document===e&&this.clearCore(t)}onTextEditorViewColumnChanged(e){let t=this.getProvider(e.textEditor);if(null==t){let t=(0,d.I6)(this._annotationProviders.values(),t=>t.editor.document===e.textEditor.document);if(null==t)return;this.clearCore(t.correlationKey);return}t.restore(e.textEditor)}onVisibleTextEditorsChanged(e){for(let t of e)this.getProvider(t)?.restore(t,!1)}isInWindowToggle(){return"window"===this.getToggleMode(this._windowAnnotationType)}getToggleMode(e){return null==e?"file":this._toggleModes.get(e)??"file"}clear(e){return this.isInWindowToggle()?this.clearAll():null!=e?this.clearCore((0,g.B0)(e),!0):void 0}async clearAll(){for(let[e]of(this._windowAnnotationType=void 0,this._annotationProviders))await this.clearCore(e,!0);this.unsubscribe()}async getAnnotationType(e){let t=this.getProvider(e);if(null==t)return;let i=await this.container.documentTracker.get(e.document),r=await i?.getStatus();if(r?.blameable)return t.annotationType}getProvider(e){if(e?.document!=null)return this._annotationProviders.get((0,g.B0)(e))}debouncedRestores=new WeakMap;restore(e,t){let i=this.getProvider(e);if(null==i)return;let r=this.debouncedRestores.get(e);null==r&&(r=(0,h.s)(e=>{this.debouncedRestores.delete(e),i.restore(e,t??!0)},500),this.debouncedRestores.set(e,r)),r(e)}_annotatedUris=new a.T;_computingUris=new a.T;async onProviderEditorStatusChanged(e,t){let i;if(null==e)return;let r=!1;if(this.isInWindowToggle())i=t,r=!!(this._annotatedUris.size||this._computingUris.size),this._annotatedUris.clear(),this._computingUris.clear();else{i=void 0;let s=e.document.uri;switch(t){case"computing":this._annotatedUris.has(s)||(this._annotatedUris.add(s),r=!0),this._computingUris.has(s)||(this._computingUris.add(s),r=!0);break;case"computed":null==this.getProvider(e)?this._annotatedUris.has(s)&&(this._annotatedUris.delete(s),r=!0):this._annotatedUris.has(s)||(this._annotatedUris.add(s),r=!0),this._computingUris.has(s)&&(this._computingUris.delete(s),r=!0);break;default:this._annotatedUris.has(s)&&(this._annotatedUris.delete(s),r=!0),this._computingUris.has(s)&&(this._computingUris.delete(s),r=!0)}}r&&await Promise.allSettled([(0,n.o)("gitlens:window:annotated",i),(0,n.o)("gitlens:tabs:annotated:computing",[...this._computingUris]),(0,n.o)("gitlens:tabs:annotated",[...this._annotatedUris])])}async show(e,t,i){if("window"===this.getToggleMode(t)){let i=null==this._windowAnnotationType,s=!i&&this._windowAnnotationType!==t;if(this._windowAnnotationType=t,s&&(await this.clearAll(),i=!0),i)for(let i of r.window.visibleTextEditors)i!==e&&this.show(i,t);if(null==e)return this.subscribe(),!1}if(null==e)return!1;this._editor=e;let s=await this.container.documentTracker.getOrAdd(e.document),o=await s?.getStatus();if(!o?.blameable)return!1;let n=this.getProvider(e);return n?.annotationType===t?(await n.provideAnnotation(i),!0):null!=await r.window.withProgress({location:r.ProgressLocation.Window},async r=>{this.onProviderEditorStatusChanged(e,"computing");let s=this.showAnnotationsCore(n,e,t,i,r);return await s,this.onProviderEditorStatusChanged(e,"computed"),s})}async toggle(e,t,i,r){if(null!=e&&"file"===this._toggleModes.get(t)){let i=await this.container.documentTracker.getOrAdd(e.document),r=await i?.getStatus();if("changes"===t&&!r?.tracked||!r?.blameable)return!1}let s=this.getProvider(e);if(null==s)return null==e&&this.isInWindowToggle()?(await this.clearAll(),!1):this.show(e,t,i);let o=s.annotationType!==t||!s.canReuse(i);return!0===r&&!o||(this.isInWindowToggle()?await this.clearAll():await this.clearCore(s.correlationKey,!0),!!o&&this.show(e,t,i))}nextChange(){let e=this.getProvider(r.window.activeTextEditor);e?.nextChange?.()}previousChange(){let e=this.getProvider(r.window.activeTextEditor);e?.previousChange?.()}async attachKeyboardHook(){o.H.get("fileAnnotations.dismissOnEscape")&&null==this._keyboardScope&&(this._keyboardScope=await this.container.keyboard.beginScope({escape:{onDidPressKey:async()=>{let e=this._editor;null!=e&&await this.clear(e)}}}))}async clearCore(e,t){let i=this._annotationProviders.get(e);null!=i&&(this._annotationProviders.delete(e),i.dispose(),this._annotationProviders.size&&e!==(0,g.B0)(this._editor)||(null!=this._editor&&this.onProviderEditorStatusChanged(this._editor,void 0),await this.detachKeyboardHook()),this._annotationProviders.size||!t&&this.isInWindowToggle()||(this._windowAnnotationType=void 0,this.unsubscribe()),this._onDidToggleAnnotations.fire())}async detachKeyboardHook(){null!=this._keyboardScope&&(await this._keyboardScope.dispose(),this._keyboardScope=void 0)}async showAnnotationsCore(e,t,r,s,o){let n;if(null!=o){let e="annotations";switch(r){case"blame":e="blame annotations";break;case"changes":e="changes annotations";break;case"heatmap":e="heatmap annotations"}o.report({message:`Computing ${e} for ${(0,p.P8)(t.document.fileName)}`})}await this.attachKeyboardHook();let a=await this.container.documentTracker.getOrAdd(t.document);switch(r){case"blame":{let{GutterBlameAnnotationProvider:e}=await i.e(459).then(i.bind(i,6732));n=new e(this.container,e=>this.onProviderEditorStatusChanged(e.editor,e.status),t,a);break}case"changes":{let{GutterChangesAnnotationProvider:e}=await i.e(459).then(i.bind(i,9950));n=new e(this.container,e=>this.onProviderEditorStatusChanged(e.editor,e.status),t,a);break}case"heatmap":{let{GutterHeatmapBlameAnnotationProvider:e}=await i.e(459).then(i.bind(i,2524));n=new e(this.container,e=>this.onProviderEditorStatusChanged(e.editor,e.status),t,a)}}if(null!=n&&await n.validate?.()!==!1){if(null!=e&&await this.clearCore(e.correlationKey,!0),0===this._annotationProviders.size&&this.subscribe(),this._annotationProviders.set(n.correlationKey,n),await n.provideAnnotation(s))return this._onDidToggleAnnotations.fire(),n;await this.clearCore(n.correlationKey,!0)}}subscribe(){this._annotationsDisposable??=r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,h.s)(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),r.window.onDidChangeVisibleTextEditors((0,h.s)(this.onVisibleTextEditorsChanged,50),this),r.window.tabGroups.onDidChangeTabs(this.onTabsChanged,this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.container.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.documentTracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.container.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this),(0,s.Lb)("gitlens.annotations.nextChange",()=>this.nextChange()),(0,s.Lb)("gitlens.annotations.previousChange",()=>this.previousChange()))}unsubscribe(){this._annotationsDisposable?.dispose(),this._annotationsDisposable=void 0}updateDecorations(e){let t=e?Object.entries(v):void 0;if(this.updateHighlightDecoration(),this.updateChangedDecorations(),!e)return;let i=new Map;for(let[e,r]of t)null!=r&&r!==(v[e]??null)&&i.set(r,v[e]??null);if(0!==i.size)for(let e of r.window.visibleTextEditors)this.getProvider(e)?.refresh(i)}updateChangedDecorations(){let e,t,i;v.changesLineAddedAnnotation?.dispose(),v.changesLineChangedAnnotation?.dispose(),v.changesLineDeletedAnnotation?.dispose();let s=o.H.get("changes.locations");switch(r.window.activeColorTheme.kind){case r.ColorThemeKind.Light:e=[72,152,93],t=[32,144,211],i=[229,20,0];break;case r.ColorThemeKind.HighContrast:default:e=[72,126,2],t=[27,129,168],i=[241,76,76]}v.changesLineAddedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:s.includes("line")?`rgba(${e.join(",")},0.4)`:void 0,isWholeLine:!!s.includes("line")||void 0,gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${e.join(",")})' x='13' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.addedForeground"):void 0}),v.changesLineChangedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:s.includes("line")?`rgba(${t.join(",")},0.4)`:void 0,isWholeLine:!!s.includes("line")||void 0,gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${t.join(",")})' x='13' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.modifiedForeground"):void 0}),v.changesLineDeletedAnnotation=r.window.createTextEditorDecorationType({gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><polygon fill='rgb(${i.join(",")})' points='13,10 13,18 17,14'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.deletedForeground"):void 0})}updateHighlightDecoration(){v.gutterBlameHighlight?.dispose(),v.gutterBlameHighlight=void 0;let e=o.H.get("blame.highlight");if(e.enabled){let{locations:t}=e,i=t.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent("<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='#00bcf2' fill-opacity='0.6' x='7' y='0' width='3' height='18'/></svg>")}`):void 0;v.gutterBlameHighlight=r.window.createTextEditorDecorationType({gutterIconPath:i,gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:t.includes("line")?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:t.includes("overview")?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0})}}};w([(0,c.Rm)({args:{0:e=>e?.document.uri.toString(!0)}})],FileAnnotationController.prototype,"clear",1),w([(0,c.Rm)()],FileAnnotationController.prototype,"clearAll",1),w([(0,c.Rm)({args:{0:e=>e?.document.uri.toString(!0),2:!1}})],FileAnnotationController.prototype,"show",1),w([(0,c.Rm)({args:{0:e=>e?.document.uri.toString(!0),2:!1}})],FileAnnotationController.prototype,"toggle",1),w([(0,c.Rm)()],FileAnnotationController.prototype,"nextChange",1),w([(0,c.Rm)()],FileAnnotationController.prototype,"previousChange",1),w([(0,c.Rm)()],FileAnnotationController.prototype,"clearCore",1),w([(0,c.Yz)({singleLine:!0,if:function(){return null==this._annotationsDisposable}})],FileAnnotationController.prototype,"subscribe",1),w([(0,c.Yz)({singleLine:!0,if:function(){return null!=this._annotationsDisposable}})],FileAnnotationController.prototype,"unsubscribe",1)},9949:(e,t,i)=>{i.d(t,{N:()=>s});let r=0x40000000-1;function s(){let e=0;return{get current(){return e},next:function(){return e===r&&(e=0),++e}}}}},o={};function n(e){var t=o[e];if(void 0!==t)return t.exports;var i=o[e]={exports:{}};return s[e].call(i.exports,i,i.exports,n),i.exports}n.m=s,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,n.t=function(i,r){if(1&r&&(i=this(i)),8&r||"object"==typeof i&&i&&(4&r&&i.__esModule||16&r&&"function"==typeof i.then))return i;var s=Object.create(null);n.r(s);var o={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&i;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach(e=>o[e]=()=>i[e]);return o.default=()=>i,n.d(s,o),s},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce((t,i)=>(n.f[i](e,t),t),[])),n.u=e=>""+({0:"webview-commitDetails",53:"ai",240:"telemetry",301:"webview-patchDetails",426:"webview-settings",459:"annotations",590:"lib-encoding",624:"codelens",696:"webview-timeline",758:"integrations",795:"webview-graph",928:"webview-home"})[e]+".js",n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i={606:1},r=e=>{var t=e.modules,r=e.ids,s=e.runtime;for(var o in t)n.o(t,o)&&(n.m[o]=t[o]);s&&s(n);for(var a=0;a<r.length;a++)i[r[a]]=1},n.f.require=(e,t)=>{i[e]||r(require("./"+n.u(e)))};var a={};(()=>{n.r(a),n.d(a,{activate:()=>sq,deactivate:()=>sW});var e,t,i,r,s,o,l=n(1398),c=n(97),u=n(9624),h=n(5565),d=n(9703),p=n(5425);Object.freeze({dispose:()=>{}});let Api=class Api{#i;constructor(e){this.#i=e}registerActionRunner(e,t){if(t.name===p.zM)throw Error(`Cannot use the reserved name '${p.zM}'`);return"hover.commandHelp"===e&&(e="hover.commands"),this.#i.actionRunners.register(e,t)}};var g=n(1681),m=n(1518),f=((e=f||{}).Version="gitlens:synced:version",e.PreReleaseVersion="gitlens:synced:preVersion",e),w=n(3088),v=n(2995),y=n(1974),b=n(1403),C=n(9123),k=n(3711),S=n(8554),R=n(9403),P=n(4301),A=n(1078),I=n(655),D=n(4342),$=Object.defineProperty,T=Object.getOwnPropertyDescriptor,E=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?T(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&$(t,i,o),o};let Storage=class Storage{constructor(e){this.context=e,this._disposable=l.Disposable.from(this._onDidChange,this._onDidChangeSecrets,this.context.secrets.onDidChange(e=>this._onDidChangeSecrets.fire(e)))}_onDidChange=new l.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeSecrets=new l.EventEmitter;get onDidChangeSecrets(){return this._onDidChangeSecrets.event}_disposable;dispose(){this._disposable.dispose()}get(e,t){return this.context.globalState.get(`${m.Od}:${e}`,t)}async delete(e){await this.context.globalState.update(`${m.Od}:${e}`,void 0),this._onDidChange.fire({keys:[e],workspace:!1})}async deleteWithPrefix(e){return this.deleteWithPrefixCore(e)}async deleteWithPrefixCore(e,t){let i=`${m.Od}:`,r=[];for(let s of this.context.globalState.keys()){if(!s.startsWith(i))continue;let o=s.substring(i.length);if(null==e||o===e||o.startsWith(`${e}:`)){if(t?.test(o))continue;r.push(o),await this.context.globalState.update(s,void 0)}}r.length&&this._onDidChange.fire({keys:r,workspace:!1})}async reset(){return this.deleteWithPrefixCore(void 0,/^(premium:subscription|plus:preview:.*)$/)}async store(e,t){await this.context.globalState.update(`${m.Od}:${e}`,t),this._onDidChange.fire({keys:[e],workspace:!1})}async getSecret(e){return this.context.secrets.get(e)}async deleteSecret(e){return this.context.secrets.delete(e)}async storeSecret(e,t){return this.context.secrets.store(e,t)}getWorkspace(e,t){return this.context.workspaceState.get(`${m.Od}:${e}`,t)}async deleteWorkspace(e){await this.context.workspaceState.update(`${m.Od}:${e}`,void 0),this._onDidChange.fire({keys:[e],workspace:!0})}async deleteWorkspaceWithPrefix(e){return this.deleteWorkspaceWithPrefixCore(e)}async deleteWorkspaceWithPrefixCore(e,t){let i=`${m.Od}:`,r=[];for(let s of this.context.workspaceState.keys()){if(!s.startsWith(i))continue;let o=s.substring(i.length);if(null==e||o===e||o.startsWith(`${e}:`)){if(t?.includes(o))continue;r.push(o),await this.context.workspaceState.update(s,void 0)}}r.length&&this._onDidChange.fire({keys:r,workspace:!0})}async resetWorkspace(){return this.deleteWorkspaceWithPrefixCore()}async storeWorkspace(e,t){await this.context.workspaceState.update(`${m.Od}:${e}`,t),this._onDidChange.fire({keys:[e],workspace:!0})}};E([(0,D.Yz)({logThreshold:50})],Storage.prototype,"get",1),E([(0,D.Yz)({logThreshold:250})],Storage.prototype,"delete",1),E([(0,D.Yz)({logThreshold:250})],Storage.prototype,"deleteWithPrefix",1),E([(0,D.Yz)({logThreshold:250})],Storage.prototype,"reset",1),E([(0,D.Yz)({args:{1:!1},logThreshold:250})],Storage.prototype,"store",1),E([(0,D.Yz)({args:!1,logThreshold:250})],Storage.prototype,"getSecret",1),E([(0,D.Yz)({args:!1,logThreshold:250})],Storage.prototype,"deleteSecret",1),E([(0,D.Yz)({args:!1,logThreshold:250})],Storage.prototype,"storeSecret",1),E([(0,D.Yz)({logThreshold:25})],Storage.prototype,"getWorkspace",1),E([(0,D.Yz)({logThreshold:250})],Storage.prototype,"deleteWorkspace",1),E([(0,D.Yz)({logThreshold:250})],Storage.prototype,"deleteWorkspaceWithPrefix",1),E([(0,D.Yz)({logThreshold:250})],Storage.prototype,"resetWorkspace",1),E([(0,D.Yz)({args:{1:!1},logThreshold:250})],Storage.prototype,"storeWorkspace",1);var _=n(6612),O=n(4941),x=n(3489),F=n(7005),L=n(3958),B=n(4162),U=n(6709),N=n(998),q=n(8191),W=n(4338),M=Object.defineProperty,G=Object.getOwnPropertyDescriptor;let H=class extends W.Kt{constructor(e){super("gitlens.addAuthors"),this.container=e}execute(e){let t;return e?.rootUri!=null&&(t=this.container.git.getRepository(e.rootUri)),(0,q.b)({command:"co-authors",state:{repo:t,contributors:void 0}})}};H=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?G(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&M(t,i,o),o})([(0,P.G5)()],H);var V=n(6006),j=n(2713),Q=Object.defineProperty,z=Object.getOwnPropertyDescriptor;let Y=class extends W.Zr{constructor(e){super(["gitlens.browseRepoAtRevision","gitlens.browseRepoAtRevisionInNewWindow","gitlens.browseRepoBeforeRevision","gitlens.browseRepoBeforeRevisionInNewWindow"]),this.container=e}preExecute(e,t){switch(e.command){case"gitlens.browseRepoAtRevisionInNewWindow":t={...t,before:!1,openInNewWindow:!0};break;case"gitlens.browseRepoBeforeRevision":t={...t,before:!0,openInNewWindow:!1};break;case"gitlens.browseRepoBeforeRevisionInNewWindow":t={...t,before:!0,openInNewWindow:!0}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};try{if(null==i.uri){if(t=(0,j.q)(t,e),null==t)return}else t=i.uri;let r=await w.nk.fromUri(t);if(null==r.sha)return;let s=i?.before?await this.container.git.refs(r.repoPath).resolveReference(`${r.sha}^`):r.sha;t=this.container.git.getRevisionUri(s,r.repoPath,r.repoPath),r=w.nk.fromRevisionUri(t),(0,_.OH)(t,{location:i.openInNewWindow?"newWindow":"addToWorkspace",name:`${(0,V.P8)(r.repoPath)} @ ${r.shortSha}`}),i.openInNewWindow||(0,P.S4)("workbench.files.action.focusFilesExplorer")}catch(e){F.Vy.error(e,"BrowseRepoAtRevisionCommand"),(0,R.qQ)("Unable to open the repository at the specified revision")}}};Y=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?z(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Q(t,i,o),o})([(0,P.G5)()],Y);var K=n(5725),Z=n(6363),J=Object.defineProperty,X=Object.getOwnPropertyDescriptor;let ee=class extends W.Kt{constructor(e){super("gitlens.closeUnchangedFiles"),this.container=e}async execute(e){e={...e};try{if(null==e.uris){let t=await (0,K.t6)("Close All Unchanged Files");if(null==t)return;let i=await this.container.git.status(t.uri).getStatus();if(null==i){l.window.showWarningMessage("Unable to close unchanged files");return}e.uris=i.files.map(e=>e.uri)}let t=0===e.uris.length;for(let i of l.window.tabGroups.all)for(let r of i.tabs)if(r.input instanceof l.TabInputText||r.input instanceof l.TabInputCustom||r.input instanceof l.TabInputNotebook){let i=r.input.uri;(t||!e.uris.some(e=>(0,Z.k)(e,i)))&&l.window.tabGroups.close(r,!0)}else if(r.input instanceof l.TabInputTextDiff||r.input instanceof l.TabInputNotebookDiff){let i=r.input.modified;(t||!e.uris.some(e=>(0,Z.k)(e,i)))&&l.window.tabGroups.close(r,!0)}}catch(e){F.Vy.error(e,"CloseUnchangedFilesCommand"),(0,R.qQ)("Unable to close all unchanged files")}}};ee=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?X(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&J(t,i,o),o})([(0,P.G5)()],ee);var et=Object.defineProperty,ei=Object.getOwnPropertyDescriptor,er=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ei(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&et(t,i,o),o};let es=class extends W.Kt{constructor(e){super("gitlens.plus.cloudIntegrations.manage"),this.container=e}async execute(e){await this.container.integrations.manageCloudIntegrations(e?.source)}};es=er([(0,P.G5)()],es);let eo=class extends W.Kt{constructor(e){super("gitlens.plus.cloudIntegrations.connect"),this.container=e}async execute(e){await this.container.integrations.connectCloudIntegrations(e?.integrationIds?{integrationIds:e.integrationIds}:void 0,e?.source)}};eo=er([(0,P.G5)()],eo);var en=Object.defineProperty,ea=Object.getOwnPropertyDescriptor;let el=class extends W.Zr{constructor(e){super(["gitlens.compareWith","gitlens.compareHeadWith","gitlens.compareWorkingWith"],["gitlens.diffHeadWith","gitlens.diffWorkingWith"]),this.container=e}preExecute(e,t){switch(e.command){case"gitlens.compareWith":t={...t};break;case"gitlens.compareHeadWith":case"gitlens.diffHeadWith":(t={...t}).ref1="HEAD";break;case"gitlens.compareWorkingWith":case"gitlens.diffWorkingWith":(t={...t}).ref1=""}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,j.q)(t,e),i={...i};try{let r;switch(i.ref1){case null:r="Compare";break;case"":r="Compare Working Tree with";break;case"HEAD":r="Compare HEAD with";break;default:r=`Compare ${i.ref1} with`}let s=(await (0,K.X)(t,e,r))?.path;if(!s)return;null!=i.ref1&&null!=i.ref2?await this.container.views.searchAndCompare.compare(s,i.ref1,i.ref2):this.container.views.searchAndCompare.selectForCompare(s,i.ref1,{prompt:!0})}catch(e){F.Vy.error(e,"CompareWithCommmand"),(0,R.qQ)("Unable to open comparison")}}};el=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ea(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&en(t,i,o),o})([(0,P.G5)()],el);var ec=Object.defineProperty,eu=Object.getOwnPropertyDescriptor;let eh=class extends W.Zr{constructor(e){super("gitlens.copyCurrentBranch"),this.container=e}async execute(e,t){let i=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0,r=await (0,K.X)(i,e,"Copy Current Branch Name");if(null!=r)try{let e=await r.git.branches().getBranch();e?.name&&await l.env.clipboard.writeText(e.name)}catch(e){F.Vy.error(e,"CopyCurrentBranchCommand"),(0,R.qQ)("Unable to copy current branch name")}}};eh=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eu(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ec(t,i,o),o})([(0,P.G5)()],eh);var ed=n(2636),ep=n(5288),eg=n(9487),em=n(7947);async function ef(e,t="Choose a remote",i,r){let s,o=[];if(0===i.length)t="No remotes found";else{if(r?.autoPick==="default"&&i.length>1){let e=i.find(e=>e.default);null!=e&&(i=[e])}let e={upstream:!0,buttons:r?.setDefault?[eg.$o]:void 0};for(let t of i)o.push((0,em.G0)(t,void 0,e)),t.name===r?.picked&&(s=o[o.length-1])}if(r?.autoPick&&1===i.length)return o[0].item;let n=l.window.createQuickPick();n.ignoreFocusOut=(0,_.dW)();let a=[];try{let i=await new Promise(i=>{a.push(n.onDidHide(()=>i(void 0)),n.onDidAccept(()=>{0!==n.activeItems.length&&i(n.activeItems[0])}),n.onDidTriggerItemButton(async e=>{e.button===eg.$o&&(await e.item.item.setAsDefault(),i(e.item))})),n.title=e,n.placeholder=t,n.matchOnDetail=!0,n.items=o,null!=s&&(n.activeItems=[s]),n.show()});return i?.item}finally{n.dispose(),a.forEach(e=>void e.dispose())}}var ew=n(9881),ev=n(5813),ey=Object.defineProperty,eb=Object.getOwnPropertyDescriptor,eC=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eb(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ey(t,i,o),o};let ek=class extends W.Zr{constructor(e){super(["gitlens.copyDeepLinkToBranch","gitlens.copyDeepLinkToCommit","gitlens.copyDeepLinkToRepo","gitlens.copyDeepLinkToTag","gitlens.copyDeepLinkToComparison","gitlens.copyDeepLinkToWorkspace"]),this.container=e}preExecute(e,t){return null==t&&((0,ev.j7)(e)?t={refOrRepoPath:e.node.commit}:(0,ev.d2)(e)?t={refOrRepoPath:e.node.uri.fsPath,compareRef:e.node.compareRef,compareWithRef:e.node.compareWithRef}:(0,ev.K0)(e)?t="gitlens.copyDeepLinkToRepo"===e.command?{refOrRepoPath:e.node.branch.repoPath,remote:e.node.branch.getRemoteName()}:{refOrRepoPath:e.node.branch}:(0,ev.oD)(e)?t={refOrRepoPath:e.node.tag}:(0,ev.qv)(e)?t={refOrRepoPath:e.node.remote.repoPath,remote:e.node.remote.name}:(0,ev.vH)(e)&&(t={workspaceId:e.node.workspace.id})),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s;if(null!=(i={...i}).workspaceId){try{await this.container.deepLinks.copyDeepLinkUrl(i.workspaceId)}catch(e){F.Vy.error(e,"CopyDeepLinkCommand"),(0,R.qQ)("Unable to copy link")}return}if(i?.refOrRepoPath==null){let i=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0;r=ew.vk.Repository,s=(await (0,K.X)(i,e,`Copy Link to ${(0,ew.$)(r)}`))?.path}else"string"==typeof i.refOrRepoPath?(r=null==i.compareRef?ew.vk.Repository:ew.vk.Comparison,s=i.refOrRepoPath,i.refOrRepoPath=void 0):(r=(0,ew.NK)(i.refOrRepoPath.refType),s=i.refOrRepoPath.repoPath);if(s){if(!i.remote&&i.refOrRepoPath?.refType==="branch"&&(i.refOrRepoPath.remote||i.refOrRepoPath.upstream?.name!=null)){let[e,t]=(0,k.He)(i.refOrRepoPath);null!=e&&null!=t&&(i.remote=t,i.prePickRemote=!0)}try{let e,t=await this.container.git.remotes(s).getRemotes({sort:!0}),o=t.find(e=>e.default);if(i.remote&&!i.prePickRemote)e=t.find(e=>e.name===i?.remote);else if(null!=o)e=o;else{let s=await ef(`Copy Link to ${(0,ew.$)(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==s)return;e=s}if(null==e)return;null==i.refOrRepoPath?await this.container.deepLinks.copyDeepLinkUrl(s,e.url,i.compareRef,i.compareWithRef):await this.container.deepLinks.copyDeepLinkUrl(i.refOrRepoPath,e.url)}catch(e){F.Vy.error(e,"CopyDeepLinkCommand"),(0,R.qQ)("Unable to copy link")}}}};ek=eC([(0,P.G5)()],ek);let eS=class extends W.Zr{constructor(e){super(["gitlens.copyDeepLinkToFile","gitlens.copyDeepLinkToFileAtRevision","gitlens.copyDeepLinkToLines"]),this.container=e}preExecute(e,t){if(null==t&&(t={}),null==t.ref&&"gitlens.copyDeepLinkToFileAtRevision"===e.command&&(t.chooseRef=!0),null==t.lines&&"gitlens.copyDeepLinkToLines"===e.command){let i;(0,ev.Or)(e)&&null!=e.line?i=[e.line+1]:e.editor?.selection==null||e.editor.selection.isEmpty||(i=e.editor.selection.isSingleLine?[e.editor.selection.start.line+1]:[e.editor.selection.start.line+1,e.editor.selection.end.line+1]),t.lines=i}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};let r=ew.vk.File,s=i?.repoPath,o=i?.filePath,n=i?.ref;if(null==s||null==o||null==n){let r=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0;if(r?.path==null||r?.repoPath==null||(null==s&&(s=r.repoPath),null==o&&(o=r?.fsPath),i?.chooseRef!==!0&&null==n&&null!=s&&r?.sha!=null&&(n=(0,ed.kA)(r.sha,s,{refType:"revision"})),null==s||null==o))return;s=(0,V.Fd)(s),(o=(0,V.Fd)(o)).startsWith(s)||(F.Vy.error(`CopyFileDeepLinkCommand: File path ${o} is not contained in repo path ${s}`),(0,R.qQ)("Unable to copy file link")),(o=o.substring(s.length+1)).startsWith("/")&&(o=o.substring(1))}if(s&&o){if(i?.chooseRef){let e=await (0,ep.NZ)(s,`Copy Link to ${o} at Reference`,"Choose a reference (branch, tag, etc) to copy the file link for",{allowRevisions:!0,include:ep.m7.All});if(null==e)return;n=""===e.ref?void 0:e}if(!i.remote&&i.ref?.refType==="branch"&&(i.ref.remote||i.ref.upstream?.name!=null)){let[e,t]=(0,k.He)(i.ref);null!=e&&null!=t&&(i.remote=t,i.prePickRemote=!0)}try{let e,t=await this.container.git.remotes(s).getRemotes({sort:!0}),a=t.find(e=>e.default);if(i.remote&&!i.prePickRemote)e=t.find(e=>e.name===i?.remote);else if(null!=a)e=a;else{let s=await ef(`Copy Link to ${(0,ew.$)(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==s)return;e=s}if(null==e)return;await this.container.deepLinks.copyFileDeepLinkUrl(s,o,e.url,i.lines,n)}catch(e){F.Vy.error(e,"CopyFileDeepLinkCommand"),(0,R.qQ)("Unable to copy file link")}}}};eS=eC([(0,P.G5)()],eS);var eR=n(1192),eP=n(7747),eA=Object.defineProperty,eI=Object.getOwnPropertyDescriptor;let eD=class extends W.Zr{constructor(e){super("gitlens.copyMessageToClipboard"),this.container=e}async preExecute(e,t){return(0,ev.j7)(e)?((t={...t}).sha=e.node.commit.sha,null!=e.node.commit.message&&await e.node.commit.ensureFullDetails(),t.message=e.node.commit.message,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,ev.K0)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,ev.oD)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,j.q)(t,e),i={...i};try{if(!i.message){let r;if(null!=i.repoPath&&null!=i.sha){await (0,eR.eU)({ref:i.sha,repoPath:i.repoPath});return}if(null==t){if(!(r=this.container.git.getBestRepository(e)?.path))return;let t=await this.container.git.commits(r).getLog(void 0,{limit:1});if(null==t)return;let s=(0,eP.$1)(t.commits.values());if(s?.message==null)return;i.message=s.message}else if(null==i.message){let s=await w.nk.fromUri(t);if(!(r=s.repoPath))return;if(null==i.sha){let t=e?.selection.active.line??0;if(t<0)return;try{let i=await this.container.git.getBlameForLine(s,t,e?.document);if(null==i||i.commit.isUncommitted)return;await (0,eR.eU)(i.commit);return}catch(e){F.Vy.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),(0,R.qQ)("Unable to copy message");return}}else{await (0,eR.eU)({ref:i.sha,repoPath:r});return}}}await l.env.clipboard.writeText(i.message)}catch(e){F.Vy.error(e,"CopyMessageToClipboardCommand"),(0,R.qQ)("Unable to copy message")}}};eD=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eA(t,i,o),o})([(0,P.G5)()],eD);var e$=Object.defineProperty,eT=Object.getOwnPropertyDescriptor;let eE=class extends W.Zr{constructor(e){super("gitlens.copyShaToClipboard"),this.container=e}preExecute(e,t){return(0,ev.j7)(e)?((t={...t}).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,ev.K0)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,ev.oD)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,j.q)(t,e),i={...i};try{if(!i.sha){if(null==t){let t=this.container.git.getBestRepository(e)?.path;if(!t)return;let r=await this.container.git.commits(t).getLog(void 0,{limit:1});if(null==r||(i.sha=(0,eP.$1)(r.commits.values())?.sha,null==i.sha))return}else if(null==i.sha){let r=e?.selection.active.line??0;if(r<0)return;try{let s=await w.nk.fromUri(t),o=await this.container.git.getBlameForLine(s,r,e?.document);if(null==o)return;i.sha=o.commit.sha}catch(e){F.Vy.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${r})`),(0,R.qQ)("Unable to copy commit SHA");return}}}await l.env.clipboard.writeText(A.H.get("advanced.abbreviateShaOnCopy")?(0,S.pV)(i.sha):i.sha)}catch(e){F.Vy.error(e,"CopyShaToClipboardCommand"),(0,R.qQ)("Unable to copy commit SHA")}}};eE=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e$(t,i,o),o})([(0,P.G5)()],eE);var e_=Object.defineProperty,eO=Object.getOwnPropertyDescriptor;let ex=class extends W.Zr{constructor(e){super("gitlens.copyRelativePathToClipboard"),this.container=e}preExecute(e){return(0,ev.xT)(e)?this.execute(e.editor,e.node.commit.file.uri):this.execute(e.editor,e.uri)}async execute(e,t){t=(0,j.q)(t,e);let i="";if(null!=t){let r=this.container.git.getBestRepository(e)?.uri;null!=r&&(i=this.container.git.getRelativePath(t,r))}await l.env.clipboard.writeText(i)}};ex=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eO(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e_(t,i,o),o})([(0,P.G5)()],ex);var eF=n(3949),eL=Object.defineProperty,eB=Object.getOwnPropertyDescriptor;let eU=class extends W.Kt{constructor(e){super("gitlens.createPullRequestOnRemote"),this.container=e}async execute(e){let t;if(e?.repoPath!=null&&(t=this.container.git.getRepository(e.repoPath)),null==(t??=await (0,K.t6)("Create Pull Request",void 0,void 0)))return;if(null==e){let i=await t.git.branches().getBranch();if(i?.upstream==null){l.window.showErrorMessage(`Unable to create a pull request for branch \`${i?.name}\` as it hasn't been published to a remote.`);return}e={base:void 0,compare:i.name,remote:(0,k.Zq)(i.upstream.name),repoPath:t.path}}let i=await t.git.remotes().getRemote(e.remote);if(i?.provider==null){l.window.showErrorMessage(`Unable to create a pull request for branch \`${e.compare}\` because it is not associated with a supported remote provider.`);return}let r=i.provider.id,s=await t.git.remotes().getRemotes({filter:e=>e.provider?.id===r,sort:!0}),o={type:eF.J.CreatePullRequest,repoPath:t.path,base:{branch:e.base,remote:void 0},head:{branch:e.compare,remote:{path:i.path,url:i.url,name:i.name}},details:e.describeWithAI?{describeWithAI:!0}:void 0};await (0,P.RS)("gitlens.openOnRemote",{resource:o,remotes:s})}};eU=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eL(t,i,o),o})([(0,P.G5)()],eU);var eN=n(8029),eq=Object.defineProperty,eW=Object.getOwnPropertyDescriptor;let eM=class extends W.Zr{constructor(e){super(["gitlens.diffDirectory","gitlens.diffDirectoryWithHead","gitlens.views.openDirectoryDiff","gitlens.views.openDirectoryDiffWithWorking"]),this.container=e}async preExecute(e,t){switch(e.command){case"gitlens.diffDirectoryWithHead":(t={...t}).ref1="HEAD",t.ref2=void 0;break;case"gitlens.views.openDirectoryDiff":"viewItem"===e.type&&e.node instanceof eN.ip&&(t={...t},[t.ref1,t.ref2]=await e.node.getDiffRefs());break;case"gitlens.views.openDirectoryDiffWithWorking":(0,ev.nX)(e)&&((t={...t}).ref1=e.node.ref.ref,t.ref2="")}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,j.q)(t,e),i={...i};try{let r=(await (0,K.X)(t,e,"Directory Compare Working Tree With"))?.path;if(!r)return;if(!i.ref1){let e=await (0,ep.NZ)(r,"Directory Compare Working Tree with","Choose a branch or tag to compare with",{allowRevisions:!0});if(null==e||(i.ref1=e.ref,null==i.ref1))return}(0,eR.nA)(r,i.ref1,i.ref2)}catch(e){F.Vy.error(e,"OpenDirectoryCompareCommand"),(0,R.qQ)("Unable to open directory compare")}}};eM=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eW(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eq(t,i,o),o})([(0,P.G5)()],eM);var eG=n(4008),eH=n(7079),eV=n(3934),ej=Object.defineProperty,eQ=Object.getOwnPropertyDescriptor;let ez=class extends W.Zr{constructor(e){super("gitlens.diffFolderWithRevision"),this.container=e}async execute(e,t,i){if(i={...i},null==(t=i?.uri??(0,j.q)(t,e)))return;try{(await l.workspace.fs.stat(t)).type!==l.FileType.Directory&&(t=l.Uri.joinPath(t,".."))}catch{}let r=await w.nk.fromUri(t);try{let i=(await (0,K.X)(t,e,"Open Folder Changes with Revision"))?.path;if(!i)return;let s=this.container.git.commits(i),o=s.getLogForPath(r.fsPath).then(e=>e??(r.sha?s.getLogForPath(r.fsPath,r.sha):void 0)),n=this.container.git.getRelativePath(t,i),a=`Open Folder Changes with Revision${(0,eV.eV)(m.EO.Dot,2,2)}${n}${r.sha?` at ${(0,S.pV)(r.sha)}`:""}`,l=await (0,eG.X)(o,a,"Choose a commit to compare with",{picked:r.sha,showOtherReferences:[eH.Fj.fromCommand("Choose a Branch or Tag...","gitlens.diffFolderWithRevisionFrom")]});if(null==l)return;(0,eR.Kg)(this.container,t,{repoPath:i,lhs:l.ref,rhs:r.sha??""})}catch(e){F.Vy.error(e,"DiffFolderWithRevisionCommand"),(0,R.qQ)("Unable to open comparison")}}};ez=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ej(t,i,o),o})([(0,P.G5)()],ez);var eY=Object.defineProperty,eK=Object.getOwnPropertyDescriptor;let eZ=class extends W.Zr{constructor(e){super("gitlens.diffFolderWithRevisionFrom"),this.container=e}async execute(e,t,i){let r=null==i;if(i={...i},null!=(t=i?.uri??(0,j.q)(t,e))){try{(await l.workspace.fs.stat(t)).type!==l.FileType.Directory&&(t=l.Uri.joinPath(t,".."))}catch{}try{let s=(await (0,K.X)(t,e,"Open Folder Changes with Branch or Tag"))?.path;if(!s)return;let o=this.container.git.getRelativePath(t,s);if(null==i.rhs)if(r){let e=await w.nk.fromUri(t);i.rhs=e.sha??""}else{let e=await (0,ep.NZ)(s,`Open Folder Changes with Branch or Tag${(0,eV.eV)(m.EO.Dot,2,2)}${o}`,"Choose a reference (branch, tag, etc) to compare",{allowRevisions:!0,include:ep.m7.All,sort:{branches:{current:!0},tags:{}}});if(e?.ref==null)return;i.rhs=e.ref}if(!i.lhs){let e=await (0,ep.NZ)(s,`Open Folder Changes with Branch or Tag${(0,eV.eV)(m.EO.Dot,2,2)}${o}${i.rhs?` at ${(0,S.pV)(i.rhs)}`:""}`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,include:""===i.rhs?ep.m7.All&~ep.m7.WorkingTree:ep.m7.All});if(e?.ref==null)return;i.lhs=e.ref,""!==i.rhs&&""===i.lhs&&(i.lhs=i.rhs,i.rhs="")}(0,eR.Kg)(this.container,t,{repoPath:s,lhs:i.lhs,rhs:i.rhs})}catch(e){F.Vy.error(e,"DiffFolderWithRevisionFromCommand"),(0,R.qQ)("Unable to open comparison")}}}};eZ=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eK(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eY(t,i,o),o})([(0,P.G5)()],eZ);var eJ=Object.defineProperty,eX=Object.getOwnPropertyDescriptor;let e0=class extends W.Zr{constructor(e){super("gitlens.diffLineWithPrevious"),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,j.q)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let r=i.commit?.getGitUri()??await w.nk.fromUri(t);try{let e=await this.container.git.diff(r.repoPath).getPreviousComparisonUrisForLine(r,i.line,r.sha);if(e?.previous==null){(0,R.pR)();return}await (0,P.RS)("gitlens.diffWith",{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:e.line,showOptions:i.showOptions})}catch(e){F.Vy.error(e,"DiffLineWithPreviousCommand",`getPreviousLineDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,R.qQ)("Unable to open compare")}}};e0=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eJ(t,i,o),o})([(0,P.G5)()],e0);var e1=n(6066),e2=Object.defineProperty,e5=Object.getOwnPropertyDescriptor;let e4=class extends W.Zr{constructor(e){super("gitlens.diffLineWithWorking"),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s;if(null==(t=(0,j.q)(t,e)))return;let o=await w.nk.fromUri(t);if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.commit||i.commit.isUncommitted){let t=i.line;if(t<0)return;try{let n=await this.container.git.getBlameForLine(o,t,e?.document);if(null==n){(0,R.gD)("Unable to open compare");return}if(i.commit=n.commit,i.commit.isUncommitted){let e=await this.container.git.status(o.repoPath).getStatusForFile?.(o);e?.indexStatus!=null?(r=e1.id,s=this.container.git.getAbsoluteUri(e.originalPath||e.path,i.commit.repoPath)):(r=i.commit.unresolvedPreviousSha,s=i.commit.file.originalUri??i.commit.file.uri)}else r=i.commit.sha,s=i.commit.file.uri;i.line=n.line.line-1}catch(e){F.Vy.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),(0,R.qQ)("Unable to open compare");return}}else r=i.commit.sha,s=i.commit.file?.uri??o;let n=await i.commit.file?.getWorkingUri();if(null==n){l.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");return}await (0,P.RS)("gitlens.diffWith",{repoPath:i.commit.repoPath,lhs:{sha:r,uri:s},rhs:{sha:"",uri:n},line:i.line,showOptions:i.showOptions})}};e4=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e2(t,i,o),o})([(0,P.G5)()],e4),n(8587);var e7=Object.defineProperty,e3=Object.getOwnPropertyDescriptor;let e6=class extends W.Zr{constructor(e){super(["gitlens.diffWithNext","gitlens.diffWithNextInDiffLeft","gitlens.diffWithNextInDiffRight"]),this.container=e}preExecute(e,t){return"gitlens.diffWithNextInDiffLeft"===e.command&&(t={...t,inDiffLeftEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,j.q)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let r=i.commit?.getGitUri()??await w.nk.fromUri(t);try{let e=await this.container.git.diff(r.repoPath).getNextComparisonUris(r,r.sha,+!!i.inDiffLeftEditor);if(e?.next==null)return;await (0,P.RS)("gitlens.diffWith",{repoPath:e.current.repoPath,lhs:{sha:e.current.sha??"",uri:e.current.documentUri()},rhs:{sha:e.next.sha??"",uri:e.next.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){F.Vy.error(e,"DiffWithNextCommand",`getNextDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,R.qQ)("Unable to open compare")}}};e6=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e3(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e7(t,i,o),o})([(0,P.G5)()],e6);var e9=Object.defineProperty,e8=Object.getOwnPropertyDescriptor;let te=class extends W.Zr{constructor(e){super(["gitlens.diffWithPrevious","gitlens.diffWithPreviousInDiffLeft","gitlens.diffWithPreviousInDiffRight"]),this.container=e}preExecute(e,t){return"gitlens.diffWithPreviousInDiffRight"===e.command&&(t={...t,inDiffRightEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r;if(null==(i={...i}).uri){if(null==(t=(0,j.q)(t,e)))return}else t=i.uri;if(null==i.line&&(i.line=e?.selection.active.line??0),i.commit?.file!=null){if(!i.commit.isUncommitted){await (0,P.RS)("gitlens.diffWith",{repoPath:i.commit.repoPath,lhs:{sha:`${i.commit.sha}^`,uri:i.commit.file.originalUri??i.commit.file.uri},rhs:{sha:"?"===i.commit.file.status?`${i.commit.sha}^3`:i.commit.sha||"",uri:i.commit.file.uri},line:i.line,showOptions:i.showOptions});return}r=i.commit?.getGitUri()}else r=await w.nk.fromUri(t);try{let e=await this.container.git.diff(r.repoPath).getPreviousComparisonUris(r,r.sha,+!!i.inDiffRightEditor);if(e?.previous==null){if(null==e){(0,R.pR)();return}if(null==e.current.sha){await (0,_.Ol)(e.current,i.showOptions);return}if(!e.current.isUncommittedStaged){(0,R.pR)();return}e.previous=w.nk.fromFile(e.current.fileName,e.current.repoPath,e1.nB)}await (0,P.RS)("gitlens.diffWith",{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){F.Vy.error(e,"DiffWithPreviousCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,R.qQ)("Unable to open compare")}}};te=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e8(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e9(t,i,o),o})([(0,P.G5)()],te);var tt=n(6613),ti=n(377),tr=Object.defineProperty,ts=Object.getOwnPropertyDescriptor;let to=class extends W.Zr{constructor(e){super("gitlens.diffWithRevision"),this.container=e}async execute(e,t,i){if(null==(t=(0,j.q)(t,e)))return;let r=await w.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{let e=this.container.git.commits(r.repoPath),s=e.getLogForPath(r.fsPath).then(t=>t??(r.sha?e.getLogForPath(r.fsPath,r.sha):void 0)),o=`Open Changes with Revision${(0,eV.eV)(m.EO.Dot,2,2)}`,n=`${o}${r.getFormattedFileName({suffix:r.sha?`:${(0,S.pV)(r.sha)}`:void 0,truncateTo:m.uR-o.length})}`,a=await (0,eG.X)(s,n,"Choose a commit to compare with",{empty:r.sha?void 0:{getState:async()=>{let e,t,i=[],s=await this.container.git.status(r.repoPath).getStatus();if(null!=s)for(let e of s.files){if("?"===e.workingTreeStatus||"!"===e.workingTreeStatus)continue;let[t,s]=(0,ti.Uf)(e.path,void 0,!0);i.push(new eH.Fj({label:t,description:s},void 0,"gitlens.diffWithRevision",[this.container.git.getAbsoluteUri(e.path,r.repoPath)]))}return i.length?(e=`${r.getFormattedFileName()} is likely untracked, choose a different file?`,t=`${n} (Untracked?)`):e="No commits found",i.push((0,tt.Du)(tt.WL.Cancel,void 0,{label:i.length?"Cancel":"OK"})),{items:i,placeholder:e,title:t}}},picked:r.sha,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,P.RS)("gitlens.diffWith",{repoPath:r.repoPath,lhs:{sha:t.item.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}},showOtherReferences:[eH.Fj.fromCommand("Choose a Branch or Tag...","gitlens.diffWithRevisionFrom",[t]),eH.Fj.fromCommand("Choose a Stash...","gitlens.diffWithRevisionFrom",[t,{stash:!0}])]});if(null==a)return;await (0,P.RS)("gitlens.diffWith",{repoPath:r.repoPath,lhs:{sha:a.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}catch(e){F.Vy.error(e,"DiffWithRevisionCommand"),(0,R.qQ)("Unable to open compare")}}};to=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ts(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tr(t,i,o),o})([(0,P.G5)()],to);var tn=Object.defineProperty,ta=Object.getOwnPropertyDescriptor;let tl=class extends W.Zr{constructor(e){super("gitlens.diffWithRevisionFrom"),this.container=e}async execute(e,t,i){let r,s,o,n;if(null==(t=(0,j.q)(t,e)))return;let a=await w.nk.fromUri(t);if(!a.repoPath){(0,R.A5)("Unable to open file comparison");return}null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let l=this.container.git.getRelativePath(a,a.repoPath);if(i?.stash){let e=`Open Changes with Stash${(0,eV.eV)(m.EO.Dot,2,2)}`,t=await (0,eG.F)(this.container.git.stash(a.repoPath)?.getStash(),`${e}${a.getFormattedFileName({truncateTo:m.uR-e.length})}`,"Choose a stash to compare with",{empty:`No stashes with '${a.getFormattedFileName()}' found`,filter:e=>e.files?.some(e=>e.path===l||e.originalPath===l)??!0});if(null==t)return;s=r=t.ref}else{let e=`Open Changes with Branch or Tag${(0,eV.eV)(m.EO.Dot,2,2)}`,t=await (0,ep.NZ)(a.repoPath,`${e}${a.getFormattedFileName({truncateTo:m.uR-e.length})}`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0});if(null==t)return;r=t.ref,s=(0,ed.gC)(t)&&t.remote?`remotes/${r}`:r}if(null==r)return;let c=await this.container.git.diff(a.repoPath).getDiffStatus("HEAD",r,{filters:["R","C"]});if(null!=c){let e=c.find(e=>e.path===l);e?.originalPath!=null&&(o=this.container.git.getAbsoluteUri(e.originalPath,a.repoPath),n=`${(0,V.P8)(e.originalPath)} (${(0,S.pV)(r)})`)}await (0,P.RS)("gitlens.diffWith",{repoPath:a.repoPath,lhs:{sha:s,uri:o??a,title:n??`${(0,V.P8)(a.fsPath)} (${(0,S.pV)(r)})`},rhs:{sha:"",uri:a},line:i.line,showOptions:i.showOptions})}};tl=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ta(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tn(t,i,o),o})([(0,P.G5)()],tl);var tc=n(2845),tu=Object.defineProperty,th=Object.getOwnPropertyDescriptor;let td=class extends W.Zr{constructor(e){super(["gitlens.diffWithWorking","gitlens.diffWithWorkingInDiffLeft","gitlens.diffWithWorkingInDiffRight"]),this.container=e}async execute(e,t,i){if(null==(i={...i}).uri){if(null==(t=(0,j.q)(t,e)))return}else t=i.uri;let r=await w.nk.fromUri(t);if(null==i.line&&(i.line=e?.selection.active.line??0),i.inDiffRightEditor)try{let e=await this.container.git.diff(r.repoPath).getPreviousComparisonUris(r,r.sha);r=e?.previous??r}catch(e){F.Vy.error(e,"DiffWithWorkingCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,R.qQ)("Unable to open compare");return}if(null==r.sha){l.window.showInformationMessage("File matches the working tree");return}if(r.sha===e1.nB){l.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");return}if(r.isUncommittedStaged){let e=await this.container.git.status(r.repoPath).getStatusForFile?.(r);if(e?.indexStatus!=null){await (0,P.RS)("gitlens.diffWith",{repoPath:r.repoPath,lhs:{sha:e1.id,uri:r.documentUri()},rhs:{sha:"",uri:r.documentUri()},line:i.line,showOptions:i.showOptions});return}}t=r.toFileUri();let s=await this.container.git.getWorkingUri(r.repoPath,t);if(null==s){let e=await (0,tc.G)(this.container,(0,ed.kA)("HEAD",r.repoPath),{ignoreFocusOut:!0,initialPath:r.relativePath,title:`Open File \u2022 Unable to open '${r.relativePath}'`,placeholder:"Choose another working file to open",keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,_.Ol)(t,{...i.showOptions,preserveFocus:!0,preview:!0})}}});if(null==e)return;s=e}await (0,P.RS)("gitlens.diffWith",{repoPath:r.repoPath,lhs:{sha:r.sha,uri:t,title:i?.lhsTitle},rhs:{sha:"",uri:s},line:i.line,showOptions:i.showOptions})}};td=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?th(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tu(t,i,o),o})([(0,P.G5)()],td);var tp=((t=tp||{})[t.Force=0]="Force",t[t.ForceWithLease=1]="ForceWithLease",t[t.ForceWithLeaseIfIncludes=2]="ForceWithLeaseIfIncludes",t),tg=((i=tg||{})[i.Head=0]="Head",i[i.RemoteHead=1]="RemoteHead",i[i.Tag=2]="Tag",i),tm=((r=tm||{})[r.INDEX_MODIFIED=0]="INDEX_MODIFIED",r[r.INDEX_ADDED=1]="INDEX_ADDED",r[r.INDEX_DELETED=2]="INDEX_DELETED",r[r.INDEX_RENAMED=3]="INDEX_RENAMED",r[r.INDEX_COPIED=4]="INDEX_COPIED",r[r.MODIFIED=5]="MODIFIED",r[r.DELETED=6]="DELETED",r[r.UNTRACKED=7]="UNTRACKED",r[r.IGNORED=8]="IGNORED",r[r.INTENT_TO_ADD=9]="INTENT_TO_ADD",r[r.INTENT_TO_RENAME=10]="INTENT_TO_RENAME",r[r.TYPE_CHANGED=11]="TYPE_CHANGED",r[r.ADDED_BY_US=12]="ADDED_BY_US",r[r.ADDED_BY_THEM=13]="ADDED_BY_THEM",r[r.DELETED_BY_US=14]="DELETED_BY_US",r[r.DELETED_BY_THEM=15]="DELETED_BY_THEM",r[r.BOTH_ADDED=16]="BOTH_ADDED",r[r.BOTH_DELETED=17]="BOTH_DELETED",r[r.BOTH_MODIFIED=18]="BOTH_MODIFIED",r),tf=((s=tf||{}).BadConfigFile="BadConfigFile",s.AuthenticationFailed="AuthenticationFailed",s.NoUserNameConfigured="NoUserNameConfigured",s.NoUserEmailConfigured="NoUserEmailConfigured",s.NoRemoteRepositorySpecified="NoRemoteRepositorySpecified",s.NotAGitRepository="NotAGitRepository",s.NotAtRepositoryRoot="NotAtRepositoryRoot",s.Conflict="Conflict",s.StashConflict="StashConflict",s.UnmergedChanges="UnmergedChanges",s.PushRejected="PushRejected",s.ForcePushWithLeaseRejected="ForcePushWithLeaseRejected",s.ForcePushWithLeaseIfIncludesRejected="ForcePushWithLeaseIfIncludesRejected",s.RemoteConnectionError="RemoteConnectionError",s.DirtyWorkTree="DirtyWorkTree",s.CantOpenResource="CantOpenResource",s.GitNotFound="GitNotFound",s.CantCreatePipe="CantCreatePipe",s.PermissionDenied="PermissionDenied",s.CantAccessRemote="CantAccessRemote",s.RepositoryNotFound="RepositoryNotFound",s.RepositoryIsLocked="RepositoryIsLocked",s.BranchNotFullyMerged="BranchNotFullyMerged",s.NoRemoteReference="NoRemoteReference",s.InvalidBranchName="InvalidBranchName",s.BranchAlreadyExists="BranchAlreadyExists",s.NoLocalChanges="NoLocalChanges",s.NoStashFound="NoStashFound",s.LocalChangesOverwritten="LocalChangesOverwritten",s.NoUpstreamBranch="NoUpstreamBranch",s.IsInSubmodule="IsInSubmodule",s.WrongCase="WrongCase",s.CantLockRef="CantLockRef",s.CantRebaseMultipleBranches="CantRebaseMultipleBranches",s.PatchDoesNotApply="PatchDoesNotApply",s.NoPathFound="NoPathFound",s.UnknownPath="UnknownPath",s.EmptyCommitMessage="EmptyCommitMessage",s.BranchFastForwardRejected="BranchFastForwardRejected",s.BranchNotYetBorn="BranchNotYetBorn",s.TagConflict="TagConflict",s),tw=((o=tw||{})[o.Merge=0]="Merge",o[o.Index=1]="Index",o[o.WorkingTree=2]="WorkingTree",o),tv=n(892),ty=Object.defineProperty,tb=Object.getOwnPropertyDescriptor;let tC=class extends W.Kt{constructor(e){super(["gitlens.externalDiff","gitlens.externalDiffAll"]),this.container=e}async preExecute(e,t){if(t={...t},(0,ev.xT)(e)){let i=await e.node.commit.getPreviousSha(),r=(0,S._k)(i)?"":i,s=e.node.commit.isUncommitted?"":e.node.commit.sha;return t.files=[{uri:w.nk.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:e.node.commit.isUncommittedStaged||null!=e.node.file.indexStatus,ref1:r,ref2:s}],this.execute(t)}if((0,ev.cD)(e))return t.files=[{uri:w.nk.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:null!=e.node.file.indexStatus,ref1:e.node.ref1,ref2:e.node.ref2}],this.execute(t);if(null==t.files&&("scm-states"===e.type?t.files=e.scmResourceStates.map(e=>({uri:e.resourceUri,staged:e.resourceGroupType===tw.Index})):"scm-groups"===e.type&&(t.files=(0,tv.x1)(e.scmResourceGroups[0].resourceStates,e=>this.isModified(e)?{uri:e.resourceUri,staged:e.resourceGroupType===tw.Index}:void 0))),"gitlens.externalDiffAll"===e.command&&null==t.files){let e=await (0,K.t6)("Open All Changes (difftool)");if(null==e)return;let i=await this.container.git.status(e.uri).getStatus();if(null==i)return void l.window.showInformationMessage("The repository doesn't have any changes");for(let e of(t.files=[],i.files))"M"===e.indexStatus&&t.files.push({uri:e.uri,staged:!0}),"M"===e.workingTreeStatus&&t.files.push({uri:e.uri,staged:!1})}return this.execute(t)}isModified(e){let t=e.type;return t===tm.BOTH_MODIFIED||t===tm.INDEX_MODIFIED||t===tm.MODIFIED}async execute(e){e={...e};try{let t;if(null==e.files){let i=l.window.activeTextEditor;if(null==i||!(t=this.container.git.getBestRepository(i)?.path))return;let r=i.document.uri,s=await this.container.git.status(t).getStatusForFile?.(r);if(null==s){l.window.showInformationMessage("The current file doesn't have any changes");return}e.files=[],"M"===s.indexStatus&&e.files.push({uri:s.uri,staged:!0}),"M"===s.workingTreeStatus&&e.files.push({uri:s.uri,staged:!1})}else if(!(t=(await this.container.git.getOrOpenRepository(e.files[0].uri))?.path))return;let i=A.H.get("advanced.externalDiffTool")||await this.container.git.diff(t).getDiffTool?.();if(!i){let e="View Git Docs";await l.window.showWarningMessage("Unable to open changes because no Git diff tool is configured",e)===e&&l.env.openExternal(l.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool"));return}for(let r of e.files)this.container.git.diff(t).openDiffTool?.(r.uri,{ref1:r.ref1,ref2:r.ref2,staged:r.staged,tool:i})}catch(e){F.Vy.error(e,"ExternalDiffCommand"),(0,R.qQ)("Unable to open changes in diff tool")}}};tC=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tb(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ty(t,i,o),o})([(0,P.G5)()],tC),n(2895);var tk=Object.defineProperty,tS=Object.getOwnPropertyDescriptor;let tR=class extends W.Zr{constructor(e){super(["gitlens.ai.generateCommitMessage","gitlens.scm.ai.generateCommitMessage"],["gitlens.generateCommitMessage","gitlens.scm.generateCommitMessage"]),this.container=e}preExecute(e,t){let i=t?.source;return null==i&&("gitlens.scm.ai.generateCommitMessage"===e.command||"gitlens.scm.generateCommitMessage"===e.command)&&(i="scm-input","scm"===e.type&&null!=e.scm.rootUri&&(t={...t,repoPath:e.scm.rootUri})),this.execute(e.editor,e.uri,{...t,source:i})}async execute(e,t,i){let r;if(null!=(i={...i}).repoPath)r=this.container.git.getRepository(i.repoPath);else{let i=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0;r=await (0,K.X)(i,e,"Generate Commit Message")}if(null==r)return;let s=await this.container.git.getScmRepository(r.path);if(null!=s)try{let e=s.inputBox.value,t=await this.container.ai.generateCommitMessage(r,{source:i?.source??"commandPalette"},{context:e,progress:{location:l.ProgressLocation.Notification,title:"Generating commit message..."}});if(null==t)return;(0,P.S4)("workbench.view.scm"),s.inputBox.value=`${e?`${e}

`:""}${t.parsed.summary}

${t.parsed.body}`}catch(e){if(F.Vy.error(e,"GenerateCommitMessageCommand"),e instanceof Error&&e.message.startsWith("No changes")){l.window.showInformationMessage("No changes to generate a commit message from.");return}(0,R.qQ)(e.message)}}};tR=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tS(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tk(t,i,o),o})([(0,P.G5)()],tR);var tP=n(5507),tA=n(5738),tI=n(3447),tD=n(311),t$=n(5576),tT=Object.defineProperty,tE=Object.getOwnPropertyDescriptor;let t_=class extends W.Kt{constructor(e){super("gitlens.ghpr.views.openOrCreateWorktree"),this.container=e}async execute(...e){let t,i,r,s,o,[n]=e,{base:{repositoryCloneUrl:{url:a,owner:c,repositoryName:u}},githubRepository:{rootUri:h},head:{repositoryCloneUrl:{url:d,owner:p},ref:g},item:{number:m}}="pullRequestModel"in n?n.pullRequestModel:n,f=this.container.git.getRepository(h);if(null==f){l.window.showWarningMessage(`Unable to find repository(${h.toString()}) for PR #${m}`);return}if(null==(f=await f.getCommonRepository())){l.window.showWarningMessage(`Unable to find main repository(${h.toString()}) for PR #${m}`);return}let w=d.toString(),[,v,y]=(0,tA.BX)(w),b=(await f.git.remotes().getRemotes({filter:e=>e.matches(v,y)}))[0];null!=b?(r=b.name,await this.container.git.fetch(f.path,{remote:b.name})):(r=p,i={name:p,url:w});let C=`${r}/${g}`,k=`pr/${a.toString()===d.toString()?g:C}`,S=`remotes/${C}`,R=await (0,tD.vV)(f,k,C);if(null!=R){(0,tP.ho)(R,{openOnly:!0});return}let P=await f.git.branches().getLocalBranchByUpstream?.(C);null!=P?s=(0,tI.iw)(P):(s=(0,ed.kA)(S,f.path,{refType:"branch",name:S,remote:!0}),o=k),await (0,t$.Ar)();try{let e=await (0,tP.vt)(f,void 0,s,{addRemote:i,createBranch:o});if(null==e)return;f.git.config().setConfig?.(`branch.${k}.github-pr-owner-number`,`${c}#${u}#${m}`)}catch(e){F.Vy.error(e,"CreateWorktreeCommand","Unable to create worktree"),l.window.showErrorMessage(`Unable to create worktree for ${p}:${g}`)}}};t_=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tE(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tT(t,i,o),o})([(0,P.G5)()],t_);var tO=n(4135),tx=n(4112),tF=n(1818),tL=Object.defineProperty,tB=Object.getOwnPropertyDescriptor;let tU=/\$\(.+?\)|\s/g,tN=Symbol("ShowLoading");let QuickWizardCommandBase=class QuickWizardCommandBase extends W.Kt{constructor(e,t){super(t),this.container=e}startedWith="menu";async execute(e){let t,i,r=new tF.d(this.container,e),s=e?.command!=null?r.find(e.command):void 0;for(this.startedWith=null!=s?"command":"menu",i=null==s?r:await this.showLoadingIfNeeded(s,this.getCommandStep(s,r)),i?.ignoreFocusOut===!0&&(i.ignoreFocusOut=void 0);null!=i;){if(i===r&&null!=s){i=await this.getCommandStep(s,r);continue}if(t&&null==i.ignoreFocusOut&&(i.ignoreFocusOut=!0),(0,tx.xb)(i)){i=await this.showPickStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}if((0,tx.ud)(i)){i=await this.showInputStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}if((0,tx.U5)(i)){i=await this.showCustomStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}break}e?.completion?.fulfill()}async showLoadingIfNeeded(e,t){let i,r=await Promise.race([t,new Promise(e=>setTimeout(e,250,tN))]);if(r!==tN)return r;let s=l.window.createQuickPick();s.ignoreFocusOut=!1;let o=[];try{return await new Promise(async r=>{o.push(s.onDidHide(()=>r(i))),s.title=e.title,s.placeholder="Loading...",s.busy=!0,s.enabled=!1,s.show(),i=await t,s.hide()})}finally{s.dispose(),o.forEach(e=>void e.dispose())}}getButtons(e,t){let i=[];if(null!=e){if(null!=e.buttons)return i.push(...e.buttons),i;!0!==e.disallowBack&&i.push(l.QuickInputButtons.Back),null!=e.additionalButtons&&i.push(...e.additionalButtons)}if(t?.canConfirm)if(t.canSkipConfirm){let r=new eg.UO(t.confirm(),e?.isConfirmationStep??!1,async()=>{if(t?.skipConfirmKey==null)return;let e=A.H.get("gitCommands.skipConfirmations")??[],i=e.indexOf(t.skipConfirmKey);-1!==i?e.splice(i,1):e.push(t.skipConfirmKey),await A.H.updateEffective("gitCommands.skipConfirmations",e)});i.push(r)}else e?.isConfirmationStep||i.push(eg.V3);return i}async getCommandStep(e,t){t.setCommand(e,"command"),null!=this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let i=await e.next();if(!i.done)return i.value}async nextStep(e,t,i){null!=i&&(i.busy=!0);let r=await e.next(t);if(!r.done)return null!=i&&(i.value=""),r.value}async showCustomStep(e,t){let i=await e.show(e);if(i!==tx.Lt)if(!(0,tt.qT)(i))return this.nextStep(t.command,i);else switch(i){case tt.WL.Back:return await t?.command?.previous()??t;case tt.WL.Noop:case tt.WL.Reload:return t.command?.retry();case tt.WL.Cancel:default:return}}async showInputStep(e,t){let i=l.window.createInputBox();i.ignoreFocusOut=!A.H.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);let r=[];try{return await new Promise(async s=>{let o=async()=>{!0!==e.disallowBack&&(i.value="",null!=t.command&&(i.busy=!0,s(await t.command.previous()??t)))},n={};if(null!=e.onDidPressKey&&null!=e.keys&&0!==e.keys.length)for(let t of e.keys)n[t]={onDidPressKey:t=>e.onDidPressKey(i,t)};let a=this.container.keyboard.createScope(n);if(a.start(),null!=e.value&&a.pause(["left","ctrl+left","right","ctrl+right"]),r.push(a,i.onDidHide(()=>{e.frozen||s(void 0)}),i.onDidTriggerButton(async r=>{if(r===l.QuickInputButtons.Back){o();return}if(r!==eg.V3){if(r instanceof eg.K0&&null!=r.onDidClick){let o=r.onDidClick(i);if(i.buttons=this.getButtons(e,t.command),await o===!0){s(t.command?.retry());return}(0,t$.yL)(o)&&(i.buttons=this.getButtons(e,t.command));return}if(null!=e.onDidClickButton){let o=e.onDidClickButton(i,r);i.buttons=this.getButtons(e,t.command),await o===!0&&s(t.command?.retry())}}}),i.onDidChangeValue(async t=>{if(i.ignoreFocusOut||(i.ignoreFocusOut=!0),null!=a&&(0!==t.length?a.pause(["left","ctrl+left","right","ctrl+right"]):a.resume()),null==e.validate)return;let[,r]=await e.validate(t);i.validationMessage=r}),i.onDidAccept(async()=>{s(await this.nextStep(t.command,i.value,i))})),i.buttons=this.getButtons(e,t.command),i.title=e.title,i.placeholder=e.placeholder,i.prompt=e.prompt,null!=e.value&&(i.value=e.value,null!=e.validate)){let[t,r]=await e.validate(e.value);t||null==r||(i.validationMessage={severity:l.InputBoxValidationSeverity.Error,message:r})}if(i.show(),null!=e.value)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}e.onDidActivate?.(i)})}finally{i.dispose(),r.forEach(e=>void e.dispose())}}async showPickStep(e,t){let i=l.window.createQuickPick();i.ignoreFocusOut=!A.H.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);let r=[];try{return await new Promise(async s=>{let o;async function n(){!0!==e.disallowBack&&(i.value="",null!=t.command&&(i.busy=!0,s(await t.command.previous()??t)))}async function a(){if(null!=e.onDidLoadMore){i.busy=!0;try{let t=await e.onDidLoadMore?.(i),r=-1;if(0!==i.activeItems.length){let e=i.activeItems[0];r=i.items.indexOf(e),(0,tt.hr)(e)&&r--}i.items=e.items=t,r&&(i.activeItems=[i.items[r]])}finally{i.busy=!1}}}let c={left:{onDidPressKey:n}};if(null!=e.onDidPressKey&&e.keys?.length)for(let t of e.keys)c[t]={onDidPressKey:t=>{if(!i.activeItems.length)return;let r=i.activeItems[0];if(!(0,tt.hr)(r))return e.onDidPressKey(i,t,r)}};let u=this.container.keyboard.createScope(c);u.start(),null!=e.value&&u.pause(["left","ctrl+left","right","ctrl+right"]);let h=!0,p=!1;r.push(u,i.onDidHide(()=>{e.frozen||s(void 0)}),i.onDidTriggerItemButton(async r=>{await e.onDidClickItemButton?.(i,r.button,r.item)===!0&&s(await this.nextStep(t.command,[r.item],i))}),i.onDidTriggerButton(async r=>{if(r===l.QuickInputButtons.Back){n();return}if(r!==eg.V3){if(r===eg.TR){a();return}if(r instanceof eg.K0&&null!=r.onDidClick){let o;if(null==t.command&&0!==i.activeItems.length){let e=i.activeItems[0];(0,tx.XD)(e)&&(o=e)}let n=r.onDidClick(i);if(i.buttons=this.getButtons(o?.value&&!(0,tx.U5)(o.value)?o.value:e,o??t.command),await n===!0){s(t.command?.retry());return}(0,t$.yL)(n)&&(i.buttons=this.getButtons(o?.value&&!(0,tx.U5)(o.value)?o.value:e,o??t.command));return}if(null!=e.onDidClickButton){let o=e.onDidClickButton(i,r);i.buttons=this.getButtons(e,t.command);let n=await o;!0===n?s(t.command?.retry()):!1!==n&&null!=n&&s(n.value)}}}),i.onDidChangeValue(async r=>{if(i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),null!=u&&(0!==r.length?u.pause(["left","ctrl+left","right","ctrl+right"]):u.resume()),!(null!=e.onDidChangeValue&&await e.onDidChangeValue(i))){if(!p){if(i.canSelectMany&&" "===r){i.value="",i.selectedItems=i.selectedItems.length===i.items.length?[]:i.items;return}if(r.endsWith(" ")){let r;if(i.canSelectMany&&0!==i.selectedItems.length)return;if(null==t.command){let e=t.find(i.value.trim(),!0);if(null==e)return;t.setCommand(e,this.startedWith)}else{let t=i.value.trim().toLowerCase(),s=(await e.items).find(e=>e.label.replace(tU,"").toLowerCase()===t);if(null==s)return;r=[s]}s(await this.nextStep(t.command,r,i));return}}if(!i.canSelectMany&&null!=t.command&&0!==r.trim().length&&(p||0===i.activeItems.length)){if(null==e.onValidateValue)return;p=await e.onValidateValue(i,r.trim(),await e.items)}else p=!1;p||(e.items=await e.items,i.items.length!==e.items.length&&(i.items=e.items))}}),i.onDidChangeActive(()=>{if(h||i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),h&&(h=!1),null!=t.command||0===i.activeItems.length)return;let r=i.activeItems[0];(0,tx.XD)(r)&&(i.buttons=this.getButtons(void 0,r))}),i.onDidChangeSelection(t=>{i.canSelectMany&&(i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),e.onDidChangeSelection?.(i,t))}),i.onDidAccept(async()=>{let r=i.selectedItems;if(0===r.length){if(!i.canSelectMany||0===i.activeItems.length){let r=i.value.trim();if(0===r.length&&!e.allowEmpty)return;if(null==e.onDidAccept){e.allowEmpty&&s(await this.nextStep(t.command,[],i));return}i.busy=!0,await e.onDidAccept(i)&&s(await this.nextStep(t.command,r,i)),i.busy=!1;return}r=i.activeItems}if(1===r.length){let[i]=r;if((0,tt.hr)(i))switch(await i.onDidSelect?.(),i.directive){case tt.WL.Cancel:s(void 0);return;case tt.WL.Back:n();return;case tt.WL.LoadMore:a();return;case tt.WL.Noop:return;case tt.WL.Reload:s(await t.command?.retry());return;case tt.WL.SignIn:{let i=await d.m.instance.subscription.loginOrSignUp(!1,{source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case tt.WL.StartPreview:await d.m.instance.subscription.startPreviewTrial({source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}}),s(await t.command?.retry());return;case tt.WL.RequiresVerification:{let i=await d.m.instance.subscription.resendVerification({source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case tt.WL.StartProTrial:{let i=await d.m.instance.subscription.loginOrSignUp(!0,{source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case tt.WL.RequiresPaidSubscription:d.m.instance.subscription.upgrade(tO.qn.Pro,{source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}}),s(void 0);return}}if(null==t.command){let[e]=r;if(!(0,tx.XD)(e))return;t.setCommand(e,this.startedWith)}if(!i.canSelectMany&&null!=e.onDidAccept){i.busy=!0;let t=await e.onDidAccept(i);if(i.busy=!1,!t)return}s(await this.nextStep(t.command,r,i))})),i.title=e.title,i.matchOnDescription=!!e.matchOnDescription,i.matchOnDetail=!!e.matchOnDetail;let g=e.selectValueWhenShown??!0,m=!1;if((0,t$.yL)(e.items)?(i.placeholder="Loading...",i.busy=!0,null!=e.value&&g&&(i.value=e.value),i.show(),m=!0,o=await e.items):o=e.items,i.canSelectMany=!!e.multiselect&&o.filter(e=>!(0,tt.hr)(e)).length>1,i.placeholder="function"==typeof e.placeholder?e.placeholder(o.length):e.placeholder,i.items=o,i.busy=!1,i.canSelectMany?i.selectedItems=e.selectedItems??i.items.filter(e=>e.picked):i.activeItems=e.selectedItems??i.items.filter(e=>e.picked),null!=t.command&&e===t&&t.setCommand(void 0,"menu"),i.buttons=this.getButtons(e,t.command),m||(null!=e.value&&g&&(i.value=e.value),i.show()),null==e.value||g||(i.value=e.value),null!=e.value&&g)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}e.onDidActivate?.(i)})}finally{i.dispose(),r.forEach(e=>void e.dispose())}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tL(t,i,o)})([(0,D.Rm)({args:!1,scoped:!0,singleLine:!0,timed:!1})],QuickWizardCommandBase.prototype,"execute",1);var tq=Object.defineProperty,tW=Object.getOwnPropertyDescriptor;let tM=class extends QuickWizardCommandBase{constructor(e){super(e,["gitlens.gitCommands","gitlens.gitCommands.branch","gitlens.gitCommands.branch.create","gitlens.gitCommands.branch.delete","gitlens.gitCommands.branch.prune","gitlens.gitCommands.branch.rename","gitlens.gitCommands.checkout","gitlens.gitCommands.cherryPick","gitlens.gitCommands.history","gitlens.gitCommands.merge","gitlens.gitCommands.rebase","gitlens.gitCommands.remote","gitlens.gitCommands.remote.add","gitlens.gitCommands.remote.prune","gitlens.gitCommands.remote.remove","gitlens.gitCommands.reset","gitlens.gitCommands.revert","gitlens.gitCommands.show","gitlens.gitCommands.stash","gitlens.gitCommands.stash.drop","gitlens.gitCommands.stash.list","gitlens.gitCommands.stash.pop","gitlens.gitCommands.stash.push","gitlens.gitCommands.stash.rename","gitlens.gitCommands.status","gitlens.gitCommands.switch","gitlens.gitCommands.tag","gitlens.gitCommands.tag.create","gitlens.gitCommands.tag.delete","gitlens.gitCommands.worktree","gitlens.gitCommands.worktree.create","gitlens.gitCommands.worktree.delete","gitlens.gitCommands.worktree.open","gitlens.copyWorkingChangesToWorktree"])}preExecute(e,t){switch(e.command){case"gitlens.gitCommands.branch":return this.execute({command:"branch",...t});case"gitlens.gitCommands.branch.create":return this.execute({command:"branch",state:{subcommand:"create"}});case"gitlens.gitCommands.branch.delete":return this.execute({command:"branch",state:{subcommand:"delete"}});case"gitlens.gitCommands.branch.prune":return this.execute({command:"branch",state:{subcommand:"prune"}});case"gitlens.gitCommands.branch.rename":return this.execute({command:"branch",state:{subcommand:"rename"}});case"gitlens.gitCommands.cherryPick":return this.execute({command:"cherry-pick"});case"gitlens.gitCommands.history":return this.execute({command:"log"});case"gitlens.gitCommands.merge":return this.execute({command:"merge"});case"gitlens.gitCommands.rebase":return this.execute({command:"rebase"});case"gitlens.gitCommands.remote":return this.execute({command:"remote"});case"gitlens.gitCommands.remote.add":return this.execute({command:"remote",state:{subcommand:"add"}});case"gitlens.gitCommands.remote.prune":return this.execute({command:"remote",state:{subcommand:"prune"}});case"gitlens.gitCommands.remote.remove":return this.execute({command:"remote",state:{subcommand:"remove"}});case"gitlens.gitCommands.reset":return this.execute({command:"reset"});case"gitlens.gitCommands.revert":return this.execute({command:"revert"});case"gitlens.gitCommands.show":return this.execute({command:"show"});case"gitlens.gitCommands.stash":return this.execute({command:"stash"});case"gitlens.gitCommands.stash.drop":return this.execute({command:"stash",state:{subcommand:"drop"}});case"gitlens.gitCommands.stash.list":return this.execute({command:"stash",state:{subcommand:"list"}});case"gitlens.gitCommands.stash.pop":return this.execute({command:"stash",state:{subcommand:"pop"}});case"gitlens.gitCommands.stash.push":return this.execute({command:"stash",state:{subcommand:"push"}});case"gitlens.gitCommands.stash.rename":return this.execute({command:"stash",state:{subcommand:"rename"}});case"gitlens.gitCommands.status":return this.execute({command:"status"});case"gitlens.gitCommands.switch":case"gitlens.gitCommands.checkout":return this.execute({command:"switch"});case"gitlens.gitCommands.tag":return this.execute({command:"tag"});case"gitlens.gitCommands.tag.create":return this.execute({command:"tag",state:{subcommand:"create"}});case"gitlens.gitCommands.tag.delete":return this.execute({command:"tag",state:{subcommand:"delete"}});case"gitlens.gitCommands.worktree":return this.execute({command:"worktree"});case"gitlens.gitCommands.worktree.create":return this.execute({command:"worktree",state:{subcommand:"create"}});case"gitlens.gitCommands.worktree.delete":return this.execute({command:"worktree",state:{subcommand:"delete"}});case"gitlens.gitCommands.worktree.open":return this.execute({command:"worktree",state:{subcommand:"open"}});case"gitlens.copyWorkingChangesToWorktree":return this.execute({command:"worktree",state:{subcommand:"copy-changes",changes:{type:"working-tree"}}});default:return this.execute(t)}}};tM=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tW(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tq(t,i,o),o})([(0,P.G5)()],tM);var tG=n(9439),tH=Object.defineProperty,tV=Object.getOwnPropertyDescriptor;let tj=class extends W.Kt{constructor(e){super("gitlens.inviteToLiveShare"),this.container=e}static createMarkdownCommandLink(e){return(0,tG.J)("gitlens.inviteToLiveShare",void 0===e||"string"==typeof e?{email:e}:e)}preExecute(e,t){return(0,ev.BA)(e)&&((t={...t}).email=e.node.contributor.email),this.execute(t)}async execute(e){if(e?.email){let t=await this.container.vsls.getContact(e.email);if(null!=t)return t.invite()}return this.container.vsls.startSession()}};tj=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tV(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tH(t,i,o),o})([(0,P.G5)()],tj),n(6386);var tQ=Object.defineProperty,tz=Object.getOwnPropertyDescriptor,tY=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tz(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tQ(t,i,o),o};let tK=class extends W.Kt{constructor(e){super("gitlens.enableDebugLogging"),this.container=e}async execute(){await A.H.updateEffective("outputLevel","debug")}};tK=tY([(0,P.G5)()],tK);let tZ=class extends W.Kt{constructor(e){super("gitlens.disableDebugLogging"),this.container=e}async execute(){await A.H.updateEffective("outputLevel","error")}};tZ=tY([(0,P.G5)()],tZ);var tJ=Object.defineProperty,tX=Object.getOwnPropertyDescriptor;let t0=class extends W.Zr{constructor(e){super("gitlens.openAssociatedPullRequestOnRemote"),this.container=e}async execute(e,t){let i,r=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0;if(null!=e&&null!=r){let t=e.selection.active.line;if(t<0)return;try{let e=await this.container.git.getBlameForLine(r,t);if(null==e)return;i={clipboard:!1,ref:e.commit.sha,repoPath:e.commit.repoPath}}catch(e){F.Vy.error(e,"OpenAssociatedPullRequestOnRemoteCommand",`getBlameForLine(${t})`);return}}else try{let e=await (0,K.t6)("Open Associated Pull Request",void 0,void 0,{filter:async e=>await this.container.git.remotes(e.uri).getBestRemoteWithIntegration()!=null});if(null==e)return;let t=await e?.git.branches().getBranch(),r=await t?.getAssociatedPullRequest({expiryOverride:!0});i=null!=r?{clipboard:!1,pr:{url:r.url}}:{clipboard:!1,ref:t?.name??"HEAD",repoPath:e.path}}catch(e){F.Vy.error(e,"OpenAssociatedPullRequestOnRemoteCommand","No editor opened");return}await (0,P.RS)("gitlens.openPullRequestOnRemote",i)}};t0=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tJ(t,i,o),o})([(0,P.G5)()],t0);var t1=Object.defineProperty,t2=Object.getOwnPropertyDescriptor;let t5=class extends W.Zr{constructor(e){super(["gitlens.openBranchesOnRemote","gitlens.copyRemoteBranchesUrl"],["gitlens.openBranchesInRemote"]),this.container=e}preExecute(e,t){return(0,ev.qv)(e)&&(t={...t,remote:e.node.remote.name}),"gitlens.copyRemoteBranchesUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0,s=(await (0,K.X)(r,e,i?.clipboard?"Copy Remote Branches URL":"Open Branches on Remote"))?.path;if(s)try{await (0,P.RS)("gitlens.openOnRemote",{resource:{type:eF.J.Branches},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){F.Vy.error(e,"OpenBranchesOnRemoteCommand"),(0,R.qQ)("Unable to open branches on remote provider")}}};t5=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t2(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t1(t,i,o),o})([(0,P.G5)()],t5);var t4=Object.defineProperty,t7=Object.getOwnPropertyDescriptor;let t3=class extends W.Zr{constructor(e){super(["gitlens.openBranchOnRemote","gitlens.copyRemoteBranchUrl"],["gitlens.openBranchInRemote"]),this.container=e}preExecute(e,t){return(0,ev.K0)(e)&&(t={...t,branch:e.node.branch.name,remote:e.node.branch.getRemoteName()}),"gitlens.copyRemoteBranchUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0,s=(await (0,K.X)(r,e,i?.clipboard?"Copy Remote Branch URL":"Open Branch On Remote"))?.path;if(s){i={...i};try{if(null==i.branch){let e=await (0,ep.NZ)(s,i.clipboard?"Copy Remote Branch URL":"Open Branch On Remote",i.clipboard?"Choose a branch to copy the URL from":"Choose a branch to open",{autoPick:!0,filter:{branches:e=>null!=e.upstream},include:ep.m7.Branches,sort:{branches:{current:!0},tags:{}}});if(null==e||e instanceof eH.Fj)return;if("branch"===e.refType)if(e.remote||null!=e.upstream&&!e.upstream.missing){let t=e.remote?e.name:e.upstream.name;i.branch=(0,k.km)(t),i.remote=(0,k.Zq)(t)}else i.branch=e.name;else i.branch=e.ref}await (0,P.RS)("gitlens.openOnRemote",{resource:{type:eF.J.Branch,branch:i.branch||"HEAD"},repoPath:s,remote:i.remote,clipboard:i.clipboard})}catch(e){F.Vy.error(e,"OpenBranchOnRemoteCommand"),(0,R.qQ)("Unable to open branch on remote provider")}}}};t3=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t7(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t4(t,i,o),o})([(0,P.G5)()],t3);var t6=Object.defineProperty,t9=Object.getOwnPropertyDescriptor;let t8=class extends W.Zr{constructor(e){super("gitlens.openCurrentBranchOnRemote"),this.container=e}async execute(e,t){let i=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0,r=await (0,K.X)(i,e,"Open Current Branch Name");if(null!=r)try{let e,t,i=await r.git.branches().getBranch();if(i?.detached){await (0,P.RS)("gitlens.openOnRemote",{resource:{type:eF.J.Commit,sha:i.sha??"HEAD"},repoPath:r.path});return}i?.upstream==null||i.upstream.missing?null!=i&&(e=i.name):(e=(0,k.km)(i.upstream.name),t=(0,k.Zq)(i.upstream.name)),await (0,P.RS)("gitlens.openOnRemote",{resource:{type:eF.J.Branch,branch:e??"HEAD"},remote:t,repoPath:r.path})}catch(e){F.Vy.error(e,"OpenCurrentBranchOnRemoteCommand"),(0,R.qQ)("Unable to open branch on remote provider")}}};t8=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t9(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t6(t,i,o),o})([(0,P.G5)()],t8);var ie=Object.defineProperty,it=Object.getOwnPropertyDescriptor;let ii=class extends W.Kt{constructor(e){super("gitlens.openChangedFiles"),this.container=e}async execute(e){e={...e};try{if(null==e.uris){let t=await (0,K.t6)("Open All Changed Files");if(null==t)return;let i=await this.container.git.status(t.uri).getStatus();if(null==i){l.window.showWarningMessage("Unable to open changed files");return}e.uris=(0,tv.x1)(i.files,e=>"D"!==e.status?e.uri:void 0)}(0,_.JR)(e.uris)}catch(e){F.Vy.error(e,"OpenChangedFilesCommand"),(0,R.qQ)("Unable to open all changed files")}}};ii=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?it(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ie(t,i,o),o})([(0,P.G5)()],ii),n(4330);var ir=Object.defineProperty,is=Object.getOwnPropertyDescriptor;let io=class extends W.Kt{constructor(e){super(["gitlens.openComparisonOnRemote","gitlens.copyRemoteComparisonUrl"]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&(e.node.isAny("results-commits")?t={...t,repoPath:e.node.repoPath,ref1:e.node.ref1||"HEAD",ref2:e.node.ref2||"HEAD"}:e.node.is("compare-results")?t={...t,repoPath:e.node.repoPath,ref1:e.node.ahead.ref1,ref2:e.node.ahead.ref2}:e.node.is("compare-branch")&&(t={...t,repoPath:e.node.repoPath,ref1:e.node.ahead.ref1,ref2:e.node.ahead.ref2})),"gitlens.copyRemoteComparisonUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(t)}async execute(e){if(e?.repoPath!=null&&null!=e.ref1&&null!=e.ref2)try{await (0,P.RS)("gitlens.openOnRemote",{resource:{type:eF.J.Comparison,base:e.ref1,head:e.ref2,notation:e.notation},repoPath:e.repoPath,clipboard:e?.clipboard})}catch(e){F.Vy.error(e,"OpenComparisonOnRemoteCommand"),(0,R.qQ)("Unable to open comparison on remote provider")}}};io=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?is(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ir(t,i,o),o})([(0,P.G5)()],io);var ia=Object.defineProperty,il=Object.getOwnPropertyDescriptor;let ic=class extends W.Kt{constructor(e){super("gitlens.openFileFromRemote"),this.container=e}async execute(){let e,t=await l.env.clipboard.readText();try{l.Uri.parse(t,!0)}catch{t=void 0}let i=await l.window.showInputBox({prompt:"Enter a remote file url to open",placeHolder:"Remote file url",value:t,ignoreFocusOut:!0});if(null==i||0===i.length)return;let r=await this.container.git.getLocalInfoFromRemoteUri(l.Uri.parse(i));if(null==r){if(null==(r=await this.container.git.getLocalInfoFromRemoteUri(l.Uri.parse(i),{validate:!1}))){l.window.showWarningMessage("Unable to parse the provided remote url.");return}let e="Open File...";if(await l.window.showWarningMessage("Unable to find a workspace folder that matches the provided remote url.",e)!==e)return}r.startLine&&(e=r.endLine?new l.Range(r.startLine-1,0,r.endLine,0):new l.Range(r.startLine-1,0,r.startLine-1,0));try{await (0,_.k3)(r.uri,{selection:e,throwOnError:!0})}catch{let e=await l.window.showOpenDialog({title:"Open local file",defaultUri:r.uri,canSelectMany:!1,canSelectFolders:!1});if(null==e||0===e.length)return;await (0,_.k3)(e[0])}}};ic=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?il(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ia(t,i,o),o})([(0,P.G5)()],ic);var iu=n(8754),ih=Object.defineProperty,id=Object.getOwnPropertyDescriptor;let ip=class extends W.Zr{constructor(e){super(["gitlens.openFileOnRemote","gitlens.copyRemoteFileUrlToClipboard","gitlens.copyRemoteFileUrlWithoutRange","gitlens.openFileOnRemoteFrom","gitlens.copyRemoteFileUrlFrom"],["gitlens.openFileInRemote"]),this.container=e}async preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line,range:!0}),"gitlens.copyRemoteFileUrlWithoutRange"===e.command&&(t={...t,range:!1}),(0,ev.j7)(e)?(t={...t,range:!1},"gitlens.copyRemoteFileUrlToClipboard"===e.command||"gitlens.copyRemoteFileUrlWithoutRange"===e.command||"gitlens.copyRemoteFileUrlFrom"===e.command?t.sha=e.node instanceof iu.Z?void 0:e.node.commit.sha:(0,ev.K0)(e)&&(t.branchOrTag=e.node.branch?.name),i=e.node.uri):"viewItem"===e.type&&(t={...t,range:!1},i=e.node.uri??e.uri),("gitlens.copyRemoteFileUrlToClipboard"===e.command||"gitlens.copyRemoteFileUrlWithoutRange"===e.command||"gitlens.copyRemoteFileUrlFrom"===e.command)&&null==(t={...t,clipboard:!0}).sha){let i=(0,j.q)(e.uri,e.editor);if(null!=i){let e=await w.nk.fromUri(i);if(e.repoPath)if(null==e.sha){let i=await this.container.git.commits(e.repoPath).getCommitForFile(e,void 0,{firstIfNotFound:!0});null!=i&&(t.sha=i.sha)}else t.sha=e.sha}}return("gitlens.openFileOnRemoteFrom"===e.command||"gitlens.copyRemoteFileUrlFrom"===e.command)&&(t={...t,pickBranchOrTag:!0,range:!1}),this.execute(e.editor,i,t)}async execute(e,t,i){if(null==(t=(0,j.q)(t,e)))return;let r=await w.nk.fromUri(t);if(r.repoPath){i={range:!0,...i};try{let s,o=await this.container.git.remotes(r.repoPath).getRemotesWithProviders({sort:!0});i.range&&(null!=e&&(0,Z.k)(e.document.uri,t)?s=new l.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+ +(0!==e.selection.end.character)})):null!=i.line&&(s=new l.Range(i.line+1,0,i.line+1,0)));let n=i.sha??r.sha;if(null==i.branchOrTag&&null!=n&&!(0,S.HH)(n)&&0!==o.length){let[e,t]=(0,eV.Br)(n,"/");if(null!=t){let r=o.find(t=>t.name===e);null!=r&&(i.branchOrTag=t,n=void 0,o=[r])}}if(null==i.sha&&null==i.branchOrTag||i.pickBranchOrTag){let e;if(i.pickBranchOrTag||(e=await this.container.git.branches(r.repoPath).getBranch()),e?.upstream==null){let t=await (0,ep.NZ)(r.repoPath,i.clipboard?`Copy Remote File URL From${(0,eV.eV)(m.EO.Dot,2,2)}${r.relativePath}`:`Open File on Remote From${(0,eV.eV)(m.EO.Dot,2,2)}${r.relativePath}`,`Choose a branch or tag to ${i.clipboard?"copy":"open"} the file revision from`,{allowRevisions:!0,autoPick:!0,filter:{branches:e=>e.remote||null!=e.upstream},picked:i.branchOrTag,sort:{branches:{current:!0,orderBy:"date:desc"},tags:{orderBy:"date:desc"}}});if(null==t)return;"branch"===t.refType?(e=t,i.branchOrTag=void 0,n=void 0):"tag"===t.refType?(i.branchOrTag=t.ref,n=void 0):(i.branchOrTag=void 0,n=t.ref)}if(null!=e)if(e.remote||null!=e.upstream&&!e.upstream.missing){let t=e.remote?e.name:e.upstream.name;i.branchOrTag=(0,k.km)(t);let r=(0,k.Zq)(t),s=o.find(e=>e.name===r);null!=s&&(o=[s])}else i.branchOrTag=e.name}await (0,P.RS)("gitlens.openOnRemote",{resource:{type:null==n?eF.J.File:eF.J.Revision,branchOrTag:i.branchOrTag??"HEAD",fileName:r.relativePath,range:s,sha:n??void 0},repoPath:r.repoPath,remotes:o,clipboard:i.clipboard})}catch(e){F.Vy.error(e,"OpenFileOnRemoteCommand"),(0,R.qQ)("Unable to open file on remote provider")}}}};ip=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?id(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ih(t,i,o),o})([(0,P.G5)()],ip),n(5894);var ig=Object.defineProperty,im=Object.getOwnPropertyDescriptor;let iw=class extends W.Zr{constructor(e){super("gitlens.openFileRevisionFrom"),this.container=e}async execute(e,t,i){if(null==(t=(0,j.q)(t,e)))return;let r=await w.nk.fromUri(t);if(!r.repoPath){(0,R.A5)("Unable to open file revision");return}if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.reference)if(i?.stash){let e=this.container.git.getRelativePath(r,r.repoPath),t=`Open Changes with Stash${(0,eV.eV)(m.EO.Dot,2,2)}`,s=await (0,eG.F)(this.container.git.stash(r.repoPath)?.getStash(),`${t}${r.getFormattedFileName({truncateTo:m.uR-t.length})}`,"Choose a stash to compare with",{filter:t=>t.files?.some(t=>t.path===e||t.originalPath===e)??!0});if(null==s)return;i.reference=s}else{let e=`Open File at Branch or Tag${(0,eV.eV)(m.EO.Dot,2,2)}`,t=await (0,ep.NZ)(r.repoPath,`${e}${r.getFormattedFileName({truncateTo:m.uR-e.length})}`,"Choose a branch or tag to open the file revision from",{allowRevisions:!0,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,eR.vM)(this.container.git.getRevisionUri(t.ref,r.fsPath,r.repoPath),{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!0})}}});if(null==t)return;i.reference=t}await (0,eR.vM)(this.container.git.getRevisionUri(i.reference.ref,r.fsPath,r.repoPath),{annotationType:i.annotationType,line:i.line,...i.showOptions})}};iw=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?im(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ig(t,i,o),o})([(0,P.G5)()],iw);var iv=n(8557),iy=n(102),ib=Object.defineProperty,iC=Object.getOwnPropertyDescriptor;let ik=class extends W.Kt{constructor(e){super(["gitlens.openOnRemote"],["gitlens.openInRemote"]),this.container=e}async execute(e){if(e?.resource==null)return;let t="remotes"in e?e.remotes:await this.container.git.remotes(e.repoPath).getRemotesWithProviders({sort:!0});if(null!=e.remote){let i=t.filter(t=>t.name===e.remote);t.length>0&&(t=i)}async function i(e){try{if(e.type===eF.J.Branch){let[i,r]=(0,eV.Br)(e.branch,"/");if(null!=r){let s=t.find(e=>e.name===i);null!=s&&(e.branch=r,t=[s])}}else if(e.type===eF.J.Revision){let{commit:t,fileName:i}=e;if(null!=t){let r=await t.findFile(i);r?.status==="D"?e.sha=await this.container.git.refs(t.repoPath).resolveReference(`${t.sha}^`,i):e.sha=t.sha}}}catch(e){F.Vy.error(e,"OpenOnRemoteCommand.processResource")}}try{let r,s=function(t){return e?.clipboard?`Copy ${a} ${t} Link${o.length>1?"s":""}`:`Open ${t} on ${a}`},o=(0,tv.eC)(e.resource);for(let e of o)await i.call(this,e);let n=(0,iv.zF)(t),a=n?.length?n[0].name:"Remote",l={autoPick:"default",clipboard:e.clipboard,setDefault:!0},c=`Choose which remote to ${e.clipboard?`copy the link${o.length>1?"s":""} for`:"open on"} (or use the gear to set it as default)`,[u]=o;switch(u.type){case eF.J.Branch:r=s("Branch"),1===o.length&&(r+=`${(0,eV.eV)(m.EO.Dot,2,2)}${u.branch}`);break;case eF.J.Branches:r=s("Branches");break;case eF.J.Commit:r=s("Commit"),1===o.length&&(r+=`${(0,eV.eV)(m.EO.Dot,2,2)}${(0,S.pV)(u.sha)}`);break;case eF.J.Comparison:r=s("Comparisons"),1===o.length&&(r+=`${(0,eV.eV)(m.EO.Dot,2,2)}${(0,S.Xn)(u.base,u.head,u.notation??"...")}`);break;case eF.J.CreatePullRequest:l.autoPick=!0,l.setDefault=!1,o.length>1?(r=e.clipboard?`Copy ${a} Create Pull Request Links`:`Create Pull Requests on ${a}`,c=`Choose which remote to ${e.clipboard?"copy the create pull request links for":"create the pull requests on"}`):(r=`${e.clipboard?`Copy ${a} Create Pull Request Link`:`Create Pull Request on ${a}`}${(0,eV.eV)(m.EO.Dot,2,2)}${u.base?.branch?(0,S.Xn)(u.base.branch,u.head.branch,"..."):u.head.branch}`,c=`Choose which remote to ${e.clipboard?"copy the create pull request link for":"create the pull request on"}`);break;case eF.J.File:r=s("File"),1===o.length&&(r+=`${(0,eV.eV)(m.EO.Dot,2,2)}${u.fileName}`);break;case eF.J.Repo:r=s("Repository");break;case eF.J.Revision:r=s("File"),1===o.length&&(r+=`${(0,eV.eV)(m.EO.Dot,2,2)}${(0,S.pV)(u.sha)}${(0,eV.eV)(m.EO.Dot,1,1)}${u.fileName}`)}let h=await (0,iy.ZM)(r,c,o,t,l);await h?.execute()}catch(e){F.Vy.error(e,"OpenOnRemoteCommand"),(0,R.qQ)("Unable to open in remote provider")}}};ik=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ib(t,i,o),o})([(0,P.G5)()],ik);var iS=Object.defineProperty,iR=Object.getOwnPropertyDescriptor;let iP=class extends W.Kt{constructor(e){super(["gitlens.openPullRequestOnRemote","gitlens.copyRemotePullRequestUrl"]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&(e.node.is("pullrequest")||e.node.is("launchpad-item"))&&(t={...t,pr:null!=e.node.pullRequest?{url:e.node.pullRequest.url}:void 0,clipboard:"gitlens.copyRemotePullRequestUrl"===e.command}),this.execute(t)}async execute(e){if(e?.pr==null){if(e?.repoPath==null||e?.ref==null)return;let t=await this.container.git.remotes(e.repoPath).getBestRemoteWithIntegration();if(null==t)return;let i=await this.container.integrations.getByRemote(t);if(null==i)return;let r=await i.getPullRequestForCommit(t.provider.repoDesc,e.ref);if(null==r){l.window.showInformationMessage(`No pull request associated with '${(0,S.pV)(e.ref)}'`);return}(e={...e}).pr=r}e.clipboard?await l.env.clipboard.writeText(e.pr.url):(0,_.CZ)(e.pr.url)}};iP=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iR(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iS(t,i,o),o})([(0,P.G5)()],iP);var iA=Object.defineProperty,iI=Object.getOwnPropertyDescriptor;let iD=class extends W.Zr{constructor(e){super(["gitlens.openRepoOnRemote","gitlens.copyRemoteRepositoryUrl"],["gitlens.openRepoInRemote"]),this.container=e}preExecute(e,t){return(0,ev.qv)(e)&&(t={...t,remote:e.node.remote.name}),"gitlens.copyRemoteRepositoryUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0,s=(await (0,K.X)(r,e,i?.clipboard?"Choose which repository to copy the url from":"Choose which repository to open on remote"))?.path;if(s)try{await (0,P.RS)("gitlens.openOnRemote",{resource:{type:eF.J.Repo},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){F.Vy.error(e,"OpenRepoOnRemoteCommand"),(0,R.qQ)("Unable to open repository on remote provider")}}};iD=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iA(t,i,o),o})([(0,P.G5)()],iD);var i$=Object.defineProperty,iT=Object.getOwnPropertyDescriptor;let iE=class extends W.Zr{constructor(e){super(["gitlens.openRevisionFile","gitlens.openRevisionFileInDiffLeft","gitlens.openRevisionFileInDiffRight"]),this.container=e}async execute(e,t,i){if(null==(t=(0,j.q)(t,e)))return;let r=await w.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri)if(r?.sha){let e=await this.container.git.commits(r.repoPath).getCommit(r.sha);i.revisionUri=e?.file?.status==="D"?this.container.git.getRevisionUri(await e.getPreviousSha()??e1.nB,e.file,e.repoPath):this.container.git.getRevisionUri(r)}else i.revisionUri=this.container.git.getRevisionUri(r);await (0,eR.vM)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){F.Vy.error(e,"OpenRevisionFileCommand"),(0,R.qQ)("Unable to open file revision")}}};iE=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i$(t,i,o),o})([(0,P.G5)()],iE);var i_=Object.defineProperty,iO=Object.getOwnPropertyDescriptor;let ix=class extends W.Zr{constructor(e){super(["gitlens.openWorkingFile","gitlens.openWorkingFileInDiffLeft","gitlens.openWorkingFileInDiffRight"]),this.container=e}async execute(e,t,i){null==(i={...i}).line&&(i.line=e?.selection.active.line);try{if(null==i.uri){if(t=(0,j.q)(t,e),null==t)return}else t=i.uri;if(i.uri=await w.nk.fromUri(t),(0,w.t5)(i.uri)&&i.uri.sha){let e=await this.container.git.getWorkingUri(i.uri.repoPath,i.uri);if(void 0===e){l.window.showWarningMessage("Unable to open working file. File could not be found in the working tree");return}i.uri=new w.nk(e,i.uri.repoPath)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new l.Range(i.line,0,i.line,0));let r=await (0,_.Ol)(i.uri,{...i.showOptions,throwOnError:!0});if(void 0===i.annotationType)return;await this.container.fileAnnotations.show(r,i.annotationType,{selection:{line:i.line}})}catch(e){F.Vy.error(e,"OpenWorkingFileCommand"),(0,R.qQ)("Unable to open working file")}}};ix=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iO(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i_(t,i,o),o})([(0,P.G5)()],ix);var iF=n(928),iL=n(8336),iB=n(4505),iU=n(5662),iN=n(3310),iq=n(926),iW=Object.defineProperty,iM=Object.getOwnPropertyDescriptor,iG=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iM(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iW(t,i,o),o};let CreatePatchCommandBase=class CreatePatchCommandBase extends W.Kt{constructor(e,t){super(t),this.container=e}async preExecute(e,t){if(null==t){if("scm-states"===e.type){let i,r=new Map,s=new Set,o=!1;for(let t of e.scmResourceStates){i??=await this.container.git.getOrOpenRepository(t.resourceUri),o=o||t.type===tm.UNTRACKED,s.add(t.resourceUri.toString());let e=r.get(t.resourceGroupType);null==e?(e=[],r.set(t.resourceGroupType,e)):e.push(t)}let n=1===r.size&&r.has(tw.Index)?e1.id:e1.SU;t={repoPath:i?.path,to:n,from:"HEAD",uris:[...(0,eP.Tj)(s,e=>l.Uri.parse(e))],title:n===e1.id?"Staged Changes":"Uncommitted Changes",includeUntracked:!!o||void 0}}else if("scm-groups"===e.type){let i=e.scmResourceGroups[0];if(!i?.resourceStates?.length)return;let r=await this.container.git.getOrOpenRepository(i.resourceStates[0].resourceUri),s="index"===i.id?e1.id:e1.SU;t={repoPath:r?.path,to:s,from:"HEAD",title:s===e1.id?"Staged Changes":"Uncommitted Changes"}}else if("viewItem"===e.type)if((0,ev.j7)(e)){let{commit:i}=e.node;null==i.message&&await i.ensureFullDetails();let{summary:r,body:s}=(0,iU.TH)(i.message);t={repoPath:e.node.commit.repoPath,to:e.node.commit.ref,from:`${e.node.commit.ref}^`,title:r,description:s},(0,ev.xT)(e)&&(t.uris=[e.node.uri])}else(0,ev.d2)(e)?t={repoPath:e.node.uri.fsPath,to:e.node.compareRef.ref,from:e.node.compareWithRef.ref,title:`Changes between ${(0,S.pV)(e.node.compareRef.ref)} and ${(0,S.pV)(e.node.compareWithRef.ref)}`}:(0,ev.cD)(e)&&(t={repoPath:e.node.repoPath,to:e.node.ref2,from:e.node.ref1,uris:[e.node.uri]});else if("viewItems"===e.type&&(0,N.d5)(e.node))for(let i of(t={repoPath:e.node.repoPath,to:e.node.ref.sha,from:`${e.node.ref.sha}^`,uris:[e.node.uri],title:`Changes (partial) in ${(0,S.pV)(e.node.ref.sha)}`},e.nodes))(0,N.d5)(i)&&i!==e.node&&i.ref.sha===t.to&&t.uris.push(i.uri)}return this.execute(t)}async getDiff(e,t){let i;if(t?.repoPath!=null&&(i=this.container.git.getRepository(t.repoPath)),null!=(i??=await (0,K.t6)(e)))return i.git.diff().getDiff?.(t?.to??e1.SU,t?.from??"HEAD",{includeUntracked:t?.includeUntracked??(t?.to!=null||t?.to===e1.SU),uris:t?.uris})}};let iH=class extends CreatePatchCommandBase{constructor(e){super(e,"gitlens.createPatch")}async execute(e){let t=await this.getDiff("Create Patch",e);if(null==t)return;let i=await l.workspace.openTextDocument({content:t.contents,language:"diff"});await l.window.showTextDocument(i)}};iH=iG([(0,P.G5)()],iH);let iV=class extends CreatePatchCommandBase{constructor(e){super(e,"gitlens.copyPatchToClipboard")}async execute(e){let t=await this.getDiff("Copy as Patch",e);null!=t&&(await l.env.clipboard.writeText(t.contents),l.window.showInformationMessage("Copied patch — use 'Apply Copied Patch' in another window to apply it"))}};iV=iG([(0,P.G5)()],iV);let ij=class extends W.Kt{constructor(e){super(["gitlens.applyPatchFromClipboard","gitlens.pastePatchFromClipboard"]),this.container=e}async execute(){let e=await l.env.clipboard.readText(),t=this.container.git.highlander,i=t?.uri!=null?this.container.git.patch(t.uri):void 0;if(!(e.length&&await i?.validatePatch(e))){l.window.showWarningMessage("No valid patch found in the clipboard");return}if(null!=(t??=await (0,K.t6)("Apply Copied Patch")))try{let t=await i?.createUnreachableCommitForPatch(e,"HEAD","Pasted Patch");if(null==t)return;await i?.applyUnreachableCommitForPatch(t.sha,{stash:!1}),l.window.showInformationMessage("Patch applied successfully")}catch(e){if(e instanceof iL.AL)return;e instanceof iB.ol?e.reason===iB.a_.AppliedWithConflicts?l.window.showWarningMessage("Patch applied with conflicts"):l.window.showErrorMessage(e.message):l.window.showErrorMessage(`Unable to apply patch: ${e.message}`)}}};ij=iG([(0,P.G5)()],ij);let iQ=class extends CreatePatchCommandBase{constructor(e){super(e,["gitlens.createCloudPatch","gitlens.shareAsCloudPatch"])}async execute(e){if(e?.repoPath==null)return(0,iN.X)({mode:"create"});let t=this.container.git.getRepository(e.repoPath);if(null==t)return(0,iN.X)({mode:"create"});let i=await iK(t,e);return null==i?(0,iN.X)({mode:"create",create:{repositories:[t]}}):(0,iN.X)({mode:"create",create:i})}};iQ=iG([(0,P.G5)()],iQ);let iz=class extends W.Zr{constructor(e){super("gitlens.openPatch"),this.container=e}async execute(e){let t;if(e?.document?.languageId==="diff")t=e.document;else{let e=await l.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{Patches:["diff","patch"]},openLabel:"Open Patch",title:"Open Patch File"}),i=e?.[0];if(null==i)return;t=await l.workspace.openTextDocument(i),await l.window.showTextDocument(t)}let i={draftType:"local",patch:{type:"local",uri:t.uri,contents:t.getText()}};(0,iN.X)({mode:"view",draft:i})}};iz=iG([(0,P.G5)()],iz);let iY=class extends W.Kt{constructor(e){super("gitlens.openCloudPatch"),this.container=e}async execute(e){let t,i=e?.type==="code_suggestion"?"Code Suggestion":"Cloud Patch";if(e?.id==null&&e?.draft==null){l.window.showErrorMessage(`Cannot open ${i}; no patch or patch id provided`);return}if(null!=e.prEntityId&&"code_suggestion"===e.type){let r,s;try{let t=iF.EntityIdentifierUtils.decode(e.prEntityId);r=(0,iq.H8)(t),s=t.domain??void 0}catch{l.window.showErrorMessage(`Cannot open ${i}; invalid provider details.`);return}if(null==r){l.window.showErrorMessage(`Cannot open ${i}; unsupported provider.`);return}let o=await this.container.integrations.get(r,s);if(null==o){l.window.showErrorMessage(`Cannot open ${i}; provider not found.`);return}let n=await o.getSession("cloud-patches");if(null==n){l.window.showErrorMessage(`Cannot open ${i}; provider not connected.`);return}t={provider:o.id,token:n.accessToken}}try{let i=e.draft??await this.container.drafts.getDraft(e.id,{providerAuth:t});(0,iN.X)({mode:"view",draft:i})}catch(t){F.Vy.error(t,"OpenCloudPatchCommand"),l.window.showErrorMessage(`Unable to open ${i} '${e.id}'`)}}};async function iK(e,t){if(null==t.to)return;let i=t.to??"HEAD",r={type:"revision",repository:{name:e.name,path:e.path,uri:e.uri.toString()},files:void 0,revision:{to:i,from:t.from??`${i}^`}},s={changes:[r],title:t.title,description:t.description},o=e.git.commits(),n=await o.getCommit(i);if(null!=n){if(null==t.from){if(null==n.files)return;r.files=[...n.files]}else{let s=await e.git.diff().getDiff?.(i,t.from);if(null==s)return;let n=await e.git.diff().getDiffFiles?.(s.contents);if(n?.files==null)return;if(r.files=n.files,!(0,S.HH)(t.to)){let e=await o.getCommit(t.to);null!=e&&(r.revision.to=e.sha)}if(!(0,S.HH)(t.from)){let e=await o.getCommit(t.from);null!=e&&(r.revision.from=e.sha)}}return s}}iY=iG([(0,P.G5)()],iY);var iZ=Object.defineProperty,iJ=Object.getOwnPropertyDescriptor;let iX=class extends QuickWizardCommandBase{constructor(e){super(e,["gitlens.showLaunchpad","gitlens.startWork","gitlens.associateIssueWithBranch"])}preExecute(e,t){switch(e.command){case"gitlens.showLaunchpad":return this.execute({command:"launchpad",...t});case"gitlens.startWork":return this.execute({command:"startWork",...t});case"gitlens.associateIssueWithBranch":return this.execute({command:"associateIssueWithBranch",...t});default:return this.execute(t)}}};iX=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iJ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iZ(t,i,o),o})([(0,P.G5)()],iX);var i0=Object.defineProperty,i1=Object.getOwnPropertyDescriptor,i2=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?i1(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i0(t,i,o),o};let i5=class extends W.Kt{constructor(e){super("gitlens.disableRebaseEditor"),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!1)}};i5=i2([(0,P.G5)()],i5);let i4=class extends W.Kt{constructor(e){super("gitlens.enableRebaseEditor"),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!0)}};i4=i2([(0,P.G5)()],i4);var i7=Object.defineProperty,i3=Object.getOwnPropertyDescriptor;let i6=class extends W.Kt{constructor(e){super("gitlens.refreshHover"),this.container=e}async execute(){await (0,P.S4)("editor.action.showHover")}};i6=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?i3(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i7(t,i,o),o})([(0,P.G5)()],i6),n(4030);var i9=Object.defineProperty,i8=Object.getOwnPropertyDescriptor,re=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?i8(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i9(t,i,o),o};let rt=class extends W.Kt{constructor(e){super("gitlens.fetchRepositories"),this.container=e}async execute(){return(0,q.b)({command:"fetch",state:{repos:this.container.git.openRepositories}})}};rt=re([(0,P.G5)()],rt);let ri=class extends W.Kt{constructor(e){super("gitlens.pullRepositories"),this.container=e}async execute(){return(0,q.b)({command:"pull",state:{repos:this.container.git.openRepositories}})}};ri=re([(0,P.G5)()],ri);let rr=class extends W.Kt{constructor(e){super("gitlens.pushRepositories"),this.container=e}async execute(){return(0,q.b)({command:"push",state:{repos:this.container.git.openRepositories}})}};rr=re([(0,P.G5)()],rr);var rs=n(6525),ro=Object.defineProperty,rn=Object.getOwnPropertyDescriptor,ra=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ro(t,i,o),o};let rl=["ai","ai:confirmations","avatars","integrations","previews","repositoryAccess","subscription","suppressedWarnings","usageTracking","workspace"],rc=class extends W.Kt{constructor(e){super("gitlens.reset"),this.container=e}async execute(){let e,t=[{label:"AI Keys...",detail:"Clears any locally stored AI keys",item:"ai"},{label:"AI Confirmations...",detail:"Clears any accepted AI confirmations",item:"ai:confirmations"},{label:"Avatars...",detail:"Clears the stored avatar cache",item:"avatars"},{label:"Integrations (Authentication)...",detail:"Clears any locally stored authentication for integrations",item:"integrations"},{label:"Repository Access...",detail:"Clears the stored repository access cache",item:"repositoryAccess"},{label:"Suppressed Warnings...",detail:'Clears any suppressed warnings, e.g. messages with "Don\'t Show Again" options',item:"suppressedWarnings"},{label:"Usage Tracking...",detail:"Clears any locally tracked usage, typically used for first time experience",item:"usageTracking"},{label:"Workspace Storage...",detail:"Clears stored data associated with the current workspace",item:"workspace"},(0,eH.uK)(),{label:"Everything...",description:" —  be very careful with this!",detail:"Clears ALL locally stored data; ALL GitLens state will be LOST",item:"all"}],i=await l.window.showQuickPick(t,{title:"Reset Stored Data",placeHolder:"Choose which data to reset, will be prompted to confirm"});if(i?.item==null)return;let r={title:"Reset"};switch(i?.item){case"all":e="Are you sure you want to reset EVERYTHING?",r.title="Reset Everything";break;case"ai":e="Are you sure you want to reset all of the stored AI keys?",r.title="Reset AI Keys";break;case"ai:confirmations":e="Are you sure you want to reset all AI confirmations?",r.title="Reset AI Confirmations";break;case"avatars":e="Are you sure you want to reset the avatar cache?",r.title="Reset Avatars";break;case"integrations":e="Are you sure you want to reset all of the stored integrations?",r.title="Reset Integrations";break;case"previews":e="Are you sure you want to reset the stored state for feature previews?",r.title="Reset Feature Previews";break;case"repositoryAccess":e="Are you sure you want to reset the repository access cache?",r.title="Reset Repository Access";break;case"subscription":e="Are you sure you want to reset the stored subscription?",r.title="Reset Subscription";break;case"suppressedWarnings":e="Are you sure you want to reset all of the suppressed warnings?",r.title="Reset Suppressed Warnings";break;case"usageTracking":e="Are you sure you want to reset all of the usage tracking?",r.title="Reset Usage Tracking";break;case"workspace":e="Are you sure you want to reset the stored data for the current workspace?",r.title="Reset Workspace Storage"}(null==e||await l.window.showWarningMessage(`This is IRREVERSIBLE!
${e}`,{modal:!0},r,{title:"Cancel",isCloseAffordance:!0})===r)&&await this.reset(i.item)}async reset(e){switch(e){case"all":for(let e of rl)await this.reset(e);await this.container.storage.reset();break;case"ai":await this.container.ai.reset(!0);break;case"ai:confirmations":this.container.ai.resetConfirmations();break;case"avatars":(0,rs.H3)("all");break;case"integrations":await this.container.integrations.reset();break;case"repositoryAccess":await this.container.git.clearAllRepoVisibilityCaches();break;case"suppressedWarnings":await A.H.update("advanced.messages",void 0,l.ConfigurationTarget.Global);break;case"usageTracking":await this.container.usage.reset();break;case"workspace":await this.container.storage.resetWorkspace()}}};rc=ra([(0,P.G5)()],rc);let ru=class extends W.Kt{constructor(e){super("gitlens.resetAIKey"),this.container=e}async execute(){await this.container.ai.reset()}};ru=ra([(0,P.G5)()],ru);var rh=n(8238),rd=Object.defineProperty,rp=Object.getOwnPropertyDescriptor;let rg=class extends W.Kt{constructor(e){super("gitlens.resetViewsLayout"),this.container=e}async execute(){for(let[e,t]of rh.OB){try{await (0,P.S4)("vscode.moveViews",{viewIds:t.map(e=>`gitlens.views.${e}`),destinationId:e})}catch{}e.includes("gitlens")&&await (0,P.S4)(`${e}.resetViewContainerLocation`)}}};rg=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rp(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rd(t,i,o),o})([(0,P.G5)()],rg);var rm=n(4498),rf=Object.defineProperty,rw=Object.getOwnPropertyDescriptor;let rv=class extends W.Kt{constructor(e){super(["gitlens.showCommitSearch","gitlens.views.searchAndCompare.searchCommits"]),this.container=e}preExecute(e,t){return"gitlens.views.searchAndCompare.searchCommits"===e.command?(t={...t}).showResultsInSideBar=!0:"viewItem"===e.type&&((t={...t}).showResultsInSideBar=!0,e.node instanceof rm.X&&(t.repoPath=e.node.repoPath,t.search=e.node.search,t.prefillOnly=!0),(0,ev.q)(e)&&(t.repoPath=e.node.repo.path)),this.execute(t)}async execute(e){await (0,q.b)({command:"search",prefillOnly:e?.prefillOnly,state:{repo:e?.repoPath,...e?.search,showResultsInSideBar:A.H.get("gitCommands.search.showResultsInSideBar")??e?.showResultsInSideBar,openPickInView:e?.openPickInView??!1}})}};rv=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rw(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rf(t,i,o),o})([(0,P.G5)()],rv);var ry=n(450),rb=Object.defineProperty,rC=Object.getOwnPropertyDescriptor;let rk=class extends W.Zr{constructor(e){super("gitlens.showCommitsInView"),this.container=e}static createMarkdownCommandLink(e,t){return(0,tG.J)("gitlens.showCommitsInView","string"==typeof e?{refs:[e],repoPath:t}:e)}async execute(e,t,i){if(null==(i={...i}).refs){if(null==(t=(0,j.q)(t,e)))return;let r=await w.nk.fromUri(t);if(i.repoPath=r.repoPath,null!=e)try{let t=e.document.isDirty?await this.container.git.getBlameForRangeContents(r,e.selection,e.document.getText()):await this.container.git.getBlameForRange(r,e.selection);if(void 0===t)return void(0,R.gD)("Unable to find commits");i.refs=[...(0,eP.x1)(t.commits.values(),e=>e.isUncommitted?void 0:e.ref)]}catch(e){return F.Vy.error(e,"ShowCommitsInViewCommand","getBlameForRange"),void(0,R.qQ)("Unable to find commits")}else{if(null==r.sha)return;i.refs=[r.sha]}}return(0,q.b)({command:"search",state:{repo:i?.repoPath,query:(0,ry.gz)(i.refs),showResultsInSideBar:!0}})}};rk=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rb(t,i,o),o})([(0,P.G5)()],rk);var rS=Object.defineProperty,rR=Object.getOwnPropertyDescriptor;let rP=class extends W.Kt{constructor(e){super("gitlens.showLastQuickPick"),this.container=e}execute(){let e=(0,W.EL)();if(void 0===e)return Promise.resolve(void 0);try{return l.commands.executeCommand(e.command,...e.args)}catch(e){return F.Vy.error(e,"ShowLastQuickPickCommand"),(0,R.qQ)("Unable to show last quick pick")}}};rP=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rR(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rS(t,i,o),o})([(0,P.G5)()],rP);var rA=Object.defineProperty,rI=Object.getOwnPropertyDescriptor;let rD=class extends W.Kt{constructor(e){super("gitlens.openOnlyChangedFiles"),this.container=e}async execute(e){e={...e};try{let t,i;if(null==e.uris){let t=await (0,K.t6)("Open Changed & Close Unchanged Files");if(null==t)return;let i=await this.container.git.status(t.uri).getStatus();if(null==i){l.window.showWarningMessage("Unable to open changed & close unchanged files");return}e.uris=(0,tv.x1)(i.files,e=>"D"!==e.status?e.uri:void 0)}let r=0===e.uris.length,s=new Set(e.uris);for(let o of l.window.tabGroups.all)for(let n of o.tabs){if(r){l.window.tabGroups.close(n,!0);continue}i=n.input instanceof l.TabInputText||n.input instanceof l.TabInputCustom||n.input instanceof l.TabInputNotebook?n.input.uri:n.input instanceof l.TabInputTextDiff||n.input instanceof l.TabInputNotebookDiff?n.input.modified:void 0,null!=i&&(t=e.uris.find(e=>(0,Z.k)(e,i)),null!=t?s.delete(t):l.window.tabGroups.close(n,!0))}s.size>0&&(0,_.JR)([...s])}catch(e){F.Vy.error(e,"OpenOnlyChangedFilesCommand"),(0,R.qQ)("Unable to open changed & close unchanged files")}}};rD=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rA(t,i,o),o})([(0,P.G5)()],rD);var r$=Object.defineProperty,rT=Object.getOwnPropertyDescriptor;let rE=class extends W.dY{constructor(e){super(["gitlens.showQuickBranchHistory","gitlens.showQuickRepoHistory"]),this.container=e}preExecute(e,t){return"gitlens.showQuickRepoHistory"===e.command&&((t={...t}).branch="HEAD"),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s=null!=(t=(0,j.q)(t,e))?await w.nk.fromUri(t):void 0,o=i?.repoPath??s?.repoPath??this.container.git.highlander?.path;return null!=o&&(i?.branch!=null?r="HEAD"===i.branch?"HEAD":(0,ed.kA)(i.branch,o,{refType:"branch",name:i.branch,remote:!1}):i?.tag!=null&&(r=(0,ed.kA)(i.tag,o,{refType:"tag",name:i.tag}))),(0,q.b)({command:"log",state:null!=o?{repo:o,reference:r}:{}})}};rE=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r$(t,i,o),o})([(0,P.G5)()],rE),n(5223),n(905);var r_=n(2937),rO=Object.defineProperty,rx=Object.getOwnPropertyDescriptor;let rF=class extends W.dY{constructor(e){super(["gitlens.openFileHistory","gitlens.openFolderHistory","gitlens.showQuickFileHistory","gitlens.quickOpenFileHistory"],["gitlens.showFileHistoryInView"]),this.container=e}preExecute(e,t){let i=e.uri;return"gitlens.openFileHistory"===e.command||"gitlens.showFileHistoryInView"===e.command?(t={...t}).showInSideBar=!0:"gitlens.openFolderHistory"===e.command&&((t={...t}).showInSideBar=!0,"scm-states"===e.type&&(i=(0,r_.e3)(e.args)??e.uri)),this.execute(e.editor,i,t)}async execute(e,t,i){if(null==(t=(0,j.q)(t,e)))return;let r=await w.nk.fromUri(t);if(i?.showInSideBar){await this.container.views.fileHistory.showHistoryForUri(r);return}await (0,q.b)({command:"log",state:r?.repoPath!=null?{repo:r.repoPath,reference:i?.reference??"HEAD",fileName:r.relativePath}:{}})}};rF=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rx(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rO(t,i,o),o})([(0,P.G5)()],rF);var rL=Object.defineProperty,rB=Object.getOwnPropertyDescriptor;let rU=class extends W.Kt{constructor(e){super("gitlens.showQuickRepoStatus"),this.container=e}async execute(e){return(0,q.b)({command:"status",state:{repo:e?.repoPath}})}};rU=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rL(t,i,o),o})([(0,P.G5)()],rU);var rN=Object.defineProperty,rq=Object.getOwnPropertyDescriptor;let rW=class extends W.Kt{constructor(e){super("gitlens.showQuickStashList"),this.container=e}execute(e){return(0,q.b)({command:"stash",state:{subcommand:"list",repo:e?.repoPath}})}};rW=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rN(t,i,o),o})([(0,P.G5)()],rW);var rM=Object.defineProperty,rG=Object.getOwnPropertyDescriptor;let rH=class extends W.Kt{constructor(e){super(["gitlens.showAccountView","gitlens.showBranchesView","gitlens.showCommitDetailsView","gitlens.showCommitsView","gitlens.showContributorsView","gitlens.showDraftsView","gitlens.showFileHistoryView","gitlens.showGraphView","gitlens.showHomeView","gitlens.showLaunchpadView","gitlens.showLineHistoryView","gitlens.showRemotesView","gitlens.showRepositoriesView","gitlens.showSearchAndCompareView","gitlens.showStashesView","gitlens.showTagsView","gitlens.showTimelineView","gitlens.showWorktreesView","gitlens.showWorkspacesView"]),this.container=e}preExecute(e,...t){return this.execute(e,...t)}async notifyWhenNoRepository(e){if(this.container.git.openRepositoryCount>0)return;let t=e?`No repository detected. To view ${e}, open a folder containing a git repository or clone from a URL in Source Control.`:"No repository detected. To use GitLens, open a folder containing a git repository or clone from a URL in Source Control.",i={title:"Open a Folder or Repo",isCloseAffordance:!0};await l.window.showInformationMessage(t,i)===i&&(0,P.S4)("workbench.view.scm")}async execute(e,...t){switch(e.command){case"gitlens.showAccountView":return this.container.views.home.show(void 0,{focusAccount:!0},...t);case"gitlens.showBranchesView":return this.container.views.showView("branches");case"gitlens.showCommitDetailsView":return this.notifyWhenNoRepository("Inspect"),this.container.views.commitDetails.show();case"gitlens.showCommitsView":return this.container.views.showView("commits");case"gitlens.showContributorsView":return this.container.views.showView("contributors");case"gitlens.showDraftsView":return this.container.views.showView("drafts");case"gitlens.showFileHistoryView":return this.container.views.showView("fileHistory");case"gitlens.showGraphView":return this.notifyWhenNoRepository("the Commit Graph"),this.container.views.graph.show(void 0,...t);case"gitlens.showHomeView":return this.container.views.home.show(void 0,...t);case"gitlens.showLaunchpadView":return this.container.views.showView("launchpad");case"gitlens.showLineHistoryView":return this.container.views.showView("lineHistory");case"gitlens.showRemotesView":return this.container.views.showView("remotes");case"gitlens.showRepositoriesView":return this.container.views.showView("repositories");case"gitlens.showSearchAndCompareView":return this.container.views.showView("searchAndCompare");case"gitlens.showStashesView":return this.container.views.showView("stashes");case"gitlens.showTagsView":return this.container.views.showView("tags");case"gitlens.showTimelineView":return this.container.views.timeline.show();case"gitlens.showWorktreesView":return this.container.views.showView("worktrees");case"gitlens.showWorkspacesView":return this.container.views.showView("workspaces")}return Promise.resolve(void 0)}};rH=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rG(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rM(t,i,o),o})([(0,P.G5)()],rH);var rV=n(4693),rj=Object.defineProperty,rQ=Object.getOwnPropertyDescriptor;let rz=class extends W.Kt{constructor(e){super("gitlens.stashApply"),this.container=e}async preExecute(e,t){return(0,ev.j7)(e)?(null==e.node.commit.message&&await e.node.commit.ensureFullDetails(),t={...t,stashItem:e.node.commit}):(0,ev.q)(e)&&(t={...t,repoPath:e.node.repo.path}),this.execute(t)}async execute(e){return e?.deleteAfter?(0,rV.uY)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem):(0,rV.Bb)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem)}};rz=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rj(t,i,o),o})([(0,P.G5)()],rz);var rY=Object.defineProperty,rK=Object.getOwnPropertyDescriptor;let rZ=class extends W.Kt{constructor(e){super(["gitlens.stashSave","gitlens.stashSaveFiles"]),this.container=e}async preExecute(e,t){if((0,ev.Ey)(e))(t={...t}).repoPath=e.node.file.repoPath??e.node.repoPath,t.uris=[w.nk.fromFile(e.node.file,t.repoPath)];else if((0,ev.q)(e))(t={...t}).repoPath=e.node.repo.path;else if((0,ev.z2)(e))(t={...t}).repoPath=e.node.repoPath;else if("scm"===e.type){if(null!=e.scm.rootUri){let i=this.container.git.getRepository(e.scm.rootUri);null!=i&&((t={...t}).repoPath=i.path)}}else if("scm-states"===e.type){let i;t={...t};let r=!1,s=!1,o=[];for(let t of e.scmResourceStates)o.push(t.resourceUri),t.type===tm.UNTRACKED&&(s=!0),t.resourceGroupType===tw.Index?(r=!0,null==i&&(i=!0)):i=!1;let n=await this.container.git.getOrOpenRepository(o[0]);t.repoPath=n?.path,t.onlyStaged=null!=n&&!!i&&await n.git.supports("git:stash:push:staged"),null!=t.keepStaged||r||(t.keepStaged=!0),t.includeUntracked=s,t.uris=o}else if("scm-groups"===e.type){let i;t={...t};let r=!1,s=!1,o=[],n=[];for(let t of e.scmResourceGroups){for(let e of t.resourceStates)o.push(e.resourceUri),e.type===tm.UNTRACKED&&(s=!0);"index"===t.id?(r=!0,null==i&&(i=!0),n.push(...t.resourceStates.map(e=>e.resourceUri))):i=!1}let a=await this.container.git.getOrOpenRepository(o[0]);t.repoPath=a?.path,t.onlyStaged=null!=a&&!!i&&await a.git.supports("git:stash:push:staged"),null!=t.keepStaged||r||(t.keepStaged=!0),t.includeUntracked=s,t.onlyStaged?t.onlyStagedUris=n:t.uris=o}return this.execute(t)}execute(e){return(0,rV.VC)(e?.repoPath,e?.uris,e?.message,e?.includeUntracked,e?.keepStaged,e?.onlyStaged,e?.onlyStagedUris)}};rZ=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rK(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rY(t,i,o),o})([(0,P.G5)()],rZ);var rJ=Object.defineProperty,rX=Object.getOwnPropertyDescriptor;let r0=class extends W.Kt{constructor(e){super("gitlens.switchAIModel"),this.container=e}async execute(e){await this.container.ai.switchModel(e)}};async function r1(){let e=A.H.get("modes");if(null==e)return;let t=Object.keys(e);if(0===t.length)return;let i=A.H.get("mode.active"),r=t.map(t=>{let r=e[t];return{label:`${i===t?"$(check)  ":"     "}${r.name} mode`,description:r.description?`\xa0${m.EO.Dash}\xa0 ${r.description}`:"",key:t}});return i&&null!=e[i]&&r.unshift({label:`Exit ${e[i].name} mode`,key:void 0}),await l.window.showQuickPick(r,{placeHolder:"select a GitLens mode to enter"})}r0=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rJ(t,i,o),o})([(0,P.G5)()],r0);var r2=n(5419),r5=Object.defineProperty,r4=Object.getOwnPropertyDescriptor,r7=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?r4(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r5(t,i,o),o};let r3=class extends W.Kt{constructor(e){super("gitlens.switchMode"),this.container=e}async execute(){let e=(0,r2.dQ)(),t=await r1();if(void 0===t)return;(0,r2.TT)(e,` \u2022 mode=${t.key??""}`);let i=A.H.get("mode.active");if(i!==t.key){if(null!=i&&0!==i.length){let e=A.H.get("modes"),r=e?.[i].annotations;null!=r&&r!==(null!=t.key?e?.[t.key].annotations:void 0)&&await this.container.fileAnnotations.clearAll()}await A.H.update("mode.active",t.key,l.ConfigurationTarget.Global)}}};r7([(0,D.Rm)({args:!1,scoped:!0,singleLine:!0,timed:!1})],r3.prototype,"execute",1),r3=r7([(0,P.G5)()],r3);let r6=class extends W.Kt{constructor(e){super("gitlens.toggleReviewMode"),this.container=e}async execute(){let e=A.H.get("modes");if(null==e||!Object.keys(e).includes("review"))return;let t="review"===A.H.get("mode.active")?void 0:"review";await A.H.update("mode.active",t,l.ConfigurationTarget.Global)}};r7([(0,D.Rm)({args:!1,singleLine:!0,timed:!1})],r6.prototype,"execute",1),r6=r7([(0,P.G5)()],r6);let r9=class extends W.Kt{constructor(e){super("gitlens.toggleZenMode"),this.container=e}async execute(){let e=A.H.get("modes");if(null==e||!Object.keys(e).includes("zen"))return;let t="zen"===A.H.get("mode.active")?void 0:"zen";await A.H.update("mode.active",t,l.ConfigurationTarget.Global)}};r7([(0,D.Rm)({args:!1,singleLine:!0,timed:!1})],r9.prototype,"execute",1),r9=r7([(0,P.G5)()],r9);var r8=Object.defineProperty,se=Object.getOwnPropertyDescriptor;let st=class extends W.Kt{constructor(e){super("gitlens.toggleCodeLens"),this.container=e}execute(){this.container.codeLens.toggleCodeLens()}};st=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?se(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r8(t,i,o),o})([(0,P.G5)()],st);var si=Object.defineProperty,sr=Object.getOwnPropertyDescriptor,ss=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&si(t,i,o),o};let so=class extends W.DX{constructor(e){super(["gitlens.clearFileAnnotations","gitlens.computingFileAnnotations"]),this.container=e}async execute(e,t,i){e=su(e,i);try{if(!e||this.container.fileAnnotations.isInWindowToggle()){await this.container.fileAnnotations.clear(e);return}await Promise.allSettled([e,...(0,_.gw)(e)].map(e=>this.container.fileAnnotations.clear(e)))}catch(e){F.Vy.error(e,"ClearFileAnnotationsCommand"),(0,R.qQ)("Unable to clear file annotations")}}};so=ss([(0,P.G5)()],so);let sn=class extends W.Zr{constructor(e){super(["gitlens.toggleFileBlame","gitlens.toggleFileBlameInDiffLeft","gitlens.toggleFileBlameInDiffRight"]),this.container=e}execute(e,t,i){return sc(this.container,e,t,{...i,type:"blame"})}};sn=ss([(0,P.G5)()],sn);let sa=class extends W.Zr{constructor(e){super("gitlens.toggleFileChanges"),this.container=e}execute(e,t,i){return sc(this.container,e,t,{...i,type:"changes"})}};sa=ss([(0,P.G5)()],sa);let sl=class extends W.Zr{constructor(e){super(["gitlens.toggleFileHeatmap","gitlens.toggleFileHeatmapInDiffLeft","gitlens.toggleFileHeatmapInDiffRight"]),this.container=e}execute(e,t,i){return sc(this.container,e,t,{...i,type:"heatmap"})}};async function sc(e,t,i,r){t=su(t,i);try{r={type:"blame",...r},await e.fileAnnotations.toggle(t,r.type,{selection:r.context?.selection??{line:t?.selection.active.line},...r.context},r.on)}catch(e){F.Vy.error(e,"ToggleFileAnnotationsCommand"),(0,R.qQ)(`Unable to toggle file ${r.type} annotations`)}}function su(e,t){if(null==e||(0,_.oU)(e)||(e=void 0),null!=t&&(null==e||e.document.uri.toString()!==t.toString())){let i=(0,_.rp)(t);null!=i&&(e=i)}return e}sl=ss([(0,P.G5)()],sl);var sh=Object.defineProperty,sd=Object.getOwnPropertyDescriptor;let sp=class extends W.Zr{constructor(e){super("gitlens.toggleLineBlame"),this.container=e}async execute(e,t){try{await this.container.lineAnnotations.toggle(e)}catch(e){F.Vy.error(e,"ToggleLineBlameCommand"),(0,R.qQ)("Unable to toggle line blame annotations")}}};sp=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?sd(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sh(t,i,o),o})([(0,P.G5)()],sp);var sg=Object.defineProperty,sm=Object.getOwnPropertyDescriptor,sf=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sm(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sg(t,i,o),o};let sw=class extends W.Kt{constructor(e){super("gitlens.getStarted"),this.container=e}execute(e){let t=e!==this.container.context.extension.id?void 0:e;sy(this.container,t?{source:{source:t}}:void 0)}};sw=sf([(0,P.G5)()],sw);let sv=class extends W.Kt{constructor(e){super("gitlens.openWalkthrough"),this.container=e}execute(e){sy(this.container,e)}};function sy(e,t){e.telemetry.enabled&&e.telemetry.sendEvent("walkthrough",{step:t?.step},t?.source),(0,_.Hn)(e.context.extension.id,"welcome",t?.step,!1)}sv=sf([(0,P.G5)()],sv);let sb=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openWalkthrough"),this.container=e}execute(){let e="gitlens.openWalkthrough";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/walkthrough",command:e}),(0,P.RS)(e,{source:{source:"walkthrough"}})}};sb=sf([(0,P.G5)()],sb);let sC=class extends W.Kt{constructor(e){super("gitlens.walkthrough.plus.upgrade"),this.container=e}execute(){let e="gitlens.plus.upgrade";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"plus/upgrade",command:e}),(0,P.RS)(e,{source:"walkthrough"})}};sC=sf([(0,P.G5)()],sC);let sk=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openHelpCenter"),this.container=e}execute(){let e=m.DS.helpCenter;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center",url:e}),(0,_.CZ)(e)}};sk=sf([(0,P.G5)()],sk);let sS=class extends W.Kt{constructor(e){super("gitlens.walkthrough.plus.signUp"),this.container=e}execute(){let e="gitlens.plus.signUp";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"plus/sign-up",command:e}),(0,P.RS)(e,{source:"walkthrough"})}};sS=sf([(0,P.G5)()],sS);let sR=class extends W.Kt{constructor(e){super("gitlens.walkthrough.plus.reactivate"),this.container=e}execute(){let e="gitlens.plus.reactivateProTrial";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"plus/reactivate",command:e}),(0,P.RS)(e,{source:"walkthrough"})}};sR=sf([(0,P.G5)()],sR);let sP=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openCommunityVsPro"),this.container=e}execute(){let e=m.DS.communityVsPro;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/community-vs-pro",url:e}),(0,_.CZ)(e)}};sP=sf([(0,P.G5)()],sP);let sA=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showGraph"),this.container=e}execute(){let e="gitlens.showGraph";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/graph",command:e}),(0,P.RS)(e)}};sA=sf([(0,P.G5)()],sA);let sI=class extends W.Kt{constructor(e){super("gitlens.walkthrough.gitlensInspect"),this.container=e}execute(){let e="gitlens.showCommitDetailsView";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/inspect",command:e}),(0,P.RS)(e)}};sI=sf([(0,P.G5)()],sI);let sD=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openInteractiveCodeHistory"),this.container=e}execute(){let e=m.DS.interactiveCodeHistory;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/interactive-code-history",url:e}),(0,_.CZ)(e)}};sD=sf([(0,P.G5)()],sD);let s$=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showLaunchpad"),this.container=e}execute(){let e="gitlens.showLaunchpad";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/launchpad",command:e}),(0,P.RS)(e,{source:"walkthrough"})}};s$=sf([(0,P.G5)()],s$);let sT=class extends W.Kt{constructor(e){super("gitlens.walkthrough.worktree.create"),this.container=e}execute(){let e="gitlens.gitCommands.worktree.create";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"create/worktree",command:e}),(0,P.RS)(e)}};sT=sf([(0,P.G5)()],sT);let sE=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openDevExPlatform"),this.container=e}execute(){let e=m.DS.platform;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/devex-platform",url:e}),(0,_.CZ)(e)}};sE=sf([(0,P.G5)()],sE);let s_=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openAcceleratePrReviews"),this.container=e}execute(){let e=m.DS.acceleratePrReviews;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/accelerate-pr-reviews",url:e}),(0,_.CZ)(e)}};s_=sf([(0,P.G5)()],s_);let sO=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showDraftsView"),this.container=e}execute(){let e="gitlens.showDraftsView";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/drafts",command:e}),(0,P.RS)(e)}};sO=sf([(0,P.G5)()],sO);let sx=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openStreamlineCollaboration"),this.container=e}execute(){let e=m.DS.streamlineCollaboration;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/streamline-collaboration",url:e}),(0,_.CZ)(e)}};sx=sf([(0,P.G5)()],sx);let sF=class extends W.Kt{constructor(e){super("gitlens.walkthrough.connectIntegrations"),this.container=e}execute(){let e="gitlens.plus.cloudIntegrations.connect";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"connect/integrations",command:e}),(0,P.RS)(e,{source:{source:"walkthrough"}})}};sF=sf([(0,P.G5)()],sF);let sL=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showAutolinks"),this.container=e}execute(){let e="gitlens.showSettingsPage!autolinks";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/autolinks",command:e}),(0,P.RS)(e)}};sL=sf([(0,P.G5)()],sL);let sB=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openStartIntegrations"),this.container=e}execute(){let e=m.DS.startIntegrations;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/start-integrations",url:e}),(0,_.CZ)(e)}};sB=sf([(0,P.G5)()],sB);let sU=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openHomeViewVideo"),this.container=e}execute(){let e=m.DS.homeView;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/home-view",url:e}),(0,_.CZ)(e)}};sU=sf([(0,P.G5)()],sU);let sN=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showHomeView"),this.container=e}execute(){let e="gitlens.showHomeView";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/home",command:e}),(0,P.RS)(e)}};async function sq(e){let t,i,r=e.extension.packageJSON.version,s=(0,U.ib)(r,"> 2020.0.0"),o=A.H.get("defaultDateLocale"),n=(0,g.Wn)(A.H.get("outputLevel"));F.Vy.configure({name:"GitLens",createChannel:function(t){let i=new F.j8(l.window.createOutputChannel(t,{log:!0}),500);return e.subscriptions.push(i),("error"===n||"warn"===n)&&(i.appendLine(`GitLens${s?" (pre-release)":""} v${r} activating in ${l.env.appName} (${l.version}) on the ${h.HZ?"web":"desktop"}; language='${l.env.language}', logLevel='${n}', defaultDateLocale='${o}' (${l.env.machineId}|${l.env.sessionId})`),i.appendLine('To enable debug logging, set `"gitlens.outputLevel": "debug"` or run "GitLens: Enable Debug Logging" from the Command Palette')),i},toLoggable:function(e){return(0,w.t5)(e)?`GitUri(${e.toString(!0)}${e.repoPath?` repoPath=${e.repoPath}`:""}${e.sha?` sha=${e.sha}`:""})`:e instanceof l.Uri?`Uri(${e.toString(!0)})`:(0,b.Z6)(e)||(0,v.P)(e)||(0,y.WM)(e)||(0,C.d)(e)||(0,N.sN)(e)?e.toString():"rootUri"in e&&e.rootUri instanceof l.Uri?`ScmRepository(${e.rootUri.toString(!0)})`:"uri"in e&&e.uri instanceof l.Uri?(0,_.Iy)(e)?`WorkspaceFolder(${e.name}, index=${e.index}, ${e.uri.toString(!0)})`:(0,_.v2)(e)?`TextDocument(${e.languageId}, dirty=${e.isDirty}, ${e.uri.toString(!0)})`:`${(0,F.zu)(e)}(${e.uri.toString(!0)})`:(0,_.ld)(e)?`TextEditor(${e.viewColumn}, ${e.document.uri.toString(!0)} ${e.selections?.map(e=>`[${e.anchor.line}:${e.anchor.character}-${e.active.line}:${e.active.character}]`).join(",")})`:void 0},sanitizer:u.q},n,e.extensionMode===l.ExtensionMode.Development);let a=new B.e(`GitLens${s?" (pre-release)":""} v${r}`,{log:{message:` activating in ${l.env.appName} (${l.version}) on the ${h.HZ?"web":"desktop"}; language='${l.env.language}', logLevel='${n}', defaultDateLocale='${o}' (${l.env.machineId}|${l.env.sessionId})`}});if(s){let e=(0,U.sH)(r);if(new Date(e.major,e.minor-1,Number(e.patch.toString().substring(0,2))).getTime()<Date.now()-12096e5){a.stop({message:` was NOT activated because this pre-release version (${r}) has expired`}),setTimeout(R.AO,0,r);return}}l.workspace.isTrusted||(0,I.o)("gitlens:untrusted",!0),function(e,...t){e.globalState?.setKeysForSync([...t,f.Version,f.PreReleaseVersion])}(e);let p=new Storage(e),D=p.get(s?"synced:preVersion":"synced:version"),$=p.get(s?"preVersion":"version");t=null==$||null==D?D??$:1===(0,U.UD)(D,$)?D:$,null==$||null==t?(0,I.o)("gitlens:install:new",!0):r!==t&&1===(0,U.UD)(r,t)&&(0,I.o)("gitlens:install:upgradedFrom",t),F.Vy.enabled("debug")&&(i=`syncedVersion=${D}, localVersion=${$}, previousVersion=${t}`),A.V.configure(e),(0,O.Fl)(o??l.env.language),e.subscriptions.push(A.H.onDidChange(e=>{A.H.changed(e,"defaultDateLocale")&&(0,O.Fl)(A.H.get("defaultDateLocale")??l.env.language),A.H.changed(e,"advanced.abbreviatedShaLength")&&(0,S.S4)(A.H.get("advanced.abbreviatedShaLength"))}));let T=d.m.create(e,p,s,r,t);(0,x.Oo)(T.onReady)(()=>{e.subscriptions.push(...(0,P.yd)(T)),function(e){e.context.subscriptions.push(e.actionRunners.registerBuiltIn("createPullRequest",{label:e=>`Create Pull Request on ${e.remote?.provider?.name??"Remote"}`,run:async e=>{"createPullRequest"===e.type&&await (0,P.RS)("gitlens.createPullRequestOnRemote",{base:void 0,compare:e.branch.isRemote?(0,k.km)(e.branch.name):e.branch.upstream?(0,k.km)(e.branch.upstream):e.branch.name,remote:e.remote?.name??"",repoPath:e.repoPath,describeWithAI:e.describeWithAI,source:e.source})}}),e.actionRunners.registerBuiltIn("openPullRequest",{label:e=>`Open Pull Request on ${e.provider?.name??"Remote"}`,run:async e=>{"openPullRequest"===e.type&&await (0,P.RS)("gitlens.openPullRequestOnRemote",{pr:{url:e.pullRequest.url}})}}))}(T),function(e){e.subscriptions.push(d.m.instance.actionRunners.registerBuiltInPartner("liveshare","hover.commands",{name:"Live Share",label:e=>"hover.commands"===e.type&&"You"!==e.commit.author.name?`$(live-share) Invite ${e.commit.author.name}${e.commit.author.presence?.statusText?` (${e.commit.author.presence?.statusText})`:""} to a Live Share Session`:"$(live-share) Start a Live Share Session",run:async e=>{if("hover.commands"!==e.type||"You"===e.commit.author.name){await (0,P.RS)("gitlens.inviteToLiveShare",{});return}await (0,P.RS)("gitlens.inviteToLiveShare",{email:e.commit.author.email})}}))}(e),l.workspace.isTrusted||e.subscriptions.push(l.workspace.onDidGrantWorkspaceTrust(()=>{(0,I.o)("gitlens:untrusted",void 0),T.telemetry.setGlobalAttribute("workspace.isTrusted",l.workspace.isTrusted)})),sM(T,r,s,t),p.store(s?"preVersion":"version",r).catch(),(null==D||1===(0,U.UD)(r,D))&&p.store(s?"synced:preVersion":"synced:version",r).catch(),"debug"===n&&setTimeout(async()=>{"debug"===(0,g.Wn)(A.H.get("outputLevel"))&&!T.prereleaseOrDebugging&&await (0,R.pn)()&&(0,P.RS)("gitlens.disableDebugLogging")},6e4)}),T.debugging?((0,I.o)("gitlens:debugging",!0),(0,I.o)("gitlens:prerelease",!0)):T.prerelease&&(0,I.o)("gitlens:prerelease",!0),(0,I.o)("gitlens:schemes:trackable",[...m.MV]),await T.ready();let E=(0,L.Bq)(A.H.getAll(!0),"config",{joinArrays:!0});T.telemetry.setGlobalAttributes({debugging:T.debugging,"device.cohort":_.r$,prerelease:s,install:null==t,upgrade:null!=t&&r!==t,upgradedFrom:null!=t&&r!==t?t:void 0});let q=new Api(T),W=T.mode,M=a.startTime,G=(0,c.k)(),H=a.elapsed();return a.stop({message:`activated${null!=i?`, ${i}`:""}${null!=W?`, mode: ${W.name}`:""}`}),T.telemetry.sendEvent("activate",{"activation.elapsed":H,"activation.mode":W?.name,...E},void 0,M,G),Promise.resolve(q)}function sW(){F.Vy.log("GitLens deactivating..."),d.m.instance.deactivate()}async function sM(e,t,i,r){if(null==r){F.Vy.log(`GitLens first-time install; window.focused=${l.window.state.focused}`);return}r!==t&&F.Vy.log(`GitLens upgraded from v${r} to v${t}; window.focused=${l.window.state.focused}`);let s=(0,U.sH)(t),o=(0,U.sH)(r);if(s.major<o.major||s.major===o.major&&s.minor<o.minor)return;let n=i&&(0,U.ib)(o,"< 2023.6.0800");if((s.major!==o.major||n)&&(t=n?"14":String(s.major),A.H.get("showWhatsNewAfterUpgrades")))if(l.window.state.focused)await e.storage.delete("pendingWhatsNewOnFocus"),await (0,R.U_)(t);else{await e.storage.store("pendingWhatsNewOnFocus",!0);let i=l.window.onDidChangeWindowState(r=>{r.focused&&(i.dispose(),!0===e.storage.get("pendingWhatsNewOnFocus")&&(e.storage.delete("pendingWhatsNewOnFocus"),A.H.get("showWhatsNewAfterUpgrades")&&(0,R.U_)(t)))});e.context.subscriptions.push(i)}}sN=sf([(0,P.G5)()],sN)})(),module.exports=a})();
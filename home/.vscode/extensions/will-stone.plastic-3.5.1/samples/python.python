#!/usr/bin/python

# Copyright (c) 2001-present, Pete Kazmier

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# Quick script to benchmark the speed of various versions of the same regular
# expression to identify poorly written expressions.

from typing import Dict, Sequence, List, Optional, Pattern, Match
from abc import ABCMeta, abstractmethod
import re
import sys
import time

# The following regex is here to test syntax highlighting
_ = re.compile(
    r"""\A
        word
        (?:                     # a comment
           (?P<fill>.)?
           (?P<align>[<>=^])    (?# another comment)
        )?
        another word\.\.\.
        (?:\.(?P<precision>0|(?!0)\d+))?
    \Z""",
    re.VERBOSE | re.DOTALL,
)


class RegExpResultBase(metaclass=ABCMeta):
    """Class inheritance (to test syntax highlighting)."""

    # Some more special syntax to test syntax highlighting.
    # A non-builtin decorator @abstractmethod.
    @abstractmethod
    def greeting(self, other: str) -> str:
        """Return a greeting."""
        pass

    # Use a decorator (to test syntax highlighting)
    @classmethod
    def get_classname(cla) -> str:
        return cla.__name__


class RegExpResult(RegExpResultBase):
    """RegExpResult holds the results for a regular expression."""

    def __init__(self) -> None:
        self.cumulative_time: float = 0.0
        self.successful_matches: Dict[int, Sequence[str]] = {}

    # Use of default parameter value
    def greeting(self, other: str = "world") -> str:
        # Classname of self
        us: str = type(self).__name__

        # (use f"" style string formatting to test syntax highlighting)
        return f"Hello {other} from {us}!"


if len(sys.argv) < 2:
    print("Usage:", sys.argv[0], "regexp1 [regexp2 regexp3 ...]")
    sys.exit(1)

# Compile all the regular expressions
patterns: List[Pattern[str]] = [re.compile(x) for x in sys.argv[1:]]

# Create the result map for each pattern
results: Dict[Pattern[str], RegExpResult] = {}
for pattern in patterns:
    results[pattern] = RegExpResult()

# Test each regular expression against every line of input
line_count: int = 0
for line in sys.stdin:
    line_count += 1

    for pattern in patterns:
        before: float = time.time()
        match: Optional[Match[str]] = pattern.search(line)
        after: float = time.time()

        result: RegExpResult = results[pattern]
        result.cumulative_time += after - before
        if match:
            result.successful_matches[line_count] = match.groups()

print("Pattern   calls   cumulative   avgpercall  matches [line numbers]")
pattern_count: int = 0
for pattern in patterns:
    pattern_count += 1
    result = results[pattern]

    print(
        "%7d %7d   %10.6f   %10.6f  %7d"
        % (
            pattern_count,
            line_count,
            result.cumulative_time,
            result.cumulative_time / line_count,
            len(result.successful_matches),
        )
    )

    line_number_keys: List[int] = list(result.successful_matches.keys())
    line_number_keys.sort(key=lambda x: x)
    print(line_number_keys)

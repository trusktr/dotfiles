{
  "_args": [
    [
      {
        "raw": "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
        "spec": "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
        "type": "local"
      },
      "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/apm-install-dir-11899-17635-2okbuj.z8e2ucv7vi"
    ]
  ],
  "_from": "../d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
  "_id": "eslint-format@0.4.0",
  "_inCache": true,
  "_location": "/eslint-format",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
    "spec": "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
  "_shasum": "de73b7b34687fed10ff9cc5f70c66923c7d179ea",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/d-11899-17635-y2fc1h.qponbl0udi/package.tgz",
  "_where": "/private/var/folders/mz/p31s4bw165jb70lgp73dcvzh0000gn/T/apm-install-dir-11899-17635-2okbuj.z8e2ucv7vi",
  "atomTestRunner": "atom-jasmine3-test-runner",
  "bugs": {
    "url": "https://github.com/AtomFormat/eslint-format/issues"
  },
  "dependencies": {
    "eslint": "^5.6.0"
  },
  "description": "Format code with Atom IDE and ESLint",
  "devDependencies": {
    "atom-jasmine3-test-runner": "^4.0.0"
  },
  "engines": {
    "atom": ">=1.24.0 <2.0.0"
  },
  "homepage": "https://github.com/AtomFormat/eslint-format#readme",
  "keywords": [
    "format",
    "eslint"
  ],
  "license": "MIT",
  "main": "./lib/eslint-format",
  "name": "eslint-format",
  "optionalDependencies": {},
  "providedServices": {
    "code-format.range": {
      "versions": {
        "0.1.0": "provideRangeCodeFormat"
      }
    },
    "code-format.onSave": {
      "versions": {
        "0.1.0": "provideOnSaveCodeFormat"
      }
    }
  },
  "readme": "# eslint-format\n\n[![Build Status](https://travis-ci.org/AtomFormat/eslint-format.svg?branch=master)](https://travis-ci.org/AtomFormat/eslint-format)\n[![Build status](https://ci.appveyor.com/api/projects/status/eyr68a1cn96e37ra?svg=true)](https://ci.appveyor.com/project/UziTech/eslint-format)\n[![Dependency Status](https://david-dm.org/AtomFormat/eslint-format.svg)](https://david-dm.org/AtomFormat/eslint-format)\n\nThis format plugin for [Atom IDE](https://ide.atom.io/) provides\nan interface to [eslint](http://eslint.org). It will be used with files that\nhave the \"JavaScript\" syntax.\n\n## Installation\n\n```sh\napm install eslint-format\n```\n\n`eslint-format` will look for a version of `eslint` local to your project and\nuse it if it's available. If none is found it will fall back to the version it\nships with.\n\nLets say you depend on a specific version of `eslint`, maybe it has unreleased\nfeatures, maybe it's just newer than what `eslint-format` ships with. If\n`your-project/node_modules/eslint` exists `eslint-format` will be used.\nThis package requires an `eslint` of at least v1.0.0.\n\nNote that you must have the [`atom-ide-ui`](https://atom.io/packages/atom-ide-ui) package, or any package that consumes the\n[`code-format.range`](https://github.com/facebook-atom/atom-ide-ui/blob/master/docs/code-format.md)\n[Service API](https://flight-manual.atom.io/behind-atom/sections/interacting-with-other-packages-via-services/),\ninstalled for this to work.\n\n## Use with plugins\n\nYou have two options:\n\n*   Install locally to your project `eslint` and the plugin\n\n    *   `$ npm i --save-dev eslint [eslint-plugins]`\n\n*   Install globally `eslint` and plugins\n\n    *   `$ npm i -g eslint [eslint-plugins]`\n    *   Activate `Use Global Eslint` package option\n    *   (Optional) Set `Global Node Path` with `$ npm config get prefix`\n\n## Using ESLint\n\nNote that recent versions of ESLint do not use any rules by-default. This\nmeans you have to specify a configuration file for your project!\n\nTo do this in a straightforward way run this:\n\n```sh\neslint --init\n```\n\nAlternatively you can create the `.eslintrc.json` file by yourself. It is a good\nidea to have a look at the [ESLint documentation](http://eslint.org/docs/user-guide/configuring),\nincluding the [list of rules](http://eslint.org/docs/rules/).\n\n## A Note About Settings\n\nIf Use Global is on, Atom will use the global ESLint. The path to it is figured out by running `npm get prefix`. If this fails for any reason, you can set the global path manually in Global Node Installation Path.\n\nIf Use Global is off, Atom will try to find a local installation in the project folder, look if there's ESLint in `${PROJECT_ROOT}/node_modules` and use it if found.\n\nThe path to the local node_modules folder can be a path relative to the project or an absolute path and should end in /node_modules/. This path is used if the other methods of discovery have failed.\n\nIf there is no local installation Atom will use the built-in ESLint in the eslint-format package itself.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AtomFormat/eslint-format.git"
  },
  "version": "0.4.0"
}

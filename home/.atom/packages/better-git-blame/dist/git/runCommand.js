'use babel';
import * as childProcess from 'child_process';
import os from 'os';
function runGitCommand(repoPath, command, shell = false) {
    return new Promise((resolve, reject) => {
        const args = command.split(' ');
        let child;
        if (os.platform() === 'win32') {
            args.unshift('git');
            child = childProcess.spawn('powershell.exe', args, { cwd: repoPath, shell: false });
        }
        else {
            child = childProcess.spawn('git', args, { cwd: repoPath, shell });
        }
        child.on('error', error => {
            console.error(command);
            return reject(error);
        });
        // This does weird things on Windows so disabled for now
        if (os.platform() !== 'win32') {
            child.on('exit', exitCode => {
                if (exitCode !== 0 && exitCode !== 128) {
                    console.error(repoPath, exitCode, command);
                    return reject(new Error(`Git exited with unexpected code: ${exitCode}`));
                }
            });
        }
        let stdOutPromise = new Promise((resolve, reject) => {
            let stdOut = '';
            child.stdout.on('data', data => (stdOut += data));
            child.stdout.on('end', () => resolve(stdOut));
            child.stdout.on('error', error => reject(error));
        });
        let stdErrPromise = new Promise((resolve, reject) => {
            let stdErr = '';
            child.stderr.on('data', data => (stdErr += data));
            child.stderr.on('end', () => resolve(stdErr));
            child.stderr.on('error', error => reject(error));
        });
        Promise.all([stdOutPromise, stdErrPromise])
            .then(results => {
            const stdOut = results[0];
            const stdErr = results[1];
            if (stdErr !== '') {
                return reject(new Error(stdErr));
            }
            return resolve(stdOut);
        })
            .catch(err => {
            reject(err);
        });
    });
}
export default runGitCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9naXQvcnVuQ29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7QUFFWixPQUFPLEtBQUssWUFBWSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFFcEIsdUJBQXVCLFFBQWdCLEVBQUUsT0FBZSxFQUFFLFFBQWlCLEtBQUs7SUFDOUUsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07UUFDakMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxJQUFJLEtBQUssQ0FBQztRQUNWLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEIsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN0RixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFFRCxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLO1lBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztRQUVILHdEQUF3RDtRQUN4RCxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM5QixLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRO2dCQUN2QixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxJQUFJLFFBQVEsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUN2QyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsb0NBQW9DLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDM0UsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksYUFBYSxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDOUMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNsRCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM5QyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxhQUFhLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUM5QyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDaEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2xELEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzlDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2FBQ3hDLElBQUksQ0FBQyxPQUFPO1lBQ1gsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ25DLENBQUM7WUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxHQUFHO1lBQ1IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxlQUFlLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgKiBhcyBjaGlsZFByb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuXG5mdW5jdGlvbiBydW5HaXRDb21tYW5kKHJlcG9QYXRoOiBzdHJpbmcsIGNvbW1hbmQ6IHN0cmluZywgc2hlbGw6IGJvb2xlYW4gPSBmYWxzZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGFyZ3MgPSBjb21tYW5kLnNwbGl0KCcgJyk7XG4gICAgbGV0IGNoaWxkO1xuICAgIGlmIChvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInKSB7XG4gICAgICBhcmdzLnVuc2hpZnQoJ2dpdCcpO1xuICAgICAgY2hpbGQgPSBjaGlsZFByb2Nlc3Muc3Bhd24oJ3Bvd2Vyc2hlbGwuZXhlJywgYXJncywgeyBjd2Q6IHJlcG9QYXRoLCBzaGVsbDogZmFsc2UgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkID0gY2hpbGRQcm9jZXNzLnNwYXduKCdnaXQnLCBhcmdzLCB7IGN3ZDogcmVwb1BhdGgsIHNoZWxsIH0pO1xuICAgIH1cblxuICAgIGNoaWxkLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoY29tbWFuZCk7XG4gICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICAgIC8vIFRoaXMgZG9lcyB3ZWlyZCB0aGluZ3Mgb24gV2luZG93cyBzbyBkaXNhYmxlZCBmb3Igbm93XG4gICAgaWYgKG9zLnBsYXRmb3JtKCkgIT09ICd3aW4zMicpIHtcbiAgICAgIGNoaWxkLm9uKCdleGl0JywgZXhpdENvZGUgPT4ge1xuICAgICAgICBpZiAoZXhpdENvZGUgIT09IDAgJiYgZXhpdENvZGUgIT09IDEyOCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVwb1BhdGgsIGV4aXRDb2RlLCBjb21tYW5kKTtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgR2l0IGV4aXRlZCB3aXRoIHVuZXhwZWN0ZWQgY29kZTogJHtleGl0Q29kZX1gKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCBzdGRPdXRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHN0ZE91dCA9ICcnO1xuICAgICAgY2hpbGQuc3Rkb3V0Lm9uKCdkYXRhJywgZGF0YSA9PiAoc3RkT3V0ICs9IGRhdGEpKTtcbiAgICAgIGNoaWxkLnN0ZG91dC5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShzdGRPdXQpKTtcbiAgICAgIGNoaWxkLnN0ZG91dC5vbignZXJyb3InLCBlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcbiAgICB9KTtcblxuICAgIGxldCBzdGRFcnJQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHN0ZEVyciA9ICcnO1xuICAgICAgY2hpbGQuc3RkZXJyLm9uKCdkYXRhJywgZGF0YSA9PiAoc3RkRXJyICs9IGRhdGEpKTtcbiAgICAgIGNoaWxkLnN0ZGVyci5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShzdGRFcnIpKTtcbiAgICAgIGNoaWxkLnN0ZGVyci5vbignZXJyb3InLCBlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcbiAgICB9KTtcblxuICAgIFByb21pc2UuYWxsKFtzdGRPdXRQcm9taXNlLCBzdGRFcnJQcm9taXNlXSlcbiAgICAgIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgICBjb25zdCBzdGRPdXQgPSByZXN1bHRzWzBdO1xuICAgICAgICBjb25zdCBzdGRFcnIgPSByZXN1bHRzWzFdO1xuICAgICAgICBpZiAoc3RkRXJyICE9PSAnJykge1xuICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKHN0ZEVycikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlKHN0ZE91dCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBydW5HaXRDb21tYW5kO1xuIl19
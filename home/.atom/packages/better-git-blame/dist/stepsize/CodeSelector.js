'use babel';
import _ from 'lodash';
class CodeSelector {
    constructor(editor) {
        this.codeFolds = [];
        this.editor = editor;
        this.calculateCodeFolds();
    }
    calculateCodeFolds() {
        this.getFoldStarts();
        this.getFoldEnds();
    }
    getFoldStarts() {
        for (let i = 0; i < this.editor.getLineCount(); i++) {
            if (this.editor.isFoldableAtBufferRow(i)) {
                let codeFold = {
                    start: i,
                    indentation: this.editor.indentationForBufferRow(i),
                };
                this.codeFolds.push(codeFold);
            }
        }
    }
    getFoldEnds() {
        for (let i in this.codeFolds) {
            const codeFold = this.codeFolds[i];
            const startIndent = codeFold.indentation;
            let foldEnd = parseInt(codeFold.start);
            let skipLine = false;
            while (this.editor.indentationForBufferRow(++foldEnd) > startIndent || skipLine) {
                const nextLineText = this.editor.lineTextForBufferRow(foldEnd + 1);
                if (nextLineText) {
                    skipLine = nextLineText.match(/^\s+$/) || nextLineText.length === 0;
                }
            }
            codeFold.end = foldEnd;
            codeFold.marker = this.editor.markBufferRange([[codeFold.start, 0], [foldEnd, 9001]]);
        }
    }
    getFoldForRange(range) {
        const startRow = range.start.row;
        const endRow = range.end.row;
        // Start checking for folds near the middle of the range
        let checkRow = endRow - Math.ceil((endRow - startRow) / 2);
        // Store the current search results end row and fold for comparison and return;
        let foldEnd = endRow;
        let fold;
        // Store a fold to use if we cant find the exact one we want
        let fallbackFold;
        do {
            if (this.editor.isFoldableAtBufferRow(checkRow)) {
                fold = _.find(this.codeFolds, { start: checkRow });
                if (fold) {
                    if (!fallbackFold || checkRow >= startRow) {
                        fallbackFold = fold;
                    }
                    foldEnd = fold.end;
                }
            }
            checkRow--;
        } while (foldEnd <= endRow && checkRow > 0);
        if (foldEnd > endRow) {
            return fold;
        }
        else {
            return fallbackFold;
        }
    }
}
export default CodeSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29kZVNlbGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3N0ZXBzaXplL0NvZGVTZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7QUFJWixPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFFdkI7SUFJRSxZQUFZLE1BQWU7UUFGbkIsY0FBUyxHQUFlLEVBQUUsQ0FBQztRQUdqQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRU8sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVPLGFBQWE7UUFDbkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLElBQUksUUFBUSxHQUFHO29CQUNiLEtBQUssRUFBRSxDQUFDO29CQUNSLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztpQkFDcEQsQ0FBQztnQkFDRixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFTyxXQUFXO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUN6QyxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZDLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztZQUNyQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxXQUFXLElBQUksUUFBUSxFQUFFLENBQUM7Z0JBQ2hGLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNuRSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUNqQixRQUFRLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztnQkFDdEUsQ0FBQztZQUNILENBQUM7WUFDRCxRQUFRLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztZQUN2QixRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RixDQUFDO0lBQ0gsQ0FBQztJQUVNLGVBQWUsQ0FBQyxLQUFhO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQzdCLHdEQUF3RDtRQUN4RCxJQUFJLFFBQVEsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzRCwrRUFBK0U7UUFDL0UsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDO1FBQ1QsNERBQTREO1FBQzVELElBQUksWUFBWSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQztZQUNGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ25ELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0JBQzFDLFlBQVksR0FBRyxJQUFJLENBQUM7b0JBQ3RCLENBQUM7b0JBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3JCLENBQUM7WUFDSCxDQUFDO1lBQ0QsUUFBUSxFQUFFLENBQUM7UUFDYixDQUFDLFFBQVEsT0FBTyxJQUFJLE1BQU0sSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxlQUFlLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgSVJhbmdlID0gVGV4dEJ1ZmZlci5JUmFuZ2U7XG5pbXBvcnQgSUVkaXRvciA9IEF0b21Db3JlLklFZGl0b3I7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jbGFzcyBDb2RlU2VsZWN0b3Ige1xuICBwcml2YXRlIGVkaXRvcjogSUVkaXRvcjtcbiAgcHJpdmF0ZSBjb2RlRm9sZHM6IEFycmF5PGFueT4gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihlZGl0b3I6IElFZGl0b3IpIHtcbiAgICB0aGlzLmVkaXRvciA9IGVkaXRvcjtcbiAgICB0aGlzLmNhbGN1bGF0ZUNvZGVGb2xkcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVDb2RlRm9sZHMoKSB7XG4gICAgdGhpcy5nZXRGb2xkU3RhcnRzKCk7XG4gICAgdGhpcy5nZXRGb2xkRW5kcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGb2xkU3RhcnRzKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lZGl0b3IuZ2V0TGluZUNvdW50KCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZWRpdG9yLmlzRm9sZGFibGVBdEJ1ZmZlclJvdyhpKSkge1xuICAgICAgICBsZXQgY29kZUZvbGQgPSB7XG4gICAgICAgICAgc3RhcnQ6IGksXG4gICAgICAgICAgaW5kZW50YXRpb246IHRoaXMuZWRpdG9yLmluZGVudGF0aW9uRm9yQnVmZmVyUm93KGkpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvZGVGb2xkcy5wdXNoKGNvZGVGb2xkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEZvbGRFbmRzKCkge1xuICAgIGZvciAobGV0IGkgaW4gdGhpcy5jb2RlRm9sZHMpIHtcbiAgICAgIGNvbnN0IGNvZGVGb2xkID0gdGhpcy5jb2RlRm9sZHNbaV07XG4gICAgICBjb25zdCBzdGFydEluZGVudCA9IGNvZGVGb2xkLmluZGVudGF0aW9uO1xuICAgICAgbGV0IGZvbGRFbmQgPSBwYXJzZUludChjb2RlRm9sZC5zdGFydCk7XG4gICAgICBsZXQgc2tpcExpbmUgPSBmYWxzZTtcbiAgICAgIHdoaWxlICh0aGlzLmVkaXRvci5pbmRlbnRhdGlvbkZvckJ1ZmZlclJvdygrK2ZvbGRFbmQpID4gc3RhcnRJbmRlbnQgfHwgc2tpcExpbmUpIHtcbiAgICAgICAgY29uc3QgbmV4dExpbmVUZXh0ID0gdGhpcy5lZGl0b3IubGluZVRleHRGb3JCdWZmZXJSb3coZm9sZEVuZCArIDEpO1xuICAgICAgICBpZiAobmV4dExpbmVUZXh0KSB7XG4gICAgICAgICAgc2tpcExpbmUgPSBuZXh0TGluZVRleHQubWF0Y2goL15cXHMrJC8pIHx8IG5leHRMaW5lVGV4dC5sZW5ndGggPT09IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvZGVGb2xkLmVuZCA9IGZvbGRFbmQ7XG4gICAgICBjb2RlRm9sZC5tYXJrZXIgPSB0aGlzLmVkaXRvci5tYXJrQnVmZmVyUmFuZ2UoW1tjb2RlRm9sZC5zdGFydCwgMF0sIFtmb2xkRW5kLCA5MDAxXV0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRGb2xkRm9yUmFuZ2UocmFuZ2U6IElSYW5nZSkge1xuICAgIGNvbnN0IHN0YXJ0Um93ID0gcmFuZ2Uuc3RhcnQucm93O1xuICAgIGNvbnN0IGVuZFJvdyA9IHJhbmdlLmVuZC5yb3c7XG4gICAgLy8gU3RhcnQgY2hlY2tpbmcgZm9yIGZvbGRzIG5lYXIgdGhlIG1pZGRsZSBvZiB0aGUgcmFuZ2VcbiAgICBsZXQgY2hlY2tSb3cgPSBlbmRSb3cgLSBNYXRoLmNlaWwoKGVuZFJvdyAtIHN0YXJ0Um93KSAvIDIpO1xuICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IHNlYXJjaCByZXN1bHRzIGVuZCByb3cgYW5kIGZvbGQgZm9yIGNvbXBhcmlzb24gYW5kIHJldHVybjtcbiAgICBsZXQgZm9sZEVuZCA9IGVuZFJvdztcbiAgICBsZXQgZm9sZDtcbiAgICAvLyBTdG9yZSBhIGZvbGQgdG8gdXNlIGlmIHdlIGNhbnQgZmluZCB0aGUgZXhhY3Qgb25lIHdlIHdhbnRcbiAgICBsZXQgZmFsbGJhY2tGb2xkO1xuICAgIGRvIHtcbiAgICAgIGlmICh0aGlzLmVkaXRvci5pc0ZvbGRhYmxlQXRCdWZmZXJSb3coY2hlY2tSb3cpKSB7XG4gICAgICAgIGZvbGQgPSBfLmZpbmQodGhpcy5jb2RlRm9sZHMsIHsgc3RhcnQ6IGNoZWNrUm93IH0pO1xuICAgICAgICBpZiAoZm9sZCkge1xuICAgICAgICAgIGlmICghZmFsbGJhY2tGb2xkIHx8IGNoZWNrUm93ID49IHN0YXJ0Um93KSB7XG4gICAgICAgICAgICBmYWxsYmFja0ZvbGQgPSBmb2xkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb2xkRW5kID0gZm9sZC5lbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUm93LS07XG4gICAgfSB3aGlsZSAoZm9sZEVuZCA8PSBlbmRSb3cgJiYgY2hlY2tSb3cgPiAwKTtcbiAgICBpZiAoZm9sZEVuZCA+IGVuZFJvdykge1xuICAgICAgcmV0dXJuIGZvbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxsYmFja0ZvbGQ7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvZGVTZWxlY3RvcjtcbiJdfQ==
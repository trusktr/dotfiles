'use babel';
import React from 'preact-compat';
import ReactDOM from 'preact-compat';
class TooltipPortal extends React.Component {
    componentDidMount() {
        this.portal = document.createElement('div');
        document.body.appendChild(this.portal);
        this.renderTooltipContent(this.props);
    }
    componentWillUnmount() {
        ReactDOM.unmountComponentAtNode(this.portal);
    }
    getTooltipStyle() {
        return {
            webkitFontSmoothing: 'subpixel-antialiased',
            position: 'absolute',
            zIndex: 100,
        };
    }
    positionTooltip() {
        const parentRect = this.props.parent.getBoundingClientRect();
        const tooltipRect = this.tooltipElement.getBoundingClientRect();
        const tooltipWidth = tooltipRect.right - tooltipRect.left;
        const tooltipHeight = tooltipRect.bottom - tooltipRect.top;
        let leftPos = (parentRect.right - tooltipWidth) - 10;
        if (leftPos < 0)
            leftPos += (Math.abs(leftPos) + 10);
        this.tooltipElement.style['left'] = `${leftPos}px`;
        let topPos = parentRect.top - tooltipHeight - 5;
        if (topPos < 0)
            topPos = parentRect.bottom + 5;
        this.tooltipElement.style['top'] = `${topPos}px`;
    }
    renderTooltipContent(props) {
        this.tooltipElement = ReactDOM.render(React.createElement("div", { style: this.getTooltipStyle(), onMouseEnter: this.props.mouseEnter, onMouseLeave: this.props.mouseLeave }, props.children), this.portal);
        this.positionTooltip();
    }
    render() {
        return null;
    }
}
export default TooltipPortal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbHRpcFBvcnRhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb21wb25lbnRzL1Rvb2x0aXBQb3J0YWwudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFdBQVcsQ0FBQztBQUVaLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQztBQUNsQyxPQUFPLFFBQVEsTUFBTSxlQUFlLENBQUM7QUFRckMsbUJBQW9CLFNBQVEsS0FBSyxDQUFDLFNBQW1DO0lBS25FLGlCQUFpQjtRQUNmLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELGVBQWU7UUFDYixNQUFNLENBQUM7WUFDTCxtQkFBbUIsRUFBRSxzQkFBc0I7WUFDM0MsUUFBUSxFQUFFLFVBQVU7WUFDcEIsTUFBTSxFQUFFLEdBQUc7U0FDWixDQUFBO0lBQ0gsQ0FBQztJQUVELGVBQWU7UUFDYixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzdELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDMUQsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDO1FBRTNELElBQUksT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDckQsRUFBRSxDQUFDLENBQUUsT0FBTyxHQUFHLENBQUUsQ0FBQztZQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxPQUFPLElBQUksQ0FBQztRQUVuRCxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsR0FBRyxHQUFHLGFBQWEsR0FBRyxDQUFDLENBQUM7UUFDaEQsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDO0lBQ25ELENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxLQUFLO1FBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyw2QkFDcEMsS0FBSyxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFDN0IsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUNuQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBRWxDLEtBQUssQ0FBQyxRQUFRLENBQ1QsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQTtJQUNiLENBQUM7Q0FFRjtBQUVELGVBQWUsYUFBYSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGV0YWlsZWRIVE1MUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5cbid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncHJlYWN0LWNvbXBhdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncHJlYWN0LWNvbXBhdCc7XG5cbmludGVyZmFjZSBJVG9vbHRpcFBvcnRhbFByb3BzIHtcbiAgcGFyZW50OiBIVE1MU3BhbkVsZW1lbnQ7XG4gIG1vdXNlRW50ZXI6IGFueTtcbiAgbW91c2VMZWF2ZTogYW55O1xufVxuXG5jbGFzcyBUb29sdGlwUG9ydGFsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElUb29sdGlwUG9ydGFsUHJvcHMsIGFueT4ge1xuXG4gIHBvcnRhbDogSFRNTERpdkVsZW1lbnQ7XG4gIHRvb2x0aXBFbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgdGhpcy5wb3J0YWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucG9ydGFsKTtcbiAgICB0aGlzLnJlbmRlclRvb2x0aXBDb250ZW50KHRoaXMucHJvcHMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy5wb3J0YWwpO1xuICB9XG5cbiAgZ2V0VG9vbHRpcFN0eWxlKCkgOiBEZXRhaWxlZEhUTUxQcm9wczxhbnksIGFueT4ge1xuICAgIHJldHVybiB7XG4gICAgICB3ZWJraXRGb250U21vb3RoaW5nOiAnc3VicGl4ZWwtYW50aWFsaWFzZWQnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB6SW5kZXg6IDEwMCxcbiAgICB9XG4gIH1cblxuICBwb3NpdGlvblRvb2x0aXAoKXtcbiAgICBjb25zdCBwYXJlbnRSZWN0ID0gdGhpcy5wcm9wcy5wYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgdG9vbHRpcFJlY3QgPSB0aGlzLnRvb2x0aXBFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHRvb2x0aXBXaWR0aCA9IHRvb2x0aXBSZWN0LnJpZ2h0IC0gdG9vbHRpcFJlY3QubGVmdDtcbiAgICBjb25zdCB0b29sdGlwSGVpZ2h0ID0gdG9vbHRpcFJlY3QuYm90dG9tIC0gdG9vbHRpcFJlY3QudG9wO1xuXG4gICAgbGV0IGxlZnRQb3MgPSAocGFyZW50UmVjdC5yaWdodCAtIHRvb2x0aXBXaWR0aCkgLSAxMDtcbiAgICBpZiAoIGxlZnRQb3MgPCAwICkgbGVmdFBvcyArPSAoTWF0aC5hYnMobGVmdFBvcykgKyAxMCk7XG4gICAgdGhpcy50b29sdGlwRWxlbWVudC5zdHlsZVsnbGVmdCddID0gYCR7bGVmdFBvc31weGA7XG5cbiAgICBsZXQgdG9wUG9zID0gcGFyZW50UmVjdC50b3AgLSB0b29sdGlwSGVpZ2h0IC0gNTtcbiAgICBpZiAodG9wUG9zIDwgMCkgdG9wUG9zID0gcGFyZW50UmVjdC5ib3R0b20gKyA1O1xuICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGVbJ3RvcCddID0gYCR7dG9wUG9zfXB4YDtcbiAgfVxuXG4gIHJlbmRlclRvb2x0aXBDb250ZW50KHByb3BzKSB7XG4gICAgdGhpcy50b29sdGlwRWxlbWVudCA9IFJlYWN0RE9NLnJlbmRlcig8ZGl2XG4gICAgICBzdHlsZT17dGhpcy5nZXRUb29sdGlwU3R5bGUoKX1cbiAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5wcm9wcy5tb3VzZUVudGVyfVxuICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLnByb3BzLm1vdXNlTGVhdmV9XG4gICAgPlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgPC9kaXY+LCB0aGlzLnBvcnRhbCk7XG4gICAgdGhpcy5wb3NpdGlvblRvb2x0aXAoKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwUG9ydGFsO1xuIl19
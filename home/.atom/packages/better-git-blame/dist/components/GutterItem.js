'use babel';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React from 'preact-compat';
import moment from 'moment';
import TooltipContainer from './TooltipContainer';
import BlameTooltip from './BlameTooltip';
import * as GitData from '../data/GitData';
import * as IntegrationData from '../data/IntegrationData';
import * as ConfigManager from '../ConfigManager';
class GutterItem extends React.Component {
    constructor(...props) {
        super(...props);
        this.state = {
            commit: {},
            pullRequests: [],
            issues: [],
            metadata: {},
        };
    }
    componentWillMount() {
        this.setState({ commit: this.props.commit });
        if (this.props.commit.commitHash.substr(0, 6) !== '000000') {
            this.fetchCommitData();
            GitData.getRepoMetadata(this.props.commit.repoPath)
                .then((metadata) => {
                this.setState(Object.assign({}, this.state, { metadata }));
            });
        }
    }
    componentDidMount() {
        if (this.props.commit.commitHash.substr(0, 6) !== '000000') {
            IntegrationData
                .getPullRequestsForCommit(`${this.state.commit.repoPath}`, this.state.commit.commitHash)
                .then((pullRequests) => {
                this.setState(Object.assign({}, this.state, { pullRequests: pullRequests }));
                pullRequests.map(this.getIssuesForPullRequest.bind(this));
                // Refresh the commit data
                this.fetchCommitData();
            });
        }
    }
    fetchCommitData() {
        if (this.props.commit.commitHash.substr(0, 6) !== '000000') {
            GitData.getCommit(this.props.commit.repoPath, this.props.commit.commitHash)
                .then((commit) => {
                this.setState(Object.assign({}, this.state, { commit: Object.assign({}, this.state.commit, commit) }));
            });
        }
    }
    getIssuesForPullRequest(pullRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (pullRequest) {
                const issues = yield Promise.all(pullRequest.relatedIssueKeys.map(issueKey => IntegrationData.getIssue(this.state.commit.repoPath, issueKey)));
                this.setState(Object.assign({}, this.state, { issues }));
            }
            else {
                this.setState(Object.assign({}, this.state, { issues: [] }));
            }
        });
    }
    tooltip() {
        return (React.createElement(BlameTooltip, { emitter: this.props.emitter, commit: this.state.commit, commitDay: this.props.commitDay, firstCommitDate: this.props.firstCommitDate, pullRequests: this.state.pullRequests, issues: this.state.issues, metadata: this.state.metadata }));
    }
    formattedText() {
        const commit = this.props.commit;
        const date = commit.commitedAt;
        const formattedDate = moment(date).format(ConfigManager.get('gutterDateFormat'));
        let author = commit.author;
        if (ConfigManager.get('truncateGutterNames')) {
            const splitAuthor = author.split(' ');
            if (splitAuthor.length > 1) {
                const lastName = splitAuthor.pop();
                const initials = splitAuthor.map((part) => {
                    return part[0].toUpperCase();
                }).join(' ');
                author = `${initials}. ${lastName}`;
            }
        }
        return `${formattedDate} ${author}`;
    }
    render() {
        if (this.state.commit.commitHash.substr(0, 6) === '000000') {
            return (React.createElement("div", { className: "gutter-text" }, this.formattedText()));
        }
        return (React.createElement("div", null,
            React.createElement(TooltipContainer, { className: "gutter-text", tooltipContent: this.tooltip.bind(this) }, this.formattedText()),
            React.createElement(TooltipContainer, { style: { background: this.props.inidcatorColor }, className: "gutter-age" })));
    }
}
export default GutterItem;
//# sourceMappingURL=data:application/json;base64,
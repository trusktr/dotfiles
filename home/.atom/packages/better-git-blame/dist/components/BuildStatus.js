'use babel';
import React from 'preact-compat';
import * as Analytics from '../stepsize/Analytics';
var EBuildStatusState;
(function (EBuildStatusState) {
    EBuildStatusState["Success"] = "Success";
    EBuildStatusState["Failure"] = "Failure";
    EBuildStatusState["Unknown"] = "Unknown";
})(EBuildStatusState || (EBuildStatusState = {}));
class BuildStatus extends React.PureComponent {
    getStatus() {
        if (this.props.buildStatus) {
            return this.props.buildStatus.state;
        }
        return null;
    }
    static renderIcon(state) {
        switch (state) {
            case EBuildStatusState.Success:
                return React.createElement("i", { className: "icon icon-check", style: { color: '#2cbe4e' } });
            case EBuildStatusState.Failure:
                return React.createElement("i", { className: "icon icon-x", style: { color: '#cb2431' } });
            default:
                return null;
        }
    }
    clickHandler(label) {
        return () => {
            Analytics.track(`Clicked link`, { label });
        };
    }
    render() {
        if (this.props.buildStatus) {
            return (React.createElement("a", { onClick: this.clickHandler('Build status'), href: this.props.buildStatus.buildSources[0].url, className: "build-status", title: this.props.buildStatus.buildSources[0].description }, BuildStatus.renderIcon(this.getStatus())));
        }
        return null;
    }
}
export default BuildStatus;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVpbGRTdGF0dXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY29tcG9uZW50cy9CdWlsZFN0YXR1cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDO0FBRVosT0FBTyxLQUFLLE1BQU0sZUFBZSxDQUFDO0FBQ2xDLE9BQU8sS0FBSyxTQUFTLE1BQU0sdUJBQXVCLENBQUM7QUFFbkQsSUFBSyxpQkFJSjtBQUpELFdBQUssaUJBQWlCO0lBQ3BCLHdDQUFtQixDQUFBO0lBQ25CLHdDQUFtQixDQUFBO0lBQ25CLHdDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFKSSxpQkFBaUIsS0FBakIsaUJBQWlCLFFBSXJCO0FBY0QsaUJBQWtCLFNBQVEsS0FBSyxDQUFDLGFBQXdDO0lBRTlELFNBQVM7UUFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUN0QyxDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQWE7UUFDckMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNkLEtBQUssaUJBQWlCLENBQUMsT0FBTztnQkFDNUIsTUFBTSxDQUFDLDJCQUFHLFNBQVMsRUFBQyxpQkFBaUIsRUFBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEdBQUksQ0FBQztZQUN4RSxLQUFLLGlCQUFpQixDQUFDLE9BQU87Z0JBQzVCLE1BQU0sQ0FBQywyQkFBRyxTQUFTLEVBQUMsYUFBYSxFQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsR0FBSSxDQUFDO1lBQ3BFO2dCQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztJQUNILENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYTtRQUN4QixNQUFNLENBQUM7WUFDTCxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUdELE1BQU07UUFDSixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBLENBQUM7WUFDekIsTUFBTSxDQUFDLENBQ0wsMkJBQ0UsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEVBQzFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUNoRCxTQUFTLEVBQUMsY0FBYyxFQUN4QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFFeEQsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FDdkMsQ0FDTCxDQUFDO1FBQ0osQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFFRCxlQUFlLFdBQVcsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncHJlYWN0LWNvbXBhdCc7XG5pbXBvcnQgKiBhcyBBbmFseXRpY3MgZnJvbSAnLi4vc3RlcHNpemUvQW5hbHl0aWNzJztcblxuZW51bSBFQnVpbGRTdGF0dXNTdGF0ZSB7XG4gIFN1Y2Nlc3MgPSAnU3VjY2VzcycsXG4gIEZhaWx1cmUgPSAnRmFpbHVyZScsXG4gIFVua25vd24gPSAnVW5rbm93bicsXG59XG5cbmludGVyZmFjZSBJQnVpbGRTdGF0dXNQcm9wcyB7XG4gIGJ1aWxkU3RhdHVzOiB7XG4gICAgc3RhdGU6IEVCdWlsZFN0YXR1c1N0YXRlO1xuICAgIGJ1aWxkU291cmNlczogQXJyYXk8e1xuICAgICAgc3RhdGU6IEVCdWlsZFN0YXR1c1N0YXRlO1xuICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgIHVybDogc3RyaW5nO1xuICAgICAgZHVyYXRpb24/OiBudW1iZXI7XG4gICAgfT47XG4gIH1cbn1cblxuY2xhc3MgQnVpbGRTdGF0dXMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElCdWlsZFN0YXR1c1Byb3BzLCBvYmplY3Q+IHtcblxuICBwcml2YXRlIGdldFN0YXR1cygpIDogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKHRoaXMucHJvcHMuYnVpbGRTdGF0dXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmJ1aWxkU3RhdHVzLnN0YXRlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlbmRlckljb24oc3RhdGU6IHN0cmluZykgOiBKU1guRWxlbWVudCB8IG51bGwge1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgRUJ1aWxkU3RhdHVzU3RhdGUuU3VjY2VzczpcbiAgICAgICAgcmV0dXJuIDxpIGNsYXNzTmFtZT1cImljb24gaWNvbi1jaGVja1wiIHN0eWxlPXt7IGNvbG9yOiAnIzJjYmU0ZScgfX0gLz47XG4gICAgICBjYXNlIEVCdWlsZFN0YXR1c1N0YXRlLkZhaWx1cmU6XG4gICAgICAgIHJldHVybiA8aSBjbGFzc05hbWU9XCJpY29uIGljb24teFwiIHN0eWxlPXt7IGNvbG9yOiAnI2NiMjQzMScgfX0gLz47XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBjbGlja0hhbmRsZXIobGFiZWw6IHN0cmluZyl7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIEFuYWx5dGljcy50cmFjayhgQ2xpY2tlZCBsaW5rYCwge2xhYmVsfSk7XG4gICAgfTtcbiAgfVxuXG5cbiAgcmVuZGVyKCkge1xuICAgIGlmKHRoaXMucHJvcHMuYnVpbGRTdGF0dXMpe1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGFcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNsaWNrSGFuZGxlcignQnVpbGQgc3RhdHVzJyl9XG4gICAgICAgICAgaHJlZj17dGhpcy5wcm9wcy5idWlsZFN0YXR1cy5idWlsZFNvdXJjZXNbMF0udXJsfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImJ1aWxkLXN0YXR1c1wiXG4gICAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMuYnVpbGRTdGF0dXMuYnVpbGRTb3VyY2VzWzBdLmRlc2NyaXB0aW9ufVxuICAgICAgICA+XG4gICAgICAgICAge0J1aWxkU3RhdHVzLnJlbmRlckljb24odGhpcy5nZXRTdGF0dXMoKSl9XG4gICAgICAgIDwvYT5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1aWxkU3RhdHVzXG4iXX0=